var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.07,1,3.349]],["body/modules/AppModule.html",[0,1.074,1,6.842,2,1.064,3,1.722,4,2.576,5,2.576,6,4.917,7,0.009,8,4.917,9,4.425,10,4.917,11,4.917,12,4.917,13,4.917,14,4.652,15,3.891,16,4.917,17,4.917,18,4.652,19,4.917,20,4.917,21,4.05,22,4.652,23,4.917,24,1.768,25,1.15,26,1.064,27,0.066,28,0.06,29,0.048,30,2.915,31,2.68,32,0.668,33,4.48,34,2.915,35,6.124,36,0.213,37,2.915,38,0.639,39,0.725,40,0.343,41,0.309,42,5.457,43,0.668,44,2.054,45,0.209,46,2.915,47,0.412,48,2.915,49,1.326,50,0.818,51,5.413,52,5.421,53,1.943,54,4.48,55,2.915,56,3.96,57,2.353,58,2.915,59,2.187,60,3.96,61,5.457,62,0.715,63,5.457,64,2.915,65,2.915,66,2.353,67,2.353,68,2.353,69,1.943,70,4.48,71,2.915,72,4.48,73,4.48,74,2.915,75,4.48,76,2.915,77,4.48,78,2.915,79,4.48,80,2.915,81,2.915,82,1.817,83,1.565,84,2.169,85,1.848,86,2.6,87,2.915,88,2.6,89,2.187,90,2.6,91,2.187,92,2.6,93,2.187,94,2.6,95,2.187,96,2.915,97,2.915,98,2.915,99,2.915,100,2.915,101,2.915,102,2.054,103,2.187,104,2.915,105,4.48,106,2.353,107,2.576,108,2.187,109,2.915,110,2.915,111,2.498,112,2.915,113,2.841,114,4.48,115,2.405,116,0.961,117,2.986,118,2.576,119,2.986,120,2.986,121,2.915,122,2.353,123,1.765,124,2.915,125,2.915,126,3.361,127,2.576,128,2.986,129,2.353,130,2.986,131,2.915,132,2.93,133,1.765,134,2.576,135,2.713,136,3.157,137,2.054,138,2.405,139,4.094,140,1.765,141,2.915,142,2.841,143,2.187,144,2.841,145,2.187,146,2.713,147,2.576,148,2.498,149,1.459,150,1.848,151,2.841,152,1.182,153,2.054,154,2.915,155,2.576,156,2.915,157,3.288,158,4.48,159,1.316,160,5.457,161,8.451,162,2.915,163,4.48,164,2.915,165,3.96,166,2.915,167,2.841,168,2.915,169,4.48,170,2.915,171,3.361,172,2.915,173,4.48,174,2.613,175,1.446,176,4.48,177,2.986,178,1.481,179,2.915,180,4.48,181,3.96,182,2.915,183,4.48,184,4.48,185,2.915,186,5.457,187,3.617,188,2.915,189,2.915,190,2.915,191,2.915,192,2.915,193,2.915,194,2.915,195,2.915,196,2.915,197,2.915,198,2.915,199,2.915,200,2.915,201,2.054,202,2.915,203,2.915,204,2.187,205,2.915,206,2.054,207,2.915,208,2.915,209,2.915,210,2.915,211,2.915,212,2.915,213,2.915,214,2.915,215,2.915,216,2.915,217,2.915,218,1.943,219,2.353,220,2.576,221,2.576,222,2.915,223,2.353,224,2.187,225,1.215,226,0.066,227,0.071,228,0.668,229,2.915,230,1.074,231,1.316,232,2.915,233,2.915,234,2.915,235,0.004,236,0.004]],["title/controllers/AuthController.html",[237,1.171,238,3.349]],["body/controllers/AuthController.html",[7,0.009,27,0.06,28,0.055,29,0.044,32,0.958,36,0.513,38,1.542,39,0.886,40,0.527,41,0.746,43,1.613,45,0.183,47,0.377,59,2,84,2.827,85,1.69,116,1.918,178,1.382,226,0.06,227,0.065,228,0.611,230,1.236,235,0.004,236,0.004,237,0.699,238,3.136,239,0.783,240,2.356,241,1.143,242,3.633,243,0.161,244,2.156,245,5.156,246,6.341,247,6.341,248,6.341,249,6.341,250,6.341,251,6.341,252,2.666,253,6.217,254,1.044,255,2.666,256,4.18,257,3.596,258,3.91,259,5.432,260,2.666,261,2.666,262,2.666,263,2.629,264,2.666,265,2.666,266,4.18,267,5.16,268,5.156,269,5.156,270,5.291,271,3.136,272,2.666,273,2.666,274,1.204,275,5.464,276,4.114,277,2.666,278,5.748,279,4.38,280,4.992,281,3.485,282,2.666,283,2.958,284,2.666,285,2.666,286,4.713,287,2.666,288,2.666,289,5.949,290,4.74,291,2.666,292,4.355,293,5.16,294,4.18,295,4.557,296,5.156,297,2.666,298,2.666,299,4.74,300,2.666,301,4.468,302,2.666,303,2.666,304,2.666,305,5.88,306,2,307,2.666,308,2.666,309,2.666,310,2,311,1.878,312,1.486,313,4.061,314,4.114,315,3.299,316,3.036,317,3.215,318,1.143,319,0.511,320,1.25,321,2.356,322,1.878,323,2.666,324,4.757,325,2.666,326,2.666,327,2.875,328,2.152,329,3.27,330,2.356,331,3.27,332,2.356,333,5.156,334,2.356,335,2.356,336,2.356,337,2.356,338,2.356,339,2.666,340,2.666,341,1.081,342,2.666,343,3.922,344,3.105,345,2.666,346,2.091,347,3.868,348,4.18,349,3.694,350,3.694,351,1.488,352,1.742,353,3.694,354,5.156,355,1.182,356,3.375,357,5.156,358,1.777,359,2.356,360,1.878,361,0.903,362,1.69,363,2.152,364,3.136,365,3.375,366,3.694,367,3.136,368,3.136,369,3.136,370,3.136,371,3.136,372,2.244,373,3.136,374,3.136,375,2.12,376,2.666,377,1.878,378,2,379,2.666,380,1.542,381,2.666,382,2.666,383,2.666,384,2.666,385,1.349,386,4.18,387,2,388,2.666,389,2.666,390,2.666,391,2.666,392,2.666,393,2.666,394,3.375,395,2.666,396,4.557,397,0.467,398,2.666,399,2.666,400,2.666,401,2.666,402,2.666,403,2.666,404,2.666,405,2.666,406,2.666,407,2.666,408,2.666,409,2.666,410,4.18,411,2.666,412,2.666]],["title/modules/AuthModule.html",[0,1.07,6,3.145]],["body/modules/AuthModule.html",[0,1.693,2,2.029,3,2.714,6,6.549,7,0.009,9,5.462,21,4.999,22,5.742,24,2.787,25,2.194,26,2.029,27,0.125,28,0.114,29,0.091,31,2.864,45,0.201,47,0.786,102,3.917,116,1.192,117,3.706,118,4.914,122,4.489,225,2.944,226,0.125,227,0.135,235,0.007,236,0.007,238,5.823,239,2.075,320,4.275,321,4.914,413,4.914,414,4.914,415,4.914,416,4.914,417,5.742,418,6.422,419,5.56,420,3.118,421,7.062,422,4.489,423,5.56,424,5.56,425,4.914]],["title/modules/ContributionModule.html",[0,1.07,8,3.145]],["body/modules/ContributionModule.html",[0,1.778,2,2.193,3,2.85,7,0.009,8,6.386,15,4.898,24,2.926,25,2.372,26,2.193,27,0.135,28,0.123,29,0.099,31,3.007,45,0.2,47,0.85,49,2.734,50,1.687,69,4.006,82,3.007,83,3.227,86,4.303,159,1.766,225,3.091,226,0.135,227,0.146,235,0.007,236,0.007,239,2.179,420,3.273,426,5.312,427,5.312,428,6.01,429,5.312,430,6.139,431,6.01,432,6.033,433,4.852,434,5.312,435,1.441,436,6.01,437,3.113]],["title/classes/ContributionPageOptionsDto.html",[227,0.108,438,3.145]],["body/classes/ContributionPageOptionsDto.html",[7,0.009,27,0.115,28,0.105,29,0.084,36,0.6,40,0.517,41,0.943,45,0.168,226,0.151,227,0.163,231,2.631,235,0.006,236,0.006,243,0.31,254,1.22,274,1.082,319,0.982,351,2.385,352,2.793,438,4.721,439,1.694,440,5.41,441,2.327,442,2.654,443,2.446,444,2.466,445,1.256,446,5.601,447,3.353,448,3.736,449,3.615,450,6.634,451,2.401,452,3.243,453,6.599,454,3.736,455,4.163,456,4.721,457,5.124,458,4.529,459,2.654,460,3.736,461,3.202,462,2.857,463,2.751,464,2.857,465,4.415,466,2.974,467,3.615,468,2.565,469,2.857,470,2.974,471,2.857,472,2.974,473,3.471,474,2.565,475,2.404,476,2.857,477,2.857,478,2.974,479,3.598,480,3.249,481,3.598,482,2.078,483,2.136,484,1.541,485,4.058,486,4.721,487,5.41,488,4.467,489,5.124]],["title/injectables/ContributionService.html",[430,2.976,490,0.875]],["body/injectables/ContributionService.html",[7,0.009,27,0.121,28,0.11,29,0.089,32,1.589,36,0.506,38,1.52,39,0.82,40,0.436,41,0.735,43,1.238,45,0.198,47,0.763,50,1.515,62,1.323,86,3.133,159,1.586,175,1.742,178,2.291,226,0.121,227,0.131,228,1.589,230,1.294,235,0.006,236,0.006,243,0.327,244,1.919,263,2.237,274,1.109,346,2.398,375,2.184,380,1.184,430,4.62,433,4.358,438,5.691,441,1.586,444,2.198,450,4.358,453,4.771,467,2.614,468,2.701,483,2.25,484,1.623,490,1.359,491,1.874,492,4.771,493,5.103,494,5.398,495,2.429,496,5.398,497,6.93,498,3.598,499,6.023,500,5.398,501,3.598,502,2.25,503,2.075,504,2.25,505,4.358,506,4.05,507,4.183,508,3.133,509,4.771,510,5.398,511,3.379,512,5.398,513,4.771,514,4.771,515,5.398,516,4.771,517,4.771,518,5.398,519,3.598,520,3.598,521,3.864,522,3.269,523,3.269,524,3.269]],["title/classes/CreateInsightDto.html",[227,0.108,525,3.145]],["body/classes/CreateInsightDto.html",[7,0.009,27,0.125,28,0.113,29,0.091,36,0.565,39,0.996,40,0.57,45,0.183,157,3.78,174,2.071,226,0.125,227,0.188,235,0.007,236,0.007,243,0.335,254,1.149,280,4.693,319,1.06,355,1.268,385,1.553,397,1.426,439,1.829,441,2.395,445,1.319,482,2.243,495,2.117,525,4.96,526,6.58,527,4.466,528,5.809,529,3.228,530,4.222,531,3.875,532,3.823,533,5.281,534,2.47,535,4.466,536,5.532,537,4.89,538,5.532,539,5.455,540,4.693,541,6.222,542,5.433,543,4.89,544,5.532,545,4.079,546,4.466,547,5.684,548,3.646,549,3.508,550,4.466,551,3.508,552,5.532,553,3.085,554,2.243,555,4.15,556,2.679]],["title/classes/CreateInsightMemberDto.html",[227,0.108,557,3.349]],["body/classes/CreateInsightMemberDto.html",[7,0.009,27,0.145,28,0.132,29,0.106,36,0.471,40,0.522,45,0.174,226,0.145,227,0.188,235,0.007,236,0.007,243,0.39,254,0.958,292,4.905,319,1.237,385,1.294,397,1.505,439,2.133,445,1.451,482,2.616,526,6.25,531,3.229,532,4.035,534,2.223,545,3.874,551,4.909,557,5.808,558,5.209,559,5.455,560,7.742,561,5.702,562,6.451,563,6.842,564,5.209]],["title/classes/CreateLogDto.html",[227,0.108,565,3.349]],["body/classes/CreateLogDto.html",[7,0.009,27,0.14,28,0.127,29,0.102,36,0.596,40,0.514,41,0.94,45,0.14,201,5.754,218,5.444,226,0.14,227,0.184,231,2.678,235,0.007,236,0.007,243,0.376,254,1.212,397,1.55,439,2.057,445,1.42,481,4.563,482,2.523,548,4.401,565,5.683,566,7.511,567,5.5,568,5.754,569,8.166,570,6.223,571,6.223,572,6.223]],["title/classes/CreateUserHighlightDto.html",[227,0.108,573,3.145]],["body/classes/CreateUserHighlightDto.html",[7,0.009,27,0.117,28,0.106,29,0.085,36,0.58,40,0.568,41,0.844,45,0.152,116,1.768,149,4.417,226,0.117,227,0.164,235,0.006,236,0.006,243,0.313,254,1.18,319,0.993,361,3.057,372,4.427,385,1.594,397,1.606,439,1.712,445,1.265,474,3.377,479,4.03,481,4.03,482,2.101,531,3.377,534,2.507,545,3.756,548,4.118,554,2.736,556,2.508,573,4.755,574,7.288,575,4.579,576,5.631,577,5.81,578,3.763,579,6.42,580,5.81,581,5.18,582,5.18,583,5.964,584,2.663,585,5.063,586,5.063,587,2.979,588,5.18,589,5.18,590,5.18,591,5.18,592,5.964,593,5.18,594,5.18,595,6.748,596,5.18,597,5.18,598,4.579,599,5.18,600,5.18,601,2.356]],["title/injectables/CustomLogger.html",[490,0.875,602,3.145]],["body/injectables/CustomLogger.html",[7,0.009,27,0.095,28,0.087,29,0.07,32,1.352,36,0.597,38,1.748,39,0.943,40,0.515,41,0.846,43,1.766,45,0.165,47,0.599,52,5.763,53,2.826,201,5.426,206,5.163,218,6.168,226,0.095,227,0.103,228,1.352,230,1.625,231,1.992,235,0.006,236,0.006,243,0.256,244,2.235,380,1.689,397,1.635,443,2.152,445,1.105,451,1.137,490,1.156,491,1.472,501,5.315,568,6.408,602,4.776,603,7.371,604,3.747,605,6.779,606,8.178,607,6.476,608,6.257,609,6.218,610,7.327,611,6.476,612,4.24,613,7.327,614,5.315,615,5.896,616,4.24,617,4.24,618,3.303,619,4.24,620,7.327,621,4.24,622,4.24,623,4.24,624,4.24,625,4.24,626,4.24,627,4.24,628,4.24,629,4.24,630,3.747,631,3.747,632,4.24,633,4.24,634,4.24,635,7.701,636,4.24,637,4.24,638,5.896]],["title/modules/CustomerModule.html",[0,1.07,9,2.831]],["body/modules/CustomerModule.html",[0,1.841,2,2.323,3,2.951,7,0.009,9,5.712,24,3.031,25,2.512,26,2.323,27,0.143,28,0.13,29,0.105,31,2.581,45,0.193,47,0.9,49,2.895,50,1.786,120,5.119,159,1.87,225,3.201,226,0.143,227,0.155,235,0.007,236,0.007,331,5.881,420,3.39,437,3.297,639,5.626,640,5.626,641,5.626,642,6.365,643,5.626,644,6.365]],["title/injectables/CustomerService.html",[331,2.831,490,0.875]],["body/injectables/CustomerService.html",[7,0.009,27,0.119,28,0.109,29,0.087,32,1.571,36,0.606,38,1.759,39,0.949,40,0.505,41,0.851,43,1.84,45,0.181,47,0.75,50,1.488,62,1.3,120,3.536,159,1.558,226,0.119,227,0.129,228,1.571,230,1.271,235,0.006,236,0.006,243,0.321,244,2.222,274,1.233,283,2.701,331,4.345,346,1.968,355,1.985,380,1.759,397,1.489,490,1.343,491,1.841,495,2.413,502,2.211,511,3.542,618,3.255,643,4.688,645,4.688,646,6.709,647,3.649,648,7.59,649,7.59,650,5.304,651,5.304,652,6.852,653,5.304,654,7.091,655,5.304,656,5.304,657,5.304,658,5.304,659,5.304,660,5.304,661,5.304,662,5.304,663,3.214,664,5.304,665,3.549,666,5.304,667,5.304]],["title/classes/DatabaseLoggerMiddleware.html",[108,3.349,227,0.108]],["body/classes/DatabaseLoggerMiddleware.html",[7,0.009,27,0.171,28,0.083,29,0.067,32,1.311,36,0.612,38,1.996,39,1.006,40,0.519,41,0.875,43,1.853,44,5.34,45,0.149,47,0.574,62,0.995,66,3.277,67,3.277,68,3.277,108,4.968,177,5.052,178,1.342,201,5.066,226,0.129,227,0.099,228,1.311,230,1.885,231,1.946,235,0.005,236,0.005,243,0.246,274,0.96,360,2.86,377,2.86,380,1.839,397,1.597,439,1.342,445,1.072,451,1.089,501,5.499,568,5.693,608,4.968,609,6.523,611,5.853,618,3.083,668,7.513,669,3.277,670,5.055,671,6.622,672,6.622,673,6.622,674,6.622,675,6.622,676,6.622,677,6.622,678,4.059,679,5.719,680,4.059,681,9.169,682,4.059,683,4.059,684,4.059,685,4.059,686,4.059,687,3.87,688,4.059,689,4.059,690,4.059,691,4.059,692,2.319,693,4.059,694,4.059,695,4.059,696,4.059,697,4.059,698,3.588,699,4.059,700,4.059,701,7.189,702,4.059,703,6.622,704,5.719,705,4.059,706,6.622,707,4.059,708,4.059,709,4.059]],["title/entities/DbContribution.html",[86,2.591,710,1.145]],["body/entities/DbContribution.html",[7,0.009,27,0.081,28,0.073,29,0.059,36,0.604,39,0.804,40,0.557,41,0.8,45,0.153,62,0.88,82,2.755,83,1.926,86,3.038,116,1.123,132,2.811,174,2.544,175,1.158,226,0.081,227,0.087,235,0.005,236,0.005,243,0.217,254,1.228,274,1.157,281,2.381,319,0.688,351,2.2,352,2.577,355,1.657,361,3.102,372,3.879,385,1.601,397,1.189,435,1.732,443,1.31,445,0.981,451,2.141,486,4.355,487,4.99,488,4.816,495,1.574,534,2.512,584,3.151,587,2.999,601,2.381,692,3.237,710,1.342,711,3.171,712,3.093,713,3.498,714,3.235,715,4.627,716,3.789,717,3.588,718,5.097,719,5.097,720,4.787,721,6.005,722,3.588,723,4.627,724,5.235,725,3.49,726,3.588,727,4.787,728,3.588,729,2.456,730,3.701,731,3.431,732,6.207,733,2.311,734,3.789,735,2.544,736,1.737,737,3.524,738,3.631,739,2.832,740,3.588,741,2.173,742,2.914,743,3.588,744,2.832,745,3.588,746,3.588,747,3.4,748,4.227,749,3.927,750,2.692,751,3.588,752,2.082,753,3.588,754,3.038,755,3.588,756,3.171,757,3.588,758,2.311,759,2.811,760,2.811,761,2.173,762,3.588,763,3.689,764,5.235,765,4.627,766,3.588,767,3.588,768,3.235,769,2.811,770,2.001,771,3.038,772,3.038,773,2.712,774,2.381,775,2.811,776,3.093,777,3.34,778,2.899,779,1.539,780,1.455,781,1.539,782,2.692,783,3.588,784,2.692,785,2.082,786,2.897,787,2.082,788,2.897,789,3.588,790,3.171]],["title/entities/DbCustomer.html",[120,2.976,710,1.145]],["body/entities/DbCustomer.html",[7,0.009,27,0.135,28,0.123,29,0.099,36,0.541,39,0.711,40,0.506,45,0.167,62,1.473,116,1.59,120,4.943,123,4.491,175,1.94,226,0.135,227,0.146,235,0.007,236,0.007,243,0.364,254,1.101,274,1.074,355,1.977,361,2.975,385,1.487,394,5.987,397,1.298,443,2.193,445,1.39,459,3.841,534,2.411,654,7.108,710,1.901,714,3.18,718,5.563,719,5.563,720,5.225,744,3.091,768,3.18,769,3.981,770,3.351,777,3.448,779,2.577,780,2.437,781,2.577,784,4.509,791,5.312,792,4.852,793,6.01,794,6.01,795,6.01,796,6.01,797,3.008,798,6.01]],["title/entities/DbEmoji.html",[146,2.704,710,1.145]],["body/entities/DbEmoji.html",[7,0.009,27,0.093,28,0.085,29,0.068,36,0.605,39,0.937,40,0.556,41,0.84,45,0.163,62,1.016,139,3.11,146,3.515,148,4.046,149,3.823,150,2.628,174,2.173,175,1.338,226,0.093,227,0.101,235,0.005,236,0.005,243,0.251,254,1.231,274,0.841,281,2.64,319,0.795,351,2.383,352,2.792,355,1.536,361,3.105,372,4.101,385,1.587,397,1.385,445,1.088,451,1.946,461,1.777,534,2.501,578,4.046,584,3.124,587,2.562,601,1.885,692,3.21,710,1.488,712,3.352,714,3.112,729,2.722,730,3.661,731,3.3,733,2.562,734,3.236,735,2.173,736,2.007,737,3.495,738,3.601,739,3.025,741,2.51,742,2.489,744,2.419,747,2.905,758,2.562,759,3.116,760,3.116,761,2.51,768,3.112,773,3.006,774,2.64,775,3.116,776,3.352,777,3.275,778,3.141,779,1.777,780,1.681,781,1.777,787,2.405,799,3.663,800,6.697,801,4.719,802,5.444,803,4.145,804,4.145,805,6.696,806,3.869,807,4.354,808,3.663,809,4.089,810,4.145,811,4.354,812,3.663,813,4.145,814,4.145,815,4.145,816,3.346,817,5.13,818,5.804,819,4.145,820,4.145,821,4.145,822,4.145,823,4.686,824,3.116,825,3.663,826,3.346,827,2.92,828,4.145]],["title/entities/DbInsight.html",[111,2.489,710,1.145]],["body/entities/DbInsight.html",[7,0.009,27,0.078,28,0.071,29,0.057,36,0.607,39,0.912,40,0.551,41,0.791,45,0.16,62,0.85,84,3.237,85,2.2,111,2.848,113,4.239,115,1.862,116,1.653,174,2.961,175,1.12,226,0.078,227,0.084,235,0.005,236,0.005,243,0.21,254,1.236,274,0.969,319,0.665,351,2.157,352,2.527,355,1.767,361,3.109,385,1.619,397,1.17,441,1.964,443,1.266,445,0.957,451,2.121,528,4.547,529,2.527,530,3.463,532,4.107,533,3.831,534,2.527,551,2.2,554,2.071,556,2.473,577,3.598,584,2.942,587,3.29,601,2.757,692,3.022,710,1.309,712,3.033,714,3.196,718,5.016,719,5.016,720,4.711,721,4.514,727,3.598,729,2.843,730,3.611,731,3.39,733,2.255,735,2.791,736,1.68,737,3.29,738,3.39,739,3.107,742,2.19,744,2.129,747,2.556,752,2.013,754,2.964,758,3.29,768,3.196,769,2.742,770,2.848,771,2.964,772,2.964,773,2.645,774,2.323,775,2.742,776,3.033,777,3.305,778,3.136,779,1.488,780,1.407,781,1.488,797,2.556,816,2.801,823,4.123,824,2.742,829,3.066,830,6.061,831,6.061,832,2.668,833,3.469,834,3.831,835,2.602,836,3.469,837,3.066,838,3.469,839,4.711,840,5.909,841,5.107,842,4.514,843,3.469,844,3.469,845,3.469,846,3.469,847,4.514,848,5.107,849,3.469,850,5.107,851,3.469,852,4.123,853,3.469,854,3.598,855,2.801,856,3.469,857,3.469,858,3.469,859,2.801,860,3.469,861,2.101,862,2.801,863,3.469]],["title/entities/DbInsightMember.html",[144,2.831,710,1.145]],["body/entities/DbInsightMember.html",[7,0.009,27,0.079,28,0.071,29,0.057,36,0.6,39,0.884,40,0.554,41,0.911,45,0.115,62,0.856,116,1.1,144,3.253,174,2.966,175,1.127,226,0.079,227,0.085,235,0.005,236,0.005,243,0.211,254,1.22,274,0.972,292,3.739,351,2.165,352,2.536,355,1.77,361,3.095,385,1.648,397,1.386,443,1.274,445,0.962,451,2.003,532,3.504,534,2.553,551,5.212,559,6.052,564,2.818,578,3.739,584,3.244,585,3.849,587,3.298,601,3.05,692,3.212,710,1.315,712,3.044,714,3.203,718,3.849,719,3.849,720,3.615,729,3.145,730,3.736,731,3.603,733,2.265,735,2.966,736,1.69,737,3.497,738,3.603,739,2.795,742,3.203,744,2.139,747,2.568,750,2.619,758,3.298,768,3.311,769,2.755,770,2.861,773,2.657,774,2.334,775,2.755,777,3.311,778,3.351,779,1.497,780,1.415,781,1.497,797,2.568,809,3.615,811,3.849,824,2.755,826,2.818,832,2.278,834,3.849,835,2.619,854,3.615,855,2.818,859,2.818,864,6.729,865,3.085,866,5.36,867,4.286,868,5.377,869,6.083,870,3.491,871,4.142,872,4.286,873,3.491,874,3.491,875,3.491,876,3.491,877,3.491,878,2.213,879,3.491,880,5.927,881,3.491,882,3.491,883,5.13,884,4.535,885,3.491,886,4.535,887,4.535,888,3.085,889,3.849,890,3.491,891,3.491,892,3.491,893,3.085,894,3.085]],["title/entities/DbInsightRepo.html",[113,2.831,710,1.145]],["body/entities/DbInsightRepo.html",[7,0.009,27,0.096,28,0.087,29,0.07,36,0.598,39,0.868,40,0.54,41,0.779,45,0.165,62,1.043,111,4.093,113,3.749,153,2.999,175,1.374,226,0.096,227,0.103,235,0.006,236,0.006,243,0.257,254,1.215,274,1.157,319,0.816,351,2.417,355,1.944,361,3.09,385,1.601,397,1.035,435,2.001,443,1.553,445,1.108,451,1.968,532,4.134,534,2.512,553,3.788,554,2.397,555,4.435,556,2.061,578,3.296,584,2.897,587,3.24,601,2.689,692,2.976,710,1.516,712,3.399,713,3.289,714,3.147,729,2.773,730,3.58,731,3.338,733,2.61,735,2.748,736,2.061,737,3.24,738,3.338,739,3.06,744,2.464,752,2.47,754,3.431,758,3.24,768,3.147,769,3.174,770,3.296,771,3.431,772,3.431,773,3.062,774,2.689,776,2.959,777,3.307,778,3.186,779,1.825,780,1.726,781,1.825,797,3.399,824,3.174,834,4.435,835,3.193,837,3.762,864,6.74,867,5.434,878,3.749,895,3.193,896,4.256,897,4.256,898,3.58,899,3.762,900,4.256,901,4.256,902,4.256,903,4.256,904,4.256,905,4.256,906,3.762,907,4.256]],["title/entities/DbLog.html",[130,2.976,710,1.145]],["body/entities/DbLog.html",[7,0.009,27,0.133,28,0.121,29,0.097,36,0.627,39,0.701,40,0.541,45,0.133,62,1.452,130,4.899,175,1.912,201,5.63,218,5.326,226,0.133,227,0.144,235,0.007,236,0.007,243,0.358,254,1.275,351,2.843,355,1.832,361,3.145,397,1.569,443,2.162,445,1.377,568,5.63,584,2.901,710,1.884,768,3.805,769,3.946,774,3.634,824,3.181,908,5.237,909,5.925,910,5.925,911,5.925,912,5.925,913,5.925,914,5.925,915,5.925,916,5.925]],["title/entities/DbPRInsight.html",[151,2.831,710,1.145]],["body/entities/DbPRInsight.html",[7,0.009,27,0.094,28,0.085,29,0.068,36,0.578,39,0.492,40,0.567,45,0.131,62,1.02,136,5.733,151,3.69,152,3.299,174,3.263,175,1.343,226,0.094,227,0.101,235,0.005,236,0.005,243,0.252,254,1.177,274,1.281,355,1.539,361,3.053,385,1.589,443,1.518,445,1.091,451,2.337,461,2.495,475,2.729,486,5.584,495,1.75,534,2.502,580,5.584,584,2.297,692,2.36,710,1.492,714,3.399,716,4.815,725,5.283,727,4.1,730,2.495,737,2.569,738,2.647,739,2.426,742,3.737,744,2.426,758,2.569,759,3.124,760,3.124,768,3.399,769,3.124,770,3.245,777,3.489,779,1.784,780,1.687,781,1.784,785,2.414,809,5.849,917,4.722,918,3.677,919,6.711,920,6.711,921,5.418,922,5.424,923,6.711,924,5.143,925,6.711,926,4.16,927,4.16,928,7.268,929,5.819,930,5.819,931,5.819,932,5.819,933,4.16,934,4.16,935,4.16,936,4.16,937,5.819,938,5.819,939,5.819,940,5.819,941,5.819,942,3.677,943,4.16,944,5.143,945,4.16,946,3.121,947,4.16,948,6.711]],["title/entities/DbPullRequest.html",[135,2.704,710,1.145]],["body/entities/DbPullRequest.html",[7,0.009,27,0.044,28,0.11,29,0.032,36,0.621,39,0.638,40,0.561,41,0.925,45,0.094,62,0.478,132,4.705,135,1.965,136,6.022,152,3.553,167,3.081,174,2.904,175,0.629,204,3.645,226,0.044,227,0.047,235,0.003,236,0.003,243,0.118,254,1.264,274,1.16,281,2.21,319,0.374,351,1.483,352,1.737,355,1.237,361,3.135,372,1.742,385,1.714,397,1.469,435,0.778,443,0.711,445,0.608,451,2.166,452,1.28,495,0.976,530,3.351,534,2.595,553,2.324,554,1.315,577,3.802,578,4.205,580,5.313,584,3.06,692,2.81,710,0.832,713,2.018,714,3.618,716,1.086,727,4.558,729,0.914,730,3.463,731,3.151,733,1.432,735,0.73,737,3.059,738,3.151,739,2.888,742,2.774,744,1.352,747,2.432,748,2.619,749,3.645,758,3.059,759,3.72,760,3.72,768,3.365,769,1.742,770,1.086,774,1.475,776,1.623,777,3.635,778,1.522,779,0.836,780,0.79,781,0.836,787,3.132,809,2.286,889,2.434,898,1.965,917,4.96,942,1.722,946,1.462,949,1.722,950,4.167,951,4.167,952,4.167,953,4.167,954,4.167,955,4.167,956,3.365,957,4.77,958,4.167,959,5.396,960,4.167,961,5.396,962,4.167,963,5.396,964,5.396,965,3.365,966,5.396,967,4.167,968,4.167,969,5.396,970,4.167,971,4.167,972,4.859,973,2.434,974,1.948,975,1.948,976,4.859,977,4.859,978,3.244,979,1.948,980,1.948,981,4.295,982,1.948,983,1.948,984,1.948,985,1.948,986,2.619,987,3.244,988,3.244,989,1.948,990,3.244,991,4.859,992,1.948,993,1.948,994,1.948,995,1.948,996,2.867,997,1.948,998,4.859,999,1.948,1000,1.722,1001,1.948,1002,1.948,1003,1.948,1004,3.244,1005,2.867,1006,1.948,1007,1.948,1008,3.244,1009,3.244,1010,4.167,1011,3.244,1012,3.244,1013,3.244,1014,3.244,1015,3.244,1016,1.722,1017,1.948,1018,3.244,1019,1.948,1020,1.948,1021,1.948,1022,1.948,1023,1.948,1024,1.948,1025,1.948,1026,1.722,1027,1.948,1028,1.948,1029,1.948,1030,4.295,1031,1.948,1032,1.948,1033,1.948,1034,1.948,1035,1.948,1036,1.948,1037,1.948,1038,1.948,1039,3.244,1040,3.244,1041,2.867,1042,3.244,1043,1.948,1044,1.948,1045,1.948,1046,1.948,1047,1.948,1048,1.948,1049,1.948,1050,1.573,1051,5.149,1052,4.859,1053,1.722,1054,1.948,1055,1.948,1056,1.722,1057,1.948,1058,1.948,1059,1.948,1060,2.057,1061,2.057,1062,1.299]],["title/entities/DbRepoToUserStargazers.html",[94,2.591,710,1.145]],["body/entities/DbRepoToUserStargazers.html",[7,0.009,27,0.093,28,0.085,29,0.068,36,0.605,39,0.792,40,0.543,41,0.84,45,0.172,62,1.016,82,2.942,84,3.513,85,2.628,94,3.368,115,2.225,116,1.743,174,2.173,175,1.338,226,0.093,227,0.101,235,0.005,236,0.005,243,0.251,254,1.231,274,1.147,281,2.64,319,0.795,351,2.383,352,2.792,355,1.863,361,3.105,385,1.532,435,1.831,445,1.088,451,1.946,495,1.745,534,2.452,584,3.124,587,2.562,601,1.885,692,3.21,710,1.488,712,3.352,713,3.698,714,2.872,729,2.722,730,3.661,731,3.3,733,2.562,734,3.236,735,2.173,736,2.007,737,3.495,738,3.601,739,3.025,741,2.51,742,2.489,744,3.3,747,2.905,752,3.368,754,4.211,758,2.562,759,3.116,760,3.116,761,2.51,768,2.872,771,3.887,772,3.887,773,3.006,774,2.64,775,3.116,776,3.631,777,3.112,778,3.141,779,1.777,780,1.681,781,1.777,785,2.405,787,2.405,797,2.074,824,3.116,832,2.86,878,2.628,1063,3.663,1064,6.391,1065,4.145,1066,4.145,1067,2.92,1068,4.145,1069,4.145,1070,4.145,1071,2.92,1072,4.145,1073,4.145,1074,4.145,1075,4.145,1076,4.145,1077,4.145,1078,2.92,1079,4.145,1080,3.663]],["title/entities/DbRepoToUserStars.html",[90,2.591,710,1.145]],["body/entities/DbRepoToUserStars.html",[7,0.009,27,0.093,28,0.085,29,0.068,36,0.605,39,0.792,40,0.543,41,0.84,45,0.172,62,1.016,82,2.942,84,3.513,85,2.628,90,3.368,115,2.225,116,1.743,174,2.173,175,1.338,226,0.093,227,0.101,235,0.005,236,0.005,243,0.251,254,1.231,274,1.147,281,2.64,319,0.795,351,2.383,352,2.792,355,1.863,361,3.105,385,1.532,435,1.831,445,1.088,451,1.946,495,1.745,534,2.452,584,3.124,587,2.562,601,1.885,692,3.21,710,1.488,712,3.352,713,3.698,714,2.872,729,2.722,730,3.661,731,3.3,733,2.562,734,3.236,735,2.173,736,2.007,737,3.495,738,3.601,739,3.025,741,2.51,742,2.489,744,3.3,747,2.905,752,3.368,754,4.211,758,2.562,759,3.116,760,3.116,761,2.51,768,2.872,771,3.887,772,3.887,773,3.006,774,2.64,775,3.116,776,3.631,777,3.112,778,3.141,779,1.777,780,1.681,781,1.777,785,2.405,787,2.405,797,2.074,824,3.116,832,2.86,878,2.628,1067,2.92,1071,2.92,1078,2.92,1081,3.663,1082,5.939,1083,4.145,1084,4.145,1085,4.145,1086,4.145,1087,4.145,1088,4.145,1089,4.145,1090,4.145,1091,4.145,1092,4.145,1093,4.145,1094,4.145,1095,3.663]],["title/entities/DbRepoToUserSubmissions.html",[92,2.591,710,1.145]],["body/entities/DbRepoToUserSubmissions.html",[7,0.009,27,0.089,28,0.081,29,0.065,36,0.608,39,0.77,40,0.543,41,0.868,45,0.169,62,0.965,82,2.875,84,3.433,85,2.495,92,3.247,115,2.113,116,1.717,174,2.805,175,1.27,226,0.089,227,0.096,235,0.005,236,0.005,243,0.238,254,1.236,274,1.128,281,2.545,319,0.754,351,2.317,352,2.714,355,1.836,361,3.11,385,1.561,435,1.796,445,1.049,451,2.009,495,1.682,530,2.898,534,2.477,554,2.269,556,2.709,584,3.072,587,2.47,601,1.79,692,3.156,710,1.434,712,3.258,713,3.627,714,3.04,729,2.624,730,3.621,731,3.54,733,2.47,734,3.12,735,2.095,736,1.905,737,3.436,738,3.54,739,2.956,741,2.383,742,2.399,744,3.245,747,2.8,752,3.247,754,4.115,758,2.47,759,3.004,760,3.004,761,2.383,768,3.04,771,3.778,772,3.778,773,2.898,774,2.545,775,3.004,776,3.548,777,3.212,778,3.054,779,1.687,780,1.596,781,1.687,785,2.284,787,2.284,797,1.969,824,3.004,832,2.805,839,3.942,842,3.478,878,2.495,1067,2.772,1071,2.772,1078,2.772,1096,3.478,1097,5.754,1098,6.607,1099,3.935,1100,3.935,1101,3.935,1102,5.595,1103,5.595,1104,3.935,1105,3.935,1106,3.935,1107,3.935,1108,3.935,1109,3.935,1110,3.935,1111,3.935,1112,3.935,1113,3.935,1114,3.478]],["title/entities/DbRepoToUserVotes.html",[88,2.591,710,1.145]],["body/entities/DbRepoToUserVotes.html",[7,0.009,27,0.093,28,0.085,29,0.068,36,0.605,39,0.792,40,0.543,41,0.84,45,0.172,62,1.016,82,2.942,84,3.513,85,2.628,88,3.368,115,2.225,116,1.743,174,2.173,175,1.338,226,0.093,227,0.101,235,0.005,236,0.005,243,0.251,254,1.231,274,1.147,281,2.64,319,0.795,351,2.383,352,2.792,355,1.863,361,3.105,385,1.532,435,1.831,445,1.088,451,1.946,495,1.745,534,2.452,584,3.124,587,2.562,601,1.885,692,3.21,710,1.488,712,3.352,713,3.698,714,2.872,729,2.722,730,3.661,731,3.3,733,2.562,734,3.236,735,2.173,736,2.007,737,3.495,738,3.601,739,3.025,741,2.51,742,2.489,744,3.3,747,2.905,752,3.368,754,4.211,758,2.562,759,3.116,760,3.116,761,2.51,768,2.872,771,3.887,772,3.887,773,3.006,774,2.64,775,3.116,776,3.631,777,3.112,778,3.141,779,1.777,780,1.681,781,1.777,785,2.405,787,2.405,797,2.074,824,3.116,832,2.86,878,2.628,1067,2.92,1071,2.92,1078,2.92,1115,3.663,1116,5.939,1117,4.145,1118,4.145,1119,4.145,1120,4.145,1121,4.145,1122,4.145,1123,4.145,1124,4.145,1125,4.145,1126,4.145,1127,4.145,1128,4.145,1129,3.663]],["title/entities/DbSubscription.html",[128,2.976,710,1.145]],["body/entities/DbSubscription.html",[7,0.009,27,0.063,28,0.057,29,0.046,36,0.606,39,0.329,40,0.561,41,0.889,45,0.119,62,0.682,116,0.927,128,2.882,174,1.619,175,0.898,226,0.063,227,0.068,235,0.004,236,0.004,243,0.168,254,1.233,274,0.866,319,0.534,351,1.886,355,1.484,361,3.107,385,1.649,397,1.293,443,1.016,445,0.81,451,2.281,461,1.194,530,3.096,534,2.553,578,3.819,584,3.528,587,3.755,601,3.452,692,3.398,710,1.108,714,2.775,727,4.211,729,3.559,730,3.868,731,3.869,733,2.638,734,4.743,735,3.185,736,1.348,737,3.699,738,3.811,739,3.493,742,1.854,744,2.491,750,5.544,768,3.526,769,2.321,770,1.552,774,1.966,776,2.164,777,2.937,778,3.638,779,1.194,780,1.129,781,1.194,808,2.46,832,1.985,1026,2.46,1130,6.287,1131,2.46,1132,4.685,1133,4.685,1134,4.685,1135,4.685,1136,4.685,1137,4.685,1138,3.977,1139,4.685,1140,5.225,1141,4.56,1142,4.685,1143,4.685,1144,4.323,1145,2.783,1146,5.544,1147,2.783,1148,4.323,1149,2.783,1150,2.783,1151,4.484,1152,5.976,1153,6.85,1154,2.783,1155,4.825,1156,2.783,1157,2.783,1158,2.783,1159,2.783,1160,2.783,1161,3.821,1162,2.783,1163,2.783,1164,2.783,1165,2.783,1166,3.735,1167,2.783,1168,5.976,1169,2.783,1170,2.783,1171,2.783,1172,2.783,1173,2.46,1174,2.783,1175,2.783,1176,2.783,1177,2.783]],["title/entities/DbUserHighlight.html",[138,2.397,710,1.145]],["body/entities/DbUserHighlight.html",[7,0.009,27,0.065,28,0.111,29,0.047,36,0.61,39,0.926,40,0.552,41,0.918,45,0.148,62,0.706,84,2.947,116,1.776,132,3.267,138,2.383,148,3.393,149,4.466,150,1.826,152,2.468,174,3.131,175,0.929,226,0.065,227,0.07,235,0.004,236,0.004,243,0.174,254,1.241,274,0.882,319,0.552,351,1.927,352,2.258,355,1.659,361,3.114,372,3.529,385,1.642,397,1.415,435,1.064,443,1.051,445,0.832,451,1.863,530,3.152,534,2.547,553,3.02,554,2.468,576,4.063,577,4.632,578,4.166,579,4.913,580,2.029,583,3.923,584,3.328,585,5.606,586,5.606,587,3.299,592,5.379,598,3.923,601,2.768,692,3.03,710,1.138,712,2.71,714,3.287,729,2.854,730,3.616,731,3.399,733,1.959,736,1.394,737,3.299,738,3.399,739,2.537,742,2.978,744,2.537,750,2.16,752,1.671,754,3.532,768,2.978,769,2.383,770,1.606,771,2.576,772,3.143,773,2.299,774,2.019,775,2.383,776,2.71,777,3.357,778,3.083,779,1.235,780,1.168,781,1.235,784,2.16,792,2.325,797,2.221,801,3.816,816,2.325,817,3.923,823,3.583,832,2.461,834,3.33,835,2.16,854,3.127,855,2.325,887,3.923,888,2.545,889,5.21,894,2.545,898,3.686,1000,2.545,1051,4.787,1062,1.92,1178,6.326,1179,2.545,1180,5.307,1181,6.573,1182,2.879,1183,2.879,1184,2.879,1185,4.438,1186,2.879,1187,2.879,1188,2.879,1189,2.879,1190,2.879,1191,2.879,1192,3.583,1193,3.33,1194,2.879,1195,2.879,1196,2.879,1197,3.583,1198,2.879,1199,2.879,1200,2.879,1201,2.879,1202,2.879,1203,2.879,1204,2.879,1205,2.879,1206,2.879,1207,2.545,1208,2.879,1209,2.029,1210,2.879,1211,2.545,1212,2.545,1213,2.879,1214,2.879]],["title/entities/DbUserHighlightReaction.html",[148,2.489,710,1.145]],["body/entities/DbUserHighlightReaction.html",[7,0.009,27,0.078,28,0.071,29,0.057,36,0.607,39,0.791,40,0.554,41,0.91,45,0.168,62,0.85,84,2.935,116,1.598,138,3.254,140,2.101,146,3.671,147,3.066,148,3.974,149,4.463,174,3.213,175,1.12,226,0.078,227,0.084,235,0.005,236,0.005,243,0.21,254,1.236,274,1.08,281,2.323,319,0.665,351,2.157,352,2.527,355,1.851,361,3.05,385,1.495,397,1.17,445,0.957,451,1.793,534,2.418,578,2.848,584,2.942,587,2.255,601,1.578,692,3.022,710,1.309,712,3.033,714,2.867,729,2.395,730,3.52,731,3.041,733,2.255,734,2.848,735,1.912,736,1.68,737,3.29,738,3.39,739,2.787,741,2.101,742,3.611,744,3.296,747,2.556,752,3.518,754,4.326,756,3.066,758,2.255,759,2.742,760,2.742,761,2.101,768,3.056,771,3.88,772,3.88,773,2.645,774,2.323,775,2.742,776,3.566,777,3.056,778,2.843,779,1.488,780,1.407,781,1.488,785,2.013,787,2.013,797,1.736,802,6.318,805,5.753,809,5.252,811,5.016,812,3.066,824,2.742,826,4.123,832,2.668,859,2.801,889,3.831,1016,3.066,1178,6.318,1197,5.753,1209,2.444,1215,3.066,1216,6.299,1217,5.357,1218,3.469,1219,3.469,1220,3.469,1221,3.469,1222,3.469,1223,3.469,1224,3.469,1225,3.469,1226,3.469,1227,3.469,1228,3.469,1229,3.469,1230,3.469,1231,3.469,1232,3.469,1233,3.469,1234,3.469,1235,3.469,1236,3.469,1237,3.469,1238,3.469]],["title/classes/DbUserHighlightRepo.html",[227,0.108,1239,3.349]],["body/classes/DbUserHighlightRepo.html",[7,0.009,27,0.146,28,0.133,29,0.107,36,0.475,39,0.92,40,0.409,41,0.825,45,0.146,149,4.316,226,0.146,227,0.158,235,0.007,236,0.007,243,0.393,254,0.965,361,2.819,385,1.304,397,1.361,435,1.865,439,2.149,445,1.458,534,2.233,553,4.64,554,3.154,714,2.788,777,3.335,779,2.788,780,2.636,781,2.788,895,4.878,898,4.71,1062,5.185,1239,5.835,1240,6.874,1241,6.502]],["title/entities/DbUserRepo.html",[119,2.976,710,1.145]],["body/entities/DbUserRepo.html",[7,0.009,27,0.11,28,0.1,29,0.081,36,0.591,39,0.865,40,0.535,41,0.691,45,0.147,62,1.203,116,1.786,117,5.551,119,4.341,175,1.583,226,0.11,227,0.119,235,0.006,236,0.006,243,0.297,254,1.203,274,1.207,351,2.601,355,1.676,361,3.078,385,1.625,397,1.139,435,1.996,443,1.791,445,1.22,451,1.746,534,2.532,553,4.075,554,2.64,555,4.885,556,2.376,578,3.631,584,2.57,587,2.874,601,2.232,692,2.64,710,1.669,713,3.539,714,3.338,729,2.301,730,3.338,731,2.962,733,2.874,735,2.438,736,2.376,737,2.874,738,2.962,739,2.714,744,3.471,758,2.874,768,2.792,769,3.496,770,2.736,774,2.962,777,3.474,778,3.054,779,2.104,780,1.989,781,2.104,784,3.681,792,3.961,797,3.657,832,2.736,895,3.681,898,3.943,899,4.336,1207,5.755,1211,5.755,1242,5.551,1243,4.906,1244,4.906,1245,4.906,1246,4.906,1247,4.906,1248,4.906]],["title/entities/DbUserToUserFollows.html",[142,2.831,710,1.145]],["body/entities/DbUserToUserFollows.html",[7,0.009,27,0.101,28,0.092,29,0.074,36,0.593,39,0.533,40,0.54,41,0.862,45,0.158,62,1.105,116,1.862,142,3.9,174,2.303,175,1.455,226,0.101,227,0.109,235,0.006,236,0.006,243,0.273,254,1.206,274,1.177,281,2.798,319,0.864,351,2.492,352,2.919,355,1.605,361,3.081,385,1.579,445,1.153,451,2.017,534,2.493,584,3.207,587,2.716,601,2.051,692,3.294,710,1.577,712,3.504,714,3.002,729,2.885,730,3.723,731,3.421,733,2.716,734,3.43,735,2.303,736,2.183,737,3.587,738,3.695,739,3.135,741,2.731,742,2.638,744,3.387,747,3.078,758,2.716,759,3.303,760,3.303,761,2.731,768,3.002,773,3.186,774,2.798,775,3.303,776,3.078,777,3.225,778,3.284,779,1.933,780,1.828,781,1.933,785,2.617,787,2.617,797,2.256,824,3.303,832,2.622,878,2.859,1067,3.177,1071,3.177,1078,3.177,1178,6.238,1249,3.985,1250,6.188,1251,6.56,1252,4.509,1253,4.509,1254,6.151,1255,4.509,1256,4.509,1257,4.509,1258,4.509,1259,4.509]],["title/controllers/EmojiController.html",[237,1.171,1260,3.349]],["body/controllers/EmojiController.html",[7,0.009,27,0.13,28,0.118,29,0.095,32,1.661,36,0.423,38,1.27,39,0.685,40,0.456,41,0.614,43,1.328,45,0.196,47,0.819,146,4.388,226,0.13,227,0.141,228,1.328,230,1.388,235,0.007,236,0.007,237,1.519,239,1.702,241,2.483,243,0.35,244,1.983,254,0.86,257,3.199,315,3.399,316,3.021,317,3.199,318,2.483,319,1.11,341,2.348,344,2.557,380,1.27,385,1.161,444,2.499,483,2.414,484,1.742,618,2.483,687,3.399,825,7.541,1260,5.436,1261,5.119,1262,8.532,1263,5.791,1264,5.119,1265,4.83,1266,4.388,1267,5.791,1268,5.791,1269,3.753,1270,5.791,1271,2.804,1272,3,1273,2.716,1274,3,1275,5.272,1276,5.119,1277,4.676,1278,5.791,1279,5.791,1280,5.791,1281,5.791]],["title/modules/EmojiModule.html",[0,1.07,10,3.145]],["body/modules/EmojiModule.html",[0,1.845,2,2.332,3,2.958,7,0.009,10,6.28,24,3.038,25,2.522,26,2.332,27,0.144,28,0.131,29,0.105,31,2.591,45,0.197,47,0.904,49,2.906,50,1.793,146,4.662,159,1.878,225,3.209,226,0.144,227,0.155,235,0.007,236,0.007,239,2.262,437,3.31,1260,6.197,1275,5.941,1276,5.648,1277,5.159,1282,5.648,1283,5.648,1284,6.39,1285,6.39]],["title/injectables/EmojiService.html",[490,0.875,1275,2.976]],["body/injectables/EmojiService.html",[7,0.009,27,0.127,28,0.115,29,0.093,32,1.633,36,0.57,38,1.562,39,0.843,40,0.448,41,0.756,43,1.633,45,0.198,47,0.797,50,1.581,62,1.381,146,3.413,159,1.656,175,1.819,178,2.355,226,0.127,227,0.137,228,1.633,230,1.351,235,0.007,236,0.007,243,0.341,244,1.958,346,2.356,375,2.245,380,1.562,444,2.52,483,2.969,484,1.695,490,1.396,491,1.956,493,5.206,495,2.468,498,3.756,502,2.349,503,2.166,504,2.349,507,4.25,508,3.27,511,2.488,521,3.971,522,3.413,523,3.413,524,3.413,618,2.416,647,3.732,663,2.643,1275,4.748,1277,4.549,1286,4.98,1287,5.635,1288,5.635,1289,7.122,1290,5.635,1291,5.635,1292,5.635,1293,5.635,1294,5.635,1295,4.549]],["title/classes/FilterOptionsDto.html",[227,0.108,1296,2.976]],["body/classes/FilterOptionsDto.html",[7,0.009,27,0.106,28,0.097,29,0.077,36,0.624,40,0.551,41,0.964,45,0.173,226,0.106,227,0.154,231,2.702,235,0.006,236,0.006,243,0.285,254,1.27,274,1.038,319,0.905,397,1.533,435,1.718,439,1.56,441,2.106,442,2.444,443,2.315,444,2.416,445,1.189,447,3.175,448,3.537,449,3.47,451,2.349,452,3.025,454,3.537,455,3.996,459,2.444,460,3.537,461,3.073,462,2.631,463,2.534,464,2.631,465,4.273,466,2.739,467,3.47,468,2.362,469,2.631,470,2.739,471,2.631,472,2.739,473,3.286,474,2.362,475,2.213,476,2.631,477,2.631,478,2.739,479,4.293,480,2.992,481,4.293,482,1.913,484,1.908,485,2.858,534,1.822,548,3.97,554,2.573,1062,3.146,1296,4.229,1297,7.068,1298,4.778,1299,4.778,1300,5.05,1301,4.987,1302,3.54,1303,4.171,1304,4.76,1305,3.81,1306,4.719,1307,3.54,1308,4.171,1309,4.171,1310,4.719,1311,3.146,1312,3.54]],["title/controllers/HealthController.html",[237,1.171,1313,3.349]],["body/controllers/HealthController.html",[7,0.009,27,0.111,28,0.101,29,0.081,32,1.502,36,0.478,43,1.502,45,0.176,47,0.7,52,5.172,53,3.3,57,3.996,171,3.713,219,3.996,223,5.288,224,6.096,226,0.111,227,0.12,228,1.135,230,2.001,231,1.454,235,0.006,236,0.006,237,1.298,239,1.454,241,2.123,243,0.299,244,2.297,254,0.972,257,3.449,316,3.06,317,3.24,318,2.123,319,0.949,341,3.453,344,2.891,380,1.436,554,3.168,556,3.783,618,2.809,1313,4.914,1314,4.375,1315,7.379,1316,8.348,1317,4.95,1318,6.549,1319,6.549,1320,4.95,1321,4.95,1322,6.549,1323,4.95,1324,6.549,1325,6.549,1326,6.549,1327,7.34,1328,6.549,1329,6.549,1330,4.95,1331,4.95,1332,4.95,1333,4.95,1334,4.95,1335,5.789,1336,6.549,1337,4.95,1338,4.95,1339,4.95,1340,4.95,1341,4.95,1342,4.95,1343,6.549,1344,4.95,1345,4.95,1346,4.95,1347,4.95,1348,4.95,1349,4.95,1350,4.95,1351,4.95,1352,4.95,1353,4.95,1354,4.95,1355,4.95,1356,4.95,1357,4.95,1358,4.95,1359,4.95]],["title/modules/HealthModule.html",[0,1.07,11,3.145]],["body/modules/HealthModule.html",[0,1.923,2,2.499,7,0.009,11,5.651,27,0.154,28,0.14,29,0.112,31,2.777,45,0.191,47,0.968,56,7.089,57,5.529,226,0.154,227,0.166,235,0.007,236,0.007,239,2.357,1313,6.381,1360,6.848,1361,6.848]],["title/controllers/HighlightController.html",[237,1.171,1362,3.349]],["body/controllers/HighlightController.html",[7,0.009,27,0.103,28,0.094,29,0.075,32,1.425,36,0.515,38,1.547,39,0.835,40,0.514,41,0.749,43,1.618,45,0.196,47,0.647,115,2.457,116,1.333,138,3.788,139,4.662,140,2.772,148,3.465,149,4.178,150,2.902,152,2.52,226,0.103,227,0.111,228,1.049,230,1.097,231,1.345,235,0.006,236,0.006,237,1.2,239,1.345,241,1.963,243,0.277,244,2.159,254,1.047,257,3.603,263,2.634,270,4.143,274,1.022,315,2.915,316,3.155,317,3.341,318,1.963,319,0.877,341,1.856,344,3.115,355,1.425,380,1.547,385,1.246,444,2.439,483,1.908,484,1.869,503,1.759,504,1.908,529,2.59,687,3.31,723,5.493,801,4.972,1239,5.293,1266,4.584,1271,2.216,1272,2.371,1273,2.147,1274,2.371,1362,4.662,1363,4.045,1364,5.697,1365,6.994,1366,7.913,1367,7.913,1368,4.045,1369,4.577,1370,4.22,1371,4.577,1372,4.577,1373,4.577,1374,5.333,1375,3.695,1376,4.045,1377,4.577,1378,4.577,1379,4.045,1380,5.493,1381,4.045,1382,4.045,1383,4.045,1384,4.379,1385,4.577,1386,2.216,1387,4.379,1388,4.577,1389,2.902,1390,4.273,1391,4.577,1392,3.434,1393,4.577,1394,4.577,1395,3.695,1396,4.045,1397,4.577,1398,4.577,1399,4.577,1400,4.577,1401,4.045,1402,2.457,1403,4.045]],["title/modules/HighlightModule.html",[0,1.07,12,3.145]],["body/modules/HighlightModule.html",[0,1.845,2,2.332,3,2.958,7,0.009,12,6.28,21,5.172,24,3.038,25,2.522,26,2.332,27,0.144,28,0.131,29,0.105,31,3.121,45,0.197,47,0.904,49,2.906,50,1.793,102,4.502,138,4.133,139,4.794,140,3.87,159,1.878,226,0.144,227,0.155,235,0.007,236,0.007,239,2.262,437,3.31,1362,6.197,1404,6.39,1405,6.39,1406,6.39,1407,5.648]],["title/classes/HighlightOptionsDto.html",[227,0.108,1374,3.145]],["body/classes/HighlightOptionsDto.html",[7,0.009,27,0.12,28,0.109,29,0.088,36,0.607,40,0.524,41,0.95,45,0.171,149,3.443,226,0.12,227,0.167,231,2.648,235,0.006,236,0.006,243,0.323,254,1.236,274,1.103,319,1.023,385,1.07,397,1.204,435,1.995,439,1.765,441,2.022,442,2.765,443,2.511,444,2.49,445,1.289,447,3.443,448,3.836,449,3.687,451,2.356,452,3.174,454,2.976,455,2.976,459,2.765,460,3.836,461,3.265,462,2.976,463,2.866,464,2.976,465,4.484,466,3.098,467,3.687,468,2.671,469,2.976,470,3.098,471,2.976,472,3.098,473,3.564,474,3.443,475,2.504,476,2.976,477,2.976,478,3.098,479,3.694,481,3.694,482,2.164,483,2.225,484,1.605,534,1.976,548,3.564,554,2.79,1062,3.558,1298,4.586,1305,4.309,1374,4.848,1408,6.081,1409,5.337]],["title/injectables/HttpLoggerMiddleware.html",[103,3.349,490,0.875]],["body/injectables/HttpLoggerMiddleware.html",[7,0.009,27,0.124,28,0.113,29,0.091,32,1.612,36,0.513,38,1.211,39,0.653,40,0.348,41,0.586,43,1.266,44,3.891,45,0.183,47,0.781,66,4.459,67,4.459,68,4.459,103,5.805,152,3.543,177,5.43,178,2.325,221,6.216,226,0.158,227,0.134,230,1.855,235,0.007,236,0.007,243,0.334,346,2.339,380,1.697,445,1.318,451,1.886,452,2.18,490,1.379,491,1.917,568,4.955,669,4.459,670,4.881,1410,6.839,1411,5.805,1412,5.523,1413,7.818,1414,6.111,1415,8.145,1416,5.523,1417,7.032,1418,5.523,1419,7.032,1420,4.459,1421,4.459,1422,5.523,1423,5.523,1424,4.881,1425,5.523,1426,5.523,1427,7.032,1428,8.145,1429,7.032,1430,4.881,1431,5.523,1432,5.523,1433,5.523,1434,5.523,1435,5.523,1436,5.523]],["title/controllers/InsightController.html",[237,1.171,1437,3.349]],["body/controllers/InsightController.html",[7,0.009,27,0.107,28,0.097,29,0.078,32,1.463,36,0.466,38,1.399,39,0.755,40,0.505,41,0.677,43,1.463,45,0.19,47,0.673,111,4.013,116,1.544,152,1.93,178,1.573,226,0.107,227,0.116,228,1.091,230,1.141,231,1.398,235,0.006,236,0.006,237,1.248,239,1.398,241,2.041,243,0.288,244,2.07,254,0.947,257,3.395,258,3.426,263,2.482,270,4.253,274,1.258,283,2.938,306,3.571,312,2.654,313,3.558,314,4.496,315,3.376,316,3,317,3.178,318,2.041,319,0.912,320,2.232,341,1.93,343,2.654,344,2.817,346,1.367,355,1.839,375,2.011,380,1.044,385,1.542,441,2.426,532,4.114,861,2.882,1269,2.465,1370,3.558,1384,4.496,1386,2.305,1387,4.496,1402,3.426,1437,4.787,1438,4.207,1439,8.02,1440,8.02,1441,4.759,1442,3.842,1443,4.207,1444,5.151,1445,4.759,1446,6.38,1447,4.787,1448,4.759,1449,4.759,1450,4.207,1451,4.496,1452,4.496,1453,4.207,1454,3.571,1455,5.072,1456,4.759,1457,2.762,1458,5.151,1459,6.38,1460,2.762,1461,2.762,1462,3.571,1463,3.842,1464,3.353,1465,4.177,1466,3.018,1467,4.759,1468,3.842,1469,3.842,1470,5.151,1471,4.207,1472,4.207,1473,2.101,1474,4.759]],["title/injectables/InsightMemberService.html",[490,0.875,1475,2.831]],["body/injectables/InsightMemberService.html",[7,0.009,27,0.085,28,0.077,29,0.062,32,1.246,36,0.591,38,1.735,39,0.936,40,0.498,41,0.84,43,1.814,45,0.182,47,0.534,50,1.061,62,0.926,144,4.036,145,2.835,157,3.737,159,1.11,174,1.415,175,1.22,178,2.104,226,0.085,227,0.092,228,1.246,230,1.303,235,0.005,236,0.005,243,0.229,244,2.232,263,2.478,274,1.195,283,2.625,346,2.404,355,1.857,358,5.119,362,2.396,375,2.324,380,1.808,397,1.499,444,2.272,451,1.013,452,1.491,483,2.266,484,1.136,490,1.066,491,1.312,495,2.093,502,1.575,503,1.452,504,1.575,507,3.605,508,2.193,511,3.39,519,2.519,520,2.519,521,3.031,522,2.289,523,2.289,524,2.289,532,1.773,618,2.73,647,3.166,663,2.986,665,2.815,861,2.289,1060,3.446,1295,3.051,1465,4.04,1466,2.396,1472,3.34,1473,1.668,1475,3.446,1476,6.658,1477,3.34,1478,5.626,1479,6.365,1480,5.626,1481,4.036,1482,6.365,1483,5.626,1484,3.779,1485,6.365,1486,3.779,1487,5.435,1488,3.779,1489,3.779,1490,6.787,1491,3.779,1492,3.855,1493,3.779,1494,6.758,1495,7.375,1496,6.961,1497,3.779,1498,3.779,1499,3.779,1500,2.396,1501,3.779,1502,3.779,1503,3.779,1504,3.34,1505,3.779,1506,2.815,1507,2.835,1508,3.779,1509,2.815,1510,3.779,1511,3.779,1512,3.82,1513,3.779,1514,3.779,1515,3.779,1516,3.779,1517,5.435,1518,3.779,1519,3.779,1520,3.34,1521,3.779,1522,3.779,1523,3.779,1524,3.779,1525,3.779,1526,3.779,1527,3.779,1528,3.779]],["title/classes/InsightOptionsDto.html",[227,0.108,1529,3.604]],["body/classes/InsightOptionsDto.html",[7,0.009,27,0.104,28,0.095,29,0.076,36,0.621,40,0.543,41,0.961,45,0.16,226,0.141,227,0.152,231,2.696,235,0.006,236,0.006,243,0.28,254,1.264,274,1.028,319,0.887,397,1.49,435,1.701,439,1.53,441,1.84,442,2.397,443,2.285,444,2.404,445,1.173,447,3.133,448,3.491,449,3.436,451,2.361,452,3.135,454,3.491,455,3.957,458,4.09,459,2.397,460,3.491,461,3.043,462,2.58,463,2.485,464,2.58,465,4.239,466,2.686,467,3.436,468,2.316,469,2.58,470,2.686,471,2.58,472,2.686,473,3.243,474,2.316,475,2.17,476,2.58,477,2.58,478,2.686,479,4.265,480,2.934,481,4.265,482,1.876,483,1.929,484,1.392,485,3.792,529,1.929,548,3.938,827,3.26,1061,2.934,1166,3.26,1193,3.472,1298,4.73,1299,4.73,1300,5,1301,4.959,1302,3.472,1304,3.472,1307,4.697,1312,3.472,1529,5.055,1530,5.959,1531,4.627,1532,4.627,1533,7.096,1534,4.627,1535,4.627,1536,5.055,1537,3.736,1538,3.736,1539,3.472,1540,3.472,1541,3.736,1542,3.736,1543,3.736]],["title/classes/InsightPageOptionsDto.html",[227,0.108,1544,2.976]],["body/classes/InsightPageOptionsDto.html",[7,0.009,27,0.13,28,0.118,29,0.095,36,0.604,40,0.521,41,0.946,45,0.13,226,0.13,227,0.14,231,2.621,235,0.007,236,0.007,243,0.348,254,1.228,274,1.143,439,1.905,441,2.318,442,2.984,443,2.636,444,2.533,445,1.354,447,3.615,448,4.027,449,3.82,451,2.392,452,3.264,454,3.212,455,3.212,459,2.984,460,4.027,461,3.383,462,3.212,463,3.093,464,3.212,465,4.612,466,3.344,467,3.82,468,2.883,469,3.212,470,3.344,471,3.212,472,3.344,473,3.741,474,2.883,475,2.702,476,3.212,477,3.212,478,3.344,483,2.402,484,1.733,1530,4.322,1544,4.815]],["title/injectables/InsightRepoService.html",[490,0.875,1545,2.976]],["body/injectables/InsightRepoService.html",[7,0.009,27,0.128,28,0.116,29,0.093,32,1.644,36,0.573,38,1.721,39,0.928,40,0.494,41,0.833,43,1.644,45,0.191,47,0.805,50,1.598,62,1.396,113,3.61,115,3.056,159,1.673,226,0.128,227,0.138,228,1.644,230,1.365,235,0.007,236,0.007,243,0.344,244,2.173,274,1.256,355,1.644,380,1.572,435,1.881,490,1.405,491,1.976,495,2.477,502,2.373,539,5.222,549,3.61,550,4.596,553,3.174,618,3.074,713,2.756,867,4.011,1476,6.649,1494,6.335,1507,4.271,1545,4.778,1546,5.031,1547,7.846,1548,7.846,1549,5.692,1550,5.692,1551,7.168,1552,5.692,1553,5.692,1554,5.692,1555,5.692,1556,5.692,1557,5.692,1558,4.596,1559,5.031,1560,5.692]],["title/modules/InsightsModule.html",[0,1.07,13,3.145]],["body/modules/InsightsModule.html",[0,1.667,2,1.98,3,2.672,7,0.009,13,6.457,21,4.967,24,2.744,25,2.141,26,1.98,27,0.122,28,0.111,29,0.089,31,2.819,45,0.204,47,0.767,49,2.467,50,1.522,102,3.822,111,3.876,113,4.408,115,2.912,116,1.491,144,4.408,145,4.069,159,1.594,225,2.898,226,0.122,227,0.132,235,0.006,236,0.006,239,2.043,420,3.069,437,2.81,532,3.599,1437,5.756,1464,3.822,1465,5.272,1466,3.439,1475,5.427,1507,5.215,1545,6.055,1561,4.794,1562,4.794,1563,5.424,1564,4.794,1565,5.424,1566,5.756,1567,5.756,1568,6.952,1569,4.069,1570,5.424,1571,4.379]],["title/injectables/InsightsService.html",[490,0.875,1465,2.591]],["body/injectables/InsightsService.html",[7,0.009,27,0.096,28,0.087,29,0.07,32,1.353,36,0.597,38,1.749,39,0.944,40,0.502,41,0.846,43,1.829,45,0.184,47,0.6,50,1.191,62,1.041,111,3.291,116,0.91,159,1.247,175,1.37,178,2.243,226,0.096,227,0.103,228,1.353,230,1.018,235,0.006,236,0.006,243,0.257,244,2.235,263,2.366,274,1.228,283,2.912,346,2.349,355,1.913,358,5.317,375,2.138,380,1.749,397,1.187,441,1.247,444,1.948,483,1.77,484,1.277,490,1.157,491,1.474,495,2.205,502,1.77,503,1.631,504,1.77,507,3.797,508,2.464,511,3.401,521,3.291,522,2.571,523,2.571,524,2.571,532,3.741,618,2.909,647,3.335,663,1.991,665,2.199,712,2.124,742,1.82,832,2.21,866,3.185,867,2.991,872,2.991,893,3.752,906,5.216,1060,3.742,1464,2.991,1465,3.425,1473,1.874,1481,4.301,1492,4.108,1500,2.692,1506,3.057,1509,3.057,1512,3.514,1544,4.887,1572,3.752,1573,6.783,1574,5.477,1575,6.783,1576,6.783,1577,4.245,1578,4.245,1579,5.901,1580,4.245,1581,4.245,1582,4.245,1583,3.427,1584,4.245,1585,4.245,1586,4.245,1587,4.245,1588,4.245,1589,4.245,1590,3.427,1591,4.245,1592,5.901,1593,4.245,1594,4.245,1595,5.901,1596,5.901,1597,4.245,1598,4.245,1599,4.245,1600,4.245,1601,4.245,1602,4.245,1603,4.245,1604,3.185,1605,4.245,1606,4.245]],["title/modules/LogModule.html",[0,1.07,1607,3.349]],["body/modules/LogModule.html",[0,1.812,2,2.263,3,2.905,7,0.009,24,2.983,25,2.447,26,2.263,27,0.14,28,0.127,29,0.102,31,2.514,45,0.199,47,0.877,49,2.82,50,1.74,51,6.68,53,4.133,130,4.133,177,4.133,187,5.005,225,3.15,226,0.14,227,0.151,235,0.007,236,0.007,420,3.336,602,6.514,614,5.899,630,5.48,1607,6.834,1608,5.48,1609,5.48,1610,5.48,1611,6.2,1612,5.48,1613,6.2,1614,6.2]],["title/injectables/LogService.html",[490,0.875,614,2.976]],["body/injectables/LogService.html",[7,0.009,27,0.135,28,0.123,29,0.099,32,1.7,36,0.541,38,1.626,39,0.877,40,0.467,41,0.787,43,1.378,45,0.194,47,0.85,50,1.687,62,1.473,130,4.006,157,3.227,187,4.852,226,0.135,227,0.146,228,1.7,230,1.441,235,0.007,236,0.007,243,0.364,244,2.016,346,1.726,375,1.894,380,1.318,490,1.454,491,2.086,495,2.525,502,2.505,565,6.299,609,5.987,614,4.943,618,2.577,1612,5.312,1615,5.312,1616,8.041,1617,6.01,1618,6.01,1619,7.415,1620,6.01,1621,6.01,1622,4.235,1623,6.01,1624,6.01,1625,7.415,1626,6.01,1627,6.01,1628,4.235,1629,6.01]],["title/classes/PageDto.html",[227,0.108,503,1.716]],["body/classes/PageDto.html",[7,0.009,27,0.13,28,0.118,29,0.095,36,0.576,38,1.266,39,0.683,40,0.555,41,0.612,45,0.186,157,3.882,226,0.13,227,0.192,228,1.658,231,2.555,235,0.007,236,0.007,243,0.349,254,1.073,319,1.106,439,1.908,441,1.696,445,1.355,482,2.34,503,2.779,507,4.621,508,3.349,540,3.847,542,5.263,545,3.952,546,4.659,1628,6.127,1630,5.101,1631,6.217,1632,5.771,1633,5.682,1634,7.23,1635,5.771,1636,5.771,1637,5.771,1638,5.771,1639,5.771,1640,5.771,1641,7.896,1642,5.771,1643,5.771,1644,5.771]],["title/classes/PageMetaDto.html",[227,0.108,507,2.312]],["body/classes/PageMetaDto.html",[7,0.009,27,0.107,28,0.097,29,0.078,36,0.615,38,1.041,39,0.562,40,0.53,41,0.504,45,0.143,157,3.419,174,2.385,226,0.107,227,0.115,228,1.46,231,2.688,235,0.006,236,0.006,243,0.287,254,1.225,274,1.305,319,0.91,385,1.654,439,1.569,441,2.617,444,1.363,445,1.193,447,3.597,461,3.294,507,3.299,521,4.467,530,3.979,531,4.128,534,2.557,545,4.217,735,3,827,4.487,839,5.412,840,6.789,1151,4.778,1414,4.778,1631,3.344,1645,6.425,1646,4.195,1647,7.187,1648,7.187,1649,7.187,1650,4.746,1651,5.763,1652,6.368,1653,6.368,1654,4.746,1655,6.789,1656,6.789,1657,4.746,1658,6.368,1659,4.746,1660,4.746,1661,5.629,1662,4.746,1663,4.746,1664,6.353,1665,4.746,1666,5.629,1667,4.746,1668,4.746,1669,4.746,1670,4.746,1671,4.746,1672,4.746]],["title/interfaces/PageMetaParameters.html",[1651,3.349,1673,3.349]],["body/interfaces/PageMetaParameters.html",[7,0.009,27,0.152,28,0.138,29,0.111,40,0.501,45,0.152,226,0.152,235,0.007,236,0.007,243,0.408,274,1.225,441,1.984,444,2.636,445,1.491,484,2.03,521,4.868,1631,4.757,1645,5.065,1651,5.967,1673,5.065,1674,6.751,1675,5.967]],["title/classes/PageOptionsDto.html",[227,0.108,444,1.282]],["body/classes/PageOptionsDto.html",[7,0.009,27,0.109,28,0.1,29,0.08,36,0.59,40,0.542,41,0.914,45,0.175,226,0.109,227,0.177,231,2.627,235,0.006,236,0.006,243,0.294,254,1.152,274,1.276,319,0.932,380,1.066,385,0.975,439,1.608,441,2.138,442,2.519,444,1.859,445,1.213,447,3.641,448,4.057,449,3.911,451,2.398,452,3.062,454,2.712,455,3.609,459,3.769,460,3.609,461,3.739,462,3.609,463,3.476,464,2.712,467,4.105,468,3.641,469,2.712,471,2.712,473,4.184,474,2.434,475,3.036,476,2.712,477,2.712,479,4.337,480,3.084,481,4.337,482,1.972,485,2.945,506,3.649,546,3.926,735,1.821,1539,4.856,1645,6.232,1664,4.298,1666,4.298,1676,5.721,1677,6.431,1678,4.863,1679,4.863,1680,4.863,1681,4.298,1682,4.863,1683,4.863,1684,4.298,1685,7.757,1686,4.863,1687,4.863,1688,4.863,1689,6.473,1690,4.863,1691,4.863,1692,4.863,1693,4.298]],["title/controllers/PullRequestController.html",[237,1.171,1694,3.349]],["body/controllers/PullRequestController.html",[7,0.009,27,0.1,28,0.091,29,0.073,32,1.4,36,0.508,38,1.527,39,0.824,40,0.51,41,0.739,43,1.596,45,0.197,47,0.631,132,4.533,133,4.535,135,4.75,137,3.143,151,3.872,152,3.18,153,3.143,226,0.1,227,0.108,228,1.023,230,1.464,231,1.794,235,0.006,236,0.006,237,1.17,239,1.311,241,1.913,243,0.27,244,2.147,254,1.034,257,3.575,263,2.614,316,3.121,317,3.306,318,1.913,319,0.855,341,1.809,344,3.074,380,1.527,441,1.311,444,2.512,483,1.859,484,2.094,503,1.714,504,1.859,687,3.512,725,5.228,747,3.056,861,3.698,917,4.346,922,2.973,1266,4.535,1271,2.16,1272,2.31,1273,2.092,1274,2.31,1296,4.992,1370,3.405,1375,3.601,1395,3.601,1466,2.828,1694,4.581,1695,3.942,1696,4.46,1697,7.842,1698,7.842,1699,7.842,1700,4.46,1701,4.46,1702,4.581,1703,6.106,1704,6.106,1705,4.46,1706,3.143,1707,4.46,1708,4.46,1709,6.106,1710,4.46,1711,4.46,1712,5.276,1713,3.942,1714,6.106,1715,4.581,1716,3.872,1717,4.46,1718,4.581,1719,4.415,1720,3.601,1721,3.942,1722,4.071,1723,3.942,1724,4.46,1725,4.46,1726,4.46,1727,5.397,1728,4.46,1729,3.942,1730,4.46,1731,4.46,1732,4.46,1733,4.46,1734,4.46,1735,4.46]],["title/injectables/PullRequestInsightsService.html",[490,0.875,1722,2.976]],["body/injectables/PullRequestInsightsService.html",[7,0.009,27,0.107,28,0.097,29,0.078,32,1.463,36,0.561,38,1.686,39,0.852,40,0.539,41,0.764,43,1.65,45,0.186,47,0.673,50,1.336,62,1.167,133,4.857,151,4.046,152,3.347,153,3.353,159,1.398,178,1.573,206,5.941,226,0.107,227,0.116,228,1.463,230,1.53,235,0.006,236,0.006,243,0.288,244,1.6,263,1.536,274,1.114,346,2.208,375,1.5,380,1.399,397,1.117,451,1.711,452,2.518,475,2.993,484,1.431,490,1.251,491,1.652,495,2.313,502,1.984,511,2.101,529,1.984,647,3.498,663,2.993,716,4.288,917,4.654,921,3.842,922,5.897,924,4.207,1296,5.503,1299,3.173,1473,2.101,1492,4.658,1506,3.305,1512,3.728,1633,3.173,1706,3.353,1716,3.018,1718,3.571,1722,4.253,1723,4.207,1736,4.207,1737,6.38,1738,7.198,1739,4.759,1740,5.107,1741,4.759,1742,6.38,1743,4.759,1744,4.759,1745,4.759,1746,4.759,1747,4.759,1748,5.639,1749,3.842,1750,3.353,1751,3.571,1752,4.759,1753,4.759,1754,4.759,1755,4.759,1756,4.207,1757,4.759,1758,4.759,1759,3.842,1760,4.759,1761,4.759,1762,4.759,1763,4.759,1764,4.759,1765,4.759,1766,4.759,1767,4.759,1768,4.759,1769,4.207,1770,4.207,1771,4.759]],["title/modules/PullRequestModule.html",[0,1.07,14,2.976]],["body/modules/PullRequestModule.html",[0,1.735,2,2.11,3,2.782,7,0.009,14,6.079,24,2.857,25,2.282,26,2.11,27,0.13,28,0.118,29,0.095,31,2.935,45,0.201,47,0.817,49,2.629,50,1.623,132,4.243,133,3.501,135,4.384,137,4.073,151,4.59,152,2.935,153,4.073,159,1.699,225,3.017,226,0.13,227,0.14,235,0.007,236,0.007,239,2.127,420,3.195,437,2.994,917,3.355,1466,3.666,1694,5.928,1718,5.43,1719,5.81,1720,4.667,1722,5.8,1750,4.073,1772,5.11,1773,5.11,1774,5.11,1775,5.11,1776,5.8,1777,5.781,1778,5.11,1779,5.781]],["title/classes/PullRequestPageOptionsDto.html",[227,0.108,1712,3.145]],["body/classes/PullRequestPageOptionsDto.html",[7,0.009,27,0.088,28,0.08,29,0.064,36,0.622,40,0.551,41,0.962,45,0.159,152,3.31,226,0.146,227,0.135,231,2.705,235,0.005,236,0.005,243,0.236,254,1.266,274,0.938,319,0.747,351,1.978,352,2.317,397,1.531,435,1.553,439,1.289,441,2.476,442,2.019,443,2.028,444,2.293,445,1.042,446,4.859,447,2.781,448,3.099,449,3.136,451,2.287,452,2.946,454,3.937,455,4.453,459,2.019,460,3.099,461,2.777,462,2.174,463,2.093,464,2.174,465,3.937,466,2.262,467,3.136,468,1.951,469,2.174,470,2.262,471,2.174,472,2.262,473,2.879,474,1.951,475,1.828,476,2.174,477,2.174,478,2.262,479,4.383,480,2.472,481,4.383,482,1.581,483,1.625,484,1.671,485,4.52,488,4.317,534,2.228,548,3.866,554,2.863,917,4.738,956,4.487,965,4.487,1050,4.487,1062,2.599,1141,4.563,1212,3.445,1298,4.317,1299,4.317,1300,4.563,1301,4.7,1302,2.924,1304,4.859,1305,3.147,1307,2.924,1308,3.445,1311,2.599,1312,2.924,1681,3.445,1712,3.916,1780,6.591,1781,3.898,1782,3.898,1783,7.058,1784,6.476,1785,3.898,1786,3.445,1787,3.898,1788,3.898,1789,6.858,1790,3.898,1791,3.898,1792,3.898,1793,3.898,1794,3.147,1795,3.898]],["title/injectables/PullRequestService.html",[490,0.875,1719,2.831]],["body/injectables/PullRequestService.html",[7,0.009,27,0.101,28,0.092,29,0.074,32,1.404,36,0.573,38,1.645,39,0.887,40,0.472,41,0.796,43,1.72,45,0.197,47,0.633,50,1.257,62,1.098,133,4.911,135,2.712,137,3.156,152,1.816,159,1.316,175,1.445,178,2.024,226,0.101,227,0.109,228,1.404,230,1.468,235,0.006,236,0.006,243,0.271,244,2.119,263,2.535,346,2.49,375,1.93,380,1.343,397,1.221,441,1.316,444,2.566,449,3.803,467,2.169,468,2.241,475,2.872,483,2.552,484,2.098,488,4.651,490,1.201,491,1.555,493,4.651,495,2.256,498,2.985,502,1.867,503,1.721,504,1.867,505,3.616,506,3.36,507,3.885,508,2.599,511,3.579,519,2.985,520,2.985,521,3.414,522,2.712,523,2.712,524,2.712,529,2.552,647,3.411,663,3.273,917,4.706,922,4.082,1301,2.712,1311,2.985,1509,3.172,1712,4.916,1716,2.84,1718,3.36,1719,3.883,1721,3.958,1740,4.542,1750,3.156,1751,3.36,1756,5.412,1759,3.616,1796,3.958,1797,6.977,1798,5.412,1799,4.478,1800,6.167,1801,4.478,1802,6.123,1803,4.478,1804,4.478,1805,4.478,1806,4.478,1807,3.958,1808,4.478,1809,4.478,1810,4.478,1811,4.478,1812,5.412,1813,6.123,1814,4.478,1815,4.478,1816,4.478,1817,4.478,1818,4.478,1819,4.478,1820,4.478,1821,3.958]],["title/controllers/RepoContributionsController.html",[237,1.171,432,3.349]],["body/controllers/RepoContributionsController.html",[7,0.009,27,0.106,28,0.096,29,0.077,32,1.452,36,0.462,38,1.389,39,0.749,40,0.482,41,0.672,43,1.452,45,0.192,47,0.665,86,4.153,226,0.106,227,0.114,228,1.079,230,1.518,231,1.861,235,0.006,236,0.006,237,1.234,239,1.383,241,2.018,243,0.285,244,2.063,254,0.94,257,3.379,263,2.471,274,1.037,315,3.357,316,2.983,317,3.159,318,2.018,319,0.902,341,2.568,344,2.795,346,1.818,355,1.755,375,1.996,380,1.389,385,1.27,397,1.44,430,4.771,432,4.751,433,3.799,434,4.159,435,2.157,438,5.924,441,1.383,444,2.363,484,1.415,503,1.809,504,1.962,509,4.159,529,1.962,687,3.357,732,3.53,782,5.743,1265,5.103,1269,3.965,1271,2.279,1272,2.437,1273,2.207,1274,2.437,1370,3.531,1386,2.279,1402,2.527,1512,3.28,1702,4.751,1822,6.325,1823,4.159,1824,7.989,1825,7.989,1826,4.706,1827,4.706,1828,4.636,1829,7.655,1830,6.332,1831,6.332,1832,4.706,1833,4.706,1834,4.706,1835,4.706,1836,3.843,1837,3.316,1838,3.137,1839,3.137,1840,4.706,1841,6.332,1842,3.137,1843,6.332,1844,6.332,1845,4.706,1846,3.137,1847,3.137,1848,3.137]],["title/controllers/RepoController.html",[237,1.171,1849,3.349]],["body/controllers/RepoController.html",[7,0.009,27,0.098,28,0.089,29,0.071,32,1.372,36,0.54,38,1.622,39,0.875,40,0.528,41,0.785,43,1.696,45,0.189,47,0.613,82,3.336,226,0.098,227,0.105,228,0.994,230,1.039,231,1.273,235,0.006,236,0.006,237,1.136,239,1.273,241,1.858,243,0.262,244,2.2,254,1.098,257,3.701,263,2.706,274,0.994,315,3.217,316,3.236,317,3.427,318,1.858,319,0.831,341,1.757,344,3.265,355,1.572,380,1.622,385,1.2,397,1.405,435,2.04,441,1.273,444,2.124,484,1.8,493,5.175,495,2.224,498,2.889,503,1.665,504,1.806,529,3.236,687,3.217,1266,4.48,1269,3.831,1271,2.098,1272,2.244,1273,2.032,1274,2.244,1370,4.675,1375,3.498,1386,2.098,1395,3.498,1402,2.327,1442,3.498,1443,3.83,1469,3.498,1481,4.922,1500,2.748,1569,3.251,1713,3.83,1715,4.491,1716,3.796,1729,3.83,1828,4.48,1836,3.682,1838,2.889,1839,2.889,1842,2.889,1846,2.889,1847,2.889,1848,2.889,1849,4.491,1850,3.83,1851,7.762,1852,6.861,1853,4.124,1854,4.218,1855,4.333,1856,4.333,1857,5.212,1858,4.333,1859,5.986,1860,4.333,1861,3.83,1862,4.333,1863,4.333,1864,4.333,1865,3.498,1866,5.291,1867,3.053,1868,4.333,1869,4.218,1870,3.053,1871,4.333]],["title/modules/RepoFilterModule.html",[0,1.07,1776,2.976]],["body/modules/RepoFilterModule.html",[0,1.873,2,2.392,3,3.003,7,0.009,24,3.084,25,2.586,26,2.392,27,0.147,28,0.134,29,0.108,45,0.176,47,0.927,225,3.257,226,0.147,227,0.159,235,0.007,236,0.007,420,3.45,435,1.571,1740,5.637,1751,4.916,1776,6.04,1872,5.792,1873,5.792,1874,5.792,1875,5.29,1876,6.553]],["title/injectables/RepoFilterService.html",[490,0.875,1740,2.704]],["body/injectables/RepoFilterService.html",[7,0.009,27,0.104,28,0.095,29,0.076,32,1.438,36,0.458,38,1.558,39,0.742,40,0.447,41,0.666,43,1.438,44,3.27,45,0.171,47,0.656,62,1.138,206,5.007,226,0.104,227,0.113,235,0.006,236,0.006,243,0.43,274,0.909,346,1.332,380,1.018,397,1.244,435,1.704,447,2.322,449,3.85,451,1.682,452,2.476,463,3.815,475,2.177,484,1.886,490,1.23,491,1.611,511,2.769,529,1.934,687,2.942,716,3.962,739,1.934,742,2.69,807,3.481,922,3.093,944,4.101,946,3.481,1061,2.942,1296,5.074,1299,4.182,1300,3.27,1301,2.81,1311,3.093,1386,3.968,1492,4.61,1604,3.481,1628,5.007,1633,3.093,1715,4.706,1716,5.535,1740,3.799,1748,6.281,1749,3.746,1769,4.101,1770,4.101,1875,5.737,1877,4.101,1878,7.106,1879,7.106,1880,4.64,1881,4.64,1882,7.611,1883,5.064,1884,4.64,1885,4.64,1886,6.727,1887,6.273,1888,4.64,1889,6.281,1890,4.64,1891,4.64,1892,4.64,1893,4.64,1894,6.273,1895,4.64,1896,4.64,1897,7.106,1898,4.64,1899,4.64,1900,4.64,1901,6.273,1902,6.273,1903,4.64,1904,4.64,1905,6.273,1906,4.64,1907,4.64,1908,4.64,1909,4.64,1910,4.64,1911,4.64,1912,4.64]],["title/classes/RepoInfo.html",[227,0.108,539,2.831]],["body/classes/RepoInfo.html",[7,0.009,27,0.138,28,0.125,29,0.1,36,0.547,39,0.887,40,0.555,45,0.169,226,0.138,227,0.182,235,0.007,236,0.007,243,0.37,254,1.113,274,1.224,319,1.173,355,1.988,385,1.504,397,1.479,435,2.026,439,2.023,445,1.405,482,2.482,531,3.753,534,2.426,539,4.755,545,4.057,548,3.884,554,3.04,555,5.625,556,2.964,898,4.541,1913,5.712,1914,5.409,1915,7.165,1916,6.12,1917,6.12,1918,6.12,1919,6.12,1920,7.498,1921,6.12]],["title/modules/RepoModule.html",[0,1.07,15,2.489]],["body/modules/RepoModule.html",[0,1.798,2,2.234,3,2.882,7,0.009,15,5.069,24,2.959,25,2.415,26,2.234,27,0.138,28,0.125,29,0.1,31,3.04,45,0.199,47,0.865,49,2.784,50,1.718,82,2.482,159,1.798,225,3.126,226,0.138,227,0.149,235,0.007,236,0.007,239,2.203,420,3.31,1569,4.592,1750,4.312,1776,5.881,1778,5.409,1836,4.956,1849,6.082,1865,4.941,1922,5.409,1923,6.12,1924,5.409,1925,5.409,1926,6.12,1927,6.12,1928,6.12]],["title/classes/RepoPageOptionsDto.html",[227,0.108,1853,2.489]],["body/classes/RepoPageOptionsDto.html",[7,0.009,27,0.108,28,0.098,29,0.079,36,0.587,39,0.759,40,0.506,41,0.932,45,0.163,226,0.163,227,0.156,231,2.602,235,0.006,236,0.006,243,0.29,254,1.193,274,1.047,319,0.919,351,2.282,352,2.673,439,1.585,441,2.266,442,2.483,443,2.34,444,2.426,445,1.202,446,5.419,447,3.209,448,3.575,449,3.498,451,2.375,452,3.173,454,3.575,455,4.028,456,5.952,459,2.483,460,3.575,461,3.098,462,2.673,463,2.574,464,2.673,465,4.301,466,2.782,467,3.498,468,2.399,469,2.673,470,2.782,471,2.673,472,2.782,473,3.321,474,2.399,475,2.248,476,2.673,477,2.673,478,2.782,479,3.442,480,3.039,481,3.442,482,1.944,483,1.998,484,1.442,485,4.375,529,1.998,827,3.377,1061,3.039,1166,3.377,1193,3.596,1536,5.176,1537,3.87,1538,3.87,1539,3.596,1540,3.596,1541,3.87,1542,3.87,1543,3.87,1853,3.575,1913,4.517,1929,5.832,1930,4.237,1931,4.793,1932,4.237,1933,5.667,1934,4.81,1935,5.667,1936,5.667,1937,5.176,1938,4.81,1939,5.176,1940,5.176,1941,4.81,1942,4.793]],["title/classes/RepoSearchOptionsDto.html",[227,0.108,1857,3.145]],["body/classes/RepoSearchOptionsDto.html",[7,0.009,27,0.103,28,0.094,29,0.075,36,0.629,40,0.548,41,0.967,45,0.17,226,0.103,227,0.151,231,2.707,235,0.006,236,0.006,243,0.277,254,1.279,274,1.023,319,0.879,397,1.487,435,1.815,439,1.515,441,2.075,442,2.374,443,2.27,444,2.174,445,1.166,446,4.666,447,3.113,448,3.468,449,3.419,451,2.375,452,3.125,454,3.937,455,4.222,456,4.975,459,2.374,460,3.468,461,3.028,462,2.555,463,2.461,464,2.555,465,4.414,466,2.66,467,3.419,468,2.294,469,2.555,470,2.66,471,2.555,472,2.66,473,3.222,474,2.294,475,2.15,476,2.555,477,2.555,478,2.66,479,4.251,480,2.906,481,4.251,482,1.858,484,1.871,485,2.776,548,3.922,1298,4.707,1299,4.707,1300,4.975,1301,4.945,1302,3.438,1303,4.051,1304,3.438,1307,4.666,1309,4.051,1311,3.055,1312,3.438,1786,4.051,1853,4.222,1857,4.383,1867,5.578,1913,5.578,1929,3.7,1930,4.051,1943,4.583,1944,4.583,1945,4.583]],["title/injectables/RepoService.html",[490,0.875,1836,2.397]],["body/injectables/RepoService.html",[7,0.009,27,0.073,28,0.066,29,0.053,32,1.112,36,0.566,38,1.699,39,0.938,40,0.488,41,0.8,43,1.728,45,0.184,47,0.458,50,0.908,62,0.793,82,1.312,86,2.815,88,1.878,90,1.878,92,1.878,94,1.878,116,0.694,159,0.951,175,1.566,178,2.402,204,4.365,226,0.073,227,0.079,228,1.112,230,1.66,235,0.005,236,0.005,243,0.196,244,2.054,263,2.432,274,1.092,283,2.586,346,2.515,355,1.482,375,2.182,380,1.652,397,1.516,435,1.66,441,0.951,444,2.087,449,3.649,451,1.301,452,1.914,456,2.281,467,1.567,468,2.428,473,2.513,475,2.729,483,1.349,484,1.75,490,0.951,491,1.124,493,3.879,495,1.943,498,2.158,501,3.234,502,1.349,503,1.244,504,1.349,505,2.613,506,2.428,507,3.903,508,1.878,511,3.499,513,4.288,514,4.288,516,2.861,517,2.861,519,3.234,520,3.234,521,3.603,522,1.96,523,2.938,524,2.938,554,1.312,647,2.939,663,2.729,665,2.513,710,1.492,716,2.705,735,1.212,739,2.022,742,1.388,782,3.639,790,2.861,922,3.879,946,2.428,1080,2.861,1095,2.861,1114,2.861,1129,2.861,1301,1.96,1311,2.158,1473,2.142,1481,3.076,1492,3.914,1500,2.052,1506,3.014,1509,2.513,1512,3.764,1558,2.613,1633,2.158,1716,2.052,1740,3.914,1749,2.613,1750,2.281,1751,2.428,1759,2.613,1798,5.142,1800,5.142,1807,2.861,1812,2.861,1821,2.861,1828,2.938,1836,2.605,1852,5.142,1853,3.603,1857,4.553,1861,2.861,1865,2.613,1866,4.288,1867,2.281,1929,2.613,1934,4.365,1937,2.613,1938,2.428,1939,2.613,1940,2.613,1941,2.428,1946,2.861,1947,5.818,1948,5.818,1949,3.237,1950,3.237,1951,4.851,1952,3.237,1953,3.237,1954,3.237,1955,5.818,1956,3.237,1957,3.237,1958,3.237,1959,3.237,1960,3.237,1961,5.818,1962,3.237,1963,5.142,1964,3.237,1965,4.851,1966,3.237,1967,4.851,1968,3.237,1969,3.237,1970,3.237,1971,3.237,1972,3.237,1973,3.237,1974,3.237,1975,3.237,1976,3.237,1977,3.237,1978,3.237,1979,6.922,1980,6.922,1981,2.861,1982,2.613,1983,2.861,1984,3.237,1985,3.237,1986,3.237,1987,3.237,1988,3.237,1989,3.237,1990,3.237,1991,3.237,1992,3.237,1993,3.237,1994,3.237,1995,3.237,1996,3.237,1997,3.237,1998,3.237,1999,3.237,2000,3.237,2001,3.237,2002,3.237,2003,3.237,2004,3.237,2005,3.237,2006,3.237,2007,3.237,2008,3.237,2009,3.237,2010,2.861,2011,2.861,2012,3.237]],["title/controllers/RepoStarController.html",[237,1.171,2013,3.349]],["body/controllers/RepoStarController.html",[7,0.009,27,0.072,28,0.065,29,0.052,32,1.1,36,0.502,38,1.509,39,0.814,40,0.532,41,0.73,43,1.919,45,0.184,47,0.451,82,2.339,83,1.713,90,3.993,91,2.393,116,1.029,226,0.072,227,0.077,228,0.732,230,1.15,231,1.41,235,0.004,236,0.004,237,0.837,239,0.937,241,1.368,243,0.193,244,2.136,254,1.021,257,3.55,258,2.576,263,2.595,274,1.278,283,3.194,312,1.779,313,4.03,315,3.227,316,3.013,317,3.191,318,1.368,319,0.612,320,1.496,341,1.946,343,3.836,344,3.037,346,1.842,355,1.769,375,2.022,380,1.509,385,1.659,397,1.448,435,2.208,441,0.937,444,1.378,484,0.959,503,1.226,504,1.33,529,2.404,549,2.023,687,2.251,1082,6.714,1266,2.906,1269,3.323,1271,1.545,1272,1.652,1273,1.496,1274,1.652,1370,4.484,1386,1.545,1402,2.576,1451,4.521,1457,1.852,1460,1.852,1461,1.852,1512,3.323,1828,4.673,1836,3.097,1837,2.248,1838,2.127,1839,2.127,1842,3.199,1846,3.199,1847,3.199,1848,3.199,1853,3.577,1854,2.248,1869,2.248,1870,2.248,1934,2.393,2013,3.6,2014,6.388,2015,2.82,2016,6.879,2017,6.879,2018,6.879,2019,6.879,2020,6.879,2021,3.19,2022,3.19,2023,5.18,2024,6.416,2025,6.416,2026,4.521,2027,3.997,2028,4.277,2029,3.19,2030,3.19,2031,3.19,2032,3.19,2033,3.19,2034,3.19,2035,5.835,2036,3.19,2037,3.19,2038,3.19,2039,4.277,2040,3.19,2041,3.19,2042,3.19,2043,3.19,2044,2.248,2045,4.586,2046,3.845,2047,2.82,2048,2.393,2049,3.19,2050,3.19,2051,4.799,2052,3.19,2053,3.19,2054,4.799,2055,3.19]],["title/controllers/RepoStargazeController.html",[237,1.171,2056,3.349]],["body/controllers/RepoStargazeController.html",[7,0.009,27,0.073,28,0.066,29,0.053,32,1.11,36,0.505,38,1.516,39,0.818,40,0.533,41,0.734,43,1.923,45,0.184,47,0.456,82,2.355,83,1.733,94,4.012,95,2.421,116,1.038,226,0.073,227,0.078,228,0.74,230,1.16,231,1.422,235,0.005,236,0.005,237,0.846,239,0.948,241,1.384,243,0.195,244,2.141,254,1.026,257,3.56,258,2.599,263,2.603,274,1.28,283,3.198,312,1.8,313,4.048,315,3.243,316,3.026,317,3.205,318,1.384,319,0.619,320,1.514,341,1.963,343,3.855,344,3.052,346,1.853,355,1.775,375,2.034,380,1.516,385,1.663,397,1.452,435,2.219,441,0.948,444,1.39,484,0.971,503,1.24,504,1.345,529,2.421,549,2.046,687,2.27,1064,4.689,1251,6.837,1266,2.932,1269,3.342,1271,1.563,1272,1.672,1273,1.514,1274,1.672,1370,4.497,1386,1.563,1402,2.599,1457,1.873,1460,1.873,1461,1.873,1512,3.342,1828,4.689,1836,3.118,1837,2.274,1838,2.151,1839,2.151,1842,3.227,1846,3.227,1847,3.227,1848,3.227,1853,3.598,1854,2.274,1869,2.274,1870,2.274,1983,2.853,2026,4.547,2027,4.01,2044,2.274,2045,4.609,2048,2.421,2056,3.631,2057,6.416,2058,2.853,2059,6.914,2060,6.914,2061,6.914,2062,6.914,2063,6.914,2064,3.227,2065,3.227,2066,4.84,2067,6.453,2068,5.704,2069,3.227,2070,3.227,2071,3.227,2072,3.227,2073,3.227,2074,3.227,2075,5.446,2076,3.227,2077,3.227,2078,3.227,2079,4.84,2080,3.227,2081,3.227,2082,3.227,2083,3.227,2084,3.872,2085,2.853,2086,3.227,2087,3.227,2088,3.908,2089,4.84,2090,3.227,2091,3.227,2092,4.278,2093,4.84,2094,3.227]],["title/controllers/RepoSubmitController.html",[237,1.171,2095,3.349]],["body/controllers/RepoSubmitController.html",[7,0.009,27,0.072,28,0.065,29,0.052,32,1.1,36,0.502,38,1.509,39,0.814,40,0.532,41,0.73,43,1.919,45,0.184,47,0.451,82,2.339,83,1.713,92,3.993,93,2.393,116,1.029,226,0.072,227,0.077,228,0.732,230,1.15,231,1.41,235,0.004,236,0.004,237,0.837,239,0.937,241,1.368,243,0.193,244,2.136,254,1.021,257,3.55,258,2.576,263,2.595,274,1.278,283,3.194,312,1.779,313,4.03,315,3.227,316,3.013,317,3.191,318,1.368,319,0.612,320,1.496,341,1.946,343,3.836,344,3.037,346,1.842,355,1.769,375,2.022,380,1.509,385,1.659,397,1.448,435,2.208,441,0.937,444,1.378,484,0.959,503,1.226,504,1.33,529,2.404,549,2.023,687,2.251,1098,7.203,1266,2.906,1269,3.323,1271,1.545,1272,1.652,1273,1.496,1274,1.652,1370,4.484,1386,1.545,1402,2.576,1451,4.521,1457,1.852,1460,1.852,1461,1.852,1512,3.323,1828,4.673,1836,3.097,1837,2.248,1838,2.127,1839,2.127,1842,3.199,1846,3.199,1847,3.199,1848,3.199,1853,3.577,1854,2.248,1869,2.248,1870,2.248,1982,2.576,2023,5.18,2026,4.521,2027,3.997,2028,4.277,2039,4.277,2044,2.248,2045,4.586,2048,2.393,2095,3.6,2096,6.388,2097,2.82,2098,6.879,2099,6.879,2100,6.879,2101,6.879,2102,6.879,2103,3.19,2104,3.19,2105,6.416,2106,6.416,2107,3.19,2108,3.19,2109,3.19,2110,3.19,2111,3.19,2112,3.19,2113,6.388,2114,3.19,2115,3.19,2116,3.19,2117,3.19,2118,3.19,2119,3.19,2120,3.19,2121,3.845,2122,2.82,2123,2.576,2124,3.19,2125,3.19,2126,4.799,2127,3.19,2128,3.19,2129,4.799,2130,3.19]],["title/controllers/RepoVoteController.html",[237,1.171,2131,3.349]],["body/controllers/RepoVoteController.html",[7,0.009,27,0.072,28,0.065,29,0.052,32,1.1,36,0.502,38,1.509,39,0.814,40,0.532,41,0.73,43,1.919,45,0.184,47,0.451,82,2.339,83,1.713,88,3.993,89,2.393,116,1.029,226,0.072,227,0.077,228,0.732,230,1.15,231,1.41,235,0.004,236,0.004,237,0.837,239,0.937,241,1.368,243,0.193,244,2.136,254,1.021,257,3.55,258,2.576,263,2.595,274,1.278,283,3.194,312,1.779,313,4.03,315,3.227,316,3.013,317,3.191,318,1.368,319,0.612,320,1.496,341,1.946,343,3.836,344,3.037,346,1.842,355,1.769,375,2.022,380,1.509,385,1.659,397,1.448,435,2.208,441,0.937,444,1.378,484,0.959,503,1.226,504,1.33,529,2.404,549,2.023,687,2.251,1116,6.714,1266,2.906,1269,3.323,1271,1.545,1272,1.652,1273,1.496,1274,1.652,1370,4.484,1386,1.545,1402,2.576,1451,4.521,1457,1.852,1460,1.852,1461,1.852,1512,3.323,1828,4.673,1836,3.097,1837,2.248,1838,2.127,1839,2.127,1842,3.199,1846,3.199,1847,3.199,1848,3.199,1853,3.577,1854,2.248,1869,2.248,1870,2.248,1981,2.82,2023,5.18,2026,4.521,2027,3.997,2028,4.277,2039,4.277,2044,2.248,2045,4.586,2048,2.393,2131,3.6,2132,6.388,2133,2.82,2134,6.879,2135,6.879,2136,6.879,2137,6.879,2138,6.879,2139,3.19,2140,3.19,2141,6.416,2142,6.416,2143,3.19,2144,3.19,2145,3.19,2146,3.19,2147,3.19,2148,3.19,2149,5.835,2150,3.19,2151,3.19,2152,3.19,2153,3.19,2154,3.19,2155,3.19,2156,3.19,2157,3.845,2158,2.82,2159,3.19,2160,3.19,2161,4.799,2162,3.19,2163,3.19,2164,4.799,2165,3.19]],["title/modules/StarModule.html",[0,1.07,16,3.145]],["body/modules/StarModule.html",[0,1.778,2,2.193,3,2.85,7,0.009,15,4.898,16,6.386,24,2.926,25,2.372,26,2.193,27,0.135,28,0.123,29,0.099,31,3.007,45,0.2,47,0.85,49,2.734,50,1.687,69,4.006,82,3.007,83,3.227,90,4.303,91,4.509,159,1.766,225,3.091,226,0.135,227,0.146,235,0.007,236,0.007,239,2.179,420,3.273,435,1.441,437,3.113,2013,6.033,2046,6.139,2047,5.312,2166,5.312,2167,5.312,2168,6.01,2169,5.312,2170,6.01,2171,6.01]],["title/injectables/StarService.html",[490,0.875,2046,2.976]],["body/injectables/StarService.html",[7,0.009,27,0.11,28,0.1,29,0.081,32,1.493,36,0.568,38,1.603,39,0.865,40,0.46,41,0.775,43,1.676,45,0.175,47,0.694,50,1.377,62,1.203,90,2.847,91,3.681,159,1.442,178,2.416,226,0.11,227,0.119,228,1.493,230,1.176,235,0.006,236,0.006,243,0.297,244,2.088,263,2.512,274,1.297,283,3.164,346,2.326,375,2.453,380,1.707,435,1.561,490,1.277,491,1.703,495,2.341,499,6.154,502,2.045,511,3.437,647,3.541,663,3.054,665,3.373,713,2.376,832,1.837,1082,3.681,1473,3.226,1506,2.541,1509,3.373,2027,3.373,2028,3.271,2035,5.257,2046,4.341,2172,4.336,2173,7.308,2174,7.308,2175,4.906,2176,4.906,2177,6.511,2178,4.906,2179,4.906,2180,4.906,2181,4.906,2182,4.906,2183,2.971,2184,4.906,2185,4.906,2186,3.271,2187,6.511,2188,6.511,2189,8.327,2190,6.511,2191,4.129,2192,4.906,2193,4.906,2194,3.457,2195,4.906]],["title/modules/StargazeModule.html",[0,1.07,17,3.145]],["body/modules/StargazeModule.html",[0,1.778,2,2.193,3,2.85,7,0.009,15,4.898,17,6.386,24,2.926,25,2.372,26,2.193,27,0.135,28,0.123,29,0.099,31,3.007,45,0.2,47,0.85,49,2.734,50,1.687,69,4.006,82,3.007,83,3.227,94,4.303,95,4.509,159,1.766,225,3.091,226,0.135,227,0.146,235,0.007,236,0.007,239,2.179,420,3.273,435,1.441,437,3.113,2056,6.033,2084,6.139,2085,5.312,2196,5.312,2197,5.312,2198,5.312,2199,6.01,2200,6.01,2201,6.01]],["title/injectables/StargazeService.html",[490,0.875,2084,2.976]],["body/injectables/StargazeService.html",[7,0.009,27,0.11,28,0.1,29,0.081,32,1.493,36,0.568,38,1.603,39,0.865,40,0.46,41,0.775,43,1.676,45,0.175,47,0.694,50,1.377,62,1.203,94,2.847,95,3.681,159,1.442,178,2.416,226,0.11,227,0.119,228,1.493,230,1.176,235,0.006,236,0.006,243,0.297,244,2.088,263,2.512,274,1.297,283,3.164,346,2.326,375,2.453,380,1.707,435,1.752,490,1.277,491,1.703,495,2.341,499,6.154,502,2.045,511,3.437,647,3.541,663,3.054,665,3.373,713,2.376,832,1.837,1473,3.226,1506,2.541,1509,3.373,2027,3.373,2068,5.755,2075,3.681,2084,4.341,2183,2.971,2186,3.271,2191,4.129,2194,3.457,2202,4.336,2203,7.308,2204,7.308,2205,4.906,2206,4.906,2207,6.511,2208,4.906,2209,4.906,2210,4.906,2211,4.906,2212,4.906,2213,4.906,2214,4.906,2215,6.511,2216,6.511,2217,8.327,2218,6.511,2219,4.906,2220,4.906,2221,4.906]],["title/modules/StripeModule.html",[0,1.07,417,2.976]],["body/modules/StripeModule.html",[0,1.873,2,2.392,3,3.003,7,0.009,24,3.084,25,2.586,26,2.392,27,0.147,28,0.134,29,0.108,31,2.657,45,0.176,47,0.927,225,3.257,226,0.147,227,0.159,235,0.007,236,0.007,329,5.902,417,6.04,420,3.45,2222,5.792,2223,5.792,2224,5.792,2225,6.553,2226,6.553]],["title/injectables/StripeService.html",[329,2.831,490,0.875]],["body/injectables/StripeService.html",[7,0.009,27,0.118,28,0.107,29,0.086,32,1.56,36,0.604,38,1.656,39,0.893,40,0.503,41,0.878,43,1.56,45,0.17,47,0.742,52,5.977,53,3.497,123,5.23,178,1.734,226,0.118,227,0.127,228,1.56,230,1.915,235,0.006,236,0.006,243,0.317,244,2.127,259,4.235,274,1.094,283,1.867,292,4.455,329,4.314,346,1.506,355,1.731,375,1.653,380,1.656,394,6.096,397,1.484,445,1.275,461,2.249,490,1.334,491,1.821,501,3.497,618,2.917,646,6.674,758,2.316,786,4.235,1138,3.935,1140,4.235,1146,3.935,1161,4.636,1676,6.013,2227,4.636,2228,7.55,2229,7.55,2230,5.245,2231,6.803,2232,5.245,2233,5.245,2234,5.245,2235,5.245,2236,5.245,2237,5.245,2238,7.55,2239,5.245,2240,5.245,2241,4.636,2242,5.245,2243,5.245,2244,5.245,2245,5.245,2246,5.245,2247,5.245,2248,5.245,2249,5.245,2250,4.636,2251,5.245,2252,5.245,2253,5.245,2254,5.245,2255,5.245,2256,5.245]],["title/modules/StripeSubscriptionModule.html",[0,1.07,18,2.976]],["body/modules/StripeSubscriptionModule.html",[0,1.839,2,2.319,3,2.948,7,0.009,18,6.002,24,3.027,25,2.507,26,2.319,27,0.143,28,0.13,29,0.104,31,2.576,45,0.193,47,0.898,49,2.89,50,1.783,123,3.848,126,4.766,128,4.235,129,5.129,159,1.867,225,3.198,226,0.143,227,0.154,235,0.007,236,0.007,420,3.386,1130,4.766,2257,5.615,2258,5.615,2259,5.615,2260,6.181,2261,6.353,2262,5.615,2263,6.353]],["title/injectables/StripeSubscriptionService.html",[490,0.875,2260,2.976]],["body/injectables/StripeSubscriptionService.html",[7,0.009,27,0.136,28,0.123,29,0.099,32,1.702,36,0.587,38,1.628,39,0.878,40,0.467,41,0.788,43,1.702,45,0.189,47,0.851,50,1.69,62,1.476,123,3.646,128,4.014,129,4.861,159,1.769,226,0.136,227,0.146,228,1.702,230,1.443,235,0.007,236,0.007,243,0.364,244,2.018,358,5.365,380,1.628,490,1.455,491,2.09,495,2.527,502,2.51,618,2.582,647,3.821,1130,6.303,1146,5.569,2260,4.948,2264,5.322,2265,8.048,2266,6.021,2267,6.021,2268,7.423,2269,6.021,2270,6.021,2271,6.021,2272,6.021,2273,6.021,2274,6.021]],["title/modules/StripeWebHookModule.html",[0,1.07,19,3.145]],["body/modules/StripeWebHookModule.html",[0,1.764,2,2.166,3,2.828,7,0.009,9,5.553,18,5.838,19,6.503,21,5.082,24,2.904,25,2.342,26,2.166,27,0.134,28,0.121,29,0.097,31,2.984,45,0.197,47,0.839,102,4.182,122,4.792,123,3.595,126,4.453,127,5.246,225,2.474,226,0.134,227,0.144,235,0.007,236,0.007,239,2.162,417,5.838,420,3.248,425,5.246,2275,5.246,2276,5.935,2277,5.246,2278,6.414,2279,4.453,2280,5.935,2281,5.935]],["title/controllers/StripeWebhookController.html",[237,1.171,2278,3.145]],["body/controllers/StripeWebhookController.html",[7,0.009,27,0.09,28,0.082,29,0.066,32,1.297,36,0.413,38,1.24,39,0.669,40,0.356,41,0.6,43,1.297,45,0.188,47,0.565,52,4.626,53,2.664,116,1.213,123,3.976,126,2.998,177,3.771,178,2.491,226,0.09,227,0.097,228,0.916,230,2.003,235,0.005,236,0.005,237,1.048,239,1.174,241,1.714,243,0.242,244,1.961,254,0.593,283,2.541,311,2.816,316,2.358,318,1.714,319,0.766,327,3.661,328,3.226,329,4.163,330,3.532,331,4.163,332,3.532,341,1.62,346,2.523,351,1.422,355,1.297,360,2.816,375,2.466,377,2.816,378,4.244,380,0.876,396,5.803,397,1.5,459,2.07,618,2.426,735,2.118,811,2.998,832,1.496,1132,3.532,1133,3.532,1134,3.532,1135,3.532,1136,3.532,1137,3.532,1138,2.998,1139,3.532,1140,3.226,1141,3.985,1142,3.532,1143,3.532,1146,5.869,1166,2.816,1473,2.898,1706,5.512,1889,3.532,2260,4.377,2262,3.532,2278,3.985,2279,4.926,2282,5.301,2283,3.226,2284,6.566,2285,6.566,2286,3.996,2287,7.139,2288,3.996,2289,3.996,2290,6.31,2291,3.996,2292,3.996,2293,6.566,2294,6.31,2295,3.226,2296,3.996,2297,3.226,2298,3.226,2299,4.999,2300,4.999,2301,4.999,2302,4.999,2303,3.996,2304,3.996,2305,3.996,2306,6.566,2307,3.996,2308,3.996,2309,3.996,2310,3.996,2311,3.996,2312,3.996,2313,3.532,2314,3.996,2315,6.566,2316,3.996,2317,5.656,2318,3.996,2319,3.996,2320,3.996,2321,3.996,2322,3.996,2323,3.996,2324,3.996,2325,3.996,2326,3.996,2327,3.996,2328,3.996,2329,3.996,2330,3.996,2331,3.996,2332,3.996,2333,3.996,2334,3.996,2335,5.656,2336,3.996,2337,3.996,2338,3.996,2339,3.996,2340,3.996,2341,3.996,2342,6.566,2343,3.996,2344,3.996,2345,3.996,2346,6.566,2347,3.996,2348,3.226,2349,3.996,2350,3.996,2351,3.996,2352,3.996,2353,5.656,2354,3.996,2355,3.996,2356,3.996,2357,3.996,2358,3.996,2359,3.996,2360,3.996,2361,3.996,2362,3.996,2363,3.996]],["title/modules/SubmitModule.html",[0,1.07,20,3.145]],["body/modules/SubmitModule.html",[0,1.778,2,2.193,3,2.85,7,0.009,15,4.898,20,6.386,24,2.926,25,2.372,26,2.193,27,0.135,28,0.123,29,0.099,31,3.007,45,0.2,47,0.85,49,2.734,50,1.687,69,4.006,82,3.007,83,3.227,92,4.303,93,4.509,159,1.766,225,3.091,226,0.135,227,0.146,235,0.007,236,0.007,239,2.179,420,3.273,435,1.441,437,3.113,2095,6.033,2121,6.139,2122,5.312,2364,5.312,2365,6.01,2366,5.312,2367,5.312,2368,6.01,2369,6.01]],["title/injectables/SubmitService.html",[490,0.875,2121,2.976]],["body/injectables/SubmitService.html",[7,0.009,27,0.11,28,0.1,29,0.081,32,1.493,36,0.568,38,1.603,39,0.865,40,0.46,41,0.775,43,1.676,45,0.175,47,0.694,50,1.377,62,1.203,92,2.847,93,3.681,159,1.442,178,2.416,226,0.11,227,0.119,228,1.493,230,1.176,235,0.006,236,0.006,243,0.297,244,2.088,263,2.512,274,1.297,283,3.164,346,2.326,375,2.453,380,1.707,435,1.561,490,1.277,491,1.703,495,2.341,499,6.154,502,2.045,511,3.437,647,3.541,663,3.054,665,3.373,713,2.376,832,1.837,1473,3.226,1506,2.541,1509,3.373,2027,3.373,2028,3.271,2121,4.341,2123,3.961,2183,2.971,2186,3.271,2191,4.129,2194,3.457,2370,4.336,2371,7.308,2372,7.308,2373,4.906,2374,4.906,2375,6.511,2376,4.906,2377,4.906,2378,4.906,2379,4.906,2380,4.906,2381,4.906,2382,4.906,2383,6.511,2384,6.511,2385,8.327,2386,6.511,2387,6.511,2388,4.906,2389,4.906,2390,4.906]],["title/classes/SupabaseAuthDto.html",[227,0.108,324,3.349]],["body/classes/SupabaseAuthDto.html",[7,0.009,27,0.063,28,0.057,29,0.046,36,0.629,39,0.848,40,0.542,41,0.964,45,0.063,116,1.943,174,2.571,181,3.839,226,0.063,227,0.068,231,2.732,235,0.004,236,0.004,242,6.104,243,0.169,254,1.279,258,4.313,274,0.629,280,5.355,281,1.975,292,3.618,319,0.537,322,5.911,324,3.258,347,5.374,349,4.703,350,4.703,351,1.893,352,2.218,355,1.22,356,4.296,364,3.992,365,4.296,366,4.703,367,4.868,368,4.868,369,3.992,370,4.868,371,3.992,372,3.846,373,3.992,374,3.992,385,1.728,397,1.573,439,0.926,445,0.814,474,4.289,479,4.627,530,3.556,531,1.401,534,2.618,545,2.174,556,2.103,587,3.268,601,3.367,692,1.761,715,3.839,716,2.422,730,3.175,731,3.367,733,1.917,734,4.128,735,2.909,744,1.81,747,3,763,3.06,788,3.506,797,2.174,806,2.895,839,4.224,861,2.63,886,3.839,1053,3.839,1180,3.506,1192,4.84,2391,7.657,2392,2.475,2393,4.84,2394,2.8,2395,2.8,2396,4.343,2397,4.343,2398,2.8,2399,2.8,2400,3.258,2401,2.8,2402,4.343,2403,2.8,2404,3.839,2405,3.839,2406,2.8,2407,2.8,2408,2.8,2409,5.995,2410,4.343,2411,2.8,2412,4.343,2413,2.8,2414,2.8,2415,3.839,2416,3.839,2417,2.8,2418,4.343,2419,4.343,2420,2.8,2421,4.343,2422,2.8,2423,2.8,2424,3.839,2425,3.839,2426,2.8,2427,2.8,2428,4.343,2429,3.839,2430,2.8,2431,2.8]],["title/injectables/SupabaseGuard.html",[320,2.094,490,0.875]],["body/injectables/SupabaseGuard.html",[7,0.009,27,0.157,28,0.143,29,0.115,45,0.183,47,0.989,226,0.157,227,0.17,235,0.008,236,0.008,320,3.808,422,5.645,443,2.552,490,1.592,491,2.427,2432,6.18,2433,6.992,2434,6.992]],["title/injectables/SupabaseStrategy.html",[418,3.145,490,0.875]],["body/injectables/SupabaseStrategy.html",[7,0.009,27,0.132,28,0.12,29,0.096,32,1.676,36,0.581,38,1.603,39,0.865,40,0.46,41,0.776,43,1.676,44,4.138,45,0.187,47,0.83,59,4.406,116,1.568,226,0.132,227,0.143,228,1.825,235,0.007,236,0.007,242,4.138,243,0.355,244,1.995,253,7.361,322,5.15,361,2.476,380,1.288,418,5.15,422,4.741,443,2.143,490,1.433,491,2.039,618,2.518,631,5.191,2290,6.46,2435,5.191,2436,7.958,2437,7.958,2438,5.873,2439,5.873,2440,7.958,2441,5.873,2442,5.873,2443,5.873,2444,7.309,2445,5.873,2446,5.873,2447,5.873,2448,7.309,2449,5.873,2450,5.873,2451,5.873,2452,5.873,2453,5.873,2454,5.873,2455,5.873,2456,5.873,2457,5.873,2458,5.873,2459,5.873]],["title/classes/UpdateInsightDto.html",[227,0.108,1455,3.145]],["body/classes/UpdateInsightDto.html",[7,0.009,27,0.139,28,0.127,29,0.102,36,0.595,39,0.964,40,0.557,45,0.139,157,3.323,226,0.139,227,0.15,235,0.007,236,0.007,243,0.374,254,1.209,271,4.643,280,4.125,397,1.321,439,2.046,441,2.218,443,2.755,445,1.415,465,4.542,495,1.861,525,6.233,527,4.996,528,5.663,529,3.147,530,3.91,531,4.077,532,3.541,533,4.643,534,2.339,535,4.996,537,5.47,539,4.787,540,4.125,541,5.47,542,4.125,543,5.47,1455,5.319,1463,4.996,2460,4.996,2461,6.188,2462,6.188,2463,6.188]],["title/classes/UpdateInsightMemberDto.html",[227,0.108,2464,3.349]],["body/classes/UpdateInsightMemberDto.html",[7,0.009,27,0.144,28,0.131,29,0.105,36,0.467,40,0.52,45,0.173,226,0.144,227,0.187,235,0.007,236,0.007,243,0.387,254,0.95,319,1.227,385,1.284,397,1.501,439,2.116,445,1.444,482,2.596,531,3.204,532,4.024,534,2.213,545,3.856,548,3.991,558,5.169,559,5.43,866,6.586,872,5.43,1447,4.803,1684,5.658,2460,6.221,2464,5.781,2465,6.402,2466,6.221,2467,5.781,2468,6.402,2469,6.402]],["title/classes/UpdateUserDto.html",[227,0.108,289,3.145]],["body/classes/UpdateUserDto.html",[7,0.009,27,0.084,28,0.077,29,0.062,36,0.617,39,0.87,40,0.578,41,0.944,45,0.122,116,1.908,167,3.427,174,1.404,226,0.084,227,0.131,231,2.25,235,0.005,236,0.005,243,0.227,254,1.256,289,3.808,292,4.1,305,7.11,319,0.719,361,3.096,367,5.516,368,5.516,369,4.754,370,5.516,371,4.754,372,4.419,373,4.754,374,4.754,385,1.697,387,5.516,397,1.622,439,1.239,445,1.013,474,4.119,479,4.486,481,4.486,482,1.52,530,3.592,531,2.705,534,2.592,545,3.172,547,4.363,548,4.089,556,1.815,561,3.314,563,4.777,564,3.027,692,2.191,763,3.808,806,3.603,1061,2.377,2393,4.363,2400,4.055,2404,4.777,2405,4.777,2415,4.777,2416,3.314,2424,4.777,2425,3.314,2429,3.314,2470,6.415,2471,3.314,2472,4.777,2473,3.749,2474,3.749,2475,5.404,2476,3.749,2477,3.749,2478,3.749,2479,3.749,2480,3.749,2481,3.749,2482,3.749,2483,3.749,2484,3.749,2485,6.337,2486,3.749,2487,3.749,2488,6.13,2489,3.749,2490,3.749,2491,3.749,2492,3.749,2493,3.749,2494,3.749,2495,6.935,2496,3.749]],["title/classes/UpdateUserEmailPreferencesDto.html",[227,0.108,290,3.145]],["body/classes/UpdateUserEmailPreferencesDto.html",[7,0.009,27,0.135,28,0.122,29,0.098,36,0.539,40,0.552,45,0.166,116,1.907,174,2.767,226,0.135,227,0.179,235,0.007,236,0.007,243,0.362,254,1.097,290,5.207,292,4.802,319,1.146,361,3.042,385,1.482,439,1.976,445,1.385,482,2.424,530,4.652,531,3.699,534,2.406,535,5.967,545,4.015,547,6.477,725,4.927,806,4.927,2470,6.018,2497,5.284,2498,7.09,2499,7.09,2500,5.978,2501,7.39,2502,7.39,2503,5.978]],["title/classes/UpdateUserProfileInterestsDto.html",[227,0.108,299,3.145]],["body/classes/UpdateUserProfileInterestsDto.html",[7,0.009,27,0.145,28,0.131,29,0.106,36,0.469,40,0.521,45,0.174,116,1.656,157,4.147,226,0.145,227,0.188,235,0.007,236,0.007,243,0.389,254,0.954,299,5.442,301,6.192,319,1.232,361,2.805,385,1.289,397,1.449,439,2.125,445,1.447,482,2.606,531,3.216,534,2.218,540,5.149,542,5.727,545,3.865,1706,4.528,1794,5.189,2470,5.795,2504,5.68,2505,5.189,2506,6.426,2507,4.821]],["title/controllers/UserController.html",[237,1.171,2508,3.349]],["body/controllers/UserController.html",[7,0.009,27,0.099,28,0.09,29,0.072,32,1.385,36,0.504,38,1.514,39,0.817,40,0.507,41,0.733,43,1.583,45,0.196,47,0.621,84,2.925,116,1.852,132,3.993,133,2.659,135,3.658,136,3.093,137,3.093,138,3.243,140,2.659,167,5.333,226,0.099,227,0.107,228,1.007,230,1.655,235,0.006,236,0.006,237,1.151,239,1.29,241,1.883,243,0.266,244,2.14,254,1.025,257,3.558,263,2.601,295,3.88,315,3.489,316,3.1,317,3.283,318,1.883,319,0.842,327,3.85,341,1.78,344,3.048,346,1.261,362,2.784,375,1.384,380,1.514,385,1.385,397,1.494,444,2.559,483,1.83,484,1.32,503,1.687,504,1.83,687,3.239,725,4.026,1209,3.093,1265,4.026,1269,4.174,1271,2.126,1272,2.274,1273,2.059,1274,2.274,1364,6.005,1370,4.147,1376,3.88,1386,2.126,1389,2.784,1390,4.182,1392,3.294,1396,3.88,1719,4.378,1720,3.544,1727,3.88,2508,4.531,2509,3.88,2510,7.799,2511,7.799,2512,6.905,2513,4.39,2514,4.39,2515,4.876,2516,3.88,2517,4.39,2518,4.39,2519,4.39,2520,4.39,2521,4.39,2522,4.39,2523,4.39,2524,4.39,2525,6.04,2526,4.39,2527,4.39,2528,3.544,2529,3.88,2530,3.544,2531,4.39,2532,6.103,2533,5.339,2534,4.39,2535,4.39,2536,4.39,2537,4.39,2538,3.88]],["title/injectables/UserFollowService.html",[490,0.875,2539,2.976]],["body/injectables/UserFollowService.html",[7,0.009,27,0.099,28,0.09,29,0.073,32,1.391,36,0.57,38,1.636,39,0.882,40,0.469,41,0.791,43,1.71,45,0.168,47,0.625,50,1.24,62,1.083,116,1.599,142,2.802,143,3.315,159,1.299,178,2.466,226,0.099,227,0.107,228,1.391,230,1.059,235,0.006,236,0.006,243,0.267,244,2.143,263,2.606,274,1.315,283,3.155,346,2.375,375,2.464,380,1.714,490,1.19,491,1.534,495,2.243,502,1.842,511,3.565,647,3.392,663,3.25,665,3.589,832,1.655,1060,2.802,1250,3.906,1389,2.802,1473,3.293,1506,2.289,1509,3.143,2027,2.289,2075,4.552,2183,2.676,2186,2.946,2191,3.847,2194,4.275,2539,4.045,2540,5.69,2541,3.906,2542,6.929,2543,6.929,2544,6.929,2545,4.419,2546,4.419,2547,6.067,2548,4.419,2549,9.007,2550,4.419,2551,4.419,2552,4.419,2553,4.419,2554,4.419,2555,4.419,2556,4.419,2557,4.419,2558,6.929,2559,6.929,2560,4.419,2561,8.424,2562,4.552,2563,6.067,2564,6.067,2565,6.067,2566,4.419,2567,4.419,2568,4.419,2569,4.419]],["title/controllers/UserFollowsController.html",[237,1.171,2570,3.349]],["body/controllers/UserFollowsController.html",[7,0.009,27,0.096,28,0.087,29,0.07,32,1.359,36,0.497,38,1.493,39,0.805,40,0.486,41,0.722,43,1.771,45,0.184,47,0.604,116,1.962,142,3.759,143,3.205,167,5.38,226,0.096,227,0.104,228,0.98,230,1.421,231,1.742,235,0.006,236,0.006,237,1.12,239,1.255,241,1.832,243,0.258,244,2.127,254,1.01,257,3.528,258,3.183,263,2.579,274,1.229,283,3.138,312,2.382,313,4.099,315,3.448,316,2.471,317,3.246,318,1.832,319,0.819,320,2.004,327,3.795,341,1.732,343,3.795,344,3.005,346,1.955,362,2.709,375,2.145,380,1.493,385,1.603,397,1.485,739,2.471,1251,5.935,1269,3.808,1386,2.069,1389,2.709,1457,2.479,1460,2.479,1461,2.479,1883,4.786,2026,4.176,2027,3.07,2044,3.01,2045,4.537,2075,4.447,2088,5.935,2092,5.239,2528,3.449,2529,3.776,2530,3.449,2532,6.016,2533,6.016,2538,6.016,2539,4.537,2540,5.18,2562,4.447,2570,4.447,2571,3.776,2572,6.806,2573,7.723,2574,6.806,2575,4.272,2576,4.272,2577,5.927,2578,5.927,2579,4.272,2580,4.272,2581,4.272,2582,5.239,2583,4.272,2584,4.272,2585,4.272,2586,5.927,2587,4.272,2588,4.272,2589,4.272,2590,3.776,2591,4.272,2592,4.272,2593,4.272,2594,4.272,2595,4.272,2596,4.272]],["title/controllers/UserHighlightsController.html",[237,1.171,2597,3.349]],["body/controllers/UserHighlightsController.html",[7,0.009,27,0.063,28,0.057,29,0.046,32,0.994,36,0.522,38,1.569,39,0.847,40,0.518,41,0.759,43,1.641,45,0.167,47,0.395,116,1.866,138,3.215,140,1.691,148,2.962,149,4.475,150,1.771,152,3.206,178,2.267,226,0.063,227,0.068,228,0.64,230,0.67,231,0.821,235,0.004,236,0.004,237,0.732,239,0.821,241,1.198,243,0.169,244,2.171,254,1.062,257,3.632,258,4.31,263,2.656,270,5.485,274,1.312,275,3.985,278,3.252,281,1.972,283,3.174,306,4.492,310,2.095,311,3.054,312,1.557,313,3.991,314,3.743,315,3.47,316,2.859,317,3.266,318,1.198,319,0.535,320,1.31,341,1.132,343,3.825,344,3.159,346,1.719,355,1.373,375,2.331,380,1.313,385,1.667,397,1.2,573,5.57,576,2.095,801,3.743,802,5.369,1364,2.255,1379,2.468,1380,5.292,1381,2.468,1382,3.831,1383,2.468,1384,5.798,1386,1.352,1387,5.212,1389,2.749,1390,3.217,1392,2.095,1401,2.468,1402,3.683,1403,2.468,1442,2.255,1450,2.468,1454,3.252,1457,3.762,1460,1.621,1461,1.621,1469,2.255,1471,2.468,1473,1.233,1622,1.968,2039,3.991,2045,2.89,2183,1.691,2191,1.771,2507,2.095,2516,4.695,2530,2.255,2540,5.212,2597,3.252,2598,2.468,2599,2.793,2600,6.481,2601,4.695,2602,6.481,2603,6.481,2604,6.481,2605,6.481,2606,6.481,2607,2.793,2608,6.538,2609,2.793,2610,2.793,2611,2.793,2612,3.991,2613,2.793,2614,7.095,2615,2.793,2616,2.468,2617,4.335,2618,5.987,2619,2.793,2620,5.312,2621,2.793,2622,5.987,2623,4.335,2624,2.793,2625,2.793,2626,2.793,2627,2.793,2628,2.793,2629,2.793,2630,2.793,2631,2.793,2632,2.793,2633,2.793,2634,2.468,2635,2.793,2636,5.312,2637,2.468,2638,2.793,2639,2.793,2640,2.793,2641,2.468,2642,5.312,2643,2.793,2644,2.793,2645,2.793,2646,2.793,2647,2.793,2648,2.793,2649,2.793,2650,2.793,2651,4.335,2652,2.793,2653,2.793,2654,2.793,2655,2.793,2656,2.793,2657,2.793]],["title/injectables/UserHighlightsService.html",[490,0.875,1390,2.704]],["body/injectables/UserHighlightsService.html",[7,0.009,27,0.059,28,0.053,29,0.043,32,0.942,36,0.584,38,1.731,39,0.934,40,0.497,41,0.838,43,1.81,45,0.171,47,0.369,50,0.732,62,0.64,116,0.56,132,2.207,138,2.207,140,1.58,148,2.836,149,3.811,150,1.655,159,1.208,175,2.026,178,2.567,226,0.059,227,0.063,228,0.942,230,0.985,235,0.004,236,0.004,243,0.158,244,2.242,263,2.152,274,1.304,283,3.159,346,2.497,355,1.529,358,3.39,362,2.606,372,1.401,375,2.4,380,1.756,397,1.302,435,0.985,444,2.376,483,1.713,484,1.236,490,0.806,491,0.906,493,3.39,495,2.098,498,1.739,501,2.74,502,1.088,503,1.003,504,1.088,507,3.944,508,1.514,511,3.784,519,3.39,520,3.39,521,3.718,522,2.489,523,2.489,524,3.08,553,1.455,573,4.066,576,1.958,577,1.839,584,1.03,618,3.1,647,2.624,663,2.706,665,2.634,716,1.455,735,0.977,802,1.958,832,1.539,973,1.958,1060,2.606,1197,2.107,1216,3.633,1217,2.306,1365,4.495,1368,2.306,1374,4.066,1389,2.606,1390,2.489,1414,3.084,1473,2.245,1481,3.225,1492,3.08,1500,1.655,1506,2.634,1509,2.129,1512,3.453,1520,2.306,1574,4.106,1583,2.107,1604,3.084,1622,1.839,1963,2.306,2010,2.306,2011,2.306,2027,1.352,2183,1.58,2186,1.739,2191,1.655,2540,5.713,2608,6.863,2614,7.434,2637,2.306,2658,2.306,2659,5.086,2660,5.086,2661,5.086,2662,5.086,2663,5.086,2664,5.086,2665,5.086,2666,2.609,2667,5.086,2668,2.609,2669,4.11,2670,2.609,2671,2.609,2672,2.609,2673,2.609,2674,2.609,2675,2.609,2676,2.609,2677,2.609,2678,2.609,2679,2.609,2680,2.609,2681,2.609,2682,2.609,2683,2.609,2684,2.609,2685,2.609,2686,2.609,2687,2.609,2688,2.609,2689,2.609,2690,2.609,2691,2.609,2692,2.609,2693,4.11,2694,4.11,2695,4.11,2696,4.11,2697,2.609,2698,2.609,2699,2.609,2700,4.11,2701,3.633,2702,4.11,2703,4.11,2704,4.11,2705,4.11,2706,2.609,2707,4.11,2708,2.609,2709,2.609,2710,2.609,2711,2.609,2712,2.609,2713,2.609,2714,2.609,2715,2.609,2716,2.609,2717,2.609,2718,2.609,2719,2.609,2720,2.609,2721,4.11,2722,2.609,2723,2.609,2724,2.609,2725,2.609,2726,2.609,2727,2.609,2728,2.609,2729,2.609,2730,2.609,2731,2.609,2732,2.609,2733,5.086,2734,2.609,2735,2.609,2736,5.086,2737,5.086,2738,2.609,2739,4.11,2740,5.086,2741,2.609,2742,2.609,2743,2.609,2744,2.609]],["title/controllers/UserInsightMemberController.html",[237,1.171,1567,3.349]],["body/controllers/UserInsightMemberController.html",[7,0.009,27,0.067,28,0.061,29,0.049,32,1.045,36,0.452,38,1.359,39,0.733,40,0.497,41,0.657,43,1.421,45,0.188,47,0.421,111,3.085,116,0.977,144,3.508,145,2.235,152,2.512,174,1.116,178,2.422,226,0.067,227,0.072,228,0.683,230,1.326,231,1.339,235,0.004,236,0.004,237,0.781,239,0.876,241,1.278,243,0.18,244,2.043,254,0.92,257,3.335,263,2.438,270,5.267,274,1.282,275,4.15,278,3.418,280,1.986,281,1.355,283,3.061,310,2.235,311,2.099,312,1.661,313,3.722,314,3.898,315,3.131,316,2.783,317,2.947,318,1.278,319,0.571,320,1.398,327,3.085,328,2.406,341,1.208,343,3.455,344,2.735,346,2.369,355,1.421,358,1.986,375,2.628,380,1.213,385,1.515,397,1.232,441,0.876,444,1.308,484,0.896,503,1.145,504,1.242,532,4.213,551,1.889,557,5.668,559,5.662,687,2.137,832,1.706,866,3.418,867,2.099,868,2.634,872,3.898,880,2.634,1265,3.037,1269,2.36,1271,1.443,1272,1.543,1273,1.398,1274,1.543,1384,4.96,1386,1.443,1387,4.365,1402,3.326,1444,3.679,1447,4.15,1451,3.21,1452,3.21,1454,2.235,1457,1.729,1458,5.39,1460,1.729,1461,1.729,1462,2.235,1464,2.099,1465,3.211,1466,1.889,1468,2.406,1470,3.679,1473,2.947,1475,3.508,1478,4.89,1480,4.027,1483,5.901,1490,2.634,1494,6.099,1504,2.634,1507,2.235,1544,4.13,1567,3.418,1571,2.406,1590,2.406,1622,2.099,1702,3.418,2027,1.543,2039,3.037,2183,1.805,2464,5.809,2466,5.39,2467,5.008,2515,3.679,2612,3.037,2745,5.39,2746,2.634,2747,2.634,2748,4.89,2749,6.676,2750,2.98,2751,2.98,2752,4.556,2753,4.556,2754,4.556,2755,5.532,2756,2.98,2757,2.634,2758,2.98,2759,4.027,2760,2.98,2761,2.98,2762,2.98,2763,7.04,2764,2.98,2765,2.98,2766,2.98,2767,2.98,2768,2.634,2769,2.98,2770,2.98,2771,4.027,2772,4.556,2773,2.634,2774,2.98,2775,2.98,2776,4.556,2777,4.556,2778,5.901,2779,5.901,2780,2.98,2781,2.98,2782,6.222,2783,4.556,2784,2.98,2785,2.98,2786,2.98,2787,4.556,2788,2.98,2789,2.98,2790,2.98,2791,2.98,2792,2.98,2793,4.556,2794,4.556,2795,4.556,2796,4.556,2797,2.98,2798,2.98,2799,2.98,2800,2.98,2801,2.98,2802,2.98,2803,2.98]],["title/controllers/UserInsightsController.html",[237,1.171,1566,3.349]],["body/controllers/UserInsightsController.html",[7,0.009,27,0.077,28,0.07,29,0.056,32,1.154,36,0.437,38,1.314,39,0.836,40,0.495,41,0.636,43,1.374,45,0.191,47,0.481,111,3.693,116,1.686,152,2.041,178,2.447,226,0.077,227,0.083,228,0.78,230,1.437,231,1.479,235,0.005,236,0.005,237,0.892,239,1,241,1.459,243,0.206,244,2.013,254,0.89,257,3.267,258,3.556,263,2.389,270,5.242,274,1.164,275,4.495,278,3.776,281,2.725,283,3.067,306,3.776,310,2.552,311,3.547,312,1.897,313,3.693,314,4.222,315,3.106,316,2.761,317,2.924,318,1.459,319,0.652,320,1.596,341,1.379,343,3.341,344,2.645,346,2.306,355,1.374,360,2.397,375,2.414,377,2.397,378,2.552,380,1.314,385,1.484,397,1.049,435,1.588,441,2.077,444,1.445,484,1.023,503,1.307,504,1.418,525,5.541,528,3.776,529,2.761,532,3.975,687,2.361,832,1.274,847,3.007,861,4.011,996,3.007,1151,2.552,1264,3.007,1265,3.356,1269,2.607,1271,1.647,1272,1.762,1273,1.596,1274,1.762,1384,4.666,1386,1.647,1387,4.222,1402,1.826,1444,4.838,1452,2.397,1453,4.449,1454,2.552,1455,5.659,1458,4.064,1460,1.974,1461,1.974,1462,2.552,1463,4.064,1464,2.397,1465,3.478,1466,2.157,1468,2.746,1470,4.064,1473,2.645,1475,3.8,1544,4.415,1545,3.356,1566,3.776,1569,2.552,1571,2.746,1590,2.746,1622,2.397,2039,3.356,2294,4.449,2298,2.746,2466,2.746,2467,2.552,2515,4.064,2601,6.248,2612,3.995,2616,3.007,2634,3.007,2641,3.007,2745,5.347,2747,3.007,2748,6.248,2757,3.007,2768,3.007,2771,4.449,2773,3.007,2778,3.007,2779,3.007,2782,4.449,2804,3.007,2805,7.069,2806,3.402,2807,3.402,2808,3.402,2809,3.402,2810,3.402,2811,3.402,2812,3.402,2813,5.034,2814,3.402,2815,3.402,2816,3.402,2817,5.034,2818,3.402,2819,5.034,2820,3.402,2821,3.402,2822,3.402,2823,3.402,2824,3.402,2825,3.402,2826,3.402,2827,3.402,2828,3.402,2829,3.402,2830,3.402,2831,3.402,2832,3.402,2833,5.034,2834,3.402,2835,3.402,2836,3.402,2837,3.402,2838,3.402,2839,3.402,2840,3.402,2841,3.402,2842,3.402,2843,3.402,2844,3.402,2845,3.402,2846,3.402,2847,3.402,2848,3.402]],["title/modules/UserModule.html",[0,1.07,21,2.591]],["body/modules/UserModule.html",[0,1.634,2,1.92,3,2.62,7,0.009,14,5.659,21,5.318,24,2.69,25,2.077,26,1.92,27,0.118,28,0.108,29,0.086,31,2.764,45,0.205,47,0.744,49,2.393,50,1.477,84,3.301,116,1.715,132,2.825,133,3.187,134,4.651,138,3.66,140,3.187,142,4.323,143,3.948,148,3.801,149,2.633,150,3.336,159,1.546,225,2.842,226,0.118,227,0.128,235,0.006,236,0.006,239,2.003,327,5.043,420,3.009,437,2.725,1209,3.708,1389,4.795,1390,5.478,1392,3.948,1407,4.651,2508,6.001,2528,4.248,2539,6.029,2570,5.673,2590,4.651,2597,6.001,2849,4.651,2850,5.262,2851,4.651,2852,4.651,2853,5.262,2854,5.262,2855,5.262]],["title/classes/UserOnboardingDto.html",[227,0.108,276,3.145]],["body/classes/UserOnboardingDto.html",[7,0.009,27,0.136,28,0.123,29,0.099,36,0.542,40,0.553,45,0.167,116,1.592,157,3.986,226,0.136,227,0.18,235,0.007,236,0.007,243,0.364,254,1.102,276,5.23,301,6.08,319,1.154,361,2.976,385,1.489,387,6.474,397,1.558,439,1.99,445,1.391,482,2.441,531,3.715,534,2.413,540,4.948,542,5.601,545,4.028,548,3.845,1061,3.818,1706,4.242,1794,4.861,2488,7.426,2505,4.861,2507,4.517,2856,7.113,2857,5.322,2858,6.021,2859,6.021,2860,6.021]],["title/classes/UserRepoOptionsDto.html",[227,0.108,2861,2.976]],["body/classes/UserRepoOptionsDto.html",[7,0.009,27,0.129,28,0.118,29,0.094,36,0.603,40,0.52,41,0.946,45,0.129,226,0.129,227,0.14,231,2.62,235,0.007,236,0.007,243,0.348,254,1.227,274,1.142,435,1.379,439,1.901,441,2.12,442,2.979,443,2.633,444,2.532,445,1.352,447,3.611,448,4.023,449,3.817,451,2.391,452,3.262,454,3.207,455,3.207,459,2.979,460,4.023,461,3.381,462,3.207,463,3.088,464,3.207,465,4.609,466,3.338,467,3.817,468,2.878,469,3.207,470,3.338,471,3.207,472,3.338,473,3.737,474,2.878,475,2.698,476,3.207,477,3.207,478,3.338,483,2.397,484,1.73,1242,3.834,2861,4.809,2862,4.643]],["title/classes/UserRepoOptionsDto-1.html",[227,0.09,461,1.595,2861,2.48]],["body/classes/UserRepoOptionsDto-1.html",[7,0.009,27,0.144,28,0.131,29,0.105,36,0.467,40,0.52,45,0.173,157,4.137,226,0.144,227,0.187,231,2.429,235,0.007,236,0.007,243,0.387,254,0.95,274,1.243,279,5.781,319,1.227,385,1.284,439,2.116,445,1.444,482,2.596,529,3.212,531,3.204,534,2.213,542,5.719,545,3.856,785,3.715,1242,5.137,2505,5.169,2612,5.137,2861,5.137,2862,6.221,2863,5.658,2864,8.267,2865,6.402,2866,6.402]],["title/modules/UserReposModule.html",[0,1.07,22,2.976]],["body/modules/UserReposModule.html",[0,1.833,2,2.306,3,2.938,7,0.009,22,5.995,24,3.017,25,2.493,26,2.306,27,0.142,28,0.129,29,0.104,31,2.562,45,0.192,47,0.893,49,2.873,50,1.773,115,3.392,116,1.639,117,4.211,119,5.096,159,1.856,225,3.187,226,0.142,227,0.153,235,0.007,236,0.007,420,3.375,437,3.272,1242,4.211,2867,5.583,2868,5.583,2869,5.583,2870,6.529,2871,6.317,2872,6.317]],["title/injectables/UserReposService.html",[490,0.875,2870,3.145]],["body/injectables/UserReposService.html",[7,0.009,27,0.103,28,0.093,29,0.075,32,1.422,36,0.577,38,1.658,39,0.894,40,0.476,41,0.802,43,1.733,45,0.191,47,0.645,50,1.281,62,1.119,115,2.451,116,0.979,117,5.436,119,4.135,159,1.341,175,1.473,178,2.329,226,0.103,227,0.111,228,1.422,230,1.094,235,0.006,236,0.006,243,0.276,244,2.157,263,2.44,274,1.182,283,3.021,337,4.034,346,2.437,355,1.733,375,2.221,380,1.658,397,1.233,435,1.812,444,2.023,483,1.903,484,1.373,490,1.216,491,1.584,495,2.273,502,1.903,503,1.754,504,1.903,507,3.916,508,2.649,511,3.337,519,3.043,520,3.043,521,3.459,522,2.764,523,2.764,524,2.764,539,4.794,549,2.894,550,3.685,553,2.545,618,1.957,647,3.438,663,2.141,665,2.364,713,2.21,832,1.709,1060,2.894,1242,5.436,1473,2.015,1481,4.468,1492,4.267,1500,2.894,1506,3.213,1509,3.213,1512,3.65,1558,3.685,1559,4.034,1574,5.689,1583,3.685,2861,5.04,2870,4.37,2873,4.034,2874,7.046,2875,4.564,2876,4.564,2877,6.203,2878,4.564,2879,4.564,2880,4.564,2881,4.564,2882,4.564,2883,4.564,2884,6.203,2885,4.564,2886,4.564,2887,4.564,2888,4.564,2889,4.564]],["title/injectables/UserService.html",[327,2.489,490,0.875]],["body/injectables/UserService.html",[7,0.009,27,0.065,28,0.059,29,0.047,32,1.017,36,0.59,38,1.747,39,0.989,40,0.501,41,0.845,43,1.826,45,0.173,47,0.407,50,0.807,62,0.705,84,2.945,116,1.902,157,3.266,159,0.845,167,3.857,174,2.027,178,2.534,226,0.065,227,0.07,228,1.017,230,0.69,235,0.004,236,0.004,243,0.174,244,2.249,263,2.411,271,2.158,274,1.276,276,4.286,279,2.158,281,2.767,286,2.323,289,4.286,290,4.286,292,4.274,299,4.286,301,3.125,327,2.473,334,2.543,335,2.543,336,2.543,338,2.543,346,2.201,347,4.93,351,1.024,352,1.199,353,2.543,355,1.961,356,3.581,360,5.097,364,2.158,365,3.581,367,2.158,368,2.158,369,2.158,370,2.158,371,2.158,372,1.545,373,2.158,374,2.158,375,2.581,377,5.097,378,5.427,380,1.681,387,3.327,397,1.341,451,0.772,452,1.135,490,0.87,491,0.999,495,1.829,502,1.199,511,3.065,584,1.135,608,3.327,618,2.321,647,2.767,663,2.539,665,2.803,735,1.077,763,2.027,1060,4.166,1141,3.125,1180,2.323,1209,2.027,1462,4.061,1473,3.065,1481,3.432,1492,3.278,1500,1.824,1506,2.803,1509,2.297,1512,4.187,2498,2.543,2499,2.543,2890,2.543,2891,5.413,2892,5.413,2893,5.413,2894,5.413,2895,5.413,2896,5.413,2897,5.413,2898,5.413,2899,5.413,2900,2.877,2901,2.877,2902,4.435,2903,2.877,2904,2.877,2905,2.877,2906,2.877,2907,2.877,2908,6.083,2909,2.877,2910,2.877,2911,2.877,2912,2.877,2913,2.877,2914,2.877,2915,2.877,2916,2.877,2917,2.877,2918,2.877,2919,2.877,2920,2.877,2921,2.877,2922,2.877,2923,2.877,2924,2.877,2925,2.877,2926,2.877,2927,2.877,2928,2.877,2929,2.877,2930,2.877,2931,2.877,2932,4.435,2933,2.877,2934,2.877,2935,2.877,2936,2.877,2937,2.877,2938,2.877,2939,2.877,2940,6.942,2941,4.435,2942,2.877,2943,2.877,2944,2.877,2945,2.877,2946,2.877,2947,6.942,2948,2.877,2949,2.877,2950,2.877,2951,2.877,2952,2.877,2953,2.877,2954,2.877,2955,2.877,2956,4.435,2957,2.877,2958,2.877,2959,6.083,2960,4.435,2961,2.877,2962,2.877,2963,2.877,2964,2.877]],["title/modules/VoteModule.html",[0,1.07,23,3.145]],["body/modules/VoteModule.html",[0,1.778,2,2.193,3,2.85,7,0.009,15,4.898,23,6.386,24,2.926,25,2.372,26,2.193,27,0.135,28,0.123,29,0.099,31,3.007,45,0.2,47,0.85,49,2.734,50,1.687,69,4.006,82,3.007,83,3.227,88,4.303,89,4.509,159,1.766,225,3.091,226,0.135,227,0.146,235,0.007,236,0.007,239,2.179,420,3.273,435,1.441,437,3.113,2131,6.033,2157,6.139,2158,5.312,2965,5.312,2966,5.312,2967,6.01,2968,5.312,2969,6.01,2970,6.01]],["title/injectables/VoteService.html",[490,0.875,2157,2.976]],["body/injectables/VoteService.html",[7,0.009,27,0.11,28,0.1,29,0.081,32,1.493,36,0.568,38,1.603,39,0.865,40,0.46,41,0.775,43,1.676,45,0.175,47,0.694,50,1.377,62,1.203,88,2.847,89,3.681,159,1.442,178,2.416,226,0.11,227,0.119,228,1.493,230,1.176,235,0.006,236,0.006,243,0.297,244,2.088,263,2.512,274,1.297,283,3.164,346,2.326,375,2.453,380,1.707,435,1.561,490,1.277,491,1.703,495,2.341,499,6.154,502,2.045,511,3.437,647,3.541,663,3.054,665,3.373,713,2.376,832,1.837,1116,3.681,1473,3.226,1506,2.541,1509,3.373,2027,3.373,2028,3.271,2149,5.257,2157,4.341,2183,2.971,2186,3.271,2191,4.129,2194,3.457,2971,4.336,2972,7.308,2973,7.308,2974,4.906,2975,4.906,2976,6.511,2977,4.906,2978,4.906,2979,4.906,2980,4.906,2981,4.906,2982,4.906,2983,4.906,2984,6.511,2985,6.511,2986,8.327,2987,6.511,2988,4.906,2989,4.906,2990,4.906]],["title/changelog.html",[2991,2.791,2992,3.003,2993,3.288]],["body/changelog.html",[3,1.733,7,0.009,26,0.26,29,0.051,38,0.291,39,0.581,40,0.147,41,0.141,60,1.171,62,0.847,82,0.537,84,0.642,86,0.769,88,1.353,90,1.353,92,1.353,94,1.353,106,1.07,116,1.694,123,0.803,132,3.407,149,1.167,152,1.736,155,1.171,167,0.84,171,4.365,175,1.456,177,0.883,178,1.333,204,1.396,206,1.643,218,0.883,219,1.882,220,1.171,224,0.534,235,0.001,236,0.001,237,1.123,242,2.841,254,0.197,258,2.906,259,3.456,267,1.171,271,0.534,279,2.341,280,2.304,281,3.236,286,1.07,292,1.3,293,2.061,301,1.643,305,3.034,322,3.705,341,1.736,347,0.994,351,0.472,355,0.716,359,1.171,361,0.449,362,3.901,363,2.52,364,0.994,372,0.382,380,0.511,385,0.266,435,1.753,441,1.104,445,1.067,447,1.376,449,0.642,451,0.355,452,0.523,461,0.305,473,2.217,485,0.803,486,1.643,488,0.474,495,1.039,529,3.029,530,0.686,532,3.095,533,0.994,551,1.478,553,1.3,554,0.945,556,0.642,559,0.934,579,1.07,580,0.934,584,0.523,585,6.017,586,4.365,587,1.78,607,0.629,608,0.994,687,1.464,692,0.537,698,1.171,710,1.627,716,0.397,720,1.643,725,3.608,730,1,732,1.749,733,1.213,735,2.223,742,0.798,749,0.994,758,3.806,759,3.356,760,2.299,763,1.643,780,2.452,782,1.749,786,1.882,801,0.934,805,1.07,806,2.081,807,1.749,832,0.496,839,0.934,852,2.52,854,0.934,861,2.859,862,5.194,871,2.52,872,1.311,884,5.031,898,0.803,921,1.07,957,0.629,973,0.994,1005,1.171,1041,2.759,1056,1.171,1064,1.07,1082,0.994,1097,1.171,1098,0.574,1116,1.749,1138,3.945,1141,1.311,1151,0.534,1173,1.171,1265,1.554,1273,1.094,1298,2.081,1315,0.629,1335,5.525,1411,2.819,1413,2.061,1420,1.07,1430,2.061,1447,0.994,1452,4.471,1457,1.353,1540,1.749,1628,2.199,1631,2.199,1656,1.171,1661,3.054,1693,2.061,1702,0.994,1715,1.396,1716,1.478,1828,0.803,1867,1.643,1886,0.629,1915,2.061,1938,0.534,1941,0.534,1982,1.07,2035,1.07,2088,1.07,2113,1.171,2123,1.07,2149,1.07,2241,4.912,2313,1.171,2348,0.574,2393,1.07,2400,1.749,2467,0.994,2472,2.061,2582,1.644,2612,6.013,2701,3.321,2759,3.986,2991,0.534,2993,1.644,2994,1.171,2995,1.861,2996,2.749,2997,1.644,2998,1.861,2999,0.629,3000,5.962,3001,1.325,3002,8.145,3003,8.182,3004,0.711,3005,0.629,3006,0.711,3007,0.711,3008,0.711,3009,1.325,3010,4.501,3011,1.325,3012,1.325,3013,8.269,3014,7.358,3015,2.331,3016,1.325,3017,1.325,3018,0.711,3019,2.331,3020,2.749,3021,1.325,3022,1.861,3023,2.429,3024,1.861,3025,1.861,3026,1.861,3027,1.325,3028,1.325,3029,1.325,3030,1.325,3031,4.031,3032,5.259,3033,2.759,3034,2.331,3035,1.325,3036,3.121,3037,3.455,3038,3.121,3039,1.325,3040,1.325,3041,1.325,3042,1.325,3043,1.325,3044,1.325,3045,1.325,3046,1.325,3047,1.325,3048,1.325,3049,2.331,3050,2.749,3051,7.267,3052,5.092,3053,1.325,3054,6.345,3055,3.121,3056,1.325,3057,1.325,3058,1.325,3059,6.136,3060,6.814,3061,1.325,3062,4.784,3063,2.331,3064,1.325,3065,1.325,3066,2.749,3067,3.121,3068,1.325,3069,1.861,3070,1.325,3071,2.749,3072,1.325,3073,1.325,3074,1.325,3075,1.325,3076,1.325,3077,1.325,3078,1.325,3079,1.325,3080,1.171,3081,1.325,3082,1.325,3083,4.501,3084,2.331,3085,4.031,3086,8.36,3087,3.121,3088,3.784,3089,3.455,3090,2.749,3091,2.749,3092,2.749,3093,2.749,3094,5.692,3095,2.749,3096,2.749,3097,2.749,3098,2.749,3099,2.429,3100,5.936,3101,4.51,3102,4.51,3103,2.759,3104,2.749,3105,2.749,3106,2.749,3107,3.455,3108,4.913,3109,2.749,3110,3.455,3111,2.749,3112,3.455,3113,2.331,3114,2.061,3115,2.331,3116,2.331,3117,2.331,3118,2.331,3119,2.331,3120,2.331,3121,2.331,3122,2.331,3123,1.861,3124,1.861,3125,2.331,3126,2.331,3127,3.321,3128,2.331,3129,2.331,3130,2.331,3131,2.331,3132,2.331,3133,2.331,3134,4.913,3135,4.913,3136,2.749,3137,2.749,3138,1.325,3139,1.325,3140,2.331,3141,2.331,3142,1.325,3143,1.325,3144,2.331,3145,2.331,3146,2.331,3147,2.331,3148,3.321,3149,2.749,3150,5.092,3151,2.749,3152,2.331,3153,1.325,3154,1.325,3155,1.325,3156,1.325,3157,1.861,3158,1.644,3159,1.325,3160,1.325,3161,0.711,3162,5.818,3163,1.861,3164,5.259,3165,4.281,3166,0.711,3167,0.711,3168,0.711,3169,0.711,3170,1.325,3171,3.455,3172,1.325,3173,1.325,3174,1.325,3175,1.325,3176,5.092,3177,2.331,3178,2.749,3179,2.331,3180,4.72,3181,3.757,3182,2.331,3183,6.745,3184,3.121,3185,4.72,3186,2.331,3187,2.331,3188,2.331,3189,4.913,3190,3.121,3191,2.331,3192,2.331,3193,2.331,3194,1.325,3195,1.325,3196,4.697,3197,1.325,3198,0.711,3199,1.325,3200,1.861,3201,0.711,3202,0.711,3203,0.711,3204,1.861,3205,1.325,3206,1.325,3207,1.325,3208,1.325,3209,1.325,3210,0.711,3211,1.325,3212,3.757,3213,2.331,3214,1.325,3215,6.814,3216,1.325,3217,1.325,3218,1.325,3219,2.749,3220,1.325,3221,1.325,3222,1.325,3223,4.281,3224,1.325,3225,1.325,3226,1.325,3227,1.325,3228,1.325,3229,1.325,3230,1.325,3231,1.171,3232,1.325,3233,1.861,3234,1.861,3235,1.325,3236,1.325,3237,1.325,3238,1.325,3239,1.325,3240,1.325,3241,2.331,3242,1.325,3243,1.325,3244,1.325,3245,1.325,3246,1.325,3247,1.325,3248,1.325,3249,1.325,3250,1.325,3251,1.325,3252,1.325,3253,2.331,3254,1.325,3255,1.325,3256,1.325,3257,1.325,3258,0.711,3259,1.861,3260,5.092,3261,2.331,3262,1.325,3263,1.325,3264,1.325,3265,1.325,3266,1.325,3267,1.325,3268,3.757,3269,1.325,3270,1.325,3271,1.325,3272,1.325,3273,1.325,3274,1.325,3275,3.563,3276,1.325,3277,1.325,3278,1.171,3279,1.325,3280,1.325,3281,1.325,3282,1.325,3283,1.861,3284,4.365,3285,1.325,3286,2.061,3287,1.325,3288,1.325,3289,1.325,3290,1.325,3291,1.325,3292,1.325,3293,0.711,3294,2.331,3295,1.325,3296,1.325,3297,1.325,3298,1.325,3299,1.325,3300,1.325,3301,1.325,3302,1.325,3303,1.325,3304,2.749,3305,1.325,3306,1.325,3307,6.597,3308,3.784,3309,1.325,3310,1.325,3311,1.325,3312,1.325,3313,2.331,3314,1.325,3315,1.325,3316,1.325,3317,1.325,3318,1.325,3319,1.325,3320,1.325,3321,1.861,3322,2.429,3323,1.325,3324,1.325,3325,1.644,3326,1.325,3327,3.757,3328,1.325,3329,0.711,3330,1.171,3331,1.325,3332,1.325,3333,2.331,3334,1.325,3335,1.325,3336,3.121,3337,2.759,3338,1.325,3339,1.171,3340,1.325,3341,1.325,3342,1.325,3343,1.325,3344,1.325,3345,1.325,3346,1.325,3347,1.171,3348,2.331,3349,1.325,3350,1.644,3351,2.331,3352,1.325,3353,1.325,3354,1.325,3355,1.325,3356,1.325,3357,1.325,3358,1.325,3359,5.936,3360,2.749,3361,3.455,3362,2.749,3363,1.325,3364,1.325,3365,1.171,3366,1.325,3367,1.325,3368,1.325,3369,1.325,3370,3.121,3371,1.325,3372,1.325,3373,1.325,3374,1.325,3375,1.325,3376,1.325,3377,1.325,3378,1.325,3379,1.325,3380,1.325,3381,1.325,3382,1.325,3383,1.325,3384,1.325,3385,2.749,3386,1.325,3387,1.325,3388,1.325,3389,3.121,3390,1.325,3391,1.325,3392,1.325,3393,1.325,3394,1.325,3395,1.325,3396,1.325,3397,1.325,3398,2.331,3399,1.325,3400,1.861,3401,1.861,3402,1.325,3403,1.325,3404,1.171,3405,1.325,3406,1.325,3407,1.325,3408,1.325,3409,2.331,3410,1.325,3411,1.325,3412,1.325,3413,1.325,3414,1.325,3415,1.325,3416,1.325,3417,1.861,3418,1.325,3419,1.325,3420,1.325,3421,1.325,3422,1.325,3423,1.325,3424,5.413,3425,1.325,3426,1.325,3427,1.325,3428,1.325,3429,1.325,3430,1.325,3431,1.325,3432,1.325,3433,1.325,3434,1.325,3435,1.325,3436,1.325,3437,1.325,3438,1.325,3439,3.121,3440,1.07,3441,1.325,3442,1.325,3443,2.061,3444,1.325,3445,1.325,3446,2.061,3447,1.325,3448,1.325,3449,1.325,3450,1.325,3451,1.325,3452,1.325,3453,1.325,3454,1.325,3455,2.749,3456,1.325,3457,1.325,3458,1.325,3459,1.325,3460,1.325,3461,1.325,3462,1.325,3463,1.861,3464,1.325,3465,2.331,3466,1.325,3467,0.711,3468,0.711,3469,0.711,3470,0.711,3471,0.711,3472,0.711,3473,0.711,3474,0.711,3475,0.711,3476,0.711,3477,0.711,3478,0.711,3479,0.711,3480,0.711,3481,0.711,3482,0.711,3483,0.711,3484,0.711,3485,0.711,3486,3.121,3487,2.061,3488,2.331,3489,1.325,3490,1.325,3491,1.325,3492,1.325,3493,1.325,3494,1.325,3495,1.325,3496,3.121,3497,1.325,3498,1.325,3499,2.749,3500,0.711,3501,0.711,3502,0.711,3503,3.986,3504,0.711,3505,0.711,3506,0.711,3507,0.711,3508,0.711,3509,0.711,3510,3.054,3511,0.711,3512,0.711,3513,0.711,3514,0.711,3515,1.07,3516,0.711,3517,0.711,3518,0.711,3519,0.711,3520,0.711,3521,0.711,3522,0.711,3523,0.711,3524,0.629,3525,1.171,3526,0.711,3527,0.711,3528,0.711,3529,0.711,3530,3.563,3531,0.711,3532,0.711,3533,0.711,3534,1.171,3535,0.711,3536,0.711,3537,0.711,3538,0.629,3539,0.629,3540,0.711,3541,0.711,3542,0.711,3543,0.711,3544,0.711,3545,0.711,3546,0.711,3547,0.711,3548,3.321,3549,0.711,3550,0.711,3551,0.711,3552,0.711,3553,1.325,3554,0.711,3555,0.711,3556,0.711,3557,0.711,3558,0.711,3559,0.711,3560,0.711,3561,1.325,3562,0.574,3563,0.711,3564,0.711,3565,0.711,3566,0.711,3567,0.711,3568,0.711,3569,0.711,3570,0.711,3571,0.711,3572,0.711,3573,0.711,3574,0.711,3575,0.711,3576,0.711,3577,0.711,3578,0.711,3579,0.711,3580,0.711,3581,0.711,3582,0.711,3583,0.711,3584,0.711,3585,1.644,3586,0.711,3587,0.711,3588,0.711,3589,0.711,3590,0.711,3591,0.711,3592,0.711,3593,0.711,3594,0.711,3595,0.711,3596,0.711,3597,0.711,3598,0.711,3599,0.711,3600,0.711,3601,1.861,3602,0.711,3603,0.711,3604,0.711,3605,0.711,3606,0.711,3607,0.711,3608,0.711,3609,0.711,3610,0.711,3611,0.629,3612,0.711,3613,0.711,3614,0.711,3615,0.711,3616,0.711,3617,0.711,3618,0.711,3619,0.711,3620,0.711,3621,1.325,3622,0.711,3623,0.711,3624,0.711,3625,0.711,3626,1.325,3627,1.325,3628,1.325,3629,1.325,3630,1.325,3631,0.711,3632,1.861,3633,0.711,3634,0.711,3635,1.325,3636,1.325,3637,0.711,3638,0.711,3639,0.711,3640,0.711,3641,0.711,3642,0.711,3643,0.711,3644,0.711,3645,0.711,3646,0.711,3647,0.711,3648,0.711,3649,1.325,3650,0.711,3651,0.711,3652,0.711,3653,0.711,3654,0.629,3655,0.711,3656,0.711,3657,0.711,3658,0.711,3659,0.711,3660,0.711,3661,0.711,3662,0.711,3663,0.711,3664,0.711,3665,0.711,3666,0.711,3667,0.711,3668,0.711,3669,0.711,3670,0.711,3671,0.711,3672,0.711,3673,0.711,3674,0.711,3675,0.629,3676,0.629,3677,0.711,3678,0.711,3679,0.711,3680,0.711,3681,0.711,3682,0.711,3683,0.711,3684,0.711,3685,0.711,3686,0.711,3687,0.711,3688,0.711,3689,0.711]],["title/coverage.html",[3690,4.933]],["body/coverage.html",[7,0.009,29,0.048,40,0.182,82,1.175,84,1.403,86,1.681,88,1.681,90,1.681,92,1.681,94,1.681,103,2.173,108,2.173,111,1.615,113,1.837,116,1.309,117,2.972,119,1.931,120,1.931,128,1.931,130,1.931,133,3.292,135,1.754,136,3.142,138,1.555,142,1.837,144,1.837,146,1.754,148,1.615,149,2.232,151,1.837,152,2.204,178,0.958,227,0.216,235,0.004,236,0.004,237,2.245,238,2.173,240,2.56,242,2.041,276,2.041,283,1.031,289,2.041,290,2.041,292,1.615,299,2.041,320,1.359,324,2.173,327,1.615,329,1.837,331,1.837,363,2.339,418,2.041,430,1.931,432,2.173,435,0.695,438,2.041,440,2.339,441,1.794,442,4.062,444,0.832,490,1.735,492,2.56,503,1.113,507,1.5,525,2.041,526,3.6,527,3.6,532,2.55,539,1.837,557,2.173,558,3.6,565,2.173,566,2.56,567,2.56,573,2.041,574,2.56,575,2.56,602,2.041,603,2.56,604,2.56,614,1.931,645,2.56,668,2.56,669,3.6,710,2.221,711,2.56,716,5.27,744,1.208,791,2.56,799,2.56,829,2.56,864,3.6,865,2.56,895,4.078,908,2.56,917,4.04,918,2.56,949,2.56,1063,2.56,1081,2.56,1096,2.56,1115,2.56,1130,3.345,1131,2.56,1178,4.078,1179,2.56,1215,2.56,1239,2.173,1240,2.56,1242,4.07,1249,2.56,1260,2.173,1261,2.56,1271,1.403,1273,1.359,1275,1.931,1286,2.56,1296,1.931,1297,2.56,1313,2.173,1314,2.56,1362,2.173,1363,2.56,1374,2.041,1390,1.754,1408,2.56,1410,2.56,1421,2.339,1437,2.173,1438,2.56,1455,2.041,1465,1.681,1475,1.837,1476,3.6,1477,2.56,1529,2.339,1530,3.345,1544,1.931,1545,1.931,1546,2.56,1566,2.173,1567,2.173,1572,2.56,1615,2.56,1630,2.56,1631,2.041,1645,4.078,1646,2.56,1651,2.173,1673,2.173,1675,2.56,1694,2.173,1695,2.56,1712,2.041,1719,1.837,1722,1.931,1736,2.56,1740,1.754,1780,2.339,1796,2.56,1822,2.56,1823,2.56,1836,1.555,1849,2.173,1850,2.56,1853,1.615,1857,2.041,1867,2.041,1875,2.339,1877,2.56,1913,3.83,1914,2.56,1946,2.56,2013,2.173,2014,2.56,2015,2.56,2046,1.931,2056,2.173,2057,2.56,2058,2.56,2084,1.931,2095,2.173,2096,2.56,2097,2.56,2121,1.931,2131,2.173,2132,2.56,2133,2.56,2157,1.931,2172,2.56,2202,2.56,2227,2.56,2260,1.931,2264,2.56,2278,2.041,2279,4.078,2282,3.6,2283,3.6,2295,2.339,2297,2.339,2370,2.56,2391,2.56,2392,2.56,2432,2.56,2435,2.56,2460,3.6,2464,2.173,2470,4.078,2471,2.56,2497,2.56,2504,2.56,2508,2.173,2509,2.56,2539,1.931,2540,4.302,2541,2.56,2570,2.173,2571,2.56,2597,2.173,2598,2.56,2658,2.56,2745,3.6,2746,2.56,2804,2.56,2856,2.56,2857,2.56,2861,2.972,2862,3.6,2863,2.56,2870,2.041,2873,2.56,2890,2.56,2971,2.56,3231,2.56,3284,2.173,3330,2.56,3525,6.41,3690,2.339,3691,2.897,3692,6.591,3693,2.897,3694,7.979,3695,8.954,3696,8.2,3697,3.6,3698,2.56,3699,2.56,3700,6.105,3701,8.098,3702,2.897,3703,4.459,3704,2.56,3705,2.56,3706,2.56,3707,2.56,3708,7.979,3709,6.961,3710,2.56,3711,2.56,3712,4.459,3713,2.897,3714,2.56,3715,2.897,3716,2.897,3717,2.897,3718,2.897]],["title/miscellaneous/enumerations.html",[3719,2.253,3720,4.75]],["body/miscellaneous/enumerations.html",[7,0.009,39,0.79,152,3.018,235,0.006,236,0.006,243,0.308,351,2.995,352,3.508,440,4.112,441,2.556,442,4.598,450,5.388,452,3.723,456,4.702,467,3.232,486,4.702,487,5.388,488,4.449,529,2.782,554,2.706,827,4.702,917,2.956,956,5.388,965,5.388,1050,5.388,1061,4.232,1166,4.702,1193,5.007,1295,5.388,1301,4.042,1530,3.821,1536,6.378,1537,5.388,1538,5.388,1539,5.007,1540,5.007,1541,5.388,1542,5.388,1543,5.388,1604,5.007,1780,4.112,1783,5.899,1789,5.899,1913,3.589,1932,5.899,1933,5.899,1934,5.007,1935,5.899,1936,5.899,1937,5.388,1938,5.007,1939,5.388,1940,5.388,1941,5.007,3719,3.085,3720,4.502,3721,5.093,3722,5.093,3723,5.093,3724,6.674,3725,6.674,3726,6.674,3727,5.093]],["title/miscellaneous/functions.html",[3719,2.253,3728,4.75]],["body/miscellaneous/functions.html",[7,0.008,235,0.008,236,0.008,243,0.437,3710,6.38,3711,7.681,3719,4.372,3728,6.38,3729,7.218]],["title/index.html",[243,0.225,2991,2.791,2992,3.003]],["body/index.html",[7,0.008,26,1.619,28,0.091,29,0.1,107,5.377,132,3.267,152,2.467,165,3.921,171,3.329,223,3.582,224,5.605,235,0.006,236,0.006,341,1.799,362,3.858,435,1.459,451,1.632,452,1.751,495,1.83,551,2.813,554,3.357,556,3.618,732,3.329,749,3.329,806,2.958,807,5.209,854,3.126,861,2.687,862,5.606,898,2.687,973,4.564,986,3.582,1155,3.582,1411,5.209,1414,3.329,1633,2.958,1677,3.921,2250,3.921,2400,4.564,2507,3.329,2562,5.873,2612,4.056,2994,3.921,2997,6.603,3005,3.921,3023,3.921,3059,6.603,3062,6.603,3080,3.921,3088,3.921,3099,3.921,3103,3.921,3114,5.377,3148,3.921,3158,3.921,3196,3.582,3275,3.921,3278,5.377,3284,3.329,3286,5.377,3308,3.921,3325,3.921,3337,6.137,3339,3.921,3347,3.921,3350,3.921,3365,6.603,3440,3.582,3443,3.921,3446,6.603,3487,5.377,3503,3.921,3510,6.603,3530,6.919,3534,3.921,3538,3.921,3539,7.965,3548,5.377,3562,3.582,3585,5.377,3611,6.137,3654,3.921,3675,7.561,3676,3.921,3690,3.582,3730,4.437,3731,4.437,3732,6.084,3733,4.437,3734,4.437,3735,6.084,3736,3.921,3737,4.437,3738,4.437,3739,4.437,3740,4.437,3741,4.437,3742,4.437,3743,4.437,3744,4.437,3745,4.437,3746,4.437,3747,4.437,3748,4.437,3749,4.437,3750,4.437,3751,4.437,3752,4.437,3753,6.084,3754,4.437,3755,4.437,3756,4.437,3757,4.437,3758,4.437,3759,4.437,3760,7.828,3761,4.437,3762,4.437,3763,6.084,3764,4.437,3765,4.437,3766,4.437,3767,4.437,3768,4.437,3769,4.437,3770,4.437,3771,4.437,3772,6.084,3773,4.437,3774,4.437,3775,6.084,3776,4.437,3777,4.437,3778,4.437,3779,4.437,3780,4.437,3781,4.437,3782,4.437,3783,6.084,3784,4.437,3785,6.084,3786,6.084,3787,4.437,3788,4.437,3789,4.437,3790,4.437,3791,4.437,3792,4.437,3793,4.437,3794,4.437,3795,4.437,3796,4.437,3797,4.437,3798,4.437,3799,6.084,3800,4.437,3801,3.921,3802,4.437,3803,4.437,3804,4.437,3805,4.437,3806,6.084,3807,4.437,3808,4.437,3809,4.437,3810,4.437,3811,4.437,3812,4.437,3813,4.437,3814,4.437,3815,4.437,3816,4.437,3817,4.437,3818,4.437,3819,4.437,3820,4.437,3821,6.084,3822,4.437,3823,4.437,3824,4.437,3825,4.437,3826,4.437,3827,3.329,3828,3.582]],["title/license.html",[2991,2.791,2992,3.003,3827,2.791]],["body/license.html",[7,0.007,26,2.226,235,0.007,236,0.007,554,2.473,556,2.953,737,3.573,748,4.923,758,2.692,986,4.923,1192,4.923,1411,5.613,1420,4.923,1883,4.923,2348,4.923,2562,4.575,3284,4.575,3562,6.04,3736,8.029,3801,6.612,3827,4.575,3828,4.923,3829,8.093,3830,6.098,3831,7.481,3832,6.098,3833,6.098,3834,6.098,3835,6.098,3836,6.098,3837,6.098,3838,6.098,3839,6.098,3840,6.098,3841,6.098,3842,6.098,3843,6.098,3844,6.098,3845,6.098,3846,6.098,3847,6.098,3848,6.098,3849,7.481,3850,6.098,3851,6.098,3852,6.098,3853,6.098,3854,6.098,3855,6.098,3856,7.481,3857,7.481,3858,6.098,3859,6.098,3860,6.098,3861,6.098,3862,6.098,3863,6.098,3864,6.098,3865,6.098,3866,6.098,3867,6.098,3868,6.098,3869,6.098,3870,6.098,3871,6.098,3872,6.098,3873,6.098,3874,6.098,3875,6.098,3876,6.098,3877,6.098,3878,6.098,3879,6.098,3880,6.098,3881,6.098,3882,6.098,3883,6.098]],["title/modules.html",[2,2.23]],["body/modules.html",[1,4.477,2,2.178,6,4.204,7,0.007,8,4.204,9,3.784,10,4.204,11,4.204,12,4.204,13,4.204,14,3.978,15,3.327,16,4.204,17,4.204,18,3.978,19,4.204,20,4.204,21,3.463,22,3.978,23,4.204,235,0.007,236,0.007,417,3.978,1607,4.477,1776,3.978,3127,8.295,3884,9.385,3885,9.385,3886,9.399,3887,5.274,3888,5.967]],["title/overview.html",[3889,5.4]],["body/overview.html",[1,6.906,2,1.241,3,1.935,4,3.007,5,3.007,6,6.151,7,0.009,8,5.541,9,4.986,10,4.981,11,4.222,12,4.981,13,5.971,14,5.524,15,4.725,16,5.541,17,5.541,18,5.105,19,5.91,20,5.541,21,5.094,22,5.105,23,5.541,24,1.987,25,1.343,26,1.241,175,1.098,235,0.005,236,0.005,239,1,320,3.592,327,4.27,329,4.856,331,4.856,413,3.007,414,3.007,415,3.007,416,3.007,417,5.105,418,5.396,426,3.007,427,3.007,429,3.007,430,5.105,439,1.125,461,1.459,491,1.181,602,5.396,614,3.995,639,3.007,640,3.007,641,3.007,852,2.746,871,2.746,1275,3.995,1282,3.007,1283,3.007,1390,4.638,1465,4.445,1475,3.8,1545,5.105,1561,3.007,1562,3.007,1564,3.007,1607,5.746,1608,3.007,1609,3.007,1610,3.007,1673,2.552,1719,4.856,1722,3.995,1740,4.638,1772,3.007,1773,3.007,1774,3.007,1775,3.007,1776,5.105,1836,4.112,1872,3.007,1873,3.007,1874,3.007,1922,3.007,1924,3.007,1925,3.007,2046,5.105,2084,5.105,2121,5.105,2157,5.105,2166,3.007,2167,3.007,2169,3.007,2196,3.007,2197,3.007,2198,3.007,2222,3.007,2223,3.007,2224,3.007,2257,3.007,2258,3.007,2259,3.007,2260,5.105,2275,3.007,2277,3.007,2278,4.666,2364,3.007,2366,3.007,2367,3.007,2539,5.105,2849,3.007,2851,3.007,2852,3.007,2867,3.007,2868,3.007,2869,3.007,2870,5.396,2965,3.007,2966,3.007,2968,3.007,3033,3.007,3083,3.007,3322,3.007,3889,3.007]],["title/properties.html",[445,1.007,3890,3.72]],["body/properties.html",[7,0.009,59,4.994,106,5.375,235,0.007,236,0.007,322,4.691,385,1.335,445,1.248,495,2.002,554,3.198,556,3.819,765,6.972,788,5.375,981,5.884,1452,4.691,2999,5.884,3000,5.884,3196,5.375,3404,5.884,3524,5.884,3827,4.994,3828,5.375,3887,5.884,3891,6.657,3892,6.657,3893,6.657,3894,6.657,3895,6.657,3896,6.657,3897,6.657,3898,6.657,3899,6.657,3900,6.657,3901,6.657,3902,6.657,3903,6.657,3904,6.657,3905,6.657,3906,6.657]],["title/miscellaneous/typealiases.html",[3719,2.253,3907,5.374]],["body/miscellaneous/typealiases.html",[7,0.008,40,0.454,235,0.008,236,0.008,243,0.437,3697,5.828,3719,4.372,3908,7.218,3909,8.269,3910,6.38]],["title/miscellaneous/variables.html",[3515,4.339,3719,2.253]],["body/miscellaneous/variables.html",[7,0.009,40,0.333,116,1.466,152,2.773,178,2.506,218,4.558,235,0.006,236,0.006,243,0.32,274,0.991,283,2.433,316,2.204,346,2.176,380,1.662,385,1.06,397,1.326,445,0.991,451,2.32,452,3.414,540,3.524,578,3.813,586,3.966,618,2.932,735,1.98,780,3.073,1030,6.044,1155,4.268,1271,3.311,1273,3.207,1421,5.521,1424,4.673,1628,3.725,1633,4.558,1655,4.673,2279,5.13,2282,4.268,2283,5.521,2295,5.521,2297,5.521,2298,4.268,2299,4.673,2300,4.673,2301,4.673,2302,4.673,3010,4.673,3440,4.268,3515,4.268,3697,4.268,3698,4.673,3699,6.044,3704,4.673,3705,6.044,3706,4.673,3707,6.044,3714,4.673,3719,3.202,3910,6.044,3911,5.287,3912,5.287,3913,5.287,3914,5.287,3915,5.287,3916,5.287,3917,5.287,3918,5.287,3919,5.287,3920,5.287,3921,5.287,3922,5.287,3923,5.287,3924,5.287,3925,5.287,3926,6.838,3927,5.287,3928,5.287,3929,5.287,3930,5.287,3931,5.287,3932,5.287,3933,5.287,3934,5.287,3935,5.287,3936,6.838,3937,6.838,3938,6.838,3939,6.838,3940,5.287,3941,5.287]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":716,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":3751,"title":{},"body":{"index.html":{}}}],["0/1",{"_index":3695,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3703,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3712,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":3717,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":3715,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3709,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":3693,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3694,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3696,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3701,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3708,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3692,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":3700,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":3332,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":586,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01t00:30:00z",{"_index":3934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":3162,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3054,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":3345,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":884,"title":{},"body":{"entities/DbInsightMember.html":{},"changelog.html":{}}}],["04082d7",{"_index":3436,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3499,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3052,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3051,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":759,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"changelog.html":{}}}],["0848443",{"_index":3599,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3164,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":3392,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":3182,"title":{},"body":{"changelog.html":{}}}],["0e8a16",{"_index":1012,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["0eb10bb",{"_index":3207,"title":{},"body":{"changelog.html":{}}}],["0})@column({type",{"_index":942,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{}}}],["1",{"_index":461,"title":{"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":3665,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":3661,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":3329,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":3321,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":3313,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":3293,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":3283,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":3259,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":3258,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":3252,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":3241,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":3239,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":3233,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":3227,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":3222,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":3218,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":3211,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":3210,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":3204,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":3199,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":3176,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":3165,"title":{},"body":{"changelog.html":{}}}],["1.26.0",{"_index":3161,"title":{},"body":{"changelog.html":{}}}],["1.27.0",{"_index":3152,"title":{},"body":{"changelog.html":{}}}],["1.28.0",{"_index":3084,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":3071,"title":{},"body":{"changelog.html":{}}}],["1.29.1",{"_index":3053,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":3652,"title":{},"body":{"changelog.html":{}}}],["1.30.0",{"_index":3036,"title":{},"body":{"changelog.html":{}}}],["1.30.1",{"_index":3020,"title":{},"body":{"changelog.html":{}}}],["1.30.2",{"_index":3018,"title":{},"body":{"changelog.html":{}}}],["1.31.0",{"_index":3009,"title":{},"body":{"changelog.html":{}}}],["1.31.1",{"_index":2999,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.4.0",{"_index":3648,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":3645,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":3643,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":3617,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":3613,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":3584,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":3580,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":3577,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":3574,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":3569,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":3567,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":3560,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":3558,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":3610,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":3608,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":3605,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":3603,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":3600,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":3596,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":3593,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":3590,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":3555,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":3551,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":3506,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":3502,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":3500,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":3533,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":3529,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":3527,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":3523,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":3520,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":3517,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":3514,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":3509,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":3486,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":3483,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":3481,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":3359,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":735,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":827,"title":{},"body":{"entities/DbEmoji.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["100'})@column({type",{"_index":814,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":463,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["103",{"_index":3146,"title":{},"body":{"changelog.html":{}}}],["1045024650",{"_index":1046,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1045024650})@primarycolumn('integer",{"_index":1002,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@column({type",{"_index":974,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":464,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":2241,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["115",{"_index":3155,"title":{},"body":{"changelog.html":{}}}],["116",{"_index":3130,"title":{},"body":{"changelog.html":{}}}],["117",{"_index":3132,"title":{},"body":{"changelog.html":{}}}],["118",{"_index":3128,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":3212,"title":{},"body":{"changelog.html":{}}}],["120",{"_index":3159,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":783,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":745,"title":{},"body":{"entities/DbContribution.html":{}}}],["124",{"_index":3138,"title":{},"body":{"changelog.html":{}}}],["125",{"_index":3142,"title":{},"body":{"changelog.html":{}}}],["127.0.0.1",{"_index":3750,"title":{},"body":{"index.html":{}}}],["128",{"_index":3074,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3037,"title":{},"body":{"changelog.html":{}}}],["130",{"_index":3072,"title":{},"body":{"changelog.html":{}}}],["131",{"_index":3081,"title":{},"body":{"changelog.html":{}}}],["133",{"_index":3057,"title":{},"body":{"changelog.html":{}}}],["135",{"_index":3039,"title":{},"body":{"changelog.html":{}}}],["136",{"_index":3047,"title":{},"body":{"changelog.html":{}}}],["137",{"_index":3044,"title":{},"body":{"changelog.html":{}}}],["139",{"_index":3041,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":601,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":750,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":736,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":835,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":855,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":588,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["14",{"_index":3034,"title":{},"body":{"changelog.html":{}}}],["141",{"_index":3029,"title":{},"body":{"changelog.html":{}}}],["143",{"_index":3011,"title":{},"body":{"changelog.html":{}}}],["144",{"_index":3016,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":3413,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":786,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["150",{"_index":3007,"title":{},"body":{"changelog.html":{}}}],["155e99e",{"_index":3355,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":726,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":3085,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":3640,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":3388,"title":{},"body":{"changelog.html":{}}}],["1680fb3",{"_index":3113,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3234,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":3492,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3033,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["19",{"_index":587,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["196",{"_index":1078,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{}}}],["196})@primarygeneratedcolumn",{"_index":1067,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{}}}],["1bbeaf6",{"_index":3451,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":3358,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":3236,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":808,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":471,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":1704,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["2/3",{"_index":3702,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":871,"title":{},"body":{"entities/DbInsightMember.html":{},"changelog.html":{},"overview.html":{}}}],["2016",{"_index":734,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":758,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/StripeService.html":{},"changelog.html":{},"license.html":{}}}],["2023",{"_index":585,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["2073883",{"_index":3343,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":3519,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":3528,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3083,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["22",{"_index":3213,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":787,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["22:04:29.000000'})@column({type",{"_index":991,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":994,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":761,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["22:04:39.000000",{"_index":947,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22:04:39.000000'})@column({type",{"_index":933,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22d3cc1",{"_index":3614,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":3171,"title":{},"body":{"changelog.html":{}}}],["234343",{"_index":1921,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":1918,"title":{},"body":{"classes/RepoInfo.html":{}}}],["237133",{"_index":797,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":878,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{}}}],["237133})@column('bigint",{"_index":1207,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@column({type",{"_index":859,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlightReaction.html":{}}}],["237133})@primarycolumn('bigint",{"_index":792,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":837,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["24",{"_index":3019,"title":{},"body":{"changelog.html":{}}}],["247e0ba",{"_index":3412,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":852,"title":{},"body":{"entities/DbInsight.html":{},"changelog.html":{},"overview.html":{}}}],["255",{"_index":721,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{}}}],["26",{"_index":3001,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":3322,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["272c09a",{"_index":3689,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":760,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"changelog.html":{}}}],["286e864",{"_index":3137,"title":{},"body":{"changelog.html":{}}}],["287",{"_index":948,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["287})@column({type",{"_index":925,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["28f6699",{"_index":3030,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3223,"title":{},"body":{"changelog.html":{}}}],["293c4d3",{"_index":3065,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":3381,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":3410,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":3679,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":3573,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":3221,"title":{},"body":{"changelog.html":{}}}],["2d6609a",{"_index":3082,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":3238,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":3403,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":473,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["3001",{"_index":3757,"title":{},"body":{"index.html":{}}}],["30})@type(undefined)@isin(['7",{"_index":476,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["31",{"_index":3055,"title":{},"body":{"changelog.html":{}}}],["31e4d60",{"_index":3513,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":3323,"title":{},"body":{"changelog.html":{}}}],["3282435",{"_index":3418,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":3383,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":3609,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["35a08da",{"_index":3124,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":3303,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":3265,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":3425,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":3266,"title":{},"body":{"changelog.html":{}}}],["38f1dc9",{"_index":3021,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":3633,"title":{},"body":{"changelog.html":{}}}],["39bdd16",{"_index":3151,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":3264,"title":{},"body":{"changelog.html":{}}}],["3f9e756",{"_index":3042,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":1433,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":3289,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":3287,"title":{},"body":{"changelog.html":{}}}],["42211",{"_index":1176,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":1171,"title":{},"body":{"entities/DbSubscription.html":{}}}],["426820139",{"_index":2866,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["43",{"_index":3292,"title":{},"body":{"changelog.html":{}}}],["4456742596",{"_index":1008,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["4552c66",{"_index":3495,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":3334,"title":{},"body":{"changelog.html":{}}}],["475e5dd",{"_index":3090,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":798,"title":{},"body":{"entities/DbCustomer.html":{}}}],["498})@column({type",{"_index":794,"title":{},"body":{"entities/DbCustomer.html":{}}}],["4b264d5",{"_index":3338,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":3344,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1061,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":2859,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":2489,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":459,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1430,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5385049",{"_index":3271,"title":{},"body":{"changelog.html":{}}}],["544673a",{"_index":3012,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":3256,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":3324,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":3248,"title":{},"body":{"changelog.html":{}}}],["58",{"_index":3250,"title":{},"body":{"changelog.html":{}}}],["58540e7",{"_index":3116,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":3681,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":3408,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":3376,"title":{},"body":{"changelog.html":{}}}],["5e0b1c5",{"_index":3045,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":3198,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":3203,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":3674,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":3540,"title":{},"body":{"changelog.html":{}}}],["5ee770b",{"_index":3078,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":3630,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":3191,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":988,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["607cf5d",{"_index":3647,"title":{},"body":{"changelog.html":{}}}],["60].map(async",{"_index":1734,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["611b923",{"_index":3026,"title":{},"body":{"changelog.html":{}}}],["612",{"_index":1048,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["612})@column('integer",{"_index":1023,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["618225f",{"_index":3416,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":3435,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":3642,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":3498,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":3235,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":3655,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":3302,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":3544,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":3237,"title":{},"body":{"changelog.html":{}}}],["648dbeb",{"_index":3251,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":3231,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["66fb61e",{"_index":3122,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":3508,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":3225,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":3458,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":3466,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":3312,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":3195,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":3516,"title":{},"body":{"changelog.html":{}}}],["6df9486",{"_index":3098,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":3629,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":785,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["71359796})@column",{"_index":1071,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{}}}],["71359796})@column({type",{"_index":756,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlightReaction.html":{}}}],["71359796})@primarycolumn({type",{"_index":935,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["72",{"_index":3220,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":3445,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":3216,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":3306,"title":{},"body":{"changelog.html":{}}}],["762c1cb",{"_index":3008,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":3205,"title":{},"body":{"changelog.html":{}}}],["7728bc8",{"_index":3073,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":3589,"title":{},"body":{"changelog.html":{}}}],["797",{"_index":552,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["79bf61d",{"_index":3537,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":3522,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":3245,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":3685,"title":{},"body":{"changelog.html":{}}}],["7e2756b",{"_index":3035,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":3579,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":3616,"title":{},"body":{"changelog.html":{}}}],["8080:3001",{"_index":3786,"title":{},"body":{"index.html":{}}}],["81",{"_index":3202,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":3625,"title":{},"body":{"changelog.html":{}}}],["828b7d2",{"_index":3017,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":3186,"title":{},"body":{"changelog.html":{}}}],["85a7549",{"_index":3143,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":3447,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":3429,"title":{},"body":{"changelog.html":{}}}],["86e013f",{"_index":3131,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":3180,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":3181,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":3349,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":3554,"title":{},"body":{"changelog.html":{}}}],["89",{"_index":3136,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":3454,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":3240,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":3612,"title":{},"body":{"changelog.html":{}}}],["8bfda45",{"_index":3139,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":3192,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":1693,"title":{},"body":{"classes/PageOptionsDto.html":{},"changelog.html":{}}}],["90'])@isint()@isoptional",{"_index":477,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["911df68",{"_index":3586,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":3187,"title":{},"body":{"changelog.html":{}}}],["94331ba",{"_index":3048,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":3433,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":3592,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":3364,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":3267,"title":{},"body":{"changelog.html":{}}}],["98980b0",{"_index":3111,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":3274,"title":{},"body":{"changelog.html":{}}}],["9b12042",{"_index":3040,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":3193,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":3937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_stripe",{"_index":2228,"title":{},"body":{"injectables/StripeService.html":{}}}],["a08abfd",{"_index":3411,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":3634,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":3288,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":3536,"title":{},"body":{"changelog.html":{}}}],["a5a4789",{"_index":3119,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":3501,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":3294,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":3855,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":3653,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":3651,"title":{},"body":{"changelog.html":{}}}],["accepted",{"_index":924,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":919,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":2798,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":866,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["accessing",{"_index":3587,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":1676,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{}}}],["accessroles",{"_index":1495,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["action",{"_index":3877,"title":{},"body":{"license.html":{}}}],["active",{"_index":1166,"title":{},"body":{"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":1165,"title":{},"body":{"entities/DbSubscription.html":{}}}],["adapter",{"_index":3277,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":2612,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"index.html":{}}}],["addcustomer",{"_index":646,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":2232,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":653,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":973,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["addgroupby(\"emoji_id",{"_index":2738,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addhighlightforuser",{"_index":2617,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":2600,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":2607,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":1573,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":1580,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":2601,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":2615,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":2806,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":1478,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":2750,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":1488,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":1547,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":1552,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":3200,"title":{},"body":{"changelog.html":{}}}],["additions",{"_index":950,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addmemberforinsight",{"_index":2752,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":516,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":518,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":1811,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":2007,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":2012,"title":{},"body":{"injectables/RepoService.html":{}}}],["adds",{"_index":2039,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect",{"_index":1991,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(\"count(emoji_id",{"_index":2735,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":1522,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"repos.full_name",{"_index":1817,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":1819,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":2563,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"users.login",{"_index":2695,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"users.name",{"_index":1520,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect(`${interval}::integer",{"_index":1764,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addselect(qb",{"_index":1979,"title":{},"body":{"injectables/RepoService.html":{}}}],["adduserfollowerbyuserid",{"_index":2542,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":2548,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserhighlight",{"_index":2659,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":2670,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction",{"_index":2660,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":2672,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserrepo",{"_index":2874,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":2878,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":3325,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":3637,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":2467,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["advised",{"_index":3795,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":3419,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":3315,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":3497,"title":{},"body":{"changelog.html":{}}}],["afde490",{"_index":3093,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":3572,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":1961,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":3908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":1965,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":1967,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":1966,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":1968,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_prs",{"_index":920,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allof",{"_index":3921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["along",{"_index":3366,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":3115,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":3163,"title":{},"body":{"changelog.html":{}}}],["alpha.10",{"_index":3166,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":3175,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":3174,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":3173,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":3172,"title":{},"body":{"changelog.html":{}}}],["alpha.6",{"_index":3170,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":3169,"title":{},"body":{"changelog.html":{}}}],["alpha.8",{"_index":3168,"title":{},"body":{"changelog.html":{}}}],["alpha.9",{"_index":3167,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":2027,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":3847,"title":{},"body":{"license.html":{}}}],["andwhere(\"insight_members.access",{"_index":1519,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":1518,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":2216,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":2188,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":2384,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":2985,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":2560,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":2559,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":2739,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":2737,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlights.user_id",{"_index":2698,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(`now",{"_index":1816,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repos\".\"topics",{"_index":1896,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":1909,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["api",{"_index":3196,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["api.certificate",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["api.connection",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":3732,"title":{},"body":{"index.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":3787,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["api_host",{"_index":3748,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":1387,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibody",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["apiconflictresponse",{"_index":2045,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidocs",{"_index":3489,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":3918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":776,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["apihideproperty()@column({type",{"_index":1026,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":741,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":752,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":816,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apimodelproperty",{"_index":777,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["apimodelproperty({description",{"_index":714,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["apimodelpropertyoptional",{"_index":778,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["apimodelpropertyoptional({description",{"_index":729,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["apinotfoundresponse",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiokresponse",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse",{"_index":1271,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":1841,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":1280,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":2815,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":2775,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":1727,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":1869,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":1396,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":1399,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apiproperty",{"_index":545,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({description",{"_index":531,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({type",{"_index":1639,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":479,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":1307,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":474,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":454,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":460,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":1304,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apitags",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"authentication",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"emojis",{"_index":1279,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"health",{"_index":1331,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":1394,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":1468,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"pull",{"_index":1725,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["apitags(\"repository",{"_index":1839,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":2303,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":2530,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiunauthorizedresponse",{"_index":1459,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":2771,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":2240,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":3756,"title":{},"body":{"index.html":{}}}],["appearing",{"_index":3438,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":3754,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1882,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["apply(httploggermiddleware",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["applydecorators",{"_index":3917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applyquerybuilderfilters",{"_index":1878,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":1880,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1102,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":3368,"title":{},"body":{"changelog.html":{}}}],["arg",{"_index":1040,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":3881,"title":{},"body":{"license.html":{}}}],["array",{"_index":540,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":2818,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":3601,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":1295,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":3802,"title":{},"body":{"index.html":{}}}],["assign",{"_index":3594,"title":{},"body":{"changelog.html":{}}}],["assignee",{"_index":976,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":951,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":952,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":3838,"title":{},"body":{"license.html":{}}}],["associating",{"_index":3246,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":3659,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":3360,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dtos/user",{"_index":2926,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":1460,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["auth/supabase.user.decorator",{"_index":1461,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["authcontroller",{"_index":238,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":2436,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":2439,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["authguard",{"_index":2433,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":2434,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":981,"title":{},"body":{"entities/DbPullRequest.html":{},"properties.html":{}}}],["author_avatar",{"_index":953,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_login",{"_index":954,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["authorized",{"_index":1446,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":3871,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":2003,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":2004,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":3888,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":977,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["await",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["aws:main",{"_index":1055,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1037,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["b0169e7",{"_index":3379,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":3291,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":3532,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":3568,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":3353,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":3421,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":3526,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":3641,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":3602,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":3426,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":3262,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":3217,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":3369,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":3559,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":939,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":3893,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":3243,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":3405,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":3491,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":2294,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["based",{"_index":1886,"title":{},"body":{"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["baseentity",{"_index":769,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":1947,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(range",{"_index":1952,"title":{},"body":{"injectables/RepoService.html":{}}}],["baseline",{"_index":3631,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":647,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":3549,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":3557,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":3232,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":3620,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":3206,"title":{},"body":{"changelog.html":{}}}],["bdougie",{"_index":1212,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column({type",{"_index":1189,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":1781,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["be5fae7",{"_index":3147,"title":{},"body":{"changelog.html":{}}}],["beautiful",{"_index":3272,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":3005,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":3763,"title":{},"body":{"index.html":{}}}],["below",{"_index":3822,"title":{},"body":{"index.html":{}}}],["beneficial",{"_index":3765,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":3000,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.10",{"_index":3476,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":3475,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":3474,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":3473,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":3472,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":3471,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":3470,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":3469,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":3468,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":3467,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":3032,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":3031,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":3050,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":3049,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":3480,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":3479,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":3478,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":3477,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":3733,"title":{},"body":{"index.html":{}}}],["better",{"_index":3304,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":3296,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":727,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["billing_address_collection",{"_index":2246,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":3737,"title":{},"body":{"index.html":{}}}],["bio",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["blocking",{"_index":3068,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["body.interests",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":530,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":3711,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":749,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":3793,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":3374,"title":{},"body":{"changelog.html":{}}}],["brian",{"_index":887,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":3886,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3884,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":3002,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":3902,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3059,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":1509,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builds",{"_index":3783,"title":{},"body":{"index.html":{}}}],["business",{"_index":3771,"title":{},"body":{"index.html":{}}}],["c",{"_index":3830,"title":{},"body":{"license.html":{}}}],["c000984",{"_index":3160,"title":{},"body":{"changelog.html":{}}}],["c013b70",{"_index":3566,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":3570,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":3623,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":3257,"title":{},"body":{"changelog.html":{}}}],["c54dcd9",{"_index":3070,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":3188,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":3423,"title":{},"body":{"changelog.html":{}}}],["c8dab92",{"_index":3106,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca9a69c",{"_index":3133,"title":{},"body":{"changelog.html":{}}}],["cae5dbd",{"_index":3058,"title":{},"body":{"changelog.html":{}}}],["canaccess",{"_index":2777,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["cancel",{"_index":1144,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":1132,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":1133,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":2253,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":1148,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":1134,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":2782,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":1479,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":1493,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["capabilities",{"_index":3263,"title":{},"body":{"changelog.html":{}}}],["capturing",{"_index":3144,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":2245,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":3118,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":3764,"title":{},"body":{"index.html":{}}}],["catch",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":3638,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":3671,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":3576,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":3604,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":3505,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":3249,"title":{},"body":{"changelog.html":{}}}],["cfe2a69",{"_index":3129,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":3465,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":987,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":955,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changelog",{"_index":2993,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":2996,"title":{},"body":{"changelog.html":{}}}],["channel",{"_index":3820,"title":{},"body":{"index.html":{}}}],["character",{"_index":718,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{}}}],["charge",{"_index":3835,"title":{},"body":{"license.html":{}}}],["check",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":2891,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":2904,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":2299,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":2358,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":2363,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":2360,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":2361,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":1496,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":2582,"title":{},"body":{"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["ci",{"_index":3087,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":3755,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3874,"title":{},"body":{"license.html":{}}}],["class",{"_index":227,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":439,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"overview.html":{}}}],["clc",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":1435,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":705,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":1432,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":3924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":3417,"title":{},"body":{"changelog.html":{}}}],["cli_split_kwargs",{"_index":1057,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1035,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":3803,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":1421,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":3895,"title":{},"body":{"properties.html":{}}}],["close",{"_index":990,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1050,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1033,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":956,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closes",{"_index":3183,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":426,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":427,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":428,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":429,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":639,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":640,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":641,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":1282,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":1283,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":1404,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":1405,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":1561,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":1564,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":1563,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":1562,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":1608,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":1609,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":1610,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":1772,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":1775,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":1773,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":1774,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":1872,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":1873,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":1874,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":1922,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":1924,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":1923,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":1925,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":2196,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":2198,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":2199,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":2197,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":2166,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":2169,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":2168,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":2167,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":2222,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":2223,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":2224,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":2257,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":2258,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":2259,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2275,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":2277,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2276,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":2364,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":2366,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":2365,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":2367,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2849,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2852,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":2850,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":2851,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":2867,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":2868,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_providers",{"_index":2869,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":2965,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":2966,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":2967,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":2968,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":1992,"title":{},"body":{"injectables/RepoService.html":{}}}],["code",{"_index":862,"title":{},"body":{"entities/DbInsight.html":{},"changelog.html":{},"index.html":{}}}],["code'})@column({type",{"_index":851,"title":{},"body":{"entities/DbInsight.html":{}}}],["collaboration",{"_index":2502,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["collection",{"_index":1656,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["color",{"_index":1011,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorize",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":768,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["column(\"bigint",{"_index":1211,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1052,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1049,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1051,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1016,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["columns",{"_index":1235,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["command",{"_index":3760,"title":{},"body":{"index.html":{}}}],["comments",{"_index":957,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["commit",{"_index":3673,"title":{},"body":{"changelog.html":{}}}],["committing",{"_index":3796,"title":{},"body":{"index.html":{}}}],["common",{"_index":3125,"title":{},"body":{"changelog.html":{}}}],["common/constants/order",{"_index":505,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1272,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/filter",{"_index":1723,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":483,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["common/dtos/page.dto",{"_index":504,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{}}}],["common/filters/repo",{"_index":1750,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["common/middleware/database",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["community",{"_index":3813,"title":{},"body":{"index.html":{}}}],["company",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":3800,"title":{},"body":{"index.html":{}}}],["completely",{"_index":3095,"title":{},"body":{"changelog.html":{}}}],["completing",{"_index":3354,"title":{},"body":{"changelog.html":{}}}],["complexity",{"_index":3896,"title":{},"body":{"properties.html":{}}}],["component",{"_index":3654,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["computed",{"_index":929,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["concurrency",{"_index":3541,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":3854,"title":{},"body":{"license.html":{}}}],["config",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["config/api.config",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["config/db",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["config/endpoint.config",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["config/stripe.config",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"controllers/HealthController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":3632,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":2397,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["conflictexception",{"_index":2183,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":2784,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":2191,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connection",{"_index":3882,"title":{},"body":{"license.html":{}}}],["connections",{"_index":3149,"title":{},"body":{"changelog.html":{}}}],["connector",{"_index":3097,"title":{},"body":{"changelog.html":{}}}],["console.log",{"_index":3420,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":3281,"title":{},"body":{"changelog.html":{}}}],["consolelogger",{"_index":605,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":613,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":1688,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(configservice",{"_index":2230,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor(context",{"_index":612,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":494,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":650,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":1632,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":1287,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(insightmemberrepository",{"_index":1484,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":1549,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":1577,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":1617,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":678,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(prinsightrepository",{"_index":1739,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(pullrequestrepository",{"_index":1799,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(reporepository",{"_index":1949,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":2205,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":2175,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":2373,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":2974,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":2266,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":1650,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userfollowrepository",{"_index":2545,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":2666,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(userreporepository",{"_index":2875,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":2900,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["contact",{"_index":3744,"title":{},"body":{"index.html":{}}}],["container",{"_index":3503,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["contents",{"_index":3563,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbLog.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":3939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":3307,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":3878,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":3808,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":724,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":3806,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":732,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":433,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":434,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":450,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":453,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":438,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":497,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":782,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":436,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":1823,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":1835,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":1832,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":1978,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":1937,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":430,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":488,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.tolowercase",{"_index":1815,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributors",{"_index":1540,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":237,"title":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"emojis",{"_index":1278,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"health",{"_index":1330,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":1393,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":1467,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"prs",{"_index":1724,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["controller(\"repos",{"_index":1838,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":2304,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/highlights",{"_index":2638,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":2773,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"users",{"_index":2529,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllers",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":3815,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":3076,"title":{},"body":{"changelog.html":{}}}],["copies",{"_index":3849,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3562,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":3829,"title":{},"body":{"license.html":{}}}],["correct",{"_index":3086,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":3347,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["count",{"_index":486,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":3442,"title":{},"body":{"changelog.html":{}}}],["countqueryresult",{"_index":2718,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["couple",{"_index":3798,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":3690,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":2841,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["createcheckoutsession",{"_index":2229,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":2234,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":3627,"title":{},"body":{"changelog.html":{}}}],["created_at",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":774,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["createhighlightdto",{"_index":2620,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":525,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":2821,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":2817,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":2822,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":2462,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":2461,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":2463,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":557,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":2791,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createlog",{"_index":1616,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":1620,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":565,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":3936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"repos",{"_index":1990,"title":{},"body":{"injectables/RepoService.html":{}}}],["creates",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuserhighlightdto",{"_index":573,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":3219,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":733,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["current",{"_index":1151,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["current_period_end_at",{"_index":1135,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":1136,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentrepoids",{"_index":2839,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find(id",{"_index":2844,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":2827,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter(repo",{"_index":2831,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map(cr",{"_index":2840,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":1613,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":643,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":644,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":2300,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":2302,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":2301,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":2306,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":9,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":652,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":796,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":331,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":602,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":3780,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":3415,"title":{},"body":{"changelog.html":{}}}],["d08173f",{"_index":3141,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":3431,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":3547,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":3356,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":3461,"title":{},"body":{"changelog.html":{}}}],["d3cb75a",{"_index":3075,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":3197,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":3490,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":3875,"title":{},"body":{"license.html":{}}}],["data",{"_index":1628,"title":{},"body":{"injectables/LogService.html":{},"classes/PageDto.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["databaseloggermiddleware",{"_index":108,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":584,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":3933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(github.updated_at",{"_index":2944,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":2729,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":2645,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":1425,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["day",{"_index":921,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{},"changelog.html":{}}}],["days",{"_index":475,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["db",{"_index":3680,"title":{},"body":{"changelog.html":{}}}],["dbapiconfig",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["dbc66f3",{"_index":3414,"title":{},"body":{"changelog.html":{}}}],["dbcontribution",{"_index":86,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":1831,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":120,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":146,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":1268,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbinsight",{"_index":111,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":144,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":2754,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":113,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":1444,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":130,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["dbprinsight",{"_index":151,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":135,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":2521,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":94,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":2067,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":90,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":2025,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":92,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":2106,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":88,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":2142,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":1859,"title":{},"body":{"controllers/RepoController.html":{}}}],["dbsubscription",{"_index":128,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbuser",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbuserhighlight",{"_index":138,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":2720,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":148,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":1382,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":1239,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"coverage.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":2516,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserrepo",{"_index":119,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":142,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":2588,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd",{"_index":1763,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["dd5e668",{"_index":3485,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":3299,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":3255,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":3839,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3883,"title":{},"body":{"license.html":{}}}],["debug",{"_index":607,"title":{},"body":{"injectables/CustomLogger.html":{},"changelog.html":{}}}],["debug(message",{"_index":616,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo",{"_index":1893,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":2708,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorator",{"_index":3650,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{}}}],["default",{"_index":451,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":2311,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defined",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":1457,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":1471,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":2654,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":2053,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":2091,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":2128,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":2163,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":2055,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":2094,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":2130,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":2165,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":2595,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id/members/:memberid",{"_index":2802,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":1450,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":2626,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2022,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2065,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2104,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2140,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2031,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2071,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2109,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2145,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2585,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":2764,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["deleted",{"_index":996,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":712,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"injectables/InsightsService.html":{}}}],["deletedatecolumn",{"_index":773,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["deletehighlightforuser",{"_index":2602,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":2621,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":2603,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":2625,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":2622,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":2661,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":2675,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":2662,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":2677,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":834,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserHighlight.html":{}}}],["deletions",{"_index":958,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["demo",{"_index":3542,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":3063,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":3370,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":3487,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deps",{"_index":3069,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":1604,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["designed",{"_index":3894,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":3254,"title":{},"body":{"changelog.html":{}}}],["developer",{"_index":3552,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":3365,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["df56c4f",{"_index":3226,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":3088,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagrams",{"_index":3108,"title":{},"body":{"changelog.html":{}}}],["digital",{"_index":3101,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":506,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":3724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":3230,"title":{},"body":{"changelog.html":{}}}],["disable",{"_index":2702,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["discord.find",{"_index":3816,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1333,"title":{},"body":{"controllers/HealthController.html":{}}}],["diskhealthindicator",{"_index":1329,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":806,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":2498,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":800,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct(true",{"_index":2709,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["distribute",{"_index":3845,"title":{},"body":{"license.html":{}}}],["dit",{"_index":3788,"title":{},"body":{"index.html":{}}}],["docker",{"_index":3530,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":3742,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":3626,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":3362,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":3190,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":3493,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":3284,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":2998,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":3535,"title":{},"body":{"changelog.html":{}}}],["dot",{"_index":3891,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":894,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":888,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["down",{"_index":3386,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":2173,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":2179,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":2203,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":2209,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":2059,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":2064,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":2060,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":2070,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":2016,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":2021,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":2017,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":2030,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":2371,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":2377,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":2098,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":2103,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":2099,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":2108,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":2972,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":2978,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":2134,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":2139,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":2135,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":2144,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":959,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["dry",{"_index":3538,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dtos",{"_index":3449,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":509,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":1622,"title":{},"body":{"injectables/LogService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/filter",{"_index":1888,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["dtos/highlight",{"_index":1388,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":1590,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/pull",{"_index":1721,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":1866,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/update",{"_index":1462,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["duration",{"_index":1423,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":3705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":3792,"title":{},"body":{"index.html":{}}}],["e",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e043912",{"_index":3121,"title":{},"body":{"changelog.html":{}}}],["e0d38ca",{"_index":3399,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":3607,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":3550,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":3209,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":3390,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":3282,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":3453,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":3346,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":1642,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":3494,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":3521,"title":{},"body":{"changelog.html":{}}}],["ed28e07",{"_index":3156,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":3396,"title":{},"body":{"changelog.html":{}}}],["edit",{"_index":2466,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":2964,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":805,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"changelog.html":{}}}],["emoji.controller",{"_index":1285,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":1276,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":1216,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":1260,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":2608,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":10,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":1289,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":825,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":1275,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["encounter",{"_index":3762,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":3807,"title":{},"body":{"index.html":{}}}],["end",{"_index":1153,"title":{},"body":{"entities/DbSubscription.html":{}}}],["ended_at",{"_index":1137,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endpoint",{"_index":3014,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoints",{"_index":1335,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":1319,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":3683,"title":{},"body":{"changelog.html":{}}}],["entities",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"changelog.html":{},"overview.html":{}}}],["entities/emoji.entity",{"_index":1277,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/insight",{"_index":1507,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":1464,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":1718,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":1865,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/user",{"_index":1389,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["entity",{"_index":710,"title":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":485,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":3720,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":455,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":3286,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":3148,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":3731,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":3932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1042,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["error",{"_index":608,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error(message",{"_index":619,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error).tostring",{"_index":2339,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["errors",{"_index":3337,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["escape",{"_index":2705,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":2701,"title":{},"body":{"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["etl",{"_index":3134,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":2348,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":2353,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":2357,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everywhere",{"_index":3273,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":534,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["exception/responses",{"_index":3319,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["executioncontext",{"_index":3938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":2650,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":2610,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":2023,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existinguser",{"_index":2785,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":2790,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":2789,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":2310,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["explain",{"_index":3686,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":3575,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1420,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":3545,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":443,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":3184,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":2445,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2457,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":2456,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":3280,"title":{},"body":{"changelog.html":{}}}],["f0304d4",{"_index":3482,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":3427,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":3456,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":3318,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":3441,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":3583,"title":{},"body":{"changelog.html":{}}}],["f57c5b6",{"_index":3109,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":3298,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":3328,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":3382,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":3335,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":3391,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":3384,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":3371,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"injectables/InsightMemberService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{}}}],["false})@column('boolean",{"_index":998,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":842,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["false})@column({type",{"_index":1194,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":535,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":2477,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":3253,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":841,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":3279,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":3320,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":3646,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":3373,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":3595,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":3179,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":3389,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":3013,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":3317,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":3153,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":3378,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":3185,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":986,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":1298,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["filter.module",{"_index":1778,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":1876,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":1751,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{}}}],["filter.service.ts",{"_index":1877,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":1885,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:79",{"_index":1881,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":1887,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtering",{"_index":3126,"title":{},"body":{"changelog.html":{}}}],["filteroptionsdto",{"_index":1296,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":1716,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["filters.foreach(([sql",{"_index":1910,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push",{"_index":1901,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([\"repos.stars",{"_index":1899,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`:topic",{"_index":1895,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=lower(:repo",{"_index":1892,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`now",{"_index":1759,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`repos.id",{"_index":1890,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filterservice",{"_index":1800,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":1702,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["findall",{"_index":493,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(pageoptionsdto",{"_index":498,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbycontributor",{"_index":1797,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":1805,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbyownerandrepo",{"_index":1824,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":1826,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid",{"_index":1825,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":1833,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyuserid",{"_index":1574,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":1583,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallemojis",{"_index":1262,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":1263,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallhighlightreactions",{"_index":2663,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":2681,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":1365,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":1368,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":1366,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":1373,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":2510,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":2513,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":1480,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":1498,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":2748,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":2757,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallreposwithfilters",{"_index":1851,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":1856,"title":{},"body":{"controllers/RepoController.html":{}}}],["findalluserstargazed",{"_index":2061,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":2073,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":2018,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":2033,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":2100,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":2111,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":2136,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":2147,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":1798,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":1807,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbycustomerid",{"_index":648,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":657,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":649,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":659,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcontributorpullrequests",{"_index":2511,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":2518,"title":{},"body":{"controllers/UserController.html":{}}}],["findinsightpagebyid",{"_index":1439,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":1441,"title":{},"body":{"controllers/InsightController.html":{}}}],["findonebyemail",{"_index":2892,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":2906,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1481,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1500,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":1852,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":1861,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyusername",{"_index":2893,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":2910,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":2512,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":2523,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":2525,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":2664,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":2685,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["finds",{"_index":1370,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["finduserfollowerbyid",{"_index":2543,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":2552,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["first",{"_index":579,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["fitness",{"_index":3867,"title":{},"body":{"license.html":{}}}],["fix",{"_index":3080,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fix(cli",{"_index":1039,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixes",{"_index":3003,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":839,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":3606,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":3774,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1251,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["follow.controller",{"_index":2855,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":2571,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:33",{"_index":2583,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:51",{"_index":2579,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:73",{"_index":2589,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":2590,"title":{},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":2541,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:14",{"_index":2551,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:21",{"_index":2553,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:37",{"_index":2550,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:63",{"_index":2555,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:8",{"_index":2546,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":2075,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{}}}],["follower",{"_index":1254,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followeruserid",{"_index":2549,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists",{"_index":2561,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":2565,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":2562,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":1250,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{}}}],["follows",{"_index":2088,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["follows'})@apiokresponse({description",{"_index":2079,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":1249,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:18",{"_index":1256,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:25",{"_index":1258,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":1255,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":1252,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":1257,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":1253,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuserbyid",{"_index":2577,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":2572,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":2575,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["force",{"_index":3061,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":932,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":3794,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":3123,"title":{},"body":{"changelog.html":{}}}],["forroutes(`v${version.charat(0",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":1269,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":2026,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":1445,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":2419,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":3834,"title":{},"body":{"license.html":{}}}],["from(`(${querybuilder.getquery",{"_index":2714,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["from(entity",{"_index":1970,"title":{},"body":{"injectables/RepoService.html":{}}}],["full",{"_index":898,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":553,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"changelog.html":{}}}],["fullname",{"_index":1915,"title":{},"body":{"classes/RepoInfo.html":{},"changelog.html":{}}}],["function",{"_index":3330,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":3387,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":3728,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":3852,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":3309,"title":{},"body":{"changelog.html":{}}}],["generated",{"_index":3350,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generation",{"_index":3089,"title":{},"body":{"changelog.html":{}}}],["generator",{"_index":3091,"title":{},"body":{"changelog.html":{}}}],["get(\"/:id",{"_index":1469,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/contributions",{"_index":1840,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/reactions",{"_index":1401,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:owner/:repo",{"_index":1868,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":1845,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:username",{"_index":2531,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":2591,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":2536,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":2534,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/insights",{"_index":1731,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":1395,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":2086,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":2049,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":2124,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":2159,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/repos/list",{"_index":1398,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/search",{"_index":1729,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/service",{"_index":1334,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/web",{"_index":1347,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id/members",{"_index":2774,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1264,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/UserInsightsController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":1442,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":1834,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":1379,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":1862,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":1827,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":2524,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2581,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":2514,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":2519,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":1701,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":1375,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2074,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2034,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2112,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2148,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":1369,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":1713,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":1317,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":1321,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":2758,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["getallhighlightreactions",{"_index":1367,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":1378,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":2604,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":2629,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getdomain",{"_index":3707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfollowstatusbyusername",{"_index":2573,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":2580,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":1737,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":1744,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getpullrequestinsights",{"_index":1697,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":1700,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":1879,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":1884,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getschemapath(model",{"_index":3923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":3922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":1682,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstripe",{"_index":2236,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":2991,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["getuserhighlight",{"_index":2605,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":2631,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["ghcr.io/open",{"_index":3789,"title":{},"body":{"index.html":{}}}],["git+https://github.com/open",{"_index":3904,"title":{},"body":{"properties.html":{}}}],["github",{"_index":763,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":2938,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com",{"_index":2712,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["github.com/open",{"_index":592,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":2945,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["goes",{"_index":938,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["granted",{"_index":3833,"title":{},"body":{"license.html":{}}}],["graph",{"_index":3887,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["guard",{"_index":3402,"title":{},"body":{"changelog.html":{}}}],["guarded",{"_index":2048,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":3395,"title":{},"body":{"changelog.html":{}}}],["guide",{"_index":3810,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3811,"title":{},"body":{"index.html":{}}}],["handle",{"_index":2932,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":3393,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":2284,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":2286,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hasnextpage",{"_index":1647,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":1648,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":3372,"title":{},"body":{"changelog.html":{}}}],["health",{"_index":1315,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":1361,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1327,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1324,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1313,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":11,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":1318,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":1322,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":564,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":881,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":561,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":3832,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":3333,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":3348,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":2618,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":1381,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":1407,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":2598,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:101",{"_index":2630,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:119",{"_index":2613,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:142",{"_index":2628,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:29",{"_index":2619,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:44",{"_index":2632,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:61",{"_index":2635,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:82",{"_index":2624,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":2646,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":2637,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":575,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":594,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":591,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":582,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":589,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1179,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:104",{"_index":1199,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:115",{"_index":1184,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:126",{"_index":1191,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:137",{"_index":1190,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":1206,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:153",{"_index":1198,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:29",{"_index":1188,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:36",{"_index":1208,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:43",{"_index":1204,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:50",{"_index":1201,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:60",{"_index":1187,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:70",{"_index":1195,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:80",{"_index":1182,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:90",{"_index":1202,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:97",{"_index":1183,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":2726,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":2728,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":2727,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":2725,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight/dtos/highlight",{"_index":2689,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight/highlight.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_id",{"_index":1197,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlightcontroller",{"_index":1362,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightid",{"_index":2614,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlightmodule",{"_index":12,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":1374,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":817,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{}}}],["highlightreaction.emoji",{"_index":818,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":1214,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":1196,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":1364,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlights.service",{"_index":1392,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":2658,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:106",{"_index":2680,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:128",{"_index":2671,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:14",{"_index":2668,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:140",{"_index":2688,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:144",{"_index":2676,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:148",{"_index":2682,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:169",{"_index":2686,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:186",{"_index":2673,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:214",{"_index":2678,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:22",{"_index":2674,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:28",{"_index":2684,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:50",{"_index":2679,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:78",{"_index":2683,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["holders",{"_index":3872,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":3900,"title":{},"body":{"properties.html":{}}}],["host",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["hot",{"_index":3397,"title":{},"body":{"changelog.html":{}}}],["http",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":2707,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":1325,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":103,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1009,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1059,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":982,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://github.com/open",{"_index":765,"title":{},"body":{"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":2405,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":828,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":821,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":2429,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":2493,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":2416,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":2482,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpstatus",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":930,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["id",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apiokresponse({type",{"_index":1443,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":744,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":2935,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter(identity",{"_index":2936,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":2937,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":2864,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["ignore",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":3804,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":3618,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":3260,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":670,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":3863,"title":{},"body":{"license.html":{}}}],["import",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":3268,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3636,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":3858,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":2908,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":3801,"title":{},"body":{"index.html":{},"license.html":{}}}],["inclusion",{"_index":3092,"title":{},"body":{"changelog.html":{}}}],["increase",{"_index":3290,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":243,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":3208,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":2409,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":840,"title":{},"body":{"entities/DbInsight.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":3154,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["info.dto",{"_index":550,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":1914,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":1919,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":1917,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":2767,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["inherited",{"_index":465,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":3672,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":490,"title":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":491,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":502,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":510,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":661,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":1292,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbinsight",{"_index":1591,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":1508,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":1556,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":1624,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":1752,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":1809,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbrepo",{"_index":1964,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":2213,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":2184,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":2381,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":2982,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":2272,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":2927,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":2690,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":2691,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserrepo",{"_index":2883,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":2556,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin(\"insights",{"_index":1524,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":1756,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["innerjoin(\"users",{"_index":2693,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":2002,"title":{},"body":{"injectables/RepoService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":1594,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":889,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["inserting/updating",{"_index":2338,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":532,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":1453,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":2753,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight.controller",{"_index":1568,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":2804,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:36",{"_index":2809,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:54",{"_index":2807,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:87",{"_index":2812,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":1463,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":527,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":538,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":536,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":544,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":918,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:18",{"_index":936,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:30",{"_index":943,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":934,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:52",{"_index":927,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:63",{"_index":926,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:74",{"_index":945,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":2779,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":907,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":902,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter(insightrepo",{"_index":2828,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":1311,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":867,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":893,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":1525,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":1527,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":1523,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":1521,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":906,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":1437,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":1301,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":1302,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":1906,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":1898,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":1900,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":1494,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":1490,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":2795,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":1487,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":1475,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":1529,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":1544,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":847,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":2829,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":848,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":1551,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":1545,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":1579,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":861,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["insights.id",{"_index":1602,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":1596,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":1466,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":1736,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:10",{"_index":1741,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:17",{"_index":1743,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:21",{"_index":1747,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:39",{"_index":1745,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":1485,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":13,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":2814,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":1465,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":3571,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":3753,"title":{},"body":{"index.html":{}}}],["installed",{"_index":3738,"title":{},"body":{"index.html":{}}}],["instead",{"_index":3158,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["integer",{"_index":809,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["integration",{"_index":3215,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":3898,"title":{},"body":{"properties.html":{}}}],["interests",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":2504,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":2506,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interface",{"_index":1673,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":1674,"title":{},"body":{"interfaces/PageMetaParameters.html":{}}}],["internal",{"_index":1018,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":922,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["invalid",{"_index":1384,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["invitation",{"_index":880,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":868,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":869,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":560,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["invites",{"_index":3025,"title":{},"body":{"changelog.html":{}}}],["is_accepted",{"_index":1097,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":830,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":2943,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":528,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":542,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["isarray()@apiproperty({isarray",{"_index":1635,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":547,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["iscreatinglogs",{"_index":1629,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":595,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":563,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":480,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":489,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":1312,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":1691,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":1793,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":1795,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":1942,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1684,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{}}}],["isin([\"view",{"_index":2469,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([7",{"_index":1692,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint",{"_index":1685,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ismember",{"_index":2783,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":1920,"title":{},"body":{"classes/RepoInfo.html":{}}}],["isoptional",{"_index":481,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":569,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":548,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":1309,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issues",{"_index":1933,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["isurl",{"_index":2495,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["item",{"_index":1512,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":1844,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":521,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["items",{"_index":1655,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":1794,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":1792,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":1533,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":1534,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["job",{"_index":3511,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":3624,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":3023,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["joincolumn",{"_index":772,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["js",{"_index":2925,"title":{},"body":{"injectables/UserService.html":{}}}],["json.stringify(parameters",{"_index":709,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":2316,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":2447,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key's",{"_index":3749,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":3899,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":3862,"title":{},"body":{"license.html":{}}}],["kindly",{"_index":3743,"title":{},"body":{"index.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1014,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1004,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":960,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":961,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["last",{"_index":747,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_merged_at",{"_index":487,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":962,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["latest",{"_index":2313,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["left",{"_index":3022,"title":{},"body":{"changelog.html":{}}}],["leftjoin(\"users",{"_index":1526,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":1977,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":1975,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":1595,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":1976,"title":{},"body":{"injectables/RepoService.html":{}}}],["lenght",{"_index":3120,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":720,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"changelog.html":{}}}],["level",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":3778,"title":{},"body":{"index.html":{}}}],["liability",{"_index":3876,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3873,"title":{},"body":{"license.html":{}}}],["lib",{"_index":3773,"title":{},"body":{"index.html":{}}}],["license",{"_index":3827,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":447,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(1",{"_index":1765,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":520,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["limitation",{"_index":3841,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3864,"title":{},"body":{"license.html":{}}}],["limits",{"_index":3301,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":2703,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["line_items",{"_index":2248,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":972,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["link",{"_index":3407,"title":{},"body":{"changelog.html":{}}}],["linkedin",{"_index":2415,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":3488,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":3336,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":3278,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":3791,"title":{},"body":{"index.html":{}}}],["list",{"_index":3010,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listallpullrequests",{"_index":1698,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":1708,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listing",{"_index":1265,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["live",{"_index":3730,"title":{},"body":{"index.html":{}}}],["load",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":3242,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":1984,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":1987,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":1988,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":1986,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":1985,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":2400,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{}}}],["localhost",{"_index":3752,"title":{},"body":{"index.html":{}}}],["location",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":609,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":680,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":622,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":1623,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":567,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":572,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:15",{"_index":571,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:7",{"_index":570,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":1612,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":630,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":1417,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":2305,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":669,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":1416,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":686,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":689,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":691,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:36",{"_index":684,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:40",{"_index":694,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:44",{"_index":682,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:59",{"_index":696,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":679,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":1418,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":629,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":604,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:27",{"_index":623,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:37",{"_index":621,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":627,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:57",{"_index":617,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":625,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":615,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":3150,"title":{},"body":{"changelog.html":{}}}],["logging.certificate",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.connection",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":3772,"title":{},"body":{"index.html":{}}}],["login",{"_index":1180,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["loglevels",{"_index":632,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":672,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":683,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":1607,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":673,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":685,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":674,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":688,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":675,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":690,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":915,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":676,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":693,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":614,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":1619,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":606,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lowercase",{"_index":3004,"title":{},"body":{"changelog.html":{}}}],["machines",{"_index":3739,"title":{},"body":{"index.html":{}}}],["made",{"_index":1185,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":1056,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["main'})@column('text",{"_index":1028,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":2472,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["maker",{"_index":2496,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":2486,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["manage",{"_index":3043,"title":{},"body":{"changelog.html":{}}}],["managed",{"_index":3377,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":2285,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":2291,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":3038,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":3341,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":3443,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":771,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["matching",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":1670,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1686,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(10000",{"_index":1690,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":462,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxlength",{"_index":596,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["maxlength(500",{"_index":600,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["means",{"_index":940,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["mechanics",{"_index":3311,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":559,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":2755,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":2769,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":1570,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":2746,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:105",{"_index":2770,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:142",{"_index":2765,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:37",{"_index":2761,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:63",{"_index":2756,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":2772,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":558,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":562,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":2468,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":865,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:105",{"_index":882,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:22",{"_index":877,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:29",{"_index":879,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:36",{"_index":892,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:47",{"_index":890,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:58",{"_index":873,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:68",{"_index":874,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:78",{"_index":891,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:85",{"_index":875,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:95",{"_index":885,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":1571,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":1477,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":1486,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:20",{"_index":1491,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:26",{"_index":1501,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:40",{"_index":1489,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:44",{"_index":1505,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:48",{"_index":1503,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:52",{"_index":1497,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:75",{"_index":1499,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":2763,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":2759,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["memory",{"_index":1332,"title":{},"body":{"controllers/HealthController.html":{}}}],["memoryhealthindicator",{"_index":1328,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":3285,"title":{},"body":{"changelog.html":{}}}],["merchantability",{"_index":3866,"title":{},"body":{"license.html":{}}}],["merge",{"_index":748,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"license.html":{}}}],["mergeable",{"_index":963,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":964,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_at",{"_index":965,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["message",{"_index":568,"title":{},"body":{"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["messageformat",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["meta",{"_index":1631,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":508,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["meta.dto.ts",{"_index":1646,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":1659,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":1657,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":1662,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":1654,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":1652,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":1660,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":1138,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["methods",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":3276,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":3112,"title":{},"body":{"changelog.html":{}}}],["migrations",{"_index":3100,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":1687,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":1689,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimal",{"_index":3261,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":1539,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":1538,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":597,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minlength(3",{"_index":599,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minor",{"_index":3635,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":3719,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3114,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mit",{"_index":3828,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mkdocs",{"_index":3553,"title":{},"body":{"changelog.html":{}}}],["mm",{"_index":1762,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":3782,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2250,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":780,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":3843,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":1732,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["months'})@apiokresponse({type",{"_index":1705,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":3459,"title":{},"body":{"changelog.html":{}}}],["mostactive",{"_index":1541,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":1542,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mount",{"_index":3597,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":3564,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":3099,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mrpizza",{"_index":2421,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["much",{"_index":3340,"title":{},"body":{"changelog.html":{}}}],["name",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":1005,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["naming",{"_index":3331,"title":{},"body":{"changelog.html":{}}}],["need",{"_index":3735,"title":{},"body":{"index.html":{}}}],["needs",{"_index":3777,"title":{},"body":{"index.html":{}}}],["nest",{"_index":3621,"title":{},"body":{"changelog.html":{}}}],["nestjs",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":628,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":779,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["nestjs/terminus",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":697,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":700,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":1419,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":2440,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["newinsight",{"_index":2819,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":2787,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newlog",{"_index":1625,"title":{},"body":{"injectables/LogService.html":{}}}],["newuser",{"_index":2941,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":2946,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserhighlight",{"_index":2723,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":2886,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":1414,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["nextfunction",{"_index":1415,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":3677,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":3740,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1013,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["non",{"_index":3067,"title":{},"body":{"changelog.html":{}}}],["noninfringement",{"_index":3870,"title":{},"body":{"license.html":{}}}],["notable",{"_index":2995,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":3746,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1506,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":2959,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":2194,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":3856,"title":{},"body":{"license.html":{}}}],["now",{"_index":739,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{}}}],["npm",{"_index":3675,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":3741,"title":{},"body":{"index.html":{}}}],["null",{"_index":1060,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":2652,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":1472,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["numerical",{"_index":937,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":3892,"title":{},"body":{"properties.html":{}}}],["object",{"_index":1889,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{}}}],["objectliteral",{"_index":1749,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":541,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtaining",{"_index":3837,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":3102,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":3825,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":519,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["onboarded",{"_index":2410,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onboarding.dto",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":2857,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":2858,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":2860,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding/insight",{"_index":3145,"title":{},"body":{"changelog.html":{}}}],["onetomany",{"_index":823,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":554,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_pull_requests",{"_index":1993,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":1995,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"state",{"_index":1994,"title":{},"body":{"injectables/RepoService.html":{}}}],["openapi",{"_index":3439,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":3797,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":2393,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":2475,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":3929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":3229,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["optional",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"injectables/CustomLogger.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["options.dto",{"_index":484,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":442,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:12",{"_index":1409,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":1303,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:16",{"_index":1680,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":1943,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":458,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":1310,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":1531,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":1786,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":1678,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1306,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":1944,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":1679,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":1535,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":1308,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":1931,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":1532,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":1681,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":1683,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":1787,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":1788,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":1791,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":1782,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":1897,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["options.repo",{"_index":1891,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":1769,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":1770,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.topic",{"_index":1894,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["order",{"_index":807,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["orderby",{"_index":446,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["orderby(\"insights.updated_at",{"_index":1603,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":2700,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"users.name",{"_index":1528,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":2005,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":448,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":467,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":2006,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":468,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":513,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["origin",{"_index":764,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":1427,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere(`:userid",{"_index":1601,"title":{},"body":{"injectables/InsightsService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":3880,"title":{},"body":{"license.html":{}}}],["out",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":3582,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":3512,"title":{},"body":{"changelog.html":{}}}],["outside",{"_index":3096,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":1703,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["overview",{"_index":3889,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":3818,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1828,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["owner}/${repo",{"_index":2000,"title":{},"body":{"injectables/RepoService.html":{}}}],["p",{"_index":3785,"title":{},"body":{"index.html":{}}}],["package",{"_index":3890,"title":{"properties.html":{}},"body":{}}],["package.json",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["packages",{"_index":3194,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":441,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["pagecount",{"_index":1649,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":503,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":524,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["pagemetadto",{"_index":507,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":1640,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":1651,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":444,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":1667,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":514,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":517,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":1665,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":1812,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.repo",{"_index":2010,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":2009,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto:16",{"_index":472,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:28",{"_index":466,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:33",{"_index":470,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:43",{"_index":478,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pages",{"_index":1661,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":2515,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1273,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1266,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["paginating",{"_index":1829,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":3649,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":1386,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"emojiid",{"_index":2651,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":1402,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"memberid",{"_index":2793,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":1846,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1847,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"username",{"_index":2532,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":1663,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":1675,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":2011,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":2308,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":2939,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":3941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["particular",{"_index":3868,"title":{},"body":{"license.html":{}}}],["passport",{"_index":2446,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2444,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["patch",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":2641,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":2792,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":2634,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":2766,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["path",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"index.html":{}}}],["payment_method_types",{"_index":2244,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":872,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["pending'})@column({type",{"_index":870,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["per",{"_index":1658,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":3682,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":1152,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":3831,"title":{},"body":{"license.html":{}}}],["permit",{"_index":3850,"title":{},"body":{"license.html":{}}}],["person",{"_index":3836,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3851,"title":{},"body":{"license.html":{}}}],["pgmigrate",{"_index":3105,"title":{},"body":{"changelog.html":{}}}],["pid,hostname,context",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1181,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["pipelines",{"_index":3688,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":2485,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":2473,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizzas",{"_index":3326,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":3809,"title":{},"body":{"index.html":{}}}],["port",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["portions",{"_index":3860,"title":{},"body":{"license.html":{}}}],["post",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":2649,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/onboarding",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/waitlist",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":2341,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":2781,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":2616,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":2609,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":2288,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":2751,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["postcreatecheckoutsession",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":3404,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":580,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{}}}],["pr!'})@column('text",{"_index":1200,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":590,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":1757,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["preferences",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["prefs.dto",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":2497,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":2500,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":2503,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prepare",{"_index":3104,"title":{},"body":{"changelog.html":{}}}],["prerequisites",{"_index":3734,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":3639,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":3784,"title":{},"body":{"index.html":{}}}],["previous",{"_index":1653,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["price",{"_index":1161,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":1177,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":1162,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":1139,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":770,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":784,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1047,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["primarycolumn(\"text",{"_index":1175,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":824,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":916,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":911,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":1742,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["print",{"_index":3518,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["proceed",{"_index":3812,"title":{},"body":{"index.html":{}}}],["process",{"_index":3581,"title":{},"body":{"changelog.html":{}}}],["process.env.domain",{"_index":3928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":2452,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":2455,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":2450,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":3611,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["profile",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":2997,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["promise",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all([30",{"_index":1733,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all(repostoremoverequests",{"_index":2838,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":2848,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["proper",{"_index":3496,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":3561,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":445,"title":{"properties.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":781,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["provide",{"_index":3524,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":1883,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"license.html":{}}}],["providers",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["prquery",{"_index":1754,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":1696,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["public",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"changelog.html":{}}}],["public.users",{"_index":3357,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":3844,"title":{},"body":{"license.html":{}}}],["pull",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"index.html":{}}}],["pull_requests",{"_index":946,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":1813,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_full_name",{"_index":1818,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":1820,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":1997,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequestcontroller",{"_index":1694,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestinsightsservice",{"_index":1722,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":14,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":1783,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":1784,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":1712,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":1802,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestservice",{"_index":1719,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":1726,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":1789,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":1790,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":3869,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":3543,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":3361,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":2044,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":2050,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":2087,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":2125,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":2160,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":2052,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":2090,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":2127,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":2162,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":2593,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2038,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2078,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2116,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2152,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2042,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2082,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2119,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2155,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2576,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":1748,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["qb.andwhere(sql",{"_index":1912,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":1911,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":3790,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1140,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["queries",{"_index":3006,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":687,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":511,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":2930,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.getcount",{"_index":522,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getmany",{"_index":523,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getone",{"_index":665,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":2569,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":2721,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getrawone",{"_index":1771,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":1294,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.setparameters",{"_index":1768,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.where(\"id",{"_index":2885,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":1511,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["queryrunner",{"_index":681,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":701,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":3814,"title":{},"body":{"index.html":{}}}],["range",{"_index":449,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["rate",{"_index":3300,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":2287,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":3588,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":2507,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reaction",{"_index":802,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":2627,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":1238,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":1220,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":1215,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:106",{"_index":1221,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:18",{"_index":1227,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:28",{"_index":1226,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":1232,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:48",{"_index":1223,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":1218,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":1229,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:74",{"_index":1219,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:82",{"_index":1228,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:90",{"_index":1225,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:98",{"_index":1231,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":1236,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":1224,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":1237,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":1230,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":1217,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":2740,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":2741,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":801,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":1383,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["readable",{"_index":931,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readme",{"_index":3327,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["rebaseable",{"_index":966,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receive_collaboration",{"_index":2499,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":3920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recent",{"_index":1536,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":2501,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["record",{"_index":3201,"title":{},"body":{"changelog.html":{}}}],["record)[\"stripe",{"_index":2344,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1030,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactoring",{"_index":3094,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":3406,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":754,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["references",{"_index":3117,"title":{},"body":{"changelog.html":{}}}],["registration",{"_index":2396,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":3504,"title":{},"body":{"changelog.html":{}}}],["rejectunauthorized",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":3437,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":3455,"title":{},"body":{"changelog.html":{}}}],["relationships",{"_index":3046,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":3062,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["relevantevents",{"_index":2297,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":2350,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":3448,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":1452,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["removed",{"_index":2028,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removeinsight",{"_index":1575,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":1586,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":1440,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":1449,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":1482,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":1502,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":2749,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":2762,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":1548,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":1554,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":1451,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeuserfollowerbyid",{"_index":2544,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":2554,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["rename",{"_index":3424,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":435,"title":{},"body":{"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":1863,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":790,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":753,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":1927,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":895,"title":{},"body":{"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:18",{"_index":1245,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:25",{"_index":1247,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":901,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:32",{"_index":1246,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":904,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:39",{"_index":1244,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:40",{"_index":905,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:47",{"_index":900,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:49",{"_index":1243,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:57",{"_index":896,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:67",{"_index":897,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:75",{"_index":903,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:8",{"_index":1241,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.fullname",{"_index":1559,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":1558,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":2834,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouserstargazers",{"_index":1080,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1069,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1095,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1086,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":1114,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1105,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotouservotes",{"_index":1129,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":1120,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":1569,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":1546,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:15",{"_index":1553,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:19",{"_index":1555,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:9",{"_index":1550,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":549,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":2862,"title":{},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":1837,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["repo/user",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":713,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":432,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":1849,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":1932,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":1776,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":1740,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":499,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":1299,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":539,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":2833,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":15,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":456,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":1929,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repopageoptionsdto",{"_index":1853,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":1945,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":1951,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":3768,"title":{},"body":{"index.html":{}}}],["repos",{"_index":529,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":1996,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos'})@apibody({type",{"_index":2811,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto.ts",{"_index":2863,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repos.dto.ts:12",{"_index":2865,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.id",{"_index":1902,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":2871,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":2872,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":2873,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":2876,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:19",{"_index":2880,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:25",{"_index":2882,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:39",{"_index":2879,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:49",{"_index":2881,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos_id",{"_index":3056,"title":{},"body":{"changelog.html":{}}}],["reposearchoptionsdto",{"_index":1857,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":1836,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":3247,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":495,"title":{},"body":{"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":2013,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":2056,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":2207,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":2177,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":2842,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":2846,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":2830,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":2836,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":2835,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":2095,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":2375,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":2845,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":3428,"title":{},"body":{"changelog.html":{}}}],["repotouserstars",{"_index":3430,"title":{},"body":{"changelog.html":{}}}],["repotousersubmissions",{"_index":3432,"title":{},"body":{"changelog.html":{}}}],["repotouservotes",{"_index":3434,"title":{},"body":{"changelog.html":{}}}],["repovotecontroller",{"_index":2131,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":2976,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":3824,"title":{},"body":{"index.html":{}}}],["representing",{"_index":731,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":2290,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{}}}],["req.headers",{"_index":2343,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibody({type",{"_index":1454,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":2611,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":2768,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":1779,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":1695,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:29",{"_index":1710,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:42",{"_index":1717,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:54",{"_index":1707,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["request.entity.ts",{"_index":949,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:101",{"_index":1029,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:108",{"_index":1036,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:128",{"_index":1017,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:138",{"_index":1007,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:145",{"_index":985,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:152",{"_index":983,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:162",{"_index":980,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:172",{"_index":979,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:18",{"_index":1003,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:182",{"_index":995,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:192",{"_index":992,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:202",{"_index":1022,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:212",{"_index":1045,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:222",{"_index":1019,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:229",{"_index":993,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":975,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:243",{"_index":997,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:25",{"_index":1027,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:250",{"_index":989,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:261",{"_index":1001,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:32",{"_index":1024,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:39",{"_index":1034,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:46",{"_index":999,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:53",{"_index":1021,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:60",{"_index":1020,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:67",{"_index":1025,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:74",{"_index":1044,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:84",{"_index":1032,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:94",{"_index":1038,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":1777,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":1720,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":1796,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:15",{"_index":1801,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:22",{"_index":1803,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:28",{"_index":1804,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:46",{"_index":1806,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:71",{"_index":1808,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":3940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesting",{"_index":3027,"title":{},"body":{"changelog.html":{}}}],["requestmethod",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":725,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserController.html":{},"changelog.html":{}}}],["requests/dtos/pull",{"_index":1780,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requests/pull",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["required",{"_index":2247,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":3684,"title":{},"body":{"changelog.html":{}}}],["reset",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["response",{"_index":1413,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["response.decorator",{"_index":1274,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":3699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":2392,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":2420,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":2401,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:116",{"_index":2417,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:122",{"_index":2406,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":2431,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":2423,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":2403,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":2398,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":2414,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":2399,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":2427,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":2411,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":2413,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":2408,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":2394,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":2407,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":2422,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":2430,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":2426,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":2395,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.on(\"finish",{"_index":1426,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":3840,"title":{},"body":{"license.html":{}}}],["results",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":3015,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":3314,"title":{},"body":{"changelog.html":{}}}],["retrieves",{"_index":1380,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["return",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":3178,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":3177,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":3316,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":3842,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":3463,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["route",{"_index":3464,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":3770,"title":{},"body":{"index.html":{}}}],["rules",{"_index":3398,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":3539,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":3591,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":3585,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["san",{"_index":2418,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":556,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserRepo.html":{},"controllers/HealthController.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":581,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@column({type",{"_index":899,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["sauced'})@isstring",{"_index":1916,"title":{},"body":{"classes/RepoInfo.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":2480,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/api.opensauced.pizza",{"_index":2994,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":3901,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":3905,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":3903,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":789,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":766,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":1062,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights'})@column({type",{"_index":1000,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":1305,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights/pull/1",{"_index":598,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1203,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":593,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1186,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/open",{"_index":555,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{}}}],["sauced/triage",{"_index":3745,"title":{},"body":{"index.html":{}}}],["saucedopen",{"_index":2425,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@isoptional",{"_index":2491,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":3228,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":3244,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":3440,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":3460,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":3619,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":3628,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":3676,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["search",{"_index":1867,"title":{},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["searchallpullrequests",{"_index":1699,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":1711,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":1714,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["secs",{"_index":3930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["see",{"_index":3805,"title":{},"body":{"index.html":{}}}],["select",{"_index":742,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":1969,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"count(full_name",{"_index":2717,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"emoji_id",{"_index":2734,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(['repo.id",{"_index":1974,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":1755,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`regexp_replace(regexp_replace(user_highlights.url",{"_index":2710,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(`to_char(now",{"_index":1760,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":928,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":1492,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":3848,"title":{},"body":{"license.html":{}}}],["sent",{"_index":883,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["servers",{"_index":3297,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":3452,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":2256,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":2255,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":2298,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["setparameters(querybuilder.getparameters",{"_index":2716,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["shall",{"_index":3857,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":583,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":576,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["short",{"_index":850,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":831,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":3024,"title":{},"body":{"changelog.html":{}}}],["showcase",{"_index":1010,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1006,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["sig",{"_index":2342,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1053,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1043,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":2345,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["simple",{"_index":3400,"title":{},"body":{"changelog.html":{}}}],["singleline",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":1677,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["skip(pageoptionsdto.skip",{"_index":1605,"title":{},"body":{"injectables/InsightsService.html":{}}}],["slow",{"_index":3269,"title":{},"body":{"changelog.html":{}}}],["soft",{"_index":3409,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":3736,"title":{},"body":{"index.html":{},"license.html":{}}}],["sort",{"_index":3079,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["source_branch",{"_index":967,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_label",{"_index":968,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":944,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach(type",{"_index":1766,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":923,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":1908,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests.repo_id",{"_index":1907,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":1543,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spec",{"_index":3578,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":3028,"title":{},"body":{"changelog.html":{}}}],["split",{"_index":3110,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":2404,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":698,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"changelog.html":{}}}],["src/.../api",{"_index":3911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":3912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":3721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../endpoint.config.ts",{"_index":3913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":3722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":3729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":3723,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pull",{"_index":3725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":3726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":3914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":3910,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":3915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:189",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:109",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:139",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:156",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:175",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:73",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:94",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":2391,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":2856,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":2432,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":2435,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":2438,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":2443,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":2441,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":3697,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":3727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":3698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":1297,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":1645,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":1630,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":1638,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":1634,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":1875,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":668,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":1410,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/util/cli",{"_index":3704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":3706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":711,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":755,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":746,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":757,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":728,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":751,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":740,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":762,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":743,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":722,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":767,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":431,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":492,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":496,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":500,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":440,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":1822,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts",{"_index":791,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:17",{"_index":793,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:27",{"_index":795,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":642,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":645,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":656,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":660,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:27",{"_index":658,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:36",{"_index":655,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":651,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":1261,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:25",{"_index":1270,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":1284,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":1286,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":1288,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":1290,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":1291,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":799,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:17",{"_index":813,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:24",{"_index":815,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:31",{"_index":822,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:38",{"_index":810,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:48",{"_index":803,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:58",{"_index":820,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:65",{"_index":804,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:69",{"_index":819,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/health/health.controller.ts",{"_index":1314,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":1320,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1323,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1360,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":1408,"title":{},"body":{"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":1240,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":1363,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:28",{"_index":1377,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:41",{"_index":1372,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:55",{"_index":1385,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":1406,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":526,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":1530,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":2460,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":864,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":829,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:101",{"_index":836,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:109",{"_index":858,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:113",{"_index":849,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:27",{"_index":838,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:37",{"_index":860,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:47",{"_index":846,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":844,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":843,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:71",{"_index":853,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:81",{"_index":833,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:91",{"_index":856,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":1476,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":1438,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:25",{"_index":1448,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:42",{"_index":1456,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":1565,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":1572,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":1578,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":1582,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":1585,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:41",{"_index":1581,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:45",{"_index":1589,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:49",{"_index":1587,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:53",{"_index":1584,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":2745,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":603,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":566,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":908,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":914,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":913,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":910,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":912,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":909,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":1611,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":1615,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":1621,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":1618,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":3710,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pull",{"_index":917,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":1913,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":3713,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1063,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":1068,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":1076,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":1072,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":1065,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":1073,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":1066,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":1075,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":1070,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1081,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":1085,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":1092,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":1088,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":1083,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":1089,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":1084,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":1091,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":1087,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1096,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":1101,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":1111,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":1107,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":1104,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":1099,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":1108,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":1100,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":1110,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":1106,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":1115,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":1119,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":1126,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":1122,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":1117,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":1123,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":1118,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":1125,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":1121,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":1850,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:22",{"_index":1860,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:35",{"_index":1864,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:49",{"_index":1855,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:62",{"_index":1858,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":1926,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":1946,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:140",{"_index":1958,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:15",{"_index":1950,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:155",{"_index":1959,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:170",{"_index":1956,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:199",{"_index":1957,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:22",{"_index":1962,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:32",{"_index":1954,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:56",{"_index":1953,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":2014,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":2170,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":2172,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":2178,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":2182,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":2180,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":2176,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":2057,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":2200,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":2202,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":2208,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":2212,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":2210,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":2206,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":2279,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":2225,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":2227,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":2237,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":2233,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":2235,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":2231,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":2096,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":2368,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":2370,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":2376,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":2380,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":2378,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":2374,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":1130,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1242,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":574,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":2470,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1178,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["src/user/user",{"_index":2540,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":2509,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:31",{"_index":2527,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:45",{"_index":2522,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:60",{"_index":2517,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":3716,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":2853,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2890,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:118",{"_index":2917,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":2901,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:133",{"_index":2923,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:143",{"_index":2919,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:153",{"_index":2915,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:157",{"_index":2913,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:164",{"_index":2907,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":2903,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":2909,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:51",{"_index":2911,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:66",{"_index":2905,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:94",{"_index":2921,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":2132,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":2969,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":2971,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":2977,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":2981,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:45",{"_index":2979,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":2975,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["stable",{"_index":3622,"title":{},"body":{"changelog.html":{}}}],["stack",{"_index":620,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1103,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":1082,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":2024,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":2171,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":2015,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":2029,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":2032,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":2036,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":2040,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":2043,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":2047,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":2174,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":2181,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":2189,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":2190,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1064,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":2201,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":2058,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":2069,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":2072,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":2076,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":2080,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":2083,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":2085,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":2204,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":2211,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":3380,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":2217,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":2218,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":17,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":2062,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":2077,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":2063,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":2081,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":1983,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":1940,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":2084,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":16,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":2019,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":2037,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":2020,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":2041,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":2035,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":1934,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":1941,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":2046,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":1155,"title":{},"body":{"entities/DbSubscription.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":3758,"title":{},"body":{"index.html":{}}}],["started",{"_index":2992,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":1424,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":3925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state",{"_index":969,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["statements",{"_index":3691,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":3534,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":1141,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":1428,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":1429,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["strategy",{"_index":3401,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":3107,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(user_name",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":677,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":695,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stripe",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":2239,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":2359,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":2226,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2354,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":654,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["stripecustomer",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":417,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":329,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":18,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":2260,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":2278,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":19,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":3103,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":3897,"title":{},"body":{"properties.html":{}}}],["stuff",{"_index":3342,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":3422,"title":{},"body":{"changelog.html":{}}}],["styles",{"_index":3275,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":1174,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":1158,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":3926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":2351,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":2352,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subject",{"_index":3853,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":3846,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1098,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":2105,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":1982,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":1939,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":2123,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":2369,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":2097,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":2107,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":2110,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":2114,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":2117,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":2120,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":2122,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":2372,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":2379,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":2387,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":2385,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":2386,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":20,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":2101,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":2115,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":2102,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":2118,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":2121,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":2113,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":1963,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["subquery.getrawone",{"_index":2719,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquery_for_count",{"_index":2715,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquerycount",{"_index":1948,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":1960,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":1738,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":1746,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":1936,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":1146,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":2321,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":2320,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":2323,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":2356,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":1131,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":1157,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":1145,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":1149,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":1170,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":1169,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":1159,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":1172,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":1167,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":1160,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":1163,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":1164,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":1147,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":1150,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":1156,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":1154,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":2328,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":2315,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":2319,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":2318,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":2261,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":2262,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":2264,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":2269,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":2271,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":2267,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":2317,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":2332,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":2330,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":2314,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":2293,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionrepository",{"_index":2268,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":1173,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["substantial",{"_index":3859,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":2251,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":3363,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":3919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["suite",{"_index":3759,"title":{},"body":{"index.html":{}}}],["summary",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["supabase",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"properties.html":{}}}],["supabase.guard",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":2924,"title":{},"body":{"injectables/UserService.html":{}}}],["supabaseauthdto",{"_index":324,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":3909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":2448,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":320,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":2454,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":2451,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":2453,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":418,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":2449,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":631,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":2459,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":638,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":636,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":634,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":2458,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":637,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":3127,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supporting",{"_index":3135,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":3885,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3189,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":3295,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":3060,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":1633,"title":{},"body":{"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":3935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{}}}],["tables",{"_index":3444,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3718,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":3531,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":3507,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1041,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["take",{"_index":3157,"title":{},"body":{"changelog.html":{}}}],["take(pageoptionsdto.limit",{"_index":1606,"title":{},"body":{"injectables/InsightsService.html":{}}}],["target",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["target_branch",{"_index":970,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":971,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["targets",{"_index":3305,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":1972,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":551,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{},"index.html":{}}}],["team'})@column({type",{"_index":845,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":537,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":3556,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":3906,"title":{},"body":{"properties.html":{}}}],["temporary",{"_index":3351,"title":{},"body":{"changelog.html":{}}}],["terminusmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":3548,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":3769,"title":{},"body":{"index.html":{}}}],["tests",{"_index":3510,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":3767,"title":{},"body":{"index.html":{}}}],["text",{"_index":578,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1058,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss'})@column('text",{"_index":984,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1054,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1031,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":2808,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":2760,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":1830,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":1267,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":1709,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":1854,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":1376,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":1371,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":2238,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.basefilterquerybuilder(range",{"_index":2008,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":663,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":1344,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":1346,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":1359,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":1351,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":1355,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":1357,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":1353,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":1349,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":1339,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":1341,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":2249,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":2254,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":2252,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":2347,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":512,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":1843,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":662,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":667,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":2307,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":1643,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":1337,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":1345,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":1342,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":1293,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":1281,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":1821,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findonebyid(id",{"_index":2940,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hasnextpage",{"_index":1672,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":1671,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":1336,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":1358,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":1350,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":1354,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":1356,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":1352,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":1348,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":1510,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":1513,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":1515,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":1514,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":2788,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":2778,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":2780,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":2794,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":2803,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":2801,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":1557,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":1560,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":1592,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":1597,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":1599,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":1598,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":1516,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":2847,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":2823,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":2837,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":2820,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":2816,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":1470,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":2776,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":1474,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":2824,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.itemcount",{"_index":1668,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":1666,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.logger",{"_index":699,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":708,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`${query",{"_index":704,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`error",{"_index":2337,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":1431,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":702,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":2340,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":1436,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":707,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":1434,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":706,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":1626,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":1627,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":633,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":635,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":2355,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":2362,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":1338,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":1340,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":1644,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":1664,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":1669,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":1753,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":1810,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":1728,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":2535,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":1730,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":1735,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":1758,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":1989,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":1973,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":1870,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":1871,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":1842,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":1848,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":2214,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":2219,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":2220,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":2221,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":2185,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":2192,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":2193,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":2195,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":2382,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":2388,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":2389,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":2390,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":2983,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":2988,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":2989,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":2990,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":2093,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":2089,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":2054,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":2051,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":703,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":2243,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":2242,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":2309,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":2349,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":2334,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":2129,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":2126,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":1980,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":1767,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":2273,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":2274,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows",{"_index":2557,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":2566,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":2567,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":2568,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":2594,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":2592,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":2596,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":2733,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":2742,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":2743,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":2744,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":2724,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":2692,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.manager.createquerybuilder",{"_index":2713,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":2730,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":2732,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":2731,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":2639,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":2653,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":2648,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":2657,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":1397,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":2537,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":1403,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":1400,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":2647,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":2642,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":2640,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction(highlightid",{"_index":2656,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":2643,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userreporepository.create",{"_index":2887,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":2884,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":2888,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.create",{"_index":2942,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":2928,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":2947,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":2786,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":2533,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":2336,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":2164,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":2161,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":1343,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":1473,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":692,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":3270,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":730,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":577,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{}}}],["tld",{"_index":3663,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":3916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todatetime",{"_index":2295,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":2322,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":2324,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":2327,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":2326,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":2325,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":2329,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":2333,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":2331,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":941,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["token",{"_index":3546,"title":{},"body":{"changelog.html":{}}}],["tools",{"_index":3779,"title":{},"body":{"index.html":{}}}],["top",{"_index":1193,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":1537,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":1904,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":1903,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":1905,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":1300,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["topics",{"_index":3140,"title":{},"body":{"changelog.html":{}}}],["tort",{"_index":3879,"title":{},"body":{"license.html":{}}}],["total",{"_index":723,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["transformer",{"_index":546,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["translatetime",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":1168,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":1142,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":1143,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":3310,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":1637,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":1636,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":2424,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter_username",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":3907,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":1326,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":671,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":437,"title":{},"body":{"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/PullRequestModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":1614,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":1928,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":2263,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forrootasync",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":3446,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":3799,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":3066,"title":{},"body":{"changelog.html":{}}}],["unable",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unauthorizedexception",{"_index":1458,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":3687,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":1706,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["undefined})@column({type",{"_index":978,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":2505,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":457,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":469,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":1785,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":1930,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":543,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["undo",{"_index":3462,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":2068,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":2092,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":2066,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":2574,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":2584,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":2586,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":715,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":3776,"title":{},"body":{"index.html":{}}}],["unix",{"_index":3931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":618,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unprocessableentityexception",{"_index":2813,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["up",{"_index":3385,"title":{},"body":{"changelog.html":{}}}],["update",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":3224,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":854,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["updated_at",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":775,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{}}}],["updatedinsightmember",{"_index":2796,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":2800,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":2799,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateemailpreferences",{"_index":2894,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":2912,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatehighlightdto",{"_index":2636,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":2644,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":2606,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":2633,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":1576,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":1588,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":1455,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":2826,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":2825,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter(repoinfo",{"_index":2843,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find(repoinfo",{"_index":2832,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":2805,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":2810,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":1483,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":1504,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":2464,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":2797,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":2895,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":2914,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":2896,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":2916,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":2897,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":2918,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["updateuser",{"_index":2898,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":2920,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto",{"_index":289,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":290,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":2665,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":2687,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":299,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":2899,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":2922,"title":{},"body":{"injectables/UserService.html":{}}}],["upgrades",{"_index":3064,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":2312,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":2265,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":2270,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["url(`https://${subdomain",{"_index":3927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":3484,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":1411,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":1412,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["usefactory",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["useguards(supabaseguard",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["useless",{"_index":2704,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"classes/UserOnboardingDto.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":886,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":2623,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["user'})@apiokresponse({type",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":2950,"title":{},"body":{"injectables/UserService.html":{}}}],["user.company",{"_index":2953,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":2854,"title":{},"body":{"modules/UserModule.html":{}}}],["user.display_email",{"_index":2961,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":2955,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":2471,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":2487,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":2479,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":2474,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2494,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:46",{"_index":2492,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:55",{"_index":2476,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:64",{"_index":2484,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:73",{"_index":2478,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:82",{"_index":2490,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:90",{"_index":2483,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:98",{"_index":2481,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":2949,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1209,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.github_sponsors_url",{"_index":2957,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":1213,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":1205,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":2538,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":863,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":857,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":2960,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":2958,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":2954,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":2948,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":2962,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1079,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1074,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1094,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1090,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1113,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1109,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":1128,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":1124,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.service",{"_index":2528,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["user.timezone",{"_index":2956,"title":{},"body":{"injectables/UserService.html":{}}}],["user.twitter_username",{"_index":2952,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":2951,"title":{},"body":{"injectables/UserService.html":{}}}],["user/dtos/update",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/entities/user",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{}}}],["user/highlights",{"_index":2599,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":2747,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/user",{"_index":1391,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user/user.service",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user_follows_deleted_at",{"_index":2564,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":1233,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["user_highlights",{"_index":1210,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.user_id=users.id",{"_index":2694,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":2696,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":2699,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":832,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"injectables/InsightsService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["user_metadata",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_repos",{"_index":1248,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["usercontroller",{"_index":2508,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["userfollowrepository",{"_index":2547,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":2570,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":2539,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":2655,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":2667,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":2669,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":2597,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":1390,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":1567,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":1566,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["usermodule",{"_index":21,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":2578,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":2587,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":2526,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":2520,"title":{},"body":{"controllers/UserController.html":{}}}],["username.tolowercase",{"_index":2934,"title":{},"body":{"injectables/UserService.html":{}}}],["useronboardingdto",{"_index":276,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrelations",{"_index":1955,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":2001,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":2861,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["userreporepository",{"_index":2877,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":2902,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":22,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":2870,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":2335,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["users_email",{"_index":2931,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1077,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1093,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1112,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":1127,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":1259,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["userservice",{"_index":327,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1715,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["utc",{"_index":2488,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":1422,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":2296,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":811,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":826,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbUserHighlightReaction.html":{}}}],["v4'})@column({type",{"_index":1222,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":876,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":812,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{}}}],["validate",{"_index":2437,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validate(user",{"_index":2442,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":1641,"title":{},"body":{"classes/PageDto.html":{}}}],["validator",{"_index":482,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["value",{"_index":452,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":3450,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":3525,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":3515,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":719,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{}}}],["velocity",{"_index":3077,"title":{},"body":{"changelog.html":{}}}],["verbose",{"_index":610,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":624,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verify",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":3678,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":3375,"title":{},"body":{"changelog.html":{}}}],["videos",{"_index":3817,"title":{},"body":{"index.html":{}}}],["view",{"_index":1447,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["view'})@isstring()@isin(['view",{"_index":2465,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":1234,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":533,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visual",{"_index":3823,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":3352,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":3821,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":3826,"title":{},"body":{"index.html":{}}}],["vite",{"_index":3367,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":3781,"title":{},"body":{"index.html":{}}}],["void",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":3565,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":3598,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":788,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":717,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex/api.opensauced.pizza",{"_index":3644,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":2402,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":1116,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":2141,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":2970,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":2133,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":2143,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":2146,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":2150,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":2153,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":2156,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":2158,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":2973,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":2980,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":2149,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":2986,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":2987,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":23,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":2137,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":2151,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":2138,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":2154,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":1981,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":1938,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":2157,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["waitlist",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":2412,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":611,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":626,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warranties",{"_index":3865,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3861,"title":{},"body":{"license.html":{}}}],["watch",{"_index":3761,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":1935,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":3766,"title":{},"body":{"index.html":{}}}],["web",{"_index":1316,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":3214,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":2281,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":2283,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":2292,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:78",{"_index":2289,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":2282,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":3714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":2280,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":2346,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["website",{"_index":2428,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["where(\"contribution.repo_id",{"_index":515,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"customer.id=:id",{"_index":664,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"customer.stripe_customer_id=:id",{"_index":666,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"id",{"_index":2929,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":1517,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":1593,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":1600,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(login",{"_index":2933,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":2215,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":2187,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":2383,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":2984,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":1999,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":1998,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"user_follows.user_id",{"_index":2558,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":2736,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":2697,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.user_id",{"_index":2722,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_repos.user_id",{"_index":2889,"title":{},"body":{"injectables/UserReposService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":1971,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":1814,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`regexp_replace(regexp_replace(user_highlights.url",{"_index":2706,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`user_highlights.url",{"_index":2711,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(`users.email",{"_index":2963,"title":{},"body":{"injectables/UserService.html":{}}}],["whether",{"_index":1192,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["windows",{"_index":3747,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":2186,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":737,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"license.html":{}}}],["work",{"_index":3457,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":3308,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["working",{"_index":3394,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":3775,"title":{},"body":{"index.html":{}}}],["writing",{"_index":3339,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["xa",{"_index":1015,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":3615,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":501,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{}}}],["youtube",{"_index":3819,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":1761,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["zone",{"_index":738,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{}}}],["zoom",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { RepoModule } from \"./repo/repo.module\";\nimport apiConfig from \"./config/api.config\";\nimport DbApiConfig from \"./config/db-api.config\";\nimport DbLoggingConfig from \"./config/db-logging.config\";\nimport endpointConfig from \"./config/endpoint.config\";\nimport stripeConfig from \"./config/stripe.config\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { version } from \"../package.json\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        apiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        endpointConfig,\n        stripeConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) => ({\n        type: configService.get(\"db-api.connection\"),\n        host: configService.get(\"db-api.host\"),\n        port: configService.get(\"db-api.port\"),\n        username: configService.get(\"db-api.username\"),\n        password: configService.get(\"db-api.password\"),\n        database: configService.get(\"db-api.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbUserRepo,\n          DbUserHighlight,\n          DbUserHighlightReaction,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n          DbInsight,\n          DbInsightMember,\n          DbInsightRepo,\n          DbCustomer,\n          DbSubscription,\n          DbPullRequest,\n          DbPRInsight,\n          DbUserToUserFollows,\n          DbEmoji,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"OS\"),\n        ssl: {\n          ca: configService.get(\"db-api.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) => ({\n        type: configService.get(\"db-logging.connection\"),\n        host: configService.get(\"db-logging.host\"),\n        port: configService.get(\"db-logging.port\"),\n        username: configService.get(\"db-logging.username\"),\n        password: configService.get(\"db-logging.password\"),\n        database: configService.get(\"db-logging.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbLog,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"LG\"),\n        ssl: {\n          ca: configService.get(\"db-logging.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor (\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource,\n  ) {}\n\n  configure (consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HttpLoggerMiddleware)\n      .forRoutes(`v${version.charAt(0)}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email: session_email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role, name, bio, location, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url } = await this.userService.checkAddUser(user);\n\n      userProfile = { is_onboarded, insights_role, is_waitlisted, name, location, bio, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n      @Body() body: UserOnboardingDto,\n  ): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { email, user_metadata: { sub } } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserProfileInterestsDto,\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserEmailPreferencesDto,\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbContribution,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n    name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n    is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/open-sauced\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n    repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsDateString, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor (\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogService,\n  ) {\n    super(\n      context,\n      {\n        ...options,\n        logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n      },\n    );\n\n    this.logsService = logsService;\n  }\n\n  async log (message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error (message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn (message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbCustomer,\n    ], \"ApiConnection\"),\n  ],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor (\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById (id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer (userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor (name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery (query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError (error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow (time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`);\n  }\n\n  logMigration (message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild (message: string) {\n    this.logger.warn(message);\n  }\n\n  log (level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters (parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn, ManyToOne, JoinColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbInsightRepo } from \"./insight-repo.entity\";\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, insightRepo => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/open-sauced'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, insight => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:74\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  PrimaryColumn, Column,\n} from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:152\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:250\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:192\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:229\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:182\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:243\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:261\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:222\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:212\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n    highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n    user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n    emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/open-sauced'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/open-sauced\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor (\n    private emojiService: EmojiService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis (\n  @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbEmoji,\n    ], \"ApiConnection\"),\n  ],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor (\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiBadRequestResponse, ApiNotFoundResponse } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightReaction } from \"../user/entities/user-highlight-reaction.entity\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightReactions (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { HighlightController } from \"./highlight.controller\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserHighlight,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use (request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags, ApiUnauthorizedResponse, ApiBadRequestResponse, ApiBearerAuth, ApiBody } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor (\n    private readonly insightsService: InsightsService,\n  ) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor (\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById (id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsightMember (insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember (id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember (id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight (userId: number, insightId: number, accessRoles: string[], checkOwner = true): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers (\n    pageOptionsDto: PageOptionsDto,\n    insightId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor (\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n  ) {}\n\n  async addInsightRepo (insightId: number, repo: RepoInfo) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo (id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbInsight,\n      DbInsightRepo,\n      DbInsightMember,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor (\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsight (insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight (id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight (id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: InsightPageOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(`:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `, { userId })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor (\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog (log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor (\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests (\n    @Query() pageOptionsDto: PullRequestPageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights (\n    @Query() pageOptionsDto: FilterOptionsDto,\n  ): Promise {\n    return Promise.all([30, 60].map(async interval => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor (\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  subQueryCountPrs (qb: SelectQueryBuilder, type = \"all\", interval = 0, options: FilterOptionsDto) {\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, interval);\n\n    filters.push([`now() - INTERVAL '${interval} days'  {\n    const queryBuilder = this.baseQueryBuilder()\n      .select(`TO_CHAR(now() - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n      .addSelect(`${interval}::INTEGER`, \"interval\")\n      .limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach(type => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbPullRequest,\n      DbPRInsight,\n    ], \"ApiConnection\"),\n    RepoFilterModule,\n  ],\n  controllers: [PullRequestController],\n  providers: [PullRequestService, PullRequestInsightsService],\n  exports: [PullRequestService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\"\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor (\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  async findAll (\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor (\n    contributor: string,\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\") id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters (\n    @Query() pageOptionsDto: RepoSearchOptionsDto,\n  ): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters (options: FilterOptionsDto, range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=LOWER(:repo)`, { repo: decodeURIComponent(options.repo) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([`\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `, {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([`\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND now() - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters (qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/open-sauced'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: Number, example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: Number,\n    example: 234343,\n  })\n  @IsNumber()\n    id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/open-sauced\",\n  })\n  @IsString()\n    fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder (range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            \"open_pull_requests\".\"state\" = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND now() - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND now() - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters (pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const range = pageOptionsDto.range!;\n    const queryBuilder = this.baseFilterQueryBuilder(range);\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStars,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStargazers,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor (private configService: ConfigService) {}\n\n  get stripe () {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer (id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession (customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\"),\n  ],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor (\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription (subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [\n    StripeSubscriptionModule,\n    CustomerModule,\n    StripeModule,\n    UserModule,\n  ],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { toDateTime } from \"./utils\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/user.service\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor (\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService,\n  ) {}\n\n  private async manageSubscriptionStatusChange (subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw (new BadRequestException);\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, { expand: [\"default_payment_method\"] });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(`Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`);\n      throw (new BadRequestException);\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook (@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw (new BadRequestException);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserSubmissions,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n    access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\n\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor (\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById (\n    @Param(\"username\") username: string,\n  ): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor (\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async findUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n\n      return followExists;\n    }\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followerUserId,\n    });\n  }\n\n  async removeUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor (\n    private readonly userService: UserService,\n    private readonly userFollowService: UserFollowService,\n  ) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ConflictException, Controller, Delete, Get, Param, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiConflictResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser (\n    @Body() createHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getUserHighlight (\n    @Param(\"id\") id: number,\n  ): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser (\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n      @Param(\"id\") highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, { ...updateHighlightDto, shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser (\n    @UserId() userId: number,\n      @Param(\"id\") highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightUserReactions (\n    @Param(\"id\") id: number,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  async addHighlightReactionForUser (\n    @Param(\"id\") highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightReactionForUser (\n    @UserId() userId: number,\n      @Param(\"id\") highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(highlightId, userId, emojiId);\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor (\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (pageOptionsDto: HighlightOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    if (pageOptionsDto.repo) {\n      queryBuilder\n\n        // eslint-disable-next-line no-useless-escape\n        .where(`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`, { repo: decodeURIComponent(pageOptionsDto.repo) });\n    }\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllHighlightRepos (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .distinct(true)\n\n      // eslint-disable-next-line no-useless-escape\n      .select(`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')`, \"full_name\")\n      .where(`user_highlights.url LIKE '%github.com%'`);\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const subQuery = this.userHighlightRepository.manager.createQueryBuilder()\n      .from(`(${queryBuilder.getQuery()})`, \"subquery_for_count\")\n      .setParameters(queryBuilder.getParameters())\n      .select(\"count(full_name)\");\n\n    const countQueryResult = await subQuery.getRawOne();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_highlights.user_id = :userId\", { userId })\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserHighlight (userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : (new Date),\n    });\n\n    return this.userHighlightRepository.save(newUserHighlight);\n  }\n\n  async updateUserHighlight (highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight (highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions (highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder\n      .addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReaction[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction (highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction (userId: number, highlightId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n\n      return reactionExists;\n    }\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction (id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ConflictException, Controller, Delete, Get, Param, Patch, Post, Query, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService,\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @Param(\"id\") insightId: number,\n      @UserId() userId: number,\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"]);\n\n    if (!canAccess) {\n      throw new (UnauthorizedException);\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  async addInsightMember (\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n      @Param(\"id\") insightId: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"], false);\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  async updateInsightMember (\n    @Param(\"id\") id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n      @Body() updateInsightMemberDto: UpdateInsightMemberDto,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new (UnauthorizedException);\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeInsightMemberById (\n    @Param(\"id\") id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, Param, Patch, Post, Query, UnauthorizedException, UnprocessableEntityException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @UserId() userId: string,\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser (\n    @Body() createInsightDto: CreateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw (new BadRequestException);\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async repo => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser (\n    @Param(\"id\") id: number,\n      @Body() updateInsightDto: UpdateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter(insightRepo => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(repo => !updateInsightDto.repos.find(repoInfo => `${repoInfo.id}` === `${repo.repo_id}`));\n\n      const reposToRemoveRequests = reposToRemove.map(async insightRepo => this.insightsRepoService.removeInsightRepo(insightRepo.id));\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map(cr => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(repoInfo => !currentRepoIds.find(id => `${id}` === `${repoInfo.id}`));\n\n      const repoToAddRequests = reposToAdd.map(async repo => this.insightsRepoService.addInsightRepo(insight.id, repo));\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new (UnprocessableEntityException);\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n      DbUserHighlight,\n      DbUserHighlightReaction,\n      DbUserToUserFollows,\n    ], \"ApiConnection\"),\n    PullRequestModule,\n  ],\n  controllers: [UserController, UserHighlightsController, UserFollowsController],\n  providers: [UserService, UserController, UserHighlightsService, UserHighlightsController, UserFollowService],\n  exports: [UserService, UserHighlightsService, UserFollowService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nUserReposService \n\nUserReposService \n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserRepo,\n    ], \"ApiConnection\"),\n  ],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor (\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserRepo (userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: UserRepoOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder\n      .where(\"user_repos.user_id = :userId\", { userId });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UpdateUserDto } from \"./dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"./dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"./dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../auth/dtos/user-onboarding.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByUsername (username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"LOWER(login) = :username\", { username: username.toLowerCase() });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n    } = user;\n    const github = identities!.filter(identity => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      return await this.findOneById(id, true);\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: (new Date),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n      });\n\n      await newUser.save();\n\n      return newUser;\n    }\n  }\n\n  async updateUser (id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding (id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole (id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests (id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences (id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async findOneByEmail (email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserVotes,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.31.1-beta.1 (2023-04-26)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.31.0-beta.1 (2023-04-25)\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.30.2-beta.1 (2023-04-24)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n1.30.1 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\nleft join users for insight members to show pending invites (611b923)\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.3 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\n\n1.30.1-beta.2 (2023-04-20)\n🐛 Bug Fixes\n\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.1 (2023-04-18)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\n\n1.30.1-beta.1 (2023-04-14)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\nadd user name to insight members list (7e2756b)\n\n1.30.0 (2023-04-13)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\nadd endpoints for managing insight team members (#139) (3f9e756)\nadd endpoints to manage user highlight reactions (#137) (5e0b1c5)\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.5 (2023-04-11)\n🍕 Features\n\nadd endpoints for managing insight team members (#139) (3f9e756)\n\n1.30.0-beta.4 (2023-04-07)\n🍕 Features\n\nadd endpoints to manage user highlight reactions (#137) (5e0b1c5)\n\n1.30.0-beta.3 (2023-04-06)\n🍕 Features\n\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.2 (2023-04-04)\n🐛 Bug Fixes\n\nadd user name to insight members list (7e2756b)\n\n1.30.0-beta.1 (2023-04-04)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\n\n1.29.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.1-beta.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.0 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.4 (2023-03-28)\n🐛 Bug Fixes\n\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.3 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\n\n1.29.0-beta.2 (2023-03-21)\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\n\n1.29.0-beta.1 (2023-03-21)\n🍕 Features\n\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n1.28.0 (2023-03-16)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo full_name to pull request endpoints (#124) (8bfda45)\nadd repo topics (d08173f)\nadd search endpoint for repos with filters (#125) (85a7549)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n1.28.0-beta.3 (2023-03-15)\n🍕 Features\n\nadd search endpoint for repos with filters (#125) (85a7549)\n\n1.28.0-beta.2 (2023-03-15)\n🍕 Features\n\nadd repo full_name to pull request endpoints (#124) (8bfda45)\n\n1.28.0-beta.1 (2023-03-15)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.27.0 (2023-03-10)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.2 (2023-03-10)\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.1 (2023-03-06)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n1.26.0 (2023-02-28)\n1.27.0-alpha.1 (2023-03-09)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.25.0-alpha.10 (2023-03-08)\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\n\n1.25.0-alpha.9 (2023-03-07)\n🍕 Features\n\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\n\n1.25.0-alpha.8 (2023-03-07)\n🍕 Features\n\nadd endpoint for pull requests (#116) (86e013f)\n\n1.25.0-alpha.7 (2023-03-07)\n🐛 Bug Fixes\n\ncorrect user entity name length (66fb61e)\n\n1.25.0-alpha.6 (2023-02-23)\n🐛 Bug Fixes\n\ncorrect references cascade options (a5a4789)\n\n1.25.0-alpha.5 (2023-02-16)\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\n\n1.25.0-alpha.4 (2023-02-16)\n🍕 Features\n\nadd repo topics (d08173f)\n\n1.25.0-alpha.3 (2023-02-14)\n🐛 Bug Fixes\n\ncorrect user entity lenght (e043912)\n\n1.25.0-alpha.2 (2023-02-10)\n🍕 Features\n\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\n\n1.25.0-alpha.1 (2023-02-02)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\nupdate environment and database connections to new logging model (39bdd16)\n\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\ncorrect missing alpha interests migrations (58540e7)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n1.24.0-alpha.6 (2023-02-01)\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\n\n1.24.0-alpha.5 (2023-02-01)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\n\n1.24.0-alpha.4 (2023-02-01)\n🧑‍💻 Code Refactoring\n\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\n\n1.24.0-alpha.3 (2023-01-31)\n🧑‍💻 Code Refactoring\n\nremove supabase, code split migrations and diagrams (98980b0)\n\n🤖 Build System\n\ncorrect diagram database generator inclusion (afde490)\n\n1.24.0-alpha.2 (2023-01-31)\n🍕 Features\n\nupdate environment and database connections to new logging model (39bdd16)\n\n1.24.0-alpha.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\nYou also need the .env environment file added to your repo for the project to run. To get it, kindly contact @open-sauced/triage team.\n\nNote: For Windows users, the API_HOST key's value in the .env file should be 127.0.0.1, instead of 0.0.0.0, so that the project can run correctly on localhost.\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        21 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    18 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.31.1-beta.1\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return parseInt(request.user?.user_metadata.sub as string, 10);\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
