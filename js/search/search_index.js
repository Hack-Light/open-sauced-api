var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.194,1,3.56]],["body/modules/AppModule.html",[0,1.179,1,7.312,2,1.127,3,1.82,4,2.656,5,2.656,6,4.945,7,0.007,8,5.207,9,5.207,10,4.72,11,5.207,12,5.207,13,5.207,14,5.207,15,5.207,16,4.72,17,4.048,18,5.207,19,5.207,20,4.945,21,5.207,22,5.207,23,4.191,24,4.945,25,5.207,26,1.862,27,1.205,28,1.127,29,0.047,30,0.047,31,0.038,32,2.987,33,2.831,34,0.625,35,4.615,36,2.987,37,6.345,38,0.191,39,2.987,40,0.603,41,0.72,42,0.296,43,0.283,44,5.64,45,0.625,46,2.146,47,0.167,48,2.987,49,0.392,50,2.987,51,1.36,52,0.852,53,5.642,54,4.632,55,1.668,56,4.615,57,2.987,58,4.104,59,2.438,60,2.987,61,2.275,62,4.104,63,5.64,64,0.736,65,5.64,66,2.987,67,2.987,68,2.438,69,2.438,70,2.438,71,3.767,72,3.767,73,3.767,74,3.767,75,3.767,76,3.767,77,4.615,78,1.945,79,2.987,80,1.862,81,1.518,82,2.216,83,1.945,84,2.768,85,2.987,86,2.768,87,2.275,88,2.768,89,2.275,90,2.768,91,2.275,92,2.768,93,2.275,94,2.656,95,2.987,96,2.987,97,2.987,98,2.987,99,2.987,100,2.037,101,2.275,102,2.987,103,4.615,104,2.275,105,2.987,106,2.987,107,2.668,108,2.987,109,3.005,110,4.615,111,2.953,112,0.851,113,3.148,114,2.656,115,3.148,116,3.148,117,2.987,118,2.438,119,1.864,120,2.987,121,2.987,122,3.516,123,2.656,124,3.148,125,2.438,126,3.148,127,2.987,128,2.503,129,1.564,130,2.438,131,2.768,132,3.148,133,2.037,134,2.577,135,5.523,136,1.864,137,2.987,138,3.005,139,2.275,140,3.005,141,2.275,142,2.879,143,2.656,144,2.668,145,1.474,146,1.945,147,3.005,148,0.975,149,2.146,150,3.315,151,1.727,152,3.005,153,2.275,154,3.005,155,2.275,156,2.987,157,2.768,158,2.438,159,2.987,160,2.987,161,2.656,162,2.987,163,3.796,164,4.615,165,1.368,166,5.64,167,4.615,168,8.824,169,2.987,170,3.767,171,2.987,172,3.767,173,2.987,174,2.577,175,2.987,176,4.104,177,2.987,178,3.315,179,2.987,180,4.615,181,2.677,182,1.421,183,4.615,184,3.148,185,1.342,186,2.987,187,4.615,188,4.104,189,2.987,190,4.615,191,4.104,192,2.987,193,5.64,194,3.767,195,2.987,196,2.987,197,2.987,198,2.987,199,2.987,200,2.987,201,2.987,202,2.987,203,2.987,204,2.987,205,2.987,206,2.987,207,2.146,208,2.987,209,2.987,210,2.275,211,2.987,212,1.792,213,2.987,214,2.987,215,2.987,216,2.987,217,2.987,218,2.987,219,2.987,220,2.987,221,2.656,222,2.987,223,2.987,224,1.864,225,2.438,226,2.037,227,2.037,228,2.987,229,2.275,230,2.275,231,1.293,232,0.051,233,0.082,234,0.603,235,2.987,236,0.949,237,1.368,238,2.987,239,2.987,240,2.987,241,0.003,242,0.003]],["title/controllers/AuthController.html",[243,1.071,244,3.56]],["body/controllers/AuthController.html",[7,0.007,29,0.044,30,0.044,31,0.036,34,0.929,38,0.474,40,1.498,41,0.895,42,0.463,43,0.704,45,1.553,47,0.147,49,0.372,61,2.164,82,2.965,83,1.849,112,1.732,185,1.291,232,0.049,233,0.078,234,0.574,236,1.123,241,0.003,242,0.003,243,0.651,244,3.382,245,0.781,246,2.526,247,1.096,248,3.924,249,0.144,250,1.997,251,5.463,252,6.7,253,6.7,254,6.7,255,6.7,256,6.7,257,6.7,258,2.841,259,6.598,260,0.992,261,2.841,262,4.439,263,3.38,264,3.901,265,5.797,266,2.841,267,2.841,268,2.841,269,2.799,270,2.841,271,2.841,272,3.947,273,5.492,274,5.463,275,5.463,276,5.213,277,2.769,278,2.841,279,2.841,280,1.146,281,4.148,282,4.436,283,2.841,284,5.505,285,4.705,286,5.137,287,3.674,288,2.841,289,2.911,290,2.841,291,2.841,292,5.041,293,2.841,294,2.841,295,6.377,296,5.101,297,2.841,298,4.592,299,5.492,300,4.439,301,4.858,302,5.463,303,2.841,304,2.841,305,5.101,306,2.841,307,4.813,308,2.841,309,2.841,310,2.841,311,6.267,312,1.938,313,2.841,314,2.841,315,2.841,316,2.041,317,1.487,318,1.364,319,3.79,320,3.704,321,3.378,322,3.028,323,3.028,324,1.096,325,0.487,326,1.23,327,2.526,328,2.041,329,2.841,330,5.104,331,2.841,332,2.841,333,2.776,334,2.041,335,3.557,336,2.526,337,3.557,338,2.526,339,5.463,340,2.526,341,2.526,342,2.526,343,2.526,344,2.526,345,2.841,346,2.841,347,1.049,348,2.841,349,3.663,350,2.926,351,2.841,352,1.961,353,3.408,354,4.439,355,3.623,356,3.947,357,1.605,358,1.791,359,3.947,360,5.463,361,1.207,362,3.623,363,5.463,364,1.704,365,2.526,366,1.704,367,0.928,368,1.642,369,2.319,370,3.382,371,3.623,372,3.947,373,3.382,374,3.382,375,3.382,376,3.382,377,3.382,378,2.324,379,3.382,380,3.382,381,3.947,382,1.989,383,2.841,384,1.704,385,2.164,386,2.841,387,1.445,388,2.841,389,2.841,390,2.841,391,2.841,392,1.195,393,4.439,394,2.164,395,2.841,396,2.841,397,2.841,398,2.841,399,2.841,400,2.841,401,3.623,402,2.841,403,4.858,404,0.435,405,2.841,406,2.841,407,2.841,408,2.841,409,2.841,410,2.841,411,2.841,412,2.841,413,2.841,414,2.841,415,2.841,416,2.841,417,3.947,418,2.841,419,2.841]],["title/modules/AuthModule.html",[0,1.194,6,3.188]],["body/modules/AuthModule.html",[0,1.899,2,2.215,3,2.933,6,6.651,7,0.007,10,5.89,23,5.23,24,6.171,26,3,27,2.368,28,2.215,29,0.092,30,0.092,31,0.074,33,3.07,47,0.161,49,0.769,100,4.004,112,1.083,113,4.004,114,5.22,118,4.792,231,3.22,232,0.101,233,0.161,241,0.005,242,0.005,244,6.219,245,2.045,326,4.142,327,5.22,420,5.22,421,5.22,422,5.22,423,5.22,424,6.171,425,6.871,426,5.87,427,3.386,428,7.437,429,4.792,430,5.87,431,5.87,432,5.22]],["title/interfaces/ChatResponse.html",[433,2.803,434,3.043]],["body/interfaces/ChatResponse.html",[7,0.007,29,0.081,30,0.081,31,0.065,42,0.43,47,0.14,49,0.678,54,4.441,55,2.887,112,0.954,185,1.503,212,3.101,226,3.527,227,3.527,232,0.089,233,0.142,234,1.044,236,1.408,241,0.005,242,0.005,249,0.262,250,1.143,277,3.226,280,0.678,281,2.793,317,2.707,352,2.089,353,4.274,366,3.101,382,1.918,384,3.101,387,1.334,392,0.87,404,1.049,433,3.101,434,5.001,435,3.939,436,2.295,437,3.939,438,5.001,439,4.221,440,1.218,441,6.23,442,6.091,443,1.263,444,6.28,445,3.714,446,3.939,447,4.672,448,2.793,449,4.98,450,4.221,451,2.552,452,6.482,453,3.366,454,3.939,455,4.672,456,4.672,457,3.714,458,5.852,459,3.939,460,6.831,461,3.939,462,3.939,463,3.714,464,3.714,465,2.552,466,3.939,467,3.939,468,3.939,469,3.939,470,3.939,471,4.598,472,4.598,473,3.714,474,4.221,475,4.598,476,3.101,477,6.091,478,4.221,479,2.793,480,4.221,481,3.939,482,3.939,483,4.598,484,3.527,485,3.714,486,3.226,487,3.714,488,3.939,489,3.939,490,3.101,491,3.939,492,3.527,493,3.939,494,3.527,495,3.939,496,3.939,497,3.939,498,3.939,499,3.939,500,1.831,501,3.939,502,3.714,503,3.714,504,3.939,505,3.939,506,3.527,507,3.939,508,1.722,509,3.939,510,2.039,511,3.939,512,2.989,513,3.939,514,3.939,515,1.951,516,3.939,517,5.102,518,1.831,519,3.939,520,3.939,521,3.939]],["title/interfaces/ChatResponse-1.html",[433,2.335,434,2.534,510,1.535]],["body/interfaces/ChatResponse-1.html",[7,0.007,29,0.08,30,0.08,31,0.064,42,0.428,47,0.14,49,0.67,54,4.416,55,2.854,112,0.943,128,3.017,129,2.676,148,2.494,185,1.486,212,3.066,226,3.487,227,3.487,232,0.088,233,0.14,234,1.032,236,1.398,241,0.005,242,0.005,249,0.259,250,1.13,280,0.67,281,2.762,317,2.676,352,2.079,353,4.241,366,3.066,382,1.904,384,3.066,387,1.324,392,1.37,404,1.17,433,3.066,434,4.973,435,3.894,436,2.269,440,1.209,441,6.202,442,6.045,443,1.254,444,6.26,445,3.672,446,3.894,448,2.762,449,2.854,451,2.523,452,6.457,454,3.894,455,5.21,456,4.637,457,3.672,459,3.894,461,3.894,462,3.894,463,3.672,464,3.672,465,2.523,466,3.894,467,3.894,468,3.894,469,3.894,470,3.894,476,3.066,481,3.894,482,3.894,484,3.487,485,3.672,486,3.189,487,3.672,488,3.894,489,3.894,490,3.066,491,3.894,492,4.637,493,3.894,494,3.487,495,3.894,496,3.894,497,3.894,498,3.894,499,3.894,500,1.81,501,3.894,502,5.487,503,3.672,504,3.894,505,3.894,506,3.487,507,3.894,508,1.703,509,3.894,510,2.016,511,3.894,512,2.955,513,3.894,514,3.894,515,1.929,516,3.894,517,5.079,518,1.81,519,3.894,520,3.894,521,3.894,522,4.173,523,4.637,524,4.173,525,3.328,526,6.235,527,4.546,528,2.955,529,4.546,530,4.546,531,4.546,532,4.546,533,4.546,534,4.173,535,4.546,536,4.173,537,4.546,538,4.546,539,4.546,540,4.546,541,4.546]],["title/controllers/CodeRefactorSuggestionController.html",[243,1.071,542,3.56]],["body/controllers/CodeRefactorSuggestionController.html",[7,0.007,29,0.091,30,0.091,31,0.073,34,1.552,38,0.373,40,1.18,41,0.663,42,0.39,43,0.554,45,1.223,47,0.152,49,0.766,148,1.907,185,1.699,232,0.1,233,0.16,234,1.18,236,1.201,241,0.005,242,0.005,243,1.338,245,1.606,247,2.253,249,0.296,250,1.8,260,0.781,263,2.924,281,4.006,317,3.059,318,2.804,319,3.66,320,4.447,323,2.924,324,2.253,325,1.001,326,2.529,347,2.157,349,2.884,350,2.304,352,1.492,382,1.636,387,1.138,392,0.983,436,3.291,437,5.648,438,5.883,447,6.336,448,3.156,449,4.548,450,4.768,453,5.303,458,6.736,515,2.204,518,2.068,542,5.648,543,5.195,544,4.768,545,7.243,546,5.842,547,5.842,548,7.414,549,6.593,550,5.326,551,5.326,552,5.842,553,4.626,554,3.803,555,5.842,556,5.648,557,4.626,558,2.968,559,5.195,560,4.768,561,4.768,562,3.504,563,5.842,564,5.842]],["title/injectables/CodeRefactorSuggestionService.html",[443,0.862,453,3.043]],["body/injectables/CodeRefactorSuggestionService.html",[7,0.007,29,0.075,30,0.075,31,0.061,34,1.368,38,0.473,40,1.497,41,0.841,42,0.418,43,0.703,45,1.368,47,0.137,49,0.631,54,4.952,55,2.69,112,0.889,185,1.401,212,3.918,226,3.286,227,3.286,232,0.083,233,0.132,234,1.319,236,1.634,241,0.005,242,0.005,249,0.244,250,1.638,277,3.006,280,0.972,281,2.603,317,2.522,352,2.03,353,4.076,366,2.889,382,1.83,384,2.889,387,1.272,392,0.811,404,1.218,433,2.889,434,4.253,436,3.528,437,6.055,438,5.577,439,3.933,441,3.67,443,1.205,444,6.153,445,3.46,446,3.67,447,5.421,448,2.603,449,4.892,450,3.933,451,2.378,452,6.329,453,4.253,454,5.647,455,5.056,456,5.421,457,3.46,458,5.647,459,3.67,460,6.592,461,3.67,462,3.67,463,3.46,464,3.46,465,2.378,466,3.67,467,3.67,468,3.67,469,3.67,470,3.67,471,4.284,472,4.284,473,3.46,474,3.933,475,4.284,476,2.889,477,5.81,478,3.933,479,2.603,480,3.933,481,3.67,482,5.647,483,4.284,484,3.286,485,3.46,486,3.006,487,3.46,488,3.67,489,3.67,490,2.889,491,3.67,492,3.286,493,3.67,494,3.286,495,3.67,496,3.67,497,3.67,498,3.67,499,3.67,500,1.706,501,3.67,502,3.46,503,3.46,504,3.67,505,3.67,506,3.286,507,3.67,508,1.605,509,3.67,510,1.9,511,3.67,512,2.785,513,3.67,514,3.67,515,1.818,516,3.67,517,4.959,518,2.313,519,3.67,520,3.67,521,3.67,565,1.637,566,3.67,567,4.818,568,4.284,569,4.818,570,4.284,571,4.818]],["title/modules/ContributionModule.html",[0,1.194,8,3.357]],["body/modules/ContributionModule.html",[0,1.992,2,2.39,3,3.076,7,0.007,8,6.831,17,5.149,26,3.146,27,2.555,28,2.39,29,0.099,30,0.099,31,0.08,33,3.22,47,0.16,49,0.83,51,2.884,52,1.808,78,4.124,80,3.146,81,3.219,84,4.678,165,1.877,231,3.377,232,0.109,233,0.174,241,0.006,242,0.006,245,2.144,427,3.551,572,5.633,573,5.633,574,6.335,575,5.633,576,6.59,577,6.335,578,6.438,579,5.171,580,5.633,581,1.618,582,6.335,583,3.219]],["title/classes/ContributionPageOptionsDto.html",[233,0.128,584,3.357]],["body/classes/ContributionPageOptionsDto.html",[7,0.007,29,0.085,30,0.085,31,0.068,38,0.551,42,0.454,43,0.885,47,0.135,232,0.121,233,0.194,237,2.786,241,0.005,242,0.005,249,0.275,260,1.155,280,1.03,325,0.929,357,2.554,358,2.85,440,1.256,465,2.675,510,3.1,584,5.075,585,1.669,586,5.767,587,2.667,588,2.838,589,2.554,590,2.39,591,5.988,592,3.59,593,3.945,594,3.88,595,7.052,596,2.445,597,3.566,598,6.99,599,3.945,600,4.389,601,5.075,602,5.42,603,4.819,604,2.838,605,3.945,606,2.928,607,3.026,608,4.651,609,3.133,610,3.88,611,2.754,612,3.026,613,3.133,614,3.026,615,3.133,616,3.59,617,2.602,618,2.602,619,3.026,620,3.026,621,3.133,622,3.59,623,3.381,624,3.59,625,2.045,626,2.001,627,1.49,628,4.084,629,4.819,630,5.767,631,4.237,632,5.42]],["title/injectables/ContributionService.html",[443,0.862,576,3.188]],["body/injectables/ContributionService.html",[7,0.007,29,0.089,30,0.089,31,0.072,34,1.529,38,0.466,40,1.474,41,0.828,42,0.384,43,0.693,45,1.194,47,0.159,49,0.748,52,1.627,64,1.404,84,3.42,165,1.69,182,1.756,185,2.123,232,0.098,233,0.156,234,1.474,236,1.173,241,0.005,242,0.005,249,0.289,250,1.78,269,2.384,280,1.056,352,2.242,382,2.045,387,1.111,443,1.347,565,1.938,576,4.98,579,4.655,584,6.1,587,1.826,590,2.134,595,4.655,598,5.071,610,2.815,611,2.898,626,2.106,627,1.568,633,5.071,634,5.244,635,5.703,636,2.516,637,5.703,638,7.302,639,3.713,640,6.45,641,5.703,642,3.89,643,2.354,644,2.019,645,2.152,646,4.655,647,4.344,648,4.192,649,3.081,650,5.071,651,5.703,652,3.487,653,5.703,654,5.071,655,5.071,656,5.703,657,5.071,658,5.071,659,5.703,660,3.558,661,3.558,662,3.823,663,3.184,664,3.184,665,3.184]],["title/controllers/ContributorController.html",[243,1.071,666,3.56]],["body/controllers/ContributorController.html",[7,0.007,29,0.093,30,0.093,31,0.075,34,1.57,38,0.38,40,1.201,41,0.675,42,0.394,43,0.564,45,1.245,47,0.158,49,0.78,128,3.946,129,3.114,148,2.449,232,0.102,233,0.163,234,1.201,236,1.223,237,1.763,241,0.005,242,0.005,243,1.363,245,1.635,247,2.294,249,0.302,250,1.815,260,0.795,263,2.957,269,2.449,322,2.957,323,2.957,324,2.294,325,1.019,347,2.197,350,2.345,387,1.158,562,4.498,590,1.987,627,1.635,631,3.567,644,2.106,645,2.244,666,5.713,667,5.289,668,5.9,669,8.891,670,5.948,671,6.195,672,4.855,673,6.669,674,5.387,675,4.498,676,4.187,677,5.948,678,5.9,679,5.948,680,3.17,681,2.708,682,2.855,683,2.64,684,2.855,685,5.124,686,4.531,687,5.115,688,5.289,689,5.948,690,5.948,691,4.855,692,5.948,693,5.948]],["title/modules/ContributorModule.html",[0,1.194,9,3.357]],["body/modules/ContributorModule.html",[0,2.059,2,2.524,3,3.179,7,0.007,9,6.709,16,6.081,26,3.252,27,2.698,28,2.524,29,0.105,30,0.105,31,0.084,33,3.328,47,0.158,49,0.877,51,3.045,52,1.908,128,3.578,129,3.502,130,5.459,131,4.835,132,4.562,133,4.562,165,1.982,232,0.115,233,0.183,241,0.006,242,0.006,245,2.216,583,3.398,666,6.593,694,6.688,695,6.688,696,6.688,697,6.688]],["title/classes/CreateEndorsementDto.html",[233,0.128,698,3.188]],["body/classes/CreateEndorsementDto.html",[7,0.007,29,0.081,30,0.133,31,0.065,38,0.559,42,0.501,43,0.652,47,0.118,112,1.511,224,4.286,232,0.089,233,0.188,241,0.005,242,0.005,249,0.263,260,1.171,280,1.214,325,0.89,361,1.934,367,3.146,378,4.289,392,1.473,404,1.341,440,1.222,585,1.599,596,1.787,617,2.493,622,3.49,624,3.49,625,1.959,636,2.036,698,4.686,699,7.94,700,4.239,701,6.846,702,6.846,703,3.597,704,6.846,705,6.846,706,3.879,707,7.056,708,6.109,709,2.409,710,5.193,711,5.193,712,5.608,713,5.193,714,5.193,715,5.193,716,5.193,717,6.109,718,4.239,719,5.193,720,5.608,721,5.193,722,5.193,723,5.193,724,5.193,725,3.985,726,3.73,727,6.241,728,4.618,729,5.193,730,4.618,731,5.193,732,4.618]],["title/classes/CreateInsightDto.html",[233,0.128,733,3.357]],["body/classes/CreateInsightDto.html",[7,0.007,29,0.091,30,0.091,31,0.074,38,0.52,41,1.003,42,0.5,47,0.147,163,3.886,181,2.161,232,0.101,233,0.223,241,0.005,242,0.005,249,0.297,260,1.09,286,4.832,325,1.003,361,1.293,392,1.372,404,1.313,440,1.32,585,1.802,587,2.744,625,2.208,636,2.199,706,3.711,709,2.351,725,3.903,726,3.379,733,5.331,734,6.998,735,4.776,736,6.21,737,3.365,738,4.488,739,4.232,740,5.654,741,4.776,742,5.851,743,5.203,744,5.851,745,5.885,746,5.062,747,6.6,748,5.581,749,5.203,750,5.851,751,4.776,752,6.059,753,3.809,754,4.776,755,3.809,756,5.851,757,3.382,758,2.473,759,3.267]],["title/classes/CreateInsightMemberDto.html",[233,0.128,760,3.56]],["body/classes/CreateInsightMemberDto.html",[7,0.007,29,0.106,30,0.106,31,0.085,38,0.433,42,0.458,47,0.14,232,0.117,233,0.223,241,0.006,242,0.006,249,0.344,260,0.908,298,5.155,325,1.164,392,1.142,404,1.383,440,1.447,585,2.09,625,2.562,706,3.091,709,2.116,725,3.703,734,6.64,739,4.457,755,5.296,760,6.197,761,5.542,762,5.843,763,7.234,764,6.037,765,6.789,766,7.234,767,5.542]],["title/classes/CreateLogDto.html",[233,0.128,768,3.56]],["body/classes/CreateLogDto.html",[7,0.007,29,0.102,30,0.102,31,0.082,38,0.548,42,0.451,43,0.882,47,0.113,207,6.162,224,5.352,232,0.113,233,0.218,237,2.834,241,0.006,242,0.006,249,0.333,260,1.147,404,1.424,440,1.416,451,4.235,585,2.018,624,4.534,625,2.473,726,4.062,768,6.067,769,7.935,770,5.828,771,8.579,772,6.554,773,6.554,774,6.554]],["title/classes/CreateUserCollaborationDto.html",[233,0.128,775,3.56]],["body/classes/CreateUserCollaborationDto.html",[7,0.007,29,0.099,30,0.099,31,0.08,38,0.498,42,0.485,47,0.134,112,1.559,148,2.547,174,5.057,232,0.109,233,0.214,241,0.006,242,0.006,249,0.321,260,1.043,325,1.086,392,1.312,404,1.446,440,1.387,451,4.47,456,4.321,585,1.951,625,2.39,706,3.551,709,2.294,712,6.367,725,3.847,726,3.847,775,5.942,776,6.899,777,5.171,778,6.335,779,7.8,780,7.8,781,6.936,782,6.335,783,6.335,784,6.335,785,6.335,786,5.633,787,4.826,788,4.826,789,6.335,790,5.633]],["title/classes/CreateUserHighlightDto.html",[233,0.128,791,3.357]],["body/classes/CreateUserHighlightDto.html",[7,0.007,29,0.086,30,0.086,31,0.069,38,0.534,42,0.498,43,0.793,47,0.122,112,1.599,145,4.575,232,0.094,233,0.195,241,0.005,242,0.005,249,0.278,260,1.118,325,0.939,367,3.093,378,4.538,392,1.407,404,1.476,440,1.265,456,3.736,479,3.843,528,5.011,585,1.686,617,3.415,622,4.014,624,4.014,625,2.067,706,3.239,709,2.385,725,3.597,726,3.808,758,3.007,776,7.076,786,4.871,790,4.871,791,5.11,792,4.871,793,5.675,794,6.226,795,6.371,796,5.477,797,5.477,798,6.326,799,2.627,800,4.631,801,5.419,802,3.007,803,5.477,804,5.477,805,5.477,806,5.477,807,6.326,808,5.477,809,5.477,810,7.114,811,4.871,812,3.166,813,5.477,814,2.372]],["title/injectables/CustomLogger.html",[443,0.862,815,3.357]],["body/injectables/CustomLogger.html",[7,0.007,29,0.07,30,0.07,31,0.057,34,1.305,38,0.549,40,1.694,41,0.952,42,0.452,43,0.796,45,1.698,47,0.133,49,0.59,54,4.973,55,2.512,207,5.825,212,4.632,224,6.058,232,0.077,233,0.123,234,1.259,236,1.471,237,2.12,241,0.004,242,0.004,249,0.228,250,2.069,387,1.58,404,1.502,440,1.108,443,1.15,451,4.712,517,5.471,518,2.871,565,1.529,589,2.254,596,1.17,642,5.723,815,5.138,816,7.798,817,4,818,7.153,819,8.603,820,6.304,821,6.62,822,7.722,823,6.867,824,4.499,825,7.722,826,5.723,827,6.233,828,4.499,829,4.499,830,4.499,831,7.722,832,4.499,833,4.499,834,4.499,835,4.499,836,4.499,837,4.499,838,4.499,839,4.499,840,4.499,841,4,842,4,843,4.499,844,4.499,845,4.499,846,8.11,847,4.499,848,4.499,849,6.233]],["title/modules/CustomerModule.html",[0,1.194,10,3.043]],["body/modules/CustomerModule.html",[0,2.061,2,2.528,3,3.183,7,0.007,10,6.153,26,3.256,27,2.703,28,2.528,29,0.105,30,0.105,31,0.084,33,2.766,47,0.154,49,0.878,51,3.05,52,1.912,116,5.505,165,1.986,231,3.495,232,0.115,233,0.184,241,0.006,242,0.006,337,6.334,427,3.674,583,3.404,850,5.958,851,5.958,852,5.958,853,6.701,854,5.958,855,6.701]],["title/injectables/CustomerService.html",[337,3.043,443,0.862]],["body/injectables/CustomerService.html",[7,0.007,29,0.088,30,0.088,31,0.07,34,1.512,38,0.557,40,1.704,41,0.957,42,0.443,43,0.8,45,1.766,47,0.145,49,0.735,52,1.599,64,1.38,116,3.823,165,1.661,232,0.096,233,0.154,234,1.458,236,1.153,241,0.005,242,0.005,249,0.284,250,2.057,280,1.172,289,2.661,337,4.701,352,1.844,361,2.009,387,1.643,404,1.369,443,1.332,518,2.829,565,1.905,636,2.5,643,2.314,652,3.653,854,4.984,856,4.984,857,7.104,858,3.745,859,7.989,860,7.989,861,5.605,862,5.605,863,7.221,864,5.605,865,7.503,866,5.605,867,5.605,868,5.605,869,5.605,870,5.605,871,5.605,872,5.605,873,5.605,874,3.287,875,5.605,876,3.669,877,5.605,878,5.605]],["title/classes/DatabaseLoggerMiddleware.html",[104,3.56,233,0.128]],["body/classes/DatabaseLoggerMiddleware.html",[7,0.007,29,0.125,30,0.067,31,0.054,34,1.267,38,0.563,40,1.93,41,1.013,42,0.456,43,0.823,45,1.78,46,5.735,47,0.12,49,0.565,64,1.061,68,3.518,69,3.518,70,3.518,104,5.326,184,5.445,185,1.253,207,5.445,232,0.104,233,0.118,234,1.222,236,1.702,237,2.072,241,0.004,242,0.004,249,0.219,280,0.916,366,2.585,384,2.585,387,1.718,404,1.468,440,1.076,451,4.196,517,4.361,518,2.684,585,1.327,596,1.121,642,5.918,680,3.668,821,6.94,823,6.217,879,7.946,880,3.518,881,4.939,882,6.991,883,6.991,884,6.991,885,6.991,886,6.991,887,6.991,888,6.991,889,4.31,890,6.05,891,4.31,892,9.625,893,4.31,894,4.31,895,4.31,896,4.31,897,4.31,898,4.31,899,4.31,900,4.31,901,4.31,902,2.386,903,4.31,904,4.31,905,4.31,906,4.31,907,4.31,908,3.833,909,4.31,910,4.31,911,7.58,912,4.31,913,6.991,914,6.05,915,4.31,916,6.991,917,4.31,918,4.31,919,4.31]],["title/entities/DbContribution.html",[84,2.803,920,1.172]],["body/entities/DbContribution.html",[7,0.007,29,0.06,30,0.06,31,0.048,38,0.555,41,0.813,42,0.488,43,0.754,47,0.123,64,0.94,80,2.893,81,1.939,84,3.327,112,1.023,128,2.462,181,2.649,182,1.175,232,0.066,233,0.105,241,0.004,242,0.004,249,0.194,260,1.164,280,1.102,287,2.525,325,0.654,357,2.362,358,2.636,361,1.684,367,3.139,378,3.989,392,1.414,404,1.099,440,0.986,476,3.327,500,1.351,508,2.389,562,3.327,581,1.946,589,1.38,596,2.186,629,4.457,630,5.334,631,4.57,636,1.644,703,3.56,709,2.391,720,4.528,799,3.103,802,3.032,814,2.402,902,3.314,920,1.391,921,3.394,922,3.137,923,3.206,924,4.932,925,3.875,926,3.817,927,4.669,928,4.669,929,4.146,930,6.378,931,3.817,932,4.932,933,5.547,934,3.817,935,4.892,936,3.817,937,2.462,938,3.659,939,3.36,940,6.63,941,2.402,942,4.005,943,1.738,944,3.469,945,3.639,946,2.893,947,3.817,948,2.289,949,2.893,950,3.817,951,2.893,952,3.817,953,3.817,954,3.443,955,4.225,956,4.225,957,2.603,958,3.817,959,2.131,960,3.817,961,3.097,962,3.817,963,3.394,964,3.817,965,2.344,966,2.904,967,2.904,968,2.289,969,3.817,970,5.547,971,3.817,972,3.817,973,3.281,974,2.904,975,2.062,976,3.097,977,3.097,978,2.818,979,2.402,980,2.904,981,3.225,982,3.309,983,2.9,984,1.54,985,1.54,986,2.907,987,3.817,988,2.741,989,2.206,990,3.115,991,2.131,992,3.115,993,3.817,994,3.394]],["title/entities/DbCustomer.html",[116,3.188,920,1.172]],["body/entities/DbCustomer.html",[7,0.007,29,0.099,30,0.099,31,0.08,38,0.498,41,0.718,42,0.444,47,0.134,64,1.56,112,1.439,116,5.32,119,4.866,182,1.951,232,0.109,233,0.174,241,0.006,242,0.006,249,0.321,260,1.043,280,1.022,361,2.001,367,3.011,392,1.312,401,6.367,404,1.195,440,1.387,500,2.243,589,2.29,604,4.084,709,2.294,865,7.515,920,1.956,923,3.146,927,5.078,928,5.078,929,4.509,951,3.146,973,3.22,974,4.084,975,3.423,982,3.409,984,2.555,985,2.555,988,4.55,995,5.633,996,4.826,997,6.335,998,5.633,999,6.335,1000,6.335,1001,2.96,1002,5.633]],["title/entities/DbEmoji.html",[142,2.916,920,1.172]],["body/entities/DbEmoji.html",[7,0.007,29,0.069,30,0.069,31,0.055,38,0.557,41,0.945,42,0.488,43,0.79,47,0.131,64,1.083,135,3.352,142,3.829,144,4.421,145,3.971,146,2.864,181,2.267,182,1.355,232,0.076,233,0.121,241,0.004,242,0.004,249,0.223,260,1.166,280,0.804,287,2.794,325,0.754,357,2.556,358,2.851,361,1.562,367,3.142,378,4.212,392,1.402,404,1.276,440,1.091,479,4.132,500,1.558,508,2.044,510,1.735,596,1.989,709,2.38,799,3.077,802,2.594,814,1.905,902,3.286,920,1.539,922,3.393,923,3.085,937,2.724,938,3.62,939,3.233,941,2.658,942,3.427,943,2.003,944,3.44,945,3.608,946,3.085,948,2.639,949,2.476,951,2.476,954,2.946,965,2.594,966,3.214,967,3.214,968,2.639,973,3.157,978,3.118,979,2.658,980,3.214,981,3.489,982,3.245,983,3.137,984,1.775,985,1.775,991,2.457,1003,3.912,1004,7.069,1005,5.385,1006,5.827,1007,4.4,1008,4.4,1009,7.12,1010,4.186,1011,4.676,1012,3.912,1013,3.829,1014,4.4,1015,4.186,1016,3.591,1017,4.4,1018,4.4,1019,4.4,1020,3.591,1021,5.01,1022,6.138,1023,4.4,1024,4.4,1025,4.4,1026,4.4,1027,5.01,1028,3.118,1029,3.912,1030,3.16,1031,2.864,1032,4.4]],["title/entities/DbEndorsement.html",[157,2.803,920,1.172]],["body/entities/DbEndorsement.html",[7,0.007,29,0.07,30,0.126,31,0.056,38,0.559,41,0.507,42,0.501,43,0.831,47,0.107,64,1.101,112,1.421,157,3.722,182,1.377,224,3.872,232,0.077,233,0.122,241,0.004,242,0.004,249,0.227,260,1.171,280,1.098,357,2.578,361,1.965,367,3.146,378,3.25,392,1.473,404,1.341,440,1.104,500,1.583,508,2.067,596,1.614,636,1.839,701,6.34,702,6.34,703,3.331,704,6.34,705,6.34,707,7.086,708,5.519,709,2.387,712,5.066,717,5.519,730,3.976,732,3.976,799,2.292,802,2.623,814,1.936,902,2.447,920,1.556,923,3.464,927,5.452,928,5.452,929,4.841,937,1.984,938,3.107,939,2.623,941,2.687,943,2.035,944,2.562,945,2.687,946,2.504,951,2.504,965,2.623,973,3.545,979,2.687,982,3.532,983,2.755,984,1.803,985,1.803,1001,2.089,1013,5.225,1015,4.233,1016,3.649,1028,3.153,1030,3.211,1033,3.976,1034,4.471,1035,3.211,1036,4.471,1037,4.471,1038,3.976,1039,4.471,1040,4.471,1041,4.471,1042,6.207,1043,4.728,1044,4.471,1045,5.867,1046,4.471,1047,4.471,1048,4.471,1049,3.211,1050,3.976]],["title/entities/DbInsight.html",[107,2.702,920,1.172]],["body/entities/DbInsight.html",[7,0.007,29,0.058,30,0.058,31,0.046,38,0.559,41,0.921,42,0.483,43,0.745,47,0.129,64,0.909,82,3.389,83,2.403,107,3.129,109,4.596,111,1.933,112,1.497,181,3.075,182,1.137,232,0.063,233,0.101,241,0.004,242,0.004,249,0.187,260,1.171,280,0.925,325,0.633,357,2.318,358,2.586,361,1.794,367,3.146,392,1.429,404,1.082,440,0.963,449,2.061,500,1.307,508,2.617,587,2.26,589,1.335,596,2.166,709,2.405,736,4.883,737,2.646,738,3.696,739,4.541,740,4.124,755,2.403,758,2.288,794,3.888,799,2.901,802,3.321,812,3.129,814,2.775,902,3.098,920,1.358,922,3.077,923,3.169,927,4.596,928,4.596,929,4.081,930,4.814,935,3.692,937,2.845,938,3.572,939,3.321,941,2.344,943,1.681,944,3.243,945,3.402,946,3.169,949,2.184,951,2.184,954,2.599,959,2.061,961,3.022,965,3.321,973,3.243,974,2.834,975,2.925,976,3.022,977,3.022,978,2.75,979,2.344,980,2.834,981,3.164,982,3.275,983,3.133,984,1.489,985,1.489,1001,2.53,1020,3.013,1027,4.419,1028,2.75,1035,2.651,1051,3.283,1052,6.41,1053,6.41,1054,2.662,1055,3.691,1056,3.888,1057,2.651,1058,3.691,1059,3.283,1060,3.691,1061,5.071,1062,6.278,1063,5.413,1064,4.814,1065,3.691,1066,3.691,1067,3.691,1068,3.691,1069,4.814,1070,5.413,1071,3.691,1072,5.413,1073,3.691,1074,4.124,1075,3.691,1076,3.692,1077,2.812,1078,3.691,1079,3.691,1080,3.691,1081,3.691,1082,2.303,1083,3.691]],["title/entities/DbInsightMember.html",[140,3.043,920,1.172]],["body/entities/DbInsightMember.html",[7,0.007,29,0.058,30,0.058,31,0.047,38,0.552,41,0.893,42,0.486,43,0.856,47,0.093,64,0.915,112,1.003,140,3.54,181,3.08,182,1.144,232,0.064,233,0.102,241,0.004,242,0.004,249,0.188,260,1.156,280,0.928,298,3.953,357,2.326,358,2.595,361,1.797,367,3.132,392,1.455,404,1.278,440,0.967,479,3.825,500,1.315,508,2.778,589,1.343,596,2.048,709,2.429,739,3.887,755,5.63,762,6.485,767,3.032,799,3.194,800,3.54,802,3.328,814,3.066,902,3.289,920,1.364,922,3.088,923,3.176,927,3.54,928,3.54,929,3.143,937,3.143,938,3.693,939,3.525,941,2.355,943,1.691,944,3.443,945,3.611,946,2.856,949,3.176,951,2.194,954,2.61,957,2.533,965,3.328,973,3.358,974,2.847,975,2.938,978,2.763,979,2.355,980,2.847,982,3.281,983,3.345,984,1.498,985,1.498,1001,2.541,1013,3.393,1015,3.709,1028,2.763,1030,2.668,1035,2.668,1045,4.143,1054,2.278,1056,3.906,1057,2.668,1076,3.709,1077,2.83,1084,7.156,1085,3.303,1086,5.741,1087,4.621,1088,5.72,1089,6.433,1090,3.303,1091,4.188,1092,3.714,1093,3.714,1094,3.714,1095,3.303,1096,3.714,1097,2.317,1098,3.714,1099,6.296,1100,3.714,1101,3.714,1102,4.836,1103,4.143,1104,3.714,1105,4.836,1106,4.836,1107,3.303,1108,4.143,1109,3.714,1110,3.714,1111,3.714,1112,3.303,1113,3.303]],["title/entities/DbInsightRepo.html",[109,3.043,920,1.172]],["body/entities/DbInsightRepo.html",[7,0.007,29,0.071,30,0.071,31,0.057,38,0.55,41,0.878,42,0.474,43,0.734,47,0.133,64,1.115,107,4.476,109,4.076,149,3.252,182,1.394,232,0.078,233,0.124,241,0.005,242,0.005,249,0.23,260,1.152,280,1.102,325,0.776,357,2.595,361,1.97,367,3.128,392,1.414,404,0.959,440,1.113,479,3.382,500,1.603,508,2.579,581,2.243,589,1.637,596,2.014,703,3.354,709,2.392,739,4.572,757,4.149,758,2.646,759,2.528,799,2.859,802,3.273,814,2.711,902,3.053,920,1.57,922,3.445,923,3.123,937,2.779,938,3.543,939,3.273,941,2.711,943,2.061,944,3.196,945,3.353,946,3.123,951,2.525,959,2.528,961,3.495,965,3.273,973,3.196,974,3.278,975,3.382,976,3.495,977,3.495,978,3.181,979,2.711,981,3.09,982,3.279,983,3.185,984,1.826,985,1.826,1001,3.354,1028,3.181,1056,4.497,1057,3.252,1059,4.026,1084,7.17,1087,5.838,1097,3.906,1114,3.252,1115,4.527,1116,4.527,1117,3.906,1118,3.449,1119,4.527,1120,4.527,1121,4.527,1122,4.527,1123,4.527,1124,4.527,1125,4.026,1126,4.527]],["title/entities/DbLog.html",[126,3.188,920,1.172]],["body/entities/DbLog.html",[7,0.007,29,0.098,30,0.098,31,0.078,38,0.576,41,0.709,42,0.474,47,0.107,64,1.538,126,5.274,182,1.924,207,6.033,224,5.24,232,0.107,233,0.171,241,0.006,242,0.006,249,0.317,260,1.206,357,3.037,361,1.856,367,3.18,404,1.442,440,1.375,451,4.146,589,2.259,799,2.856,920,1.939,973,3.845,974,4.049,979,3.637,1028,3.174,1127,5.555,1128,6.247,1129,6.247,1130,6.247,1131,6.247,1132,6.247,1133,6.247,1134,6.247,1135,6.247]],["title/entities/DbPRInsight.html",[147,3.043,920,1.172]],["body/entities/DbPRInsight.html",[7,0.007,29,0.069,30,0.069,31,0.055,38,0.532,41,0.501,42,0.497,47,0.106,64,1.087,132,5.838,147,4.006,148,2.795,181,3.381,182,1.36,232,0.076,233,0.121,241,0.004,242,0.004,249,0.224,260,1.115,280,1.217,361,1.565,367,3.09,392,1.404,436,3.799,440,1.094,500,1.564,510,2.427,528,4.822,562,5.003,589,1.597,596,2.382,618,2.954,629,5.69,636,1.823,709,2.382,799,2.272,902,2.427,920,1.543,923,3.365,925,4.903,935,4.197,938,2.482,944,2.54,945,2.664,946,2.482,949,3.693,951,2.482,965,2.601,966,3.222,967,3.222,973,3.444,974,3.222,975,3.324,982,3.453,984,1.781,985,1.781,989,2.553,1013,5.446,1136,3.927,1137,7.083,1138,7.083,1139,5.781,1140,5.838,1141,7.083,1142,5.472,1143,7.083,1144,4.416,1145,4.416,1146,7.661,1147,6.154,1148,6.154,1149,6.154,1150,6.154,1151,4.416,1152,4.416,1153,4.416,1154,4.416,1155,6.154,1156,6.154,1157,6.154,1158,6.154,1159,6.154,1160,3.927,1161,4.416,1162,5.472,1163,4.416,1164,3.172,1165,4.416,1166,7.083]],["title/entities/DbPullRequest.html",[131,2.803,920,1.172]],["body/entities/DbPullRequest.html",[7,0.007,29,0.033,30,0.089,31,0.026,38,0.571,41,0.649,42,0.492,43,0.869,47,0.076,64,0.514,128,4.087,131,2.075,132,6.13,148,3.007,174,2.881,181,3.018,182,0.642,210,3.931,232,0.036,233,0.057,241,0.002,242,0.002,249,0.106,260,1.197,280,1.105,287,2.349,325,0.357,357,1.603,358,1.789,361,1.265,367,3.172,378,1.811,392,1.512,404,1.353,436,3.989,440,0.615,479,4.296,500,0.738,508,0.695,528,4.596,581,0.884,589,0.754,596,2.212,597,1.428,636,1.025,703,2.072,709,2.469,738,3.582,757,2.563,758,1.462,759,1.164,794,4.11,799,3.018,902,2.886,920,0.868,923,3.58,925,1.127,935,4.666,937,0.926,938,3.43,939,3.093,941,1.498,944,3.021,945,3.168,946,2.952,949,2.759,951,1.396,954,2.477,955,2.636,956,3.931,965,3.093,966,3.831,967,3.831,973,3.412,974,1.811,975,1.127,979,1.498,981,1.708,982,3.596,983,1.536,984,0.841,985,0.841,991,3.195,1013,2.159,1108,2.636,1117,2.159,1118,1.589,1160,1.855,1164,1.498,1167,1.855,1168,4.434,1169,4.434,1170,4.434,1171,4.434,1172,3.619,1173,4.434,1174,3.619,1175,5.089,1176,4.434,1177,5.723,1178,4.434,1179,5.723,1180,4.434,1181,5.723,1182,5.723,1183,3.619,1184,5.723,1185,4.434,1186,4.434,1187,5.723,1188,4.434,1189,4.434,1190,5.16,1191,2.485,1192,2.086,1193,2.086,1194,5.16,1195,5.16,1196,3.46,1197,2.086,1198,2.086,1199,4.212,1200,2.086,1201,2.086,1202,2.086,1203,2.086,1204,2.824,1205,3.46,1206,3.46,1207,2.086,1208,3.46,1209,5.16,1210,2.086,1211,2.086,1212,2.086,1213,2.086,1214,3.077,1215,2.086,1216,5.16,1217,2.086,1218,2.086,1219,2.086,1220,2.086,1221,3.46,1222,3.077,1223,2.086,1224,2.086,1225,3.46,1226,3.46,1227,4.434,1228,3.46,1229,3.46,1230,3.46,1231,3.46,1232,3.46,1233,1.855,1234,2.086,1235,3.46,1236,2.086,1237,2.086,1238,2.086,1239,2.086,1240,2.086,1241,2.086,1242,2.086,1243,1.855,1244,2.086,1245,2.086,1246,2.086,1247,4.589,1248,2.086,1249,2.086,1250,2.086,1251,2.086,1252,2.086,1253,2.086,1254,2.086,1255,2.086,1256,3.46,1257,3.46,1258,3.077,1259,3.46,1260,2.086,1261,2.086,1262,2.086,1263,2.086,1264,2.086,1265,2.086,1266,2.086,1267,1.702,1268,5.487,1269,5.16,1270,1.855,1271,2.086,1272,2.086,1273,1.855,1274,2.086,1275,1.855,1276,2.086,1277,2.075,1278,2.159]],["title/classes/DbPullRequestContributor.html",[233,0.128,678,3.357]],["body/classes/DbPullRequestContributor.html",[7,0.007,29,0.099,30,0.099,31,0.08,38,0.498,42,0.41,43,0.741,47,0.109,128,3.466,148,2.958,174,4.36,232,0.109,233,0.174,241,0.006,242,0.006,249,0.322,260,1.044,287,3.555,358,3.412,367,3.012,392,1.314,404,1.196,436,3.754,440,1.389,500,2.247,528,4.514,585,1.954,678,5.609,687,5.769,709,2.295,799,2.884,923,3.15,938,3.15,939,3.3,954,3.748,965,3.3,966,4.088,967,4.088,982,3.412,984,2.56,985,2.56,991,4.36,1172,6.904,1199,6.374,1275,6.944,1279,5.643,1280,6.346,1281,6.346]],["title/entities/DbRepoToUserStargazers.html",[92,2.803,920,1.172]],["body/entities/DbRepoToUserStargazers.html",[7,0.007,29,0.069,30,0.069,31,0.055,38,0.557,41,0.802,42,0.477,43,0.79,47,0.138,64,1.083,80,3.085,82,3.672,83,2.864,92,3.681,111,2.304,112,1.577,181,2.267,182,1.355,232,0.076,233,0.121,241,0.004,242,0.004,249,0.223,260,1.166,280,1.092,287,2.794,325,0.754,357,2.556,358,2.851,361,1.889,367,3.142,392,1.354,440,1.091,500,1.558,508,2.044,581,2.055,596,1.989,636,1.819,703,3.759,709,2.334,799,3.077,802,2.594,814,1.905,902,3.286,920,1.539,922,3.393,923,2.851,937,2.724,938,3.62,939,3.233,941,2.658,942,3.427,943,2.003,944,3.44,945,3.608,946,3.085,948,2.639,949,2.476,951,3.361,954,2.946,959,3.427,961,4.27,965,2.594,966,3.214,967,3.214,968,2.639,973,2.918,976,3.947,977,3.947,978,3.118,979,2.658,980,3.214,981,3.775,982,3.085,983,3.137,984,1.775,985,1.775,989,2.543,991,2.457,1001,2.056,1028,3.118,1054,2.848,1097,2.745,1282,3.912,1283,6.801,1284,4.4,1285,4.4,1286,3.001,1287,4.4,1288,4.4,1289,4.4,1290,3.001,1291,4.4,1292,4.4,1293,4.4,1294,4.4,1295,4.4,1296,4.4,1297,3.001,1298,4.4,1299,3.912]],["title/entities/DbRepoToUserStars.html",[88,2.803,920,1.172]],["body/entities/DbRepoToUserStars.html",[7,0.007,29,0.069,30,0.069,31,0.055,38,0.557,41,0.802,42,0.477,43,0.79,47,0.138,64,1.083,80,3.085,82,3.672,83,2.864,88,3.681,111,2.304,112,1.577,181,2.267,182,1.355,232,0.076,233,0.121,241,0.004,242,0.004,249,0.223,260,1.166,280,1.092,287,2.794,325,0.754,357,2.556,358,2.851,361,1.889,367,3.142,392,1.354,440,1.091,500,1.558,508,2.044,581,2.055,596,1.989,636,1.819,703,3.759,709,2.334,799,3.077,802,2.594,814,1.905,902,3.286,920,1.539,922,3.393,923,2.851,937,2.724,938,3.62,939,3.233,941,2.658,942,3.427,943,2.003,944,3.44,945,3.608,946,3.085,948,2.639,949,2.476,951,3.361,954,2.946,959,3.427,961,4.27,965,2.594,966,3.214,967,3.214,968,2.639,973,2.918,976,3.947,977,3.947,978,3.118,979,2.658,980,3.214,981,3.775,982,3.085,983,3.137,984,1.775,985,1.775,989,2.543,991,2.457,1001,2.056,1028,3.118,1054,2.848,1097,2.745,1286,3.001,1290,3.001,1297,3.001,1300,3.912,1301,6.347,1302,4.4,1303,4.4,1304,4.4,1305,4.4,1306,4.4,1307,4.4,1308,4.4,1309,4.4,1310,4.4,1311,4.4,1312,4.4,1313,4.4,1314,3.912]],["title/entities/DbRepoToUserSubmissions.html",[90,2.803,920,1.172]],["body/entities/DbRepoToUserSubmissions.html",[7,0.007,29,0.065,30,0.065,31,0.053,38,0.559,41,0.78,42,0.477,43,0.817,47,0.136,64,1.029,80,3.016,82,3.59,83,2.721,90,3.551,111,2.189,112,1.554,181,2.915,182,1.287,232,0.072,233,0.115,241,0.004,242,0.004,249,0.212,260,1.171,280,1.074,287,2.695,325,0.716,357,2.486,358,2.773,361,1.862,367,3.146,392,1.379,440,1.053,500,1.48,508,1.972,581,2.016,596,2.053,636,1.755,703,3.688,709,2.359,738,3.1,758,2.502,799,3.027,802,2.502,812,3.423,814,1.81,902,3.232,920,1.485,922,3.3,923,3.016,937,2.628,938,3.581,939,3.464,941,2.564,942,3.306,943,1.903,944,3.383,945,3.549,946,3.016,948,2.507,949,2.388,951,3.306,954,2.842,959,3.306,961,4.175,965,2.502,966,3.1,967,3.1,968,2.507,973,3.087,976,3.839,977,3.839,978,3.008,979,2.564,980,3.1,981,3.691,982,3.184,983,3.051,984,1.686,985,1.686,989,2.416,991,2.334,1001,1.953,1028,3.008,1054,2.795,1061,4.253,1064,3.717,1097,2.608,1286,2.851,1290,2.851,1297,2.851,1315,3.717,1316,6.114,1317,7.028,1318,4.18,1319,4.18,1320,4.18,1321,5.921,1322,5.921,1323,4.18,1324,4.18,1325,4.18,1326,4.18,1327,4.18,1328,4.18,1329,4.18,1330,4.18,1331,4.18,1332,4.18,1333,3.717]],["title/entities/DbRepoToUserVotes.html",[86,2.803,920,1.172]],["body/entities/DbRepoToUserVotes.html",[7,0.007,29,0.069,30,0.069,31,0.055,38,0.557,41,0.802,42,0.477,43,0.79,47,0.138,64,1.083,80,3.085,82,3.672,83,2.864,86,3.681,111,2.304,112,1.577,181,2.267,182,1.355,232,0.076,233,0.121,241,0.004,242,0.004,249,0.223,260,1.166,280,1.092,287,2.794,325,0.754,357,2.556,358,2.851,361,1.889,367,3.142,392,1.354,440,1.091,500,1.558,508,2.044,581,2.055,596,1.989,636,1.819,703,3.759,709,2.334,799,3.077,802,2.594,814,1.905,902,3.286,920,1.539,922,3.393,923,2.851,937,2.724,938,3.62,939,3.233,941,2.658,942,3.427,943,2.003,944,3.44,945,3.608,946,3.085,948,2.639,949,2.476,951,3.361,954,2.946,959,3.427,961,4.27,965,2.594,966,3.214,967,3.214,968,2.639,973,2.918,976,3.947,977,3.947,978,3.118,979,2.658,980,3.214,981,3.775,982,3.085,983,3.137,984,1.775,985,1.775,989,2.543,991,2.457,1001,2.056,1028,3.118,1054,2.848,1097,2.745,1286,3.001,1290,3.001,1297,3.001,1334,3.912,1335,6.347,1336,4.4,1337,4.4,1338,4.4,1339,4.4,1340,4.4,1341,4.4,1342,4.4,1343,4.4,1344,4.4,1345,4.4,1346,4.4,1347,4.4,1348,3.912]],["title/entities/DbSubscription.html",[124,3.188,920,1.172]],["body/entities/DbSubscription.html",[7,0.007,29,0.046,30,0.046,31,0.037,38,0.558,41,0.337,42,0.492,43,0.836,47,0.097,64,0.731,112,0.847,124,3.134,181,1.697,182,0.914,232,0.051,233,0.081,241,0.003,242,0.003,249,0.151,260,1.168,280,0.829,325,0.509,357,2.032,361,1.512,367,3.144,392,1.456,404,1.194,440,0.817,473,4.543,474,5.904,479,3.908,500,1.052,508,2.979,510,1.171,589,1.074,596,2.327,709,2.429,728,2.641,738,3.312,799,3.468,802,3.781,814,3.463,902,3.476,920,1.152,923,2.759,935,4.314,937,3.55,938,3.821,939,3.781,941,2.739,942,4.994,943,1.352,944,3.639,945,3.817,946,3.556,949,1.853,951,2.551,957,5.315,973,3.572,974,2.406,975,1.604,979,1.989,981,2.268,982,2.918,983,3.627,984,1.198,985,1.198,1012,2.641,1054,1.99,1243,2.641,1349,6.715,1350,2.641,1351,4.997,1352,4.997,1353,4.997,1354,4.997,1355,4.997,1356,4.997,1357,4.281,1358,4.997,1359,5.584,1360,4.267,1361,4.997,1362,4.997,1363,4.595,1364,2.97,1365,5.936,1366,2.97,1367,4.595,1368,2.97,1369,2.97,1370,4.818,1371,6.325,1372,2.97,1373,2.97,1374,2.97,1375,2.97,1376,2.97,1377,2.97,1378,4.086,1379,2.97,1380,2.97,1381,2.97,1382,2.97,1383,4.036,1384,2.97,1385,6.325,1386,2.97,1387,2.97,1388,2.97,1389,2.97,1390,2.641,1391,2.97,1392,2.97,1393,2.97]],["title/entities/DbUserCollaboration.html",[154,3.043,920,1.172]],["body/entities/DbUserCollaboration.html",[7,0.007,29,0.052,30,0.052,31,0.041,38,0.552,41,0.68,42,0.485,43,0.838,47,0.115,64,0.812,82,3.757,112,1.687,148,2.461,154,3.242,181,2.784,182,1.016,232,0.057,233,0.09,241,0.004,242,0.004,249,0.167,260,1.157,280,0.876,298,3.73,325,0.565,357,2.168,358,2.419,361,1.886,367,3.132,392,1.414,404,1.155,440,0.885,451,3.539,500,1.168,508,2.798,589,1.193,596,2.095,709,2.391,778,6.602,781,4.428,788,2.513,799,3.263,800,4.349,802,3.186,814,3.104,902,3.313,920,1.249,922,2.879,923,2.892,927,4.349,928,4.349,929,3.861,937,3.182,938,3.708,939,3.551,941,2.156,943,1.502,944,3.468,945,3.638,946,2.695,949,3.041,951,2.008,954,2.39,957,3.396,959,2.78,961,3.73,965,3.186,973,3.23,974,2.607,975,2.69,976,3.348,977,3.348,978,2.53,979,2.156,980,2.607,981,2.96,982,3.041,983,3.346,984,1.331,985,1.331,1001,1.542,1013,4.168,1015,3.396,1028,2.53,1030,2.37,1035,2.37,1038,2.934,1043,3.793,1045,3.793,1050,2.934,1054,2.539,1056,3.576,1057,2.37,1076,3.396,1077,2.513,1090,2.934,1091,3.904,1095,2.934,1102,5.94,1103,5.089,1360,4.473,1394,5.247,1395,2.934,1396,5.997,1397,5.997,1398,5.333,1399,6.376,1400,4.979,1401,3.299,1402,3.299,1403,3.299,1404,3.299,1405,4.979,1406,4.428,1407,4.979,1408,3.299,1409,3.299,1410,3.299,1411,3.299,1412,3.299,1413,3.299,1414,3.299,1415,3.299,1416,3.299,1417,3.299,1418,4.979,1419,3.299,1420,2.148,1421,3.299,1422,3.299,1423,3.299]],["title/entities/DbUserHighlight.html",[134,2.609,920,1.172]],["body/entities/DbUserHighlight.html",[7,0.007,29,0.048,30,0.09,31,0.039,38,0.561,41,0.935,42,0.485,43,0.863,47,0.119,64,0.756,82,3.091,112,1.607,128,2.857,134,2.633,144,3.722,145,4.627,146,1.999,148,2.102,151,2.726,181,3.248,182,0.946,232,0.053,233,0.084,241,0.003,242,0.003,249,0.156,260,1.176,280,0.844,325,0.526,357,2.075,358,2.315,361,1.687,367,3.151,378,3.637,392,1.45,404,1.304,440,0.838,479,4.256,500,1.087,528,1.775,581,1.204,589,1.11,596,1.907,709,2.424,738,3.371,757,3.318,758,2.721,759,1.715,787,2.34,793,4.122,794,4.989,795,4.904,798,4.193,799,3.275,800,5.128,801,6.001,802,3.33,807,5.725,811,4.193,814,2.788,902,3.106,920,1.182,922,2.755,923,3.259,937,2.857,938,3.578,939,3.33,941,2.042,943,1.398,944,3.252,945,3.411,946,2.597,949,2.957,951,2.597,957,2.095,959,1.715,961,3.595,973,3.026,974,2.469,975,1.659,976,2.633,977,3.204,978,2.396,979,2.042,980,2.469,981,2.833,982,3.326,983,3.083,984,1.239,985,1.239,988,2.206,996,2.34,1001,2.203,1005,4.372,1020,2.507,1021,3.849,1027,3.849,1054,2.459,1056,3.387,1057,2.206,1076,3.216,1077,2.34,1106,4.193,1107,2.731,1108,5.585,1113,2.731,1117,4.017,1118,2.34,1268,5.103,1394,5.319,1420,1.999,1424,2.731,1425,5.291,1426,6.946,1427,3.071,1428,3.071,1429,3.071,1430,4.715,1431,3.071,1432,3.071,1433,3.071,1434,3.071,1435,3.071,1436,3.071,1437,3.849,1438,3.071,1439,3.071,1440,3.071,1441,3.849,1442,3.071,1443,3.071,1444,3.071,1445,3.071,1446,3.071,1447,3.071,1448,3.071,1449,3.071,1450,3.071,1451,2.731,1452,3.071,1453,3.071,1454,2.731,1455,3.071,1456,3.071]],["title/entities/DbUserHighlightReaction.html",[144,2.702,920,1.172]],["body/entities/DbUserHighlightReaction.html",[7,0.007,29,0.058,30,0.058,31,0.046,38,0.559,41,0.801,42,0.486,43,0.855,47,0.135,64,0.909,82,3.077,112,1.449,134,3.579,136,2.303,142,3.999,143,3.283,144,4.345,145,4.623,181,3.331,182,1.137,232,0.063,233,0.101,241,0.004,242,0.004,249,0.187,260,1.171,280,1.03,287,2.464,325,0.633,357,2.318,358,2.586,361,1.877,367,3.088,392,1.322,404,1.082,440,0.963,479,2.925,500,1.307,508,1.803,596,1.836,709,2.303,799,2.901,802,2.288,814,1.598,902,3.098,920,1.358,922,3.077,923,2.848,937,2.403,938,3.484,939,2.984,941,2.344,942,3.022,943,1.681,944,3.243,945,3.402,946,2.848,948,2.214,949,3.572,951,3.359,954,2.599,959,3.579,961,4.387,963,3.283,965,2.288,966,2.834,967,2.834,968,2.214,973,3.103,976,3.942,977,3.942,978,2.75,979,2.344,980,2.834,981,3.711,982,3.032,983,2.845,984,1.489,985,1.489,989,2.134,991,2.061,1001,1.725,1006,6.746,1009,6.136,1013,4.901,1015,4.815,1016,3.013,1028,2.75,1030,3.888,1035,2.651,1054,2.662,1108,4.124,1233,3.283,1394,5.311,1420,2.403,1441,6.136,1457,3.283,1458,6.685,1459,5.7,1460,3.691,1461,3.691,1462,3.691,1463,3.691,1464,3.691,1465,3.691,1466,3.691,1467,3.691,1468,3.691,1469,3.691,1470,3.691,1471,3.691,1472,3.691,1473,3.691,1474,3.691,1475,3.691,1476,3.691,1477,3.691,1478,3.691,1479,3.691,1480,3.691]],["title/classes/DbUserHighlightRepo.html",[233,0.128,1481,3.357]],["body/classes/DbUserHighlightRepo.html",[7,0.007,29,0.107,30,0.107,31,0.086,38,0.437,41,0.927,42,0.36,43,0.775,47,0.118,145,4.468,232,0.118,233,0.187,241,0.006,242,0.006,249,0.347,260,0.915,367,2.853,392,1.151,404,1.252,440,1.453,500,2.422,581,2.087,585,2.106,709,2.126,757,5.051,758,3.454,759,4.563,923,2.759,982,3.296,984,2.759,985,2.759,1114,4.913,1117,5.098,1481,5.87,1482,7.267,1483,6.841]],["title/entities/DbUserNotification.html",[152,3.043,920,1.172]],["body/entities/DbUserNotification.html",[7,0.007,29,0.065,30,0.107,31,0.052,38,0.549,41,0.474,42,0.498,43,0.842,47,0.118,64,1.028,112,1.708,145,2.92,152,3.851,181,2.185,182,1.286,232,0.072,233,0.114,241,0.004,242,0.004,249,0.212,260,1.151,280,1.074,361,1.935,367,3.126,392,1.448,404,1.255,440,1.052,451,3.894,500,1.478,508,1.97,589,1.51,596,1.539,628,3.42,709,2.423,763,5.261,787,4.507,799,3.026,800,3.851,802,3.159,814,2.562,902,2.947,920,1.484,923,3.305,927,5.334,928,5.334,929,4.736,935,5.098,937,2.626,938,3.472,939,3.159,941,2.562,943,1.901,944,3.085,945,3.236,946,2.386,949,2.386,951,2.386,957,2.848,965,2.5,973,3.478,974,3.097,975,2.256,979,2.562,982,3.398,983,3.049,984,1.684,985,1.684,988,2.999,996,3.181,998,3.713,1001,1.951,1002,3.713,1031,3.851,1054,2.433,1074,4.507,1103,4.507,1394,5.251,1484,3.713,1485,6.11,1486,5.608,1487,6.11,1488,6.11,1489,4.175,1490,4.175,1491,7.4,1492,4.175,1493,3.851,1494,4.175,1495,4.175,1496,4.175,1497,5.261,1498,4.175,1499,5.261,1500,4.175,1501,5.916,1502,4.175,1503,4.175,1504,4.686,1505,4.175,1506,4.175,1507,3.408,1508,3.713,1509,4.175,1510,3.713,1511,3.713]],["title/entities/DbUserRepo.html",[115,3.188,920,1.172]],["body/entities/DbUserRepo.html",[7,0.007,29,0.081,30,0.081,31,0.065,38,0.544,41,0.874,42,0.47,43,0.653,47,0.118,64,1.283,112,1.616,113,5.976,115,4.694,182,1.604,232,0.089,233,0.143,241,0.005,242,0.005,249,0.264,260,1.14,280,1.148,357,2.787,361,1.704,367,3.116,392,1.435,404,1.054,440,1.224,479,3.719,500,1.844,508,2.292,581,2.238,589,1.883,596,1.79,703,3.603,709,2.41,757,4.457,758,2.909,759,2.908,799,2.542,802,2.909,814,2.255,902,2.714,920,1.726,923,3.308,937,2.311,938,3.308,939,2.909,941,2.98,943,2.371,944,2.841,945,2.98,946,2.776,951,3.534,965,2.909,973,2.841,974,3.604,975,2.814,979,2.98,982,3.44,983,3.055,984,2.101,985,2.101,988,3.741,996,3.967,1001,3.603,1054,2.73,1114,3.741,1117,4.294,1118,3.967,1451,6.121,1454,6.121,1512,5.976,1513,5.208,1514,5.208,1515,5.208,1516,5.208,1517,5.208,1518,5.208]],["title/entities/DbUserToUserFollows.html",[138,3.043,920,1.172]],["body/entities/DbUserToUserFollows.html",[7,0.007,29,0.075,30,0.075,31,0.06,38,0.545,41,0.542,42,0.474,43,0.811,47,0.127,64,1.177,112,1.682,138,4.23,181,2.4,182,1.472,232,0.082,233,0.131,241,0.005,242,0.005,249,0.242,260,1.143,280,1.12,287,2.958,325,0.819,357,2.669,358,2.978,361,1.631,367,3.118,392,1.394,440,1.155,500,1.692,508,2.164,596,2.061,709,2.373,799,3.156,802,2.746,814,2.069,902,3.37,920,1.63,922,3.544,923,2.978,937,2.884,938,3.679,939,3.348,941,2.813,942,3.628,943,2.176,944,3.528,945,3.701,946,3.196,948,2.866,949,2.621,951,3.447,954,3.119,965,2.746,966,3.402,967,3.402,968,2.866,973,3.048,978,3.301,979,2.813,980,3.402,981,3.207,982,3.196,983,3.277,984,1.928,985,1.928,989,2.763,991,2.668,1001,2.233,1028,3.301,1054,2.614,1097,2.982,1286,3.26,1290,3.26,1297,3.26,1394,5.244,1519,4.25,1520,6.026,1521,6.139,1522,4.779,1523,4.779,1524,6.498,1525,4.779,1526,4.779,1527,4.779,1528,4.779,1529,4.25]],["title/entities/DbUserTopRepo.html",[150,3.357,920,1.172]],["body/entities/DbUserTopRepo.html",[7,0.007,29,0.066,30,0.066,31,0.053,38,0.552,41,0.787,42,0.474,43,0.782,47,0.136,64,1.048,80,3.04,81,2.161,82,3.618,112,1.562,150,4.306,151,5.369,181,2.214,182,1.31,232,0.073,233,0.117,241,0.004,242,0.004,249,0.352,260,1.156,280,1.08,287,2.729,325,0.729,357,2.51,358,2.8,361,1.872,367,3.132,392,1.337,440,1.066,500,1.506,508,1.997,581,2.301,596,1.96,636,1.776,703,3.713,709,2.318,795,4.567,799,3.044,802,2.534,814,1.842,902,3.251,920,1.503,922,3.332,923,2.8,937,2.661,938,3.595,939,3.185,942,3.347,943,1.937,944,3.403,945,3.569,946,3.04,948,2.551,949,2.418,951,3.325,954,2.878,959,3.347,961,4.208,965,2.534,966,3.139,967,3.139,968,2.551,973,2.865,976,3.876,977,3.876,978,3.046,979,2.596,980,3.139,981,3.72,982,3.04,983,3.081,984,1.716,985,1.716,989,2.459,991,2.375,1001,1.988,1028,3.046,1054,2.813,1097,2.654,1114,3.056,1286,2.902,1290,2.902,1297,2.902,1394,5.274,1420,2.77,1530,4.254,1531,4.254,1532,4.893,1533,4.254,1534,4.254,1535,4.254,1536,4.254,1537,4.254,1538,4.254,1539,4.254,1540,4.254,1541,4.254,1542,4.254,1543,4.254]],["title/controllers/EmojiController.html",[243,1.071,1544,3.56]],["body/controllers/EmojiController.html",[7,0.007,29,0.095,30,0.095,31,0.077,34,1.597,38,0.39,40,1.234,41,0.693,42,0.401,43,0.579,45,1.279,47,0.157,49,0.801,142,4.758,232,0.105,233,0.167,234,1.234,236,1.256,241,0.005,242,0.005,243,1.4,245,1.679,247,2.356,249,0.31,250,1.837,260,0.817,263,3.007,321,3.472,322,3.007,323,3.007,324,2.356,325,1.047,347,2.256,350,2.409,387,1.19,392,1.028,518,2.163,590,2.421,626,2.256,627,1.679,676,4.258,680,3.223,681,2.781,682,2.933,683,2.712,684,2.933,1029,7.969,1544,5.81,1545,5.433,1546,8.962,1547,6.109,1548,4.388,1549,4.965,1550,6.109,1551,6.109,1552,3.993,1553,6.109,1554,5.671,1555,5.433,1556,4.987,1557,6.109,1558,6.109,1559,6.109,1560,6.109]],["title/modules/EmojiModule.html",[0,1.194,11,3.357]],["body/modules/EmojiModule.html",[0,2.066,2,2.538,3,3.19,7,0.007,11,6.718,26,3.263,27,2.713,28,2.538,29,0.105,30,0.105,31,0.084,33,2.776,47,0.158,49,0.882,51,3.062,52,1.919,142,5.047,165,1.993,231,3.503,232,0.116,233,0.184,241,0.006,242,0.006,245,2.224,583,3.417,1544,6.609,1554,6.379,1555,5.981,1556,5.49,1561,5.981,1562,5.981,1563,6.726,1564,6.726]],["title/injectables/EmojiService.html",[443,0.862,1554,3.188]],["body/injectables/EmojiService.html",[7,0.007,29,0.093,30,0.093,31,0.075,34,1.57,38,0.524,40,1.514,41,0.851,42,0.394,43,0.711,45,1.57,47,0.158,49,0.78,52,1.697,64,1.465,142,3.711,165,1.763,182,1.831,185,2.181,232,0.102,233,0.163,234,1.514,236,1.223,241,0.005,242,0.005,249,0.302,250,1.815,352,2.203,382,2.1,387,1.461,443,1.383,518,2.106,565,2.021,590,2.442,626,2.769,627,1.635,634,5.347,636,2.556,639,3.872,643,2.455,644,2.106,645,2.244,648,4.257,649,3.213,652,2.575,662,3.926,663,3.321,664,3.321,665,3.321,858,3.828,874,2.708,1554,5.115,1556,4.855,1565,5.289,1566,5.948,1567,5.948,1568,7.499,1569,5.948,1570,5.948,1571,5.948,1572,5.948,1573,5.948,1574,4.855]],["title/controllers/EndorsementController.html",[243,1.071,1575,3.56]],["body/controllers/EndorsementController.html",[7,0.007,29,0.05,30,0.05,31,0.04,34,1.02,38,0.51,40,1.612,41,0.906,42,0.473,43,0.757,45,1.672,47,0.14,49,0.42,112,1.429,157,5.27,174,4.458,185,1.416,232,0.055,233,0.088,234,0.647,236,1.002,237,1.444,241,0.004,242,0.004,243,0.734,245,0.881,247,1.236,249,0.163,250,2.063,260,1.068,263,3.549,272,4.332,281,2.632,317,2.55,318,1.539,320,2.922,321,2.683,322,3.225,323,3.289,324,1.236,325,0.549,333,2.994,334,2.302,347,1.184,350,3.225,352,1.244,361,1.647,382,1.364,387,1.593,392,0.82,404,1.435,494,2.186,518,2.827,550,3.499,581,2.165,590,2.539,626,1.184,627,0.881,676,4.656,680,3.275,681,1.459,682,1.539,683,1.423,684,1.539,698,5.578,707,6.458,1049,6.173,1548,2.302,1552,3.446,1575,3.711,1576,2.85,1577,7.08,1578,7.08,1579,7.08,1580,7.08,1581,6.296,1582,5.24,1583,6.89,1584,7.08,1585,3.205,1586,3.205,1587,3.205,1588,3.205,1589,3.205,1590,3.205,1591,3.205,1592,2.85,1593,4.699,1594,4.871,1595,4.332,1596,3.205,1597,3.205,1598,3.205,1599,3.205,1600,4.871,1601,6.296,1602,3.205,1603,4.332,1604,3.205,1605,3.205,1606,2.85,1607,3.205,1608,4.31,1609,3.205,1610,3.205,1611,3.205,1612,5.373,1613,3.205,1614,3.205,1615,3.205,1616,3.205,1617,3.205,1618,3.205,1619,3.711,1620,2.616,1621,3.205,1622,3.205,1623,1.539,1624,1.79,1625,3.676,1626,2.85,1627,2.85,1628,2.616,1629,2.616,1630,2.302,1631,2.85,1632,3.205,1633,2.85,1634,3.205,1635,2.616,1636,3.205,1637,2.302,1638,3.205,1639,3.205,1640,6.296,1641,3.205,1642,3.205,1643,3.205,1644,3.205,1645,3.205,1646,3.171,1647,3.171,1648,3.205,1649,3.205,1650,4.332,1651,3.205,1652,3.205,1653,3.205,1654,2.55,1655,3.205,1656,3.205,1657,3.976,1658,3.976,1659,3.205,1660,3.205,1661,3.205,1662,2.85,1663,3.205]],["title/modules/EndorsementModule.html",[0,1.194,12,3.357]],["body/modules/EndorsementModule.html",[0,1.964,2,2.337,3,3.033,6,6.255,7,0.007,12,6.888,23,5.301,26,3.103,27,2.498,28,2.337,29,0.097,30,0.097,31,0.078,33,3.175,47,0.161,49,0.812,51,2.82,52,1.767,94,5.507,100,4.224,157,4.613,165,1.835,231,3.33,232,0.106,233,0.17,241,0.006,242,0.006,245,2.114,427,3.502,583,3.147,707,4.718,1575,6.373,1625,6.01,1626,5.507,1629,5.056,1630,5.525,1631,5.507,1664,5.507,1665,6.193,1666,5.507,1667,5.507,1668,6.193,1669,5.507]],["title/injectables/EndorsementService.html",[443,0.862,1625,2.916]],["body/injectables/EndorsementService.html",[7,0.007,29,0.051,30,0.051,31,0.041,34,1.038,38,0.544,40,1.694,41,0.952,42,0.441,43,0.796,45,1.757,47,0.138,49,0.43,52,0.936,64,0.808,112,0.915,157,1.968,165,0.972,182,2.316,185,2.541,232,0.056,233,0.09,234,1.001,236,0.675,241,0.004,242,0.004,249,0.166,250,2.081,277,3.729,280,0.986,289,2.679,352,2.398,361,1.662,368,2.866,382,2.472,387,1.603,404,1.413,443,0.915,515,1.238,518,2.848,565,1.115,581,2.143,590,2.56,626,1.831,627,0.902,634,3.891,636,1.974,639,2.136,643,1.354,644,1.162,645,1.238,648,4.511,649,1.773,652,3.977,660,4.693,661,4.693,662,4.523,663,4.2,664,4.2,665,4.2,698,5.131,737,2.467,858,2.957,874,3.425,876,1.667,1049,3.562,1581,5.315,1603,4.409,1606,2.918,1608,3.851,1625,3.094,1627,2.918,1628,2.678,1629,2.678,1650,5.315,1670,2.918,1671,5.977,1672,5.977,1673,5.977,1674,3.585,1675,3.891,1676,3.281,1677,3.281,1678,4.959,1679,3.281,1680,3.281,1681,3.281,1682,3.281,1683,3.281,1684,3.281,1685,3.281,1686,3.281,1687,3.281,1688,3.281,1689,3.281,1690,3.281,1691,3.281,1692,1.968,1693,3.281,1694,3.281,1695,3.281,1696,2.519,1697,3.281,1698,3.281,1699,3.281,1700,7.523,1701,5.131,1702,3.281,1703,3.281,1704,4.879,1705,5.977,1706,4.409,1707,3.281,1708,5.977,1709,4.959,1710,4.959,1711,3.281,1712,4.959,1713,3.281,1714,3.281,1715,3.281,1716,3.281,1717,2.678,1718,3.281,1719,3.281,1720,3.037,1721,3.281]],["title/guards/EndorsementTokenGuard.html",[1630,3.357,1722,3.56]],["body/guards/EndorsementTokenGuard.html",[7,0.007,29,0.097,30,0.097,31,0.078,34,1.617,38,0.493,40,1.56,41,0.876,42,0.406,43,0.733,45,1.306,47,0.133,49,0.817,54,5.31,55,3.482,148,2.036,163,3.265,170,6.305,181,2.853,232,0.107,233,0.171,234,1.56,236,1.282,241,0.006,242,0.006,249,0.316,352,2.303,387,1.635,443,1.425,494,4.254,566,4.751,738,3.265,881,5.091,1630,5.548,1635,5.091,1637,4.479,1723,5.546,1724,7.463,1725,5.546,1726,9.016,1727,6.236,1728,6.236,1729,7.8,1730,6.236,1731,8.392,1732,6.236,1733,6.236,1734,6.236,1735,6.236,1736,7.463,1737,6.236,1738,7.725]],["title/classes/FilterOptionsDto.html",[233,0.128,1739,3.188]],["body/classes/FilterOptionsDto.html",[7,0.007,29,0.078,30,0.078,31,0.063,38,0.574,42,0.483,43,0.904,47,0.139,232,0.086,233,0.183,237,2.859,241,0.005,242,0.005,249,0.254,260,1.202,280,0.99,325,0.857,404,1.409,440,1.191,465,2.467,510,2.978,581,1.929,585,1.539,587,2.418,588,2.617,589,2.421,590,2.343,592,3.403,593,3.739,594,3.728,596,2.393,597,3.331,599,3.739,600,4.217,604,2.617,605,3.739,606,2.7,607,2.791,608,4.505,609,2.889,610,3.728,611,2.54,612,2.791,613,2.889,614,2.791,615,2.889,616,3.403,617,2.399,618,2.399,619,2.791,620,2.791,621,2.889,622,4.274,623,3.118,624,4.274,625,1.886,627,1.841,628,2.889,709,1.742,718,4.08,726,3.673,758,2.831,759,2.791,1739,4.568,1740,7.481,1741,4.917,1742,4.917,1743,5.152,1744,5.194,1745,3.59,1746,4.08,1747,4.81,1748,3.808,1749,4.445,1750,3.59,1751,4.08,1752,4.445,1753,3.254,1754,3.59]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[233,0.128,447,3.188]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[7,0.007,29,0.087,30,0.087,31,0.07,38,0.536,42,0.499,47,0.123,232,0.095,233,0.196,241,0.005,242,0.005,249,0.281,260,1.124,280,1.205,325,0.95,392,1.5,404,1.39,436,3.862,438,5.665,440,1.275,447,4.891,449,5.231,455,5.935,458,6.401,506,5.935,585,1.707,596,1.865,625,2.092,706,3.825,709,2.318,725,3.961,726,3.618,727,6.054,929,4.145,1755,7.103,1756,4.931,1757,7.067,1758,5.545,1759,5.545,1760,4.931,1761,5.545,1762,7.067,1763,4.931,1764,6.377,1765,6.377,1766,6.377,1767,6.377,1768,6.377,1769,6.377,1770,6.377,1771,6.377,1772,6.377,1773,5.545,1774,4.931,1775,5.545,1776,3.983,1777,4.526,1778,4.526,1779,4.931,1780,4.931,1781,4.931,1782,4.526,1783,4.931,1784,4.931,1785,4.931]],["title/classes/GeneratePullRequestDescriptionDto.html",[233,0.128,523,3.188]],["body/classes/GeneratePullRequestDescriptionDto.html",[7,0.007,29,0.075,30,0.075,31,0.061,38,0.547,42,0.502,43,0.754,47,0.112,128,3.889,148,2.861,163,3.421,232,0.083,233,0.179,241,0.005,242,0.005,249,0.244,260,1.146,280,1.168,325,0.826,392,1.582,404,1.448,436,3.889,440,1.162,455,5.667,502,4.693,506,5.667,523,4.456,526,6.782,528,4.595,536,6.782,585,1.483,596,1.699,617,3.136,622,3.766,624,3.766,625,1.818,706,3.618,709,2.376,725,3.782,726,3.618,727,5.647,748,4.253,929,3.777,1191,3.46,1755,7.152,1757,6.592,1760,4.284,1762,6.592,1763,4.284,1764,5.81,1765,5.81,1766,5.81,1767,5.81,1768,5.81,1769,5.81,1770,5.81,1771,5.81,1772,5.81,1774,4.284,1776,3.46,1777,3.933,1778,3.933,1779,4.284,1780,4.284,1781,4.284,1782,3.933,1783,4.284,1784,4.284,1785,4.284,1786,4.284,1787,7.413,1788,5.81,1789,4.818,1790,4.818,1791,4.818,1792,4.818,1793,4.818,1794,4.818,1795,4.818,1796,4.818,1797,6.533,1798,6.533,1799,6.533,1800,7.413,1801,4.818,1802,4.818,1803,4.818,1804,4.818,1805,4.284,1806,4.818,1807,4.284,1808,4.818,1809,4.818,1810,4.818]],["title/controllers/HealthController.html",[243,1.071,1811,3.56]],["body/controllers/HealthController.html",[7,0.007,29,0.082,30,0.082,31,0.066,34,1.446,38,0.441,45,1.446,47,0.141,49,0.687,54,4.469,55,2.925,59,4.276,178,3.763,225,4.276,229,5.263,230,6.509,232,0.09,233,0.144,234,1.058,236,1.804,237,1.552,241,0.005,242,0.005,243,1.2,245,1.44,247,2.02,249,0.266,250,2.125,260,0.924,263,3.242,322,3.049,323,3.049,324,2.02,325,0.898,347,3.305,350,2.725,387,1.346,518,2.446,758,3.474,812,4.752,1811,5.263,1812,4.658,1813,7.804,1814,8.776,1815,5.238,1816,6.909,1817,6.909,1818,5.238,1819,5.238,1820,6.909,1821,5.238,1822,6.909,1823,6.909,1824,6.909,1825,7.731,1826,6.909,1827,6.909,1828,5.238,1829,5.238,1830,5.238,1831,5.238,1832,5.238,1833,6.144,1834,6.909,1835,5.238,1836,5.238,1837,5.238,1838,5.238,1839,5.238,1840,5.238,1841,6.909,1842,5.238,1843,5.238,1844,5.238,1845,5.238,1846,5.238,1847,5.238,1848,5.238,1849,5.238,1850,5.238,1851,5.238,1852,5.238,1853,5.238,1854,5.238,1855,5.238,1856,5.238,1857,5.238]],["title/modules/HealthModule.html",[0,1.194,13,3.357]],["body/modules/HealthModule.html",[0,2.15,2,2.715,7,0.007,13,6.048,29,0.112,30,0.112,31,0.09,33,2.971,47,0.153,49,0.943,58,7.488,59,5.874,232,0.124,233,0.197,241,0.006,242,0.006,245,2.315,1811,6.8,1858,7.196,1859,7.196]],["title/controllers/HighlightController.html",[243,1.071,1860,3.56]],["body/controllers/HighlightController.html",[7,0.007,29,0.076,30,0.076,31,0.061,34,1.371,38,0.474,40,1.5,41,0.842,42,0.451,43,0.705,45,1.555,47,0.157,49,0.634,111,2.533,112,1.208,134,4.148,135,4.99,136,3.018,144,3.787,145,4.329,146,3.149,148,2.139,232,0.083,233,0.133,234,0.977,236,0.995,237,1.433,241,0.005,242,0.005,243,1.108,245,1.33,247,1.866,249,0.245,250,1.998,260,0.993,263,3.382,269,2.8,276,4.087,280,0.974,321,2.982,322,3.14,323,3.14,324,1.866,325,0.829,347,1.786,350,2.929,361,1.448,387,1.447,392,1.102,553,4.087,557,4.087,590,2.364,626,1.786,627,1.801,644,1.713,645,1.825,676,4.445,680,3.14,681,2.202,682,2.322,683,2.147,684,2.322,737,2.704,932,5.825,1005,5.659,1481,5.336,1593,4.301,1619,4.99,1623,2.322,1654,2.533,1860,4.99,1861,4.301,1862,5.659,1863,7.398,1864,8.32,1865,8.32,1866,4.301,1867,4.837,1868,4.837,1869,4.837,1870,4.837,1871,5.43,1872,3.948,1873,4.301,1874,4.837,1875,4.837,1876,4.301,1877,4.301,1878,4.301,1879,4.301,1880,4.837,1881,3.658,1882,4.837,1883,2.613,1884,4.634,1885,4.837,1886,3.685,1887,4.837,1888,4.837,1889,3.948,1890,4.301,1891,4.301,1892,4.837,1893,4.837,1894,4.301,1895,4.301,1896,4.301]],["title/modules/HighlightModule.html",[0,1.194,14,3.357]],["body/modules/HighlightModule.html",[0,2.066,2,2.538,3,3.19,7,0.007,14,6.718,23,5.407,26,3.263,27,2.713,28,2.538,29,0.105,30,0.105,31,0.084,33,3.339,47,0.158,49,0.882,51,3.062,52,1.919,100,4.587,134,4.516,135,5.124,136,4.196,165,1.993,232,0.116,233,0.184,241,0.006,242,0.006,245,2.224,583,3.417,1860,6.609,1897,6.726,1898,6.726,1899,6.726,1900,5.981]],["title/classes/HighlightOptionsDto.html",[233,0.128,1871,3.188]],["body/classes/HighlightOptionsDto.html",[7,0.007,29,0.088,30,0.088,31,0.071,38,0.558,42,0.46,43,0.891,47,0.138,145,3.579,232,0.097,233,0.199,237,2.803,241,0.005,242,0.005,249,0.286,260,1.17,280,1.05,325,0.967,392,0.949,404,1.111,440,1.289,465,2.784,510,3.16,581,2.234,585,1.737,587,2.321,588,2.953,589,2.621,590,2.413,592,3.684,593,4.048,594,3.955,596,2.399,597,3.491,599,3.149,600,3.149,604,2.953,605,4.048,606,3.047,607,3.149,608,4.722,609,3.261,610,3.955,611,2.866,612,3.149,613,3.261,614,3.149,615,3.261,616,3.684,617,3.481,618,2.708,619,3.149,620,3.149,621,3.261,622,3.684,624,3.684,625,2.128,626,2.083,627,1.551,709,1.886,726,3.301,758,3.064,759,3.149,1741,4.72,1748,4.297,1871,4.945,1901,6.447,1902,5.64]],["title/injectables/HttpLoggerMiddleware.html",[101,3.56,443,0.862]],["body/injectables/HttpLoggerMiddleware.html",[7,0.007,29,0.091,30,0.091,31,0.073,34,1.551,38,0.473,40,1.178,41,0.661,42,0.307,43,0.553,45,1.221,46,4.189,47,0.147,49,0.764,68,4.761,69,4.761,70,4.761,101,6.2,148,2.996,184,5.84,185,2.154,227,5.052,232,0.127,233,0.16,236,1.674,241,0.005,242,0.005,249,0.296,352,2.187,387,1.585,440,1.317,443,1.366,451,3.656,486,5.342,492,6.334,565,1.982,596,1.927,597,2.408,880,4.761,881,4.761,1043,4.443,1903,7.238,1904,6.2,1905,5.832,1906,8.563,1907,5.832,1908,7.407,1909,5.832,1910,7.407,1911,4.761,1912,4.761,1913,5.832,1914,5.832,1915,5.186,1916,5.832,1917,5.832,1918,7.407,1919,8.563,1920,7.407,1921,5.832,1922,5.832,1923,5.832,1924,5.832,1925,5.832,1926,5.832]],["title/controllers/InsightController.html",[243,1.071,1927,3.56]],["body/controllers/InsightController.html",[7,0.007,29,0.078,30,0.078,31,0.063,34,1.406,38,0.429,40,1.356,41,0.762,42,0.443,43,0.637,45,1.406,47,0.152,49,0.658,107,4.375,112,1.396,148,1.639,185,1.459,232,0.086,233,0.138,234,1.014,236,1.032,237,1.487,241,0.005,242,0.005,243,1.15,245,1.38,247,1.936,249,0.255,250,1.916,260,0.898,263,3.187,264,3.412,269,2.639,276,4.19,280,1.194,289,2.888,312,3.423,318,2.409,319,3.315,320,4.028,321,3.446,322,2.985,323,2.985,324,1.936,325,0.86,326,2.173,347,1.854,349,2.478,350,2.648,352,1.282,361,1.862,382,1.881,387,0.978,392,1.36,515,1.894,553,4.19,554,3.268,557,4.19,558,2.55,587,2.775,739,4.544,1082,3.131,1552,2.628,1593,3.628,1620,4.097,1623,2.409,1624,2.802,1654,3.516,1675,4.372,1881,4.226,1927,5.116,1928,4.463,1929,8.425,1930,8.425,1931,5.019,1932,4.097,1933,5.482,1934,5.019,1935,6.716,1936,5.116,1937,5.019,1938,5.019,1939,4.463,1940,4.581,1941,4.463,1942,5.437,1943,5.019,1944,5.116,1945,6.716,1946,2.712,1947,3.605,1948,4.097,1949,3.605,1950,4.54,1951,3.268,1952,5.019,1953,4.097,1954,4.097,1955,5.482,1956,4.463,1957,4.463,1958,5.019]],["title/injectables/InsightMemberService.html",[443,0.862,1959,3.043]],["body/injectables/InsightMemberService.html",[7,0.007,29,0.063,30,0.063,31,0.05,34,1.205,38,0.544,40,1.682,41,0.945,42,0.438,43,0.79,45,1.744,47,0.146,49,0.526,52,1.146,64,0.989,140,4.378,141,3.06,163,3.845,165,1.19,181,1.483,182,1.237,185,1.956,232,0.069,233,0.11,234,1.162,236,1.183,241,0.004,242,0.004,249,0.204,250,2.067,269,2.641,280,1.137,289,2.589,352,2.248,361,1.883,364,4.851,368,2.322,382,2.177,387,1.69,404,1.379,443,1.061,515,1.516,518,2.381,565,1.365,590,2.207,596,1.045,597,1.658,626,2.125,627,1.104,636,2.176,643,1.658,644,1.422,645,1.516,648,3.625,649,2.17,652,3.502,660,2.506,661,2.506,662,3.013,663,2.243,664,2.243,665,2.243,739,1.983,858,3.26,874,3.062,876,2.924,1082,2.506,1277,3.452,1574,3.279,1674,4.034,1692,2.409,1696,2.924,1706,3.572,1720,3.95,1950,4.405,1951,2.615,1957,3.572,1959,3.747,1960,7.081,1961,3.572,1962,5.98,1963,6.725,1964,5.98,1965,6.725,1966,5.98,1967,4.017,1968,6.725,1969,4.017,1970,5.755,1971,4.017,1972,4.017,1973,7.193,1974,4.017,1975,3.888,1976,4.017,1977,7.186,1978,7.774,1979,7.344,1980,4.017,1981,4.017,1982,4.017,1983,4.017,1984,4.017,1985,4.017,1986,3.572,1987,4.017,1988,3.06,1989,4.017,1990,2.924,1991,4.017,1992,4.017,1993,4.017,1994,4.017,1995,4.017,1996,4.017,1997,5.755,1998,4.017,1999,4.017,2000,3.572,2001,4.017,2002,4.017,2003,4.017,2004,4.017,2005,4.017,2006,4.017,2007,4.017]],["title/classes/InsightOptionsDto.html",[233,0.128,2008,3.815]],["body/classes/InsightOptionsDto.html",[7,0.007,29,0.077,30,0.077,31,0.062,38,0.571,42,0.477,43,0.902,47,0.128,151,2.834,232,0.114,233,0.181,237,2.854,241,0.005,242,0.005,249,0.249,260,1.197,280,0.98,325,0.84,404,1.371,440,1.176,465,2.42,510,2.95,581,1.91,585,1.51,587,2.116,588,2.567,589,2.39,590,2.332,592,3.359,593,3.691,594,3.692,596,2.405,597,3.45,599,3.691,600,4.176,603,4.36,604,2.567,605,3.691,606,2.649,607,2.738,608,4.47,609,2.834,610,3.692,611,2.491,612,2.738,613,2.834,614,2.738,615,2.834,616,3.359,617,2.354,618,2.354,619,2.738,620,2.738,621,2.834,622,4.247,623,3.059,624,4.247,625,1.85,626,1.811,627,1.348,628,3.822,668,3.522,726,3.645,737,2.024,1031,3.192,1278,3.059,1383,3.522,1741,4.87,1742,4.87,1743,5.102,1744,5.165,1745,3.522,1747,3.522,1750,4.749,1754,3.522,2008,5.397,2009,6.367,2010,4.903,2011,4.903,2012,7.48,2013,4.903,2014,4.903,2015,5.397,2016,4.002,2017,4.002,2018,3.735,2019,4.002,2020,4.002,2021,4.002]],["title/classes/InsightPageOptionsDto.html",[233,0.128,2022,3.188]],["body/classes/InsightPageOptionsDto.html",[7,0.007,29,0.095,30,0.095,31,0.076,38,0.555,42,0.457,43,0.888,47,0.104,232,0.104,233,0.167,237,2.774,241,0.005,242,0.005,249,0.308,260,1.162,280,1.087,440,1.352,465,3,510,3.271,585,1.872,587,2.656,588,3.182,589,2.749,590,2.453,592,3.863,593,4.245,594,4.095,596,2.435,597,3.588,599,3.394,600,3.394,604,3.182,605,4.245,606,3.284,607,3.394,608,4.853,609,3.514,610,4.095,611,3.088,612,3.394,613,3.514,614,3.394,615,3.514,616,3.863,617,2.918,618,2.918,619,3.394,620,3.394,621,3.514,626,2.245,627,1.671,2009,4.63,2022,5.185]],["title/injectables/InsightRepoService.html",[443,0.862,2023,3.188]],["body/injectables/InsightRepoService.html",[7,0.007,29,0.094,30,0.094,31,0.075,34,1.58,38,0.527,40,1.666,41,0.936,42,0.434,43,0.783,45,1.58,47,0.153,49,0.787,52,1.714,64,1.479,109,3.911,111,3.145,165,1.78,232,0.103,233,0.165,234,1.524,236,1.235,241,0.005,242,0.005,249,0.305,250,2.011,280,1.193,361,1.668,387,1.47,443,1.392,518,2.672,565,2.042,581,2.107,636,2.565,643,2.48,703,2.807,745,5.635,753,3.911,754,4.904,757,3.473,1087,4.315,1960,7.065,1977,6.735,1988,4.576,2023,5.147,2024,5.342,2025,8.251,2026,8.251,2027,6.007,2028,6.007,2029,7.547,2030,6.007,2031,6.007,2032,6.007,2033,6.007,2034,6.007,2035,6.007,2036,4.904,2037,5.342,2038,6.007]],["title/modules/InsightsModule.html",[0,1.194,15,3.357]],["body/modules/InsightsModule.html",[0,1.87,2,2.162,3,2.888,7,0.007,15,6.907,23,5.197,26,2.954,27,2.311,28,2.162,29,0.09,30,0.09,31,0.072,33,3.023,47,0.164,49,0.751,51,2.609,52,1.635,100,3.908,107,4.234,109,4.768,111,3,112,1.351,140,4.768,141,4.365,165,1.698,231,3.171,232,0.098,233,0.157,241,0.005,242,0.005,245,2.013,427,3.334,583,2.911,739,3.985,1927,6.149,1949,4.116,1950,5.718,1951,3.73,1959,5.853,1988,5.579,2023,6.502,2039,5.095,2040,5.095,2041,5.73,2042,5.095,2043,5.73,2044,6.149,2045,6.149,2046,7.324,2047,4.365,2048,5.73,2049,4.677]],["title/injectables/InsightsService.html",[443,0.862,1950,2.803]],["body/injectables/InsightsService.html",[7,0.007,29,0.07,30,0.07,31,0.057,34,1.306,38,0.549,40,1.695,41,0.952,42,0.441,43,0.796,45,1.757,47,0.148,49,0.59,52,1.285,64,1.109,107,3.606,112,0.831,165,1.335,182,1.387,185,2.081,232,0.077,233,0.123,234,1.26,236,0.926,241,0.004,242,0.004,249,0.229,250,2.069,269,2.523,280,1.167,289,2.866,352,2.198,361,1.938,364,5.034,382,2.005,387,1.635,404,1.096,443,1.151,515,1.7,518,2.534,565,1.531,587,1.442,590,1.896,626,1.663,627,1.238,636,2.29,643,1.859,644,1.595,645,1.7,648,3.814,649,2.433,652,3.513,662,3.266,663,2.515,664,2.515,665,2.515,739,4.143,858,3.429,874,2.051,876,2.289,922,2.162,949,1.817,1054,2.209,1086,3.431,1087,3.235,1091,2.932,1112,4.005,1125,5.548,1277,3.742,1674,4.293,1692,2.702,1696,3.17,1701,3.072,1720,3.637,1949,3.235,1950,3.742,1975,4.138,1990,3.17,2022,5.27,2050,4.005,2051,7.158,2052,5.453,2053,7.158,2054,7.158,2055,4.504,2056,4.504,2057,6.239,2058,4.504,2059,4.504,2060,4.504,2061,3.677,2062,4.504,2063,4.504,2064,4.504,2065,4.504,2066,4.504,2067,4.504,2068,3.677,2069,4.504,2070,6.239,2071,4.504,2072,4.504,2073,6.239,2074,6.239,2075,4.504,2076,4.504,2077,4.504,2078,4.504,2079,4.504,2080,4.504,2081,4.504,2082,4.504,2083,4.504]],["title/modules/LogModule.html",[0,1.194,2084,3.56]],["body/modules/LogModule.html",[0,2.029,2,2.464,3,3.134,7,0.007,26,3.205,27,2.634,28,2.464,29,0.102,30,0.102,31,0.082,33,2.696,47,0.16,49,0.856,51,2.973,52,1.863,53,7.066,55,3.646,126,4.454,184,4.454,194,5.331,231,3.441,232,0.112,233,0.179,241,0.006,242,0.006,427,3.618,815,6.966,826,6.335,841,5.807,2084,7.281,2085,5.807,2086,5.807,2087,5.807,2088,6.531,2089,5.807,2090,6.531,2091,6.531]],["title/injectables/LogService.html",[443,0.862,826,3.188]],["body/injectables/LogService.html",[7,0.007,29,0.099,30,0.099,31,0.08,34,1.633,38,0.498,40,1.575,41,0.885,42,0.41,43,0.74,45,1.326,47,0.156,49,0.83,52,1.808,64,1.56,126,4.321,163,3.317,194,5.171,232,0.109,233,0.174,234,1.575,236,1.303,241,0.006,242,0.006,249,0.321,250,1.868,352,1.618,382,1.774,387,1.234,443,1.439,448,3.423,512,3.662,518,2.243,565,2.153,636,2.614,643,2.615,768,6.719,821,6.367,826,5.32,2089,5.633,2092,5.633,2093,8.451,2094,6.335,2095,6.335,2096,7.8,2097,6.335,2098,6.335,2099,6.335,2100,6.335,2101,7.8,2102,6.335,2103,6.335,2104,6.335]],["title/classes/PageDto.html",[233,0.128,644,1.655]],["body/classes/PageDto.html",[7,0.007,29,0.095,30,0.095,31,0.076,38,0.53,40,1.23,41,0.691,42,0.487,43,0.578,47,0.149,163,3.985,232,0.105,233,0.227,234,1.537,237,2.706,241,0.005,242,0.005,249,0.309,260,1.018,325,1.044,440,1.353,512,5.279,585,1.875,587,1.949,625,2.297,644,2.695,648,4.623,649,3.289,725,3.779,746,4.153,748,5.405,751,4.97,2105,5.414,2106,6.654,2107,6.089,2108,6.106,2109,7.61,2110,6.089,2111,6.089,2112,6.089,2113,6.089,2114,6.089,2115,6.089,2116,8.302,2117,6.089,2118,6.089,2119,6.089]],["title/classes/PageMetaDto.html",[233,0.128,648,2.307]],["body/classes/PageMetaDto.html",[7,0.007,29,0.079,30,0.079,31,0.063,38,0.565,40,1.015,41,0.57,42,0.465,43,0.477,47,0.115,163,3.52,181,2.482,232,0.086,233,0.138,234,1.357,237,2.846,241,0.005,242,0.005,249,0.255,260,1.16,280,1.24,325,0.861,392,1.459,440,1.195,486,4.194,508,2.807,510,3.189,585,1.548,587,2.994,590,1.332,592,3.848,648,3.318,662,4.413,706,3.949,709,2.433,725,4.032,738,4.234,1031,4.376,1061,5.808,1062,7.191,1370,5.121,2106,3.61,2120,6.856,2121,4.469,2122,7.574,2123,7.574,2124,7.574,2125,5.026,2126,6.16,2127,6.722,2128,6.722,2129,5.026,2130,7.191,2131,7.191,2132,5.026,2133,6.722,2134,5.026,2135,5.026,2136,5.978,2137,5.026,2138,5.026,2139,6.735,2140,5.026,2141,5.978,2142,5.026,2143,5.026,2144,5.026,2145,5.026,2146,5.026,2147,5.026]],["title/interfaces/PageMetaParameters.html",[433,2.803,2126,3.56]],["body/interfaces/PageMetaParameters.html",[7,0.007,29,0.111,30,0.111,31,0.089,42,0.439,47,0.122,232,0.122,241,0.006,242,0.006,249,0.36,280,1.163,433,4.256,435,5.406,440,1.485,587,2.272,590,2.551,627,1.951,662,4.797,2106,5.098,2120,5.406,2126,6.362,2148,6.311]],["title/classes/PageOptionsDto.html",[233,0.128,590,1.238]],["body/classes/PageOptionsDto.html",[7,0.007,29,0.08,30,0.08,31,0.065,38,0.542,42,0.476,43,0.858,47,0.14,232,0.088,233,0.21,237,2.782,241,0.005,242,0.005,249,0.261,260,1.092,280,1.212,325,0.882,387,1.003,392,0.866,440,1.215,465,3.372,508,1.715,510,3.611,585,1.585,587,2.454,588,2.696,590,1.81,592,3.895,593,4.28,594,4.194,596,2.442,597,3.37,599,2.875,600,3.814,604,4.013,605,3.814,606,3.69,607,2.875,610,4.398,611,3.895,612,2.875,614,2.875,616,4.317,617,2.472,618,3.279,619,2.875,620,2.875,622,4.317,623,3.212,624,4.317,625,1.943,628,2.976,647,3.922,751,4.203,1776,3.698,1777,4.203,1778,4.203,2018,5.204,2120,6.653,2139,4.578,2141,4.578,2149,6.074,2150,6.817,2151,5.148,2152,5.148,2153,5.148,2154,4.578,2155,5.148,2156,5.148,2157,8.165,2158,5.148,2159,6.831,2160,5.148,2161,5.148,2162,5.148,2163,4.578]],["title/classes/PullRequestContributorOptionsDto.html",[233,0.128,671,3.357]],["body/classes/PullRequestContributorOptionsDto.html",[7,0.007,29,0.077,30,0.077,31,0.062,38,0.571,42,0.482,43,0.902,47,0.137,148,2.728,232,0.084,233,0.181,237,2.854,241,0.005,242,0.005,249,0.248,260,1.196,280,0.98,325,0.839,404,1.404,436,3.708,440,1.175,465,2.417,510,2.948,581,1.909,585,1.508,587,2.114,588,2.564,589,2.388,590,2.331,592,3.356,593,3.688,594,3.69,596,2.327,597,3.303,599,3.688,600,4.173,604,2.564,605,3.688,606,2.645,607,2.734,608,4.467,609,2.83,610,3.69,611,2.488,612,2.734,613,2.83,614,2.734,615,2.83,616,3.356,617,2.351,618,2.351,619,2.734,620,2.734,621,2.83,622,4.245,623,3.055,624,4.245,625,1.847,626,1.808,627,1.816,628,2.83,631,5.011,671,4.744,687,5.698,709,2.081,726,3.643,758,2.792,759,2.734,1741,4.866,1742,4.866,1743,5.098,1744,5.163,1745,3.517,1746,3.997,1747,4.744,1748,3.73,1749,4.354,1750,3.517,1751,3.997,1752,4.354,1753,3.188,1754,3.517,2164,4.354,2165,3.73]],["title/controllers/PullRequestController.html",[243,1.071,2166,3.56]],["body/controllers/PullRequestController.html",[7,0.007,29,0.074,30,0.074,31,0.059,34,1.351,38,0.469,40,1.483,41,0.833,42,0.448,43,0.696,45,1.537,47,0.158,49,0.62,128,3.939,129,4.13,131,4.951,133,3.225,147,4.2,148,2.695,149,3.397,232,0.081,233,0.13,234,0.955,236,1.326,237,1.912,241,0.005,242,0.005,243,1.083,245,1.3,247,1.824,249,0.24,250,1.989,260,0.982,263,3.36,269,2.782,322,3.11,323,3.11,324,1.824,325,0.811,347,1.746,350,2.895,387,1.43,436,3.501,490,2.836,544,3.86,560,3.86,561,3.86,562,4.951,587,1.514,590,2.434,626,1.746,627,2.018,644,1.674,645,1.784,672,3.86,673,5.737,674,4.634,675,3.869,676,4.404,680,3.334,681,2.153,682,2.27,683,2.099,684,2.27,685,4.581,686,3.603,691,3.86,954,3.097,1082,4.025,1140,3.225,1593,3.485,1739,5.38,1872,3.86,1889,3.86,1951,3.079,2166,4.914,2167,4.205,2168,8.255,2169,8.255,2170,8.255,2171,4.729,2172,4.729,2173,4.634,2174,6.451,2175,6.451,2176,4.729,2177,4.729,2178,4.729,2179,6.451,2180,4.729,2181,4.729,2182,5.665,2183,4.729,2184,4.914,2185,4.205,2186,4.4,2187,4.205,2188,4.729,2189,5.737,2190,4.729,2191,4.729,2192,4.729,2193,4.729,2194,4.729,2195,4.729,2196,4.729]],["title/controllers/PullRequestDescriptionController.html",[243,1.071,2197,3.56]],["body/controllers/PullRequestDescriptionController.html",[7,0.007,29,0.091,30,0.091,31,0.073,34,1.552,38,0.373,40,1.18,41,0.663,42,0.39,43,0.554,45,1.223,47,0.152,49,0.766,128,3.291,129,3.882,148,2.887,185,1.699,232,0.1,233,0.16,234,1.18,236,1.201,241,0.005,242,0.005,243,1.338,245,1.606,247,2.253,249,0.296,250,1.8,260,0.781,263,2.924,281,4.006,286,3.803,317,3.059,318,2.804,319,3.66,320,4.447,323,2.924,324,2.253,325,1.001,326,2.529,347,2.157,349,2.884,350,2.304,352,1.492,382,1.636,387,1.138,392,1.52,436,3.291,448,3.156,515,2.204,518,2.068,523,6.336,524,4.768,525,5.303,528,4.286,544,4.768,545,7.863,549,6.593,550,5.326,551,5.326,553,4.626,554,3.803,556,5.648,557,4.626,558,2.968,560,4.768,561,4.768,562,3.504,2197,5.648,2198,5.195,2199,5.842,2200,5.842,2201,5.842,2202,5.842,2203,5.195,2204,5.842,2205,5.842]],["title/injectables/PullRequestDescriptionService.html",[443,0.862,525,3.043]],["body/injectables/PullRequestDescriptionService.html",[7,0.007,29,0.074,30,0.074,31,0.06,34,1.353,38,0.469,40,1.485,41,0.834,42,0.415,43,0.697,45,1.353,47,0.136,49,0.621,54,4.929,55,2.647,112,0.875,128,2.868,129,4.134,148,2.784,185,1.379,212,3.876,226,3.234,227,3.234,232,0.081,233,0.13,234,1.305,236,1.624,241,0.005,242,0.005,249,0.241,250,1.625,280,0.964,281,2.562,317,2.483,352,2.017,353,4.032,366,2.844,382,1.81,384,2.844,387,1.259,392,1.329,404,1.337,433,2.844,434,4.207,436,3.505,441,3.612,443,1.192,444,6.124,445,3.406,446,3.612,448,2.562,449,2.647,451,2.34,452,6.294,454,5.601,455,5.385,456,5.385,457,3.406,459,3.612,461,3.612,462,3.612,463,3.406,464,3.406,465,2.34,466,3.612,467,3.612,468,3.612,469,3.612,470,3.612,476,2.844,481,3.612,482,5.601,484,3.234,485,3.406,486,2.958,487,3.406,488,3.612,489,3.612,490,2.844,491,3.612,492,4.408,493,3.612,494,3.234,495,3.612,496,3.612,497,3.612,498,3.612,499,3.612,500,1.679,501,3.612,502,5.281,503,3.406,504,3.612,505,3.612,506,3.234,507,3.612,508,1.579,509,3.612,510,1.87,511,3.612,512,2.741,513,3.612,514,3.612,515,1.789,516,3.612,517,4.926,518,2.288,519,3.612,520,3.612,521,3.612,522,3.87,523,5.385,524,3.87,525,4.207,526,6.744,527,4.216,528,2.741,529,4.216,530,4.216,531,4.216,532,4.216,533,4.216,534,3.87,535,4.216,536,3.87,537,4.216,538,4.216,539,4.216,540,4.216,541,4.216,565,1.611,566,3.612,568,4.216,570,4.216,2206,4.742,2207,4.742,2208,4.742]],["title/injectables/PullRequestInsightsService.html",[443,0.862,2186,3.188]],["body/injectables/PullRequestInsightsService.html",[7,0.007,29,0.079,30,0.079,31,0.063,34,1.41,38,0.517,40,1.635,41,0.86,42,0.473,43,0.719,45,1.588,47,0.149,49,0.661,52,1.438,64,1.241,129,4.417,147,4.385,148,2.834,149,3.62,165,1.494,185,1.466,212,5.316,232,0.087,233,0.138,234,1.36,236,1.385,241,0.005,242,0.005,249,0.256,250,1.488,269,1.646,280,1.061,352,2.068,382,1.412,387,1.312,404,1.032,436,3.744,443,1.242,490,3.023,515,1.902,565,1.713,596,1.752,597,2.78,618,3.233,627,1.386,636,2.399,643,2.081,652,2.182,675,3.023,737,2.081,858,3.593,874,3.066,925,4.374,1139,4.114,1140,6.337,1142,4.482,1696,3.422,1704,4.114,1720,3.854,1739,5.92,1742,3.281,1975,4.68,2108,3.438,2184,3.84,2186,4.594,2187,4.482,2209,4.482,2210,6.735,2211,7.585,2212,5.04,2213,5.316,2214,5.04,2215,6.735,2216,5.04,2217,5.04,2218,5.04,2219,5.04,2220,5.04,2221,5.989,2222,4.114,2223,3.438,2224,3.62,2225,5.04,2226,5.04,2227,5.04,2228,5.04,2229,5.04,2230,5.04,2231,4.114,2232,5.04,2233,5.04,2234,5.04,2235,5.04,2236,5.04,2237,5.04,2238,5.04,2239,5.04,2240,4.482,2241,4.482,2242,4.482,2243,5.04]],["title/modules/PullRequestModule.html",[0,1.194,16,3.043]],["body/modules/PullRequestModule.html",[0,1.852,2,2.128,3,2.859,7,0.007,16,6.271,26,2.925,27,2.275,28,2.128,29,0.088,30,0.088,31,0.071,33,2.993,47,0.163,49,0.739,51,2.568,52,1.609,128,3.883,129,2.953,131,4.348,133,3.847,147,4.72,148,2.761,149,4.051,165,1.671,231,3.139,232,0.097,233,0.155,241,0.005,242,0.005,245,1.993,427,3.301,436,2.503,438,4.72,449,4.048,453,5.829,525,5.829,542,6.104,559,5.016,583,2.866,685,5.935,686,4.297,1951,3.672,2166,6.104,2184,5.523,2186,6.107,2197,6.104,2203,5.016,2223,3.847,2244,5.016,2245,5.016,2246,5.016,2247,5.016,2248,6.107,2249,5.64,2250,5.016,2251,5.64,2252,5.64,2253,5.64]],["title/classes/PullRequestPageOptionsDto.html",[233,0.128,2182,3.357]],["body/classes/PullRequestPageOptionsDto.html",[7,0.007,29,0.065,30,0.065,31,0.052,38,0.572,42,0.483,43,0.903,47,0.128,148,2.804,232,0.117,233,0.161,237,2.863,241,0.004,242,0.004,249,0.21,260,1.199,280,0.897,325,0.71,357,2.127,358,2.373,404,1.408,436,3.812,440,1.046,465,2.044,510,2.697,581,1.747,585,1.275,587,2.837,588,2.168,589,2.127,590,2.227,591,5.211,592,2.989,593,3.284,594,3.376,596,2.332,597,3.247,599,4.158,600,4.693,604,2.168,605,3.284,606,2.238,607,2.312,608,4.158,609,2.394,610,3.376,611,2.104,612,2.312,613,2.394,614,2.312,615,2.394,616,2.989,617,1.988,618,1.988,619,2.312,620,2.312,621,2.394,622,4.364,623,2.584,624,4.364,625,1.563,626,1.529,627,1.617,628,4.547,631,4.103,687,5.858,709,2.125,726,3.581,758,3.148,759,2.312,787,3.155,1174,4.801,1183,4.801,1267,4.801,1360,4.268,1741,4.453,1742,4.453,1743,4.665,1744,4.901,1745,2.975,1747,4.913,1748,3.155,1750,2.975,1751,3.381,1753,2.696,1754,2.975,2154,3.683,2164,3.683,2165,3.155,2182,4.225,2254,4.142,2255,4.142,2256,7.474,2257,6.84,2258,4.142,2259,3.683,2260,4.142,2261,4.142,2262,7.266,2263,4.142,2264,4.142,2265,4.142,2266,4.142]],["title/injectables/PullRequestService.html",[443,0.862,685,2.916]],["body/injectables/PullRequestService.html",[7,0.007,29,0.066,30,0.066,31,0.053,34,1.244,38,0.524,40,1.597,41,0.897,42,0.416,43,0.75,45,1.655,47,0.157,49,0.55,52,1.198,64,1.034,129,4.418,131,2.519,133,2.864,148,2.25,165,1.244,182,1.829,185,2.179,232,0.072,233,0.115,234,1.2,236,1.221,241,0.004,242,0.004,249,0.213,250,1.964,269,2.68,352,2.381,358,1.694,382,1.93,387,1.342,404,1.056,436,3.745,443,1.096,508,1.399,565,1.427,587,1.344,590,2.469,594,4.255,610,2.073,611,3.018,618,3.309,626,2.194,627,2.06,631,4.494,634,4.487,636,2.221,639,2.734,643,1.734,644,1.487,645,1.585,646,3.428,647,3.199,648,4.166,649,2.269,652,3.796,660,3.706,661,3.706,662,3.923,663,2.345,664,2.345,665,3.317,671,4.951,675,3.563,678,4.267,685,3.706,688,3.734,737,2.845,858,3.326,874,3.138,925,2.269,1140,4.701,1164,3.016,1172,3.428,1704,5.626,1744,2.519,1753,2.734,1990,3.018,2182,4.951,2184,3.199,2185,6.129,2213,4.494,2223,2.864,2224,3.016,2231,4.849,2267,3.734,2268,6.893,2269,5.94,2270,5.282,2271,4.2,2272,6.129,2273,4.2,2274,5.94,2275,4.2,2276,4.2,2277,4.2,2278,4.2,2279,4.2,2280,4.2,2281,3.734,2282,4.2,2283,4.2,2284,4.2,2285,4.2,2286,6.129,2287,6.893,2288,4.2,2289,4.2,2290,4.2,2291,4.2,2292,4.2,2293,4.2,2294,4.2,2295,5.282,2296,4.2,2297,4.2,2298,4.2,2299,4.2,2300,4.2,2301,4.2,2302,3.428,2303,4.2,2304,3.734]],["title/controllers/RepoContributionsController.html",[243,1.071,578,3.56]],["body/controllers/RepoContributionsController.html",[7,0.007,29,0.078,30,0.078,31,0.062,34,1.397,38,0.426,40,1.347,41,0.757,42,0.423,43,0.633,45,1.397,47,0.154,49,0.652,84,4.517,232,0.085,233,0.136,234,1.004,236,1.372,237,1.977,241,0.005,242,0.005,243,1.139,245,1.366,247,1.917,249,0.252,250,1.91,260,0.892,263,3.175,269,2.628,280,0.987,321,3.429,322,2.97,323,2.97,324,1.917,325,0.852,347,2.464,350,2.631,352,1.704,361,1.779,382,1.869,387,1.3,392,1.123,404,1.324,576,5.137,578,5.083,579,4.057,580,4.42,581,2.412,584,6.344,587,1.591,590,2.29,627,1.366,644,1.76,645,1.876,650,4.42,680,3.183,681,2.263,682,2.386,683,2.206,684,2.386,737,2.052,940,3.787,986,6.133,1549,5.241,1552,4.215,1593,3.605,1608,4.654,1623,2.386,1646,3.236,1647,3.236,1654,2.602,1720,3.39,1881,3.725,2173,4.793,2305,6.698,2306,4.42,2307,8.397,2308,8.397,2309,4.971,2310,4.971,2311,8.051,2312,6.672,2313,6.672,2314,4.971,2315,4.971,2316,4.971,2317,4.971,2318,3.944,2319,3.236,2320,3.39,2321,3.39,2322,4.971,2323,6.672,2324,3.39,2325,6.672,2326,6.672,2327,4.971,2328,3.39]],["title/controllers/RepoController.html",[243,1.071,2329,3.56]],["body/controllers/RepoController.html",[7,0.007,29,0.072,30,0.072,31,0.058,34,1.322,38,0.497,40,1.572,41,0.883,42,0.463,43,0.738,45,1.63,47,0.151,49,0.601,80,3.488,232,0.079,233,0.126,234,0.926,236,0.943,237,1.359,241,0.005,242,0.005,243,1.05,245,1.26,247,1.768,249,0.233,250,2.036,260,1.041,263,3.474,269,2.876,280,0.947,321,3.289,322,3.22,323,3.22,324,1.768,325,0.786,347,1.693,350,3.07,361,1.596,387,1.516,392,1.063,404,1.293,581,2.283,587,1.468,590,2.062,627,1.736,634,5.316,636,2.307,639,2.985,644,1.623,645,1.73,672,3.742,674,4.536,675,3.788,676,4.347,680,3.054,681,2.087,682,2.201,683,2.035,684,2.201,691,3.742,737,3.371,1552,4.076,1593,4.76,1608,4.5,1620,3.742,1623,2.201,1646,2.985,1647,2.985,1654,2.4,1674,4.897,1692,2.75,1872,3.742,1881,3.526,1889,3.742,1932,3.742,1954,3.742,2047,3.492,2318,3.783,2320,3.127,2321,3.127,2324,3.127,2328,3.127,2329,4.811,2330,4.077,2331,8.165,2332,7.261,2333,4.5,2334,4.307,2335,4.585,2336,4.585,2337,5.592,2338,4.585,2339,5.616,2340,4.585,2341,4.077,2342,4.585,2343,4.585,2344,4.585,2345,3.742,2346,5.616,2347,3.293,2348,4.585,2349,4.307,2350,3.127,2351,4.585]],["title/modules/RepoFilterModule.html",[0,1.194,2248,3.188]],["body/modules/RepoFilterModule.html",[0,2.097,2,2.601,3,3.237,7,0.007,26,3.311,27,2.78,28,2.601,29,0.108,30,0.108,31,0.087,47,0.141,49,0.903,231,3.554,232,0.118,233,0.189,241,0.006,242,0.006,427,3.737,581,1.76,2213,5.855,2224,4.951,2248,6.483,2352,6.13,2353,6.13,2354,6.13,2355,5.627,2356,6.893]],["title/injectables/RepoFilterService.html",[443,0.862,2213,2.803]],["body/injectables/RepoFilterService.html",[7,0.007,29,0.077,30,0.077,31,0.062,34,1.387,38,0.423,40,1.513,41,0.751,42,0.394,43,0.628,45,1.387,46,3.531,47,0.138,49,0.644,64,1.211,212,4.492,232,0.084,233,0.135,241,0.005,242,0.005,249,0.38,280,0.868,352,1.256,387,0.958,404,1.147,443,1.222,512,4.33,550,5.757,551,4.757,565,1.671,581,1.913,592,2.498,594,4.13,596,1.723,597,2.734,606,4.047,618,2.36,627,1.821,652,2.868,674,4.757,675,5.5,680,2.799,737,2.03,925,4.047,946,1.983,949,2.672,1011,3.745,1140,3.353,1162,4.372,1164,3.531,1278,3.067,1623,4.137,1701,3.353,1739,5.466,1742,4.312,1743,3.353,1744,2.949,1753,3.201,1975,4.633,2108,3.353,2213,3.972,2221,6.661,2222,4.013,2241,4.372,2242,4.372,2355,6.114,2357,4.372,2358,7.49,2359,7.49,2360,4.916,2361,4.916,2362,8.015,2363,4.916,2364,4.916,2365,6.623,2366,4.916,2367,6.114,2368,4.916,2369,4.916,2370,4.916,2371,4.916,2372,6.623,2373,4.916,2374,4.916,2375,7.49,2376,4.916,2377,4.916,2378,4.916,2379,6.623,2380,6.623,2381,4.916,2382,4.916,2383,6.623,2384,4.916,2385,4.916,2386,4.916,2387,4.916,2388,4.372,2389,4.916,2390,4.916]],["title/classes/RepoInfo.html",[233,0.128,745,3.043]],["body/classes/RepoInfo.html",[7,0.007,29,0.101,30,0.101,31,0.081,38,0.504,41,0.896,42,0.487,47,0.136,232,0.111,233,0.216,241,0.006,242,0.006,249,0.328,260,1.057,280,1.165,325,1.109,361,2.013,392,1.33,404,1.361,440,1.405,581,2.269,585,1.993,625,2.442,706,3.598,709,2.311,725,3.884,726,3.598,727,6.02,745,5.145,758,3.34,759,3.613,1117,4.93,2391,6.128,2392,5.755,2393,7.587,2394,6.472,2395,6.472,2396,6.472,2397,6.472,2398,6.472]],["title/modules/RepoModule.html",[0,1.194,17,2.609]],["body/modules/RepoModule.html",[0,2.014,2,2.433,3,3.11,7,0.007,17,5.326,26,3.181,27,2.601,28,2.433,29,0.101,30,0.101,31,0.081,33,3.255,47,0.159,49,0.845,51,2.936,52,1.84,80,2.601,165,1.911,231,3.414,232,0.111,233,0.177,241,0.006,242,0.006,245,2.168,427,3.59,2047,4.912,2223,4.398,2248,6.316,2250,5.734,2318,5.07,2329,6.489,2345,5.264,2399,5.734,2400,5.734,2401,6.449,2402,5.734,2403,6.449,2404,6.449,2405,6.449]],["title/classes/RepoPageOptionsDto.html",[233,0.128,2333,2.702]],["body/classes/RepoPageOptionsDto.html",[7,0.007,29,0.079,30,0.079,31,0.064,38,0.54,41,0.767,42,0.444,43,0.875,47,0.131,151,2.934,232,0.131,233,0.185,237,2.756,241,0.005,242,0.005,249,0.258,260,1.131,280,0.998,325,0.87,357,2.446,358,2.729,440,1.203,465,2.505,510,3.002,585,1.563,587,2.599,588,2.658,589,2.446,590,2.352,591,5.798,592,3.438,593,3.778,594,3.757,596,2.419,597,3.491,599,3.778,600,4.25,601,6.378,604,2.658,605,3.778,606,2.742,607,2.834,608,4.533,609,2.934,610,3.757,611,2.579,612,2.834,613,2.934,614,2.834,615,2.934,616,3.438,617,2.437,618,2.437,619,2.834,620,2.834,621,2.934,622,3.438,623,3.167,624,3.438,625,1.915,626,1.874,627,1.395,628,4.4,668,3.646,737,2.095,1031,3.304,1278,3.167,1383,3.646,2015,5.523,2016,4.143,2017,4.143,2018,3.867,2019,4.143,2020,4.143,2021,4.143,2333,3.911,2391,4.86,2406,6.213,2407,4.514,2408,5.076,2409,4.514,2410,6.017,2411,5.155,2412,6.017,2413,6.017,2414,5.523,2415,5.155,2416,5.523,2417,5.523,2418,5.155,2419,5.076]],["title/classes/RepoSearchOptionsDto.html",[233,0.128,2337,3.357]],["body/classes/RepoSearchOptionsDto.html",[7,0.007,29,0.076,30,0.076,31,0.061,38,0.578,42,0.481,43,0.907,47,0.137,232,0.083,233,0.18,237,2.865,241,0.005,242,0.005,249,0.246,260,1.21,280,0.976,325,0.832,404,1.368,440,1.168,465,2.397,510,2.935,581,2.037,585,1.495,587,2.383,588,2.543,589,2.375,590,2.113,591,5.004,592,3.338,593,3.668,594,3.674,596,2.419,597,3.439,599,4.156,600,4.453,601,5.347,604,2.543,605,3.668,606,2.624,607,2.712,608,4.652,609,2.807,610,3.674,611,2.468,612,2.712,613,2.807,614,2.712,615,2.807,616,3.338,617,2.331,618,2.331,619,2.712,620,2.712,621,2.807,622,4.233,623,3.03,624,4.233,625,1.833,627,1.806,628,2.807,718,3.964,726,3.63,1741,4.846,1742,4.846,1743,5.077,1744,5.15,1745,3.488,1746,3.964,1747,3.488,1750,4.718,1753,3.162,1754,3.488,2259,4.319,2333,4.61,2337,4.718,2347,5.984,2391,5.984,2406,3.964,2407,4.319,2420,4.857,2421,4.857,2422,4.857]],["title/injectables/RepoService.html",[443,0.862,2318,2.447]],["body/injectables/RepoService.html",[7,0.007,29,0.054,30,0.054,31,0.043,34,1.077,38,0.521,40,1.649,41,0.946,42,0.429,43,0.753,45,1.663,47,0.148,49,0.452,52,0.984,64,0.849,80,1.391,84,3.087,86,2.068,88,2.068,90,2.068,92,2.068,112,0.636,165,1.022,182,1.585,185,2.229,210,4.691,232,0.059,233,0.094,234,1.039,236,1.502,241,0.004,242,0.004,249,0.175,250,1.905,269,2.593,280,1.041,289,2.553,352,2.351,361,1.509,382,2.046,387,1.547,404,1.395,443,0.949,508,1.148,515,1.942,565,1.172,581,1.866,587,1.104,590,2.03,594,3.92,596,1.339,597,2.124,601,2.476,610,1.702,611,2.615,616,2.615,618,2.956,626,1.273,627,1.693,634,4.009,636,2.024,639,2.244,642,3.51,643,1.423,644,1.221,645,1.301,646,2.814,647,2.626,648,3.92,649,1.863,652,3.613,654,4.576,655,4.576,657,3.066,658,3.066,660,3.211,661,3.211,662,3.575,663,1.925,664,2.873,665,2.873,675,2.068,758,1.457,858,3.031,874,2.803,876,2.615,920,1.544,925,2.78,946,2.076,949,1.391,986,3.92,994,3.066,1140,4.2,1164,2.476,1299,3.066,1314,3.066,1333,3.066,1348,3.066,1608,2.975,1674,3.087,1692,2.068,1696,3.129,1717,2.814,1720,3.894,1744,2.068,1753,2.244,1975,3.948,1990,2.615,2036,2.814,2108,2.351,2213,4.096,2222,2.814,2223,2.351,2224,2.476,2231,2.814,2270,5.476,2272,5.476,2281,3.066,2286,3.066,2295,3.066,2302,2.814,2318,2.694,2332,5.476,2333,3.948,2337,4.905,2341,3.066,2345,2.814,2346,4.576,2347,2.476,2406,2.814,2411,4.691,2414,2.814,2415,2.626,2416,2.814,2417,2.814,2418,2.626,2423,3.066,2424,6.158,2425,6.158,2426,3.448,2427,3.448,2428,5.146,2429,3.448,2430,3.448,2431,3.448,2432,6.158,2433,3.448,2434,3.448,2435,3.448,2436,3.448,2437,3.448,2438,6.158,2439,3.448,2440,5.476,2441,3.448,2442,5.146,2443,3.448,2444,5.146,2445,3.448,2446,3.448,2447,3.448,2448,3.448,2449,3.448,2450,3.448,2451,3.448,2452,3.448,2453,3.448,2454,3.448,2455,3.448,2456,7.307,2457,7.307,2458,3.066,2459,2.814,2460,3.066,2461,3.448,2462,3.448,2463,3.448,2464,3.448,2465,3.448,2466,3.448,2467,3.448,2468,3.448,2469,3.448,2470,3.448,2471,3.448,2472,3.448,2473,3.448,2474,3.448,2475,3.448,2476,3.448,2477,3.448,2478,3.448,2479,3.448,2480,3.448,2481,3.448,2482,3.448,2483,3.448,2484,3.448,2485,3.448,2486,3.066,2487,3.448]],["title/controllers/RepoStarController.html",[243,1.071,2488,3.56]],["body/controllers/RepoStarController.html",[7,0.007,29,0.053,30,0.053,31,0.043,34,1.064,38,0.463,40,1.465,41,0.823,42,0.467,43,0.688,45,1.842,47,0.148,49,0.444,80,2.459,81,1.722,88,4.35,89,2.582,112,0.937,232,0.058,233,0.093,234,0.684,236,1.045,237,1.506,241,0.004,242,0.004,243,0.776,245,0.932,247,1.307,249,0.172,250,1.979,260,0.97,263,3.336,264,2.582,269,2.762,280,1.215,289,3.139,318,1.627,319,3.759,321,3.302,322,3.003,323,3.003,324,1.307,325,0.581,326,1.467,347,1.876,349,3.581,350,2.86,352,1.729,361,1.795,382,1.896,387,1.413,392,1.464,404,1.333,558,1.722,581,2.468,587,1.085,590,1.346,627,0.932,644,1.2,645,1.279,676,2.837,680,2.148,681,1.543,682,1.627,683,1.504,684,1.627,737,2.516,753,2.206,1301,7.158,1552,3.545,1593,4.57,1608,4.695,1623,1.627,1624,1.892,1646,3.308,1647,3.308,1654,2.66,1720,3.44,1881,3.403,1940,4.618,1946,1.831,2318,3.191,2319,2.206,2320,2.312,2321,2.312,2324,3.466,2328,3.466,2333,3.914,2334,2.312,2349,2.312,2350,2.312,2411,2.582,2488,3.871,2489,6.772,2490,3.014,2491,7.254,2492,7.254,2493,7.254,2494,7.254,2495,7.254,2496,3.389,2497,3.389,2498,5.527,2499,6.771,2500,6.771,2501,4.864,2502,4.388,2503,4.618,2504,3.389,2505,3.389,2506,3.389,2507,3.389,2508,3.389,2509,3.389,2510,6.216,2511,3.389,2512,3.389,2513,3.389,2514,4.408,2515,3.389,2516,3.389,2517,3.389,2518,3.389,2519,2.434,2520,4.947,2521,4.157,2522,3.014,2523,2.582,2524,3.389,2525,3.389,2526,5.081,2527,3.389,2528,3.389,2529,5.081,2530,3.389]],["title/controllers/RepoStargazeController.html",[243,1.071,2531,3.56]],["body/controllers/RepoStargazeController.html",[7,0.007,29,0.054,30,0.054,31,0.043,34,1.073,38,0.465,40,1.472,41,0.827,42,0.468,43,0.691,45,1.846,47,0.148,49,0.449,80,2.475,81,1.742,92,4.372,93,2.611,112,0.945,232,0.059,233,0.094,234,0.692,236,1.054,237,1.519,241,0.004,242,0.004,243,0.785,245,0.942,247,1.322,249,0.174,250,1.983,260,0.975,263,3.345,264,2.604,269,2.77,280,1.216,289,3.142,318,1.646,319,3.775,321,3.318,322,3.016,323,3.016,324,1.322,325,0.588,326,1.484,347,1.892,349,3.598,350,2.874,352,1.739,361,1.801,382,1.907,387,1.42,392,1.467,404,1.336,558,1.742,581,2.481,587,1.097,590,1.358,627,0.942,644,1.214,645,1.293,676,2.861,680,2.166,681,1.561,682,1.646,683,1.521,684,1.646,737,2.533,753,2.232,1283,5.009,1493,4.979,1521,6.393,1552,3.565,1593,4.583,1608,4.711,1623,1.646,1624,1.914,1646,3.336,1647,3.336,1654,2.683,1720,3.46,1881,3.426,1946,1.852,2318,3.213,2319,2.232,2320,2.338,2321,2.338,2324,3.495,2328,3.495,2333,3.936,2334,2.338,2349,2.338,2350,2.338,2460,3.048,2501,4.891,2502,4.403,2519,2.462,2520,4.971,2523,2.611,2531,3.904,2532,6.801,2533,3.048,2534,7.289,2535,7.289,2536,7.289,2537,7.289,2538,7.289,2539,3.428,2540,3.428,2541,5.124,2542,6.81,2543,6.055,2544,3.428,2545,3.428,2546,3.428,2547,3.428,2548,3.428,2549,3.428,2550,3.428,2551,3.428,2552,3.428,2553,5.124,2554,3.428,2555,3.428,2556,3.428,2557,3.428,2558,4.186,2559,3.048,2560,3.428,2561,3.428,2562,3.904,2563,5.124,2564,3.428,2565,3.428,2566,4.557,2567,5.124,2568,3.428]],["title/controllers/RepoSubmitController.html",[243,1.071,2569,3.56]],["body/controllers/RepoSubmitController.html",[7,0.007,29,0.053,30,0.053,31,0.043,34,1.064,38,0.463,40,1.465,41,0.823,42,0.467,43,0.688,45,1.842,47,0.148,49,0.444,80,2.459,81,1.722,90,4.35,91,2.582,112,0.937,232,0.058,233,0.093,234,0.684,236,1.045,237,1.506,241,0.004,242,0.004,243,0.776,245,0.932,247,1.307,249,0.172,250,1.979,260,0.97,263,3.336,264,2.582,269,2.762,280,1.215,289,3.139,318,1.627,319,3.759,321,3.302,322,3.003,323,3.003,324,1.307,325,0.581,326,1.467,347,1.876,349,3.581,350,2.86,352,1.729,361,1.795,382,1.896,387,1.413,392,1.464,404,1.333,558,1.722,581,2.468,587,1.085,590,1.346,627,0.932,644,1.2,645,1.279,676,2.837,680,2.148,681,1.543,682,1.627,683,1.504,684,1.627,737,2.516,753,2.206,1317,7.647,1552,3.545,1593,4.57,1608,4.695,1623,1.627,1624,1.892,1646,3.308,1647,3.308,1654,2.66,1720,3.44,1881,3.403,1940,4.618,1946,1.831,2318,3.191,2319,2.206,2320,2.312,2321,2.312,2324,3.466,2328,3.466,2333,3.914,2334,2.312,2349,2.312,2350,2.312,2459,2.766,2498,5.527,2501,4.864,2502,4.388,2503,4.618,2514,4.408,2519,2.434,2520,4.947,2523,2.582,2569,3.871,2570,6.772,2571,3.014,2572,7.254,2573,7.254,2574,7.254,2575,7.254,2576,7.254,2577,3.389,2578,3.389,2579,6.771,2580,6.771,2581,3.389,2582,3.389,2583,3.389,2584,3.389,2585,3.389,2586,3.389,2587,6.772,2588,3.389,2589,3.389,2590,3.389,2591,3.389,2592,3.389,2593,3.389,2594,3.389,2595,4.157,2596,3.014,2597,2.766,2598,3.389,2599,3.389,2600,5.081,2601,3.389,2602,3.389,2603,5.081,2604,3.389]],["title/controllers/RepoVoteController.html",[243,1.071,2605,3.56]],["body/controllers/RepoVoteController.html",[7,0.007,29,0.053,30,0.053,31,0.043,34,1.064,38,0.463,40,1.465,41,0.823,42,0.467,43,0.688,45,1.842,47,0.148,49,0.444,80,2.459,81,1.722,86,4.35,87,2.582,112,0.937,232,0.058,233,0.093,234,0.684,236,1.045,237,1.506,241,0.004,242,0.004,243,0.776,245,0.932,247,1.307,249,0.172,250,1.979,260,0.97,263,3.336,264,2.582,269,2.762,280,1.215,289,3.139,318,1.627,319,3.759,321,3.302,322,3.003,323,3.003,324,1.307,325,0.581,326,1.467,347,1.876,349,3.581,350,2.86,352,1.729,361,1.795,382,1.896,387,1.413,392,1.464,404,1.333,558,1.722,581,2.468,587,1.085,590,1.346,627,0.932,644,1.2,645,1.279,676,2.837,680,2.148,681,1.543,682,1.627,683,1.504,684,1.627,737,2.516,753,2.206,1335,7.158,1552,3.545,1593,4.57,1608,4.695,1623,1.627,1624,1.892,1646,3.308,1647,3.308,1654,2.66,1720,3.44,1881,3.403,1940,4.618,1946,1.831,2318,3.191,2319,2.206,2320,2.312,2321,2.312,2324,3.466,2328,3.466,2333,3.914,2334,2.312,2349,2.312,2350,2.312,2458,3.014,2498,5.527,2501,4.864,2502,4.388,2503,4.618,2514,4.408,2519,2.434,2520,4.947,2523,2.582,2605,3.871,2606,6.772,2607,3.014,2608,7.254,2609,7.254,2610,7.254,2611,7.254,2612,7.254,2613,3.389,2614,3.389,2615,6.771,2616,6.771,2617,3.389,2618,3.389,2619,3.389,2620,3.389,2621,3.389,2622,3.389,2623,6.216,2624,3.389,2625,3.389,2626,3.389,2627,3.389,2628,3.389,2629,3.389,2630,3.389,2631,4.157,2632,3.014,2633,3.389,2634,3.389,2635,5.081,2636,3.389,2637,3.389,2638,5.081,2639,3.389]],["title/modules/StarModule.html",[0,1.194,18,3.357]],["body/modules/StarModule.html",[0,1.992,2,2.39,3,3.076,7,0.007,17,5.149,18,6.831,26,3.146,27,2.555,28,2.39,29,0.099,30,0.099,31,0.08,33,3.22,47,0.16,49,0.83,51,2.884,52,1.808,78,4.124,80,3.146,81,3.219,88,4.678,89,4.826,165,1.877,231,3.377,232,0.109,233,0.174,241,0.006,242,0.006,245,2.144,427,3.551,581,1.618,583,3.219,2488,6.438,2521,6.59,2522,5.633,2640,5.633,2641,5.633,2642,5.633,2643,6.335,2644,6.335,2645,6.335]],["title/injectables/StarService.html",[443,0.862,2521,3.188]],["body/injectables/StarService.html",[7,0.007,29,0.081,30,0.081,31,0.065,34,1.438,38,0.523,40,1.555,41,0.873,42,0.405,43,0.73,45,1.612,47,0.141,49,0.681,52,1.482,64,1.279,88,3.115,89,3.956,165,1.539,185,2.238,232,0.089,233,0.142,234,1.387,236,1.068,241,0.005,242,0.005,249,0.263,250,1.934,269,2.675,280,1.232,289,3.11,352,2.176,382,2.294,387,1.596,443,1.267,515,2.905,565,1.765,581,1.755,636,2.428,640,6.589,643,2.144,652,3.547,703,2.427,858,3.636,874,3.127,876,3.49,1054,1.839,1301,3.956,1696,2.638,1990,3.49,2502,3.711,2503,3.542,2510,5.608,2521,4.686,2646,4.618,2647,7.698,2648,7.698,2649,5.193,2650,5.193,2651,6.87,2652,5.193,2653,5.193,2654,5.193,2655,5.193,2656,5.193,2657,3.24,2658,5.193,2659,5.193,2660,3.542,2661,6.87,2662,6.87,2663,8.754,2664,6.87,2665,4.472,2666,5.193,2667,5.193,2668,3.73,2669,5.193]],["title/modules/StargazeModule.html",[0,1.194,19,3.357]],["body/modules/StargazeModule.html",[0,1.992,2,2.39,3,3.076,7,0.007,17,5.149,19,6.831,26,3.146,27,2.555,28,2.39,29,0.099,30,0.099,31,0.08,33,3.22,47,0.16,49,0.83,51,2.884,52,1.808,78,4.124,80,3.146,81,3.219,92,4.678,93,4.826,165,1.877,231,3.377,232,0.109,233,0.174,241,0.006,242,0.006,245,2.144,427,3.551,581,1.618,583,3.219,2531,6.438,2558,6.59,2559,5.633,2670,5.633,2671,5.633,2672,5.633,2673,6.335,2674,6.335,2675,6.335]],["title/injectables/StargazeService.html",[443,0.862,2558,3.188]],["body/injectables/StargazeService.html",[7,0.007,29,0.081,30,0.081,31,0.065,34,1.438,38,0.523,40,1.555,41,0.873,42,0.405,43,0.73,45,1.612,47,0.141,49,0.681,52,1.482,64,1.279,92,3.115,93,3.956,165,1.539,185,2.238,232,0.089,233,0.142,234,1.387,236,1.068,241,0.005,242,0.005,249,0.263,250,1.934,269,2.675,280,1.232,289,3.11,352,2.176,382,2.294,387,1.596,443,1.267,515,2.905,565,1.765,581,1.966,636,2.428,640,6.589,643,2.144,652,3.547,703,2.427,858,3.636,874,3.127,876,3.49,1054,1.839,1493,3.381,1696,2.638,1990,3.49,2502,3.711,2543,6.109,2558,4.686,2657,3.24,2660,3.542,2665,4.472,2668,3.73,2676,4.618,2677,7.698,2678,7.698,2679,5.193,2680,5.193,2681,6.87,2682,5.193,2683,5.193,2684,5.193,2685,5.193,2686,5.193,2687,5.193,2688,5.193,2689,6.87,2690,6.87,2691,8.754,2692,6.87,2693,5.193,2694,5.193,2695,5.193]],["title/modules/StripeModule.html",[0,1.194,424,3.188]],["body/modules/StripeModule.html",[0,2.097,2,2.601,3,3.237,7,0.007,26,3.311,27,2.78,28,2.601,29,0.108,30,0.108,31,0.087,33,2.845,47,0.141,49,0.903,231,3.554,232,0.118,233,0.189,241,0.006,242,0.006,335,6.355,424,6.483,427,3.737,2696,6.13,2697,6.13,2698,6.13,2699,6.893,2700,6.893]],["title/injectables/StripeService.html",[335,3.043,443,0.862]],["body/injectables/StripeService.html",[7,0.007,29,0.087,30,0.087,31,0.07,34,1.501,38,0.555,40,1.605,41,0.901,42,0.442,43,0.825,45,1.501,47,0.137,49,0.727,54,5.152,55,3.096,119,5.659,185,1.612,232,0.095,233,0.152,234,1.448,236,1.728,241,0.005,242,0.005,249,0.281,250,1.97,265,4.526,280,1.042,289,1.847,298,4.692,335,4.668,352,1.416,361,1.756,382,1.553,387,1.548,401,6.487,404,1.365,440,1.275,443,1.323,510,2.187,518,2.539,565,1.884,566,4.224,642,3.782,857,7.067,965,2.344,990,4.526,1357,4.224,1359,4.526,1365,4.224,1378,4.931,2149,6.377,2701,4.931,2702,7.948,2703,7.948,2704,7.171,2705,5.545,2706,5.545,2707,5.545,2708,5.545,2709,5.545,2710,5.545,2711,7.948,2712,5.545,2713,5.545,2714,4.931,2715,5.545,2716,5.545,2717,5.545,2718,5.545,2719,5.545,2720,5.545,2721,5.545,2722,5.545,2723,4.931,2724,5.545,2725,5.545,2726,5.545,2727,5.545,2728,5.545,2729,5.545]],["title/modules/StripeSubscriptionModule.html",[0,1.194,20,3.188]],["body/modules/StripeSubscriptionModule.html",[0,2.059,2,2.524,3,3.179,7,0.007,20,6.444,26,3.252,27,2.698,28,2.524,29,0.105,30,0.105,31,0.084,33,2.761,47,0.154,49,0.877,51,3.045,52,1.908,119,4.173,122,5.095,124,4.562,125,5.459,165,1.982,231,3.491,232,0.115,233,0.183,241,0.006,242,0.006,427,3.67,1349,5.095,2730,5.947,2731,5.947,2732,5.947,2733,6.634,2734,6.688,2735,5.947,2736,6.688]],["title/injectables/StripeSubscriptionService.html",[443,0.862,2733,3.188]],["body/injectables/StripeSubscriptionService.html",[7,0.007,29,0.099,30,0.099,31,0.08,34,1.635,38,0.54,40,1.577,41,0.886,42,0.41,43,0.741,45,1.635,47,0.152,49,0.832,52,1.811,64,1.563,119,3.959,124,4.329,125,5.18,165,1.881,232,0.109,233,0.174,234,1.577,236,1.305,241,0.006,242,0.006,249,0.322,250,1.869,364,5.073,387,1.521,443,1.44,518,2.247,565,2.157,636,2.615,643,2.62,858,3.917,1349,6.723,1365,5.948,2733,5.326,2737,5.643,2738,8.458,2739,6.346,2740,6.346,2741,7.808,2742,6.346,2743,6.346,2744,6.346,2745,6.346,2746,6.346,2747,6.346]],["title/modules/StripeWebHookModule.html",[0,1.194,21,3.357]],["body/modules/StripeWebHookModule.html",[0,1.977,2,2.361,3,3.053,7,0.007,10,5.985,20,6.271,21,6.955,23,5.315,26,3.123,27,2.524,28,2.361,29,0.098,30,0.098,31,0.079,33,3.196,47,0.158,49,0.82,100,4.268,118,5.108,119,3.904,122,4.767,123,5.565,231,2.71,232,0.107,233,0.171,241,0.006,242,0.006,245,2.128,424,6.271,427,3.524,432,5.565,2748,5.565,2749,6.258,2750,5.565,2751,6.861,2752,4.767,2753,6.258,2754,6.258]],["title/controllers/StripeWebhookController.html",[243,1.071,2751,3.357]],["body/controllers/StripeWebhookController.html",[7,0.007,29,0.066,30,0.066,31,0.053,34,1.253,38,0.382,40,1.209,41,0.679,42,0.315,43,0.568,45,1.253,47,0.151,49,0.556,54,4.007,55,2.37,112,1.104,119,4.325,122,3.233,184,4.082,185,2.308,232,0.073,233,0.116,234,0.857,236,1.807,241,0.004,242,0.004,243,0.972,245,1.167,247,1.637,249,0.215,250,1.82,260,0.568,289,2.508,317,2.222,322,2.36,324,1.637,325,0.727,333,3.522,334,3.048,335,4.513,336,3.774,337,4.513,338,3.774,347,1.567,352,2.357,357,1.534,361,1.322,366,2.545,382,2.307,384,2.545,385,4.559,387,0.827,403,6.165,404,1.38,490,4.94,508,1.993,515,2.616,518,2.119,556,5.735,604,2.222,1015,2.895,1054,1.503,1351,3.774,1352,3.774,1353,3.774,1354,3.774,1355,3.774,1356,3.774,1357,3.233,1358,3.774,1359,3.464,1360,3.734,1361,3.774,1362,3.774,1365,6.275,1383,3.048,2367,3.464,2733,4.728,2735,3.774,2751,4.299,2752,5.281,2755,5.659,2756,3.464,2757,6.933,2758,6.933,2759,4.244,2760,7.529,2761,4.244,2762,4.244,2763,6.695,2764,4.244,2765,4.244,2766,6.933,2767,3.464,2768,4.244,2769,3.464,2770,3.464,2771,5.322,2772,5.322,2773,5.322,2774,5.322,2775,4.244,2776,4.244,2777,4.244,2778,6.933,2779,4.244,2780,4.244,2781,4.244,2782,4.244,2783,4.244,2784,4.244,2785,3.774,2786,4.244,2787,6.933,2788,4.244,2789,5.985,2790,4.244,2791,4.244,2792,4.244,2793,4.244,2794,4.244,2795,4.244,2796,4.244,2797,4.244,2798,4.244,2799,4.244,2800,4.244,2801,4.244,2802,4.244,2803,4.244,2804,4.244,2805,4.244,2806,4.244,2807,5.985,2808,4.244,2809,4.244,2810,4.244,2811,4.244,2812,4.244,2813,4.244,2814,6.933,2815,4.244,2816,4.244,2817,4.244,2818,6.165,2819,4.244,2820,3.464,2821,4.244,2822,4.244,2823,4.244,2824,4.244,2825,5.985,2826,4.244,2827,4.244,2828,4.244,2829,4.244,2830,4.244,2831,4.244,2832,4.244,2833,4.244,2834,4.244,2835,4.244]],["title/modules/SubmitModule.html",[0,1.194,22,3.357]],["body/modules/SubmitModule.html",[0,1.992,2,2.39,3,3.076,7,0.007,17,5.149,22,6.831,26,3.146,27,2.555,28,2.39,29,0.099,30,0.099,31,0.08,33,3.22,47,0.16,49,0.83,51,2.884,52,1.808,78,4.124,80,3.146,81,3.219,90,4.678,91,4.826,165,1.877,231,3.377,232,0.109,233,0.174,241,0.006,242,0.006,245,2.144,427,3.551,581,1.618,583,3.219,2569,6.438,2595,6.59,2596,5.633,2836,5.633,2837,6.335,2838,5.633,2839,5.633,2840,6.335,2841,6.335]],["title/injectables/SubmitService.html",[443,0.862,2595,3.188]],["body/injectables/SubmitService.html",[7,0.007,29,0.081,30,0.081,31,0.065,34,1.438,38,0.523,40,1.555,41,0.873,42,0.405,43,0.73,45,1.612,47,0.141,49,0.681,52,1.482,64,1.279,90,3.115,91,3.956,165,1.539,185,2.238,232,0.089,233,0.142,234,1.387,236,1.068,241,0.005,242,0.005,249,0.263,250,1.934,269,2.675,280,1.232,289,3.11,352,2.176,382,2.294,387,1.596,443,1.267,515,2.905,565,1.765,581,1.755,636,2.428,640,6.589,643,2.144,652,3.547,703,2.427,858,3.636,874,3.127,876,3.49,1054,1.839,1696,2.638,1990,3.49,2502,3.711,2503,3.542,2595,4.686,2597,4.239,2657,3.24,2660,3.542,2665,4.472,2668,3.73,2842,4.618,2843,7.698,2844,7.698,2845,5.193,2846,5.193,2847,6.87,2848,5.193,2849,5.193,2850,5.193,2851,5.193,2852,5.193,2853,5.193,2854,5.193,2855,6.87,2856,6.87,2857,8.754,2858,6.87,2859,6.87,2860,5.193,2861,5.193,2862,5.193]],["title/classes/SupabaseAuthDto.html",[233,0.128,330,3.56]],["body/classes/SupabaseAuthDto.html",[7,0.007,29,0.045,30,0.045,31,0.036,38,0.579,41,0.849,42,0.477,43,0.906,47,0.05,112,1.756,181,2.647,188,4.017,232,0.05,233,0.08,237,2.892,241,0.003,242,0.003,248,6.546,249,0.147,260,1.213,264,4.268,280,0.819,286,5.469,287,2.056,298,3.78,325,0.498,328,6.305,330,3.441,353,4.668,355,4.524,356,4.928,357,2.004,358,2.235,361,1.225,362,4.524,370,4.222,371,4.524,372,4.928,373,5.158,374,5.158,375,4.222,376,5.158,377,4.222,378,3.917,379,4.222,380,4.222,381,4.928,392,1.526,404,1.442,440,0.803,476,2.709,508,2.705,585,0.894,617,4.331,622,4.608,629,3.081,706,1.323,709,2.491,725,2.056,738,3.753,802,3.27,812,2.611,814,3.35,902,1.781,924,4.017,925,2.44,938,3.12,939,3.27,941,1.956,942,4.319,951,1.822,954,3.001,992,3.687,1001,2.111,1010,3.081,1061,4.49,1082,2.818,1105,4.017,1270,4.017,1278,2.818,1425,3.441,1437,5.102,1491,3.687,1637,4.49,2863,8.104,2864,2.583,2865,2.905,2866,2.905,2867,4.517,2868,4.517,2869,2.905,2870,2.905,2871,3.244,2872,2.905,2873,4.517,2874,2.905,2875,4.017,2876,4.017,2877,2.905,2878,2.905,2879,2.905,2880,6.251,2881,4.517,2882,2.905,2883,4.517,2884,2.905,2885,2.905,2886,4.017,2887,4.017,2888,2.905,2889,4.517,2890,4.517,2891,2.905,2892,4.517,2893,2.905,2894,4.517,2895,2.905,2896,2.905,2897,3.687,2898,4.017,2899,2.905,2900,2.905,2901,4.517,2902,4.017,2903,2.905,2904,2.905]],["title/injectables/SupabaseGuard.html",[326,2.024,443,0.862]],["body/injectables/SupabaseGuard.html",[7,0.007,29,0.115,30,0.115,31,0.092,47,0.146,49,0.962,232,0.126,233,0.201,241,0.006,242,0.006,326,3.689,429,5.994,443,1.571,565,2.495,589,2.655,2905,6.53,2906,7.343,2907,7.343]],["title/injectables/SupabaseStrategy.html",[425,3.357,443,0.862]],["body/injectables/SupabaseStrategy.html",[7,0.007,29,0.097,30,0.097,31,0.078,34,1.61,38,0.534,40,1.553,41,0.872,42,0.404,43,0.73,45,1.61,46,4.449,47,0.15,49,0.812,61,4.718,112,1.419,232,0.106,233,0.17,234,1.689,241,0.006,242,0.006,248,4.449,249,0.314,250,1.849,259,7.781,328,5.525,367,2.511,387,1.206,425,5.525,429,5.056,443,1.419,518,2.193,565,2.105,589,2.239,842,5.507,2763,6.84,2908,5.507,2909,8.366,2910,7.44,2911,6.193,2912,6.193,2913,8.366,2914,6.193,2915,6.193,2916,6.193,2917,7.692,2918,6.193,2919,6.193,2920,6.193,2921,7.692,2922,6.193,2923,6.193,2924,6.193,2925,6.193,2926,6.193,2927,6.193,2928,6.193,2929,6.193,2930,6.193,2931,6.193,2932,6.193]],["title/classes/UpdateEndorsementDto.html",[233,0.128,2933,3.815]],["body/classes/UpdateEndorsementDto.html",[7,0.007,29,0.115,30,0.115,31,0.092,47,0.146,232,0.126,233,0.201,241,0.006,242,0.006,277,4.572,325,1.256,585,2.256,589,2.649,698,4.998,700,5.982,1628,5.982,2933,6.946,2934,6.516,2935,7.328,2936,7.328]],["title/classes/UpdateInsightDto.html",[233,0.128,1942,3.357]],["body/classes/UpdateInsightDto.html",[7,0.007,29,0.102,30,0.102,31,0.082,38,0.546,41,0.971,42,0.488,47,0.112,163,3.413,232,0.112,233,0.179,241,0.006,242,0.006,249,0.331,260,1.144,277,4.067,286,4.244,404,1.216,440,1.411,585,2.007,587,2.541,589,2.87,608,4.779,636,1.932,706,3.896,709,2.226,733,6.669,735,5.321,736,6.047,737,3.277,738,4.156,739,3.918,740,4.966,741,5.321,743,5.797,745,5.168,746,4.446,747,5.797,748,4.244,749,5.797,1942,5.701,1948,5.321,2937,5.321,2938,6.519,2939,6.519,2940,6.519]],["title/classes/UpdateInsightMemberDto.html",[233,0.128,2941,3.56]],["body/classes/UpdateInsightMemberDto.html",[7,0.007,29,0.105,30,0.105,31,0.085,38,0.43,42,0.456,47,0.139,232,0.116,233,0.222,241,0.006,242,0.006,249,0.342,260,0.901,325,1.155,392,1.134,404,1.38,440,1.44,585,2.075,625,2.543,706,3.068,709,2.106,725,3.687,726,3.687,739,4.446,761,5.5,762,5.817,1086,7.019,1091,5.272,1776,4.84,1936,5.133,2937,6.61,2941,6.169,2942,6.738,2943,6.61,2944,5.523,2945,6.738,2946,6.738]],["title/classes/UpdateUserCollaborationDto.html",[233,0.128,2947,3.56]],["body/classes/UpdateUserCollaborationDto.html",[7,0.007,29,0.106,30,0.106,31,0.085,38,0.433,42,0.458,47,0.14,112,1.5,148,2.656,221,7.234,232,0.117,233,0.223,241,0.006,242,0.006,249,0.344,260,0.908,325,1.164,392,1.142,404,1.383,440,1.447,585,2.09,625,2.562,706,3.091,709,2.116,725,3.703,726,3.703,777,5.542,778,5.843,1360,5.76,1776,4.876,2947,6.197,2948,5.843,2949,6.789,2950,6.789,2951,6.789,2952,6.789]],["title/classes/UpdateUserDto.html",[233,0.128,295,3.357]],["body/classes/UpdateUserDto.html",[7,0.007,29,0.06,30,0.06,31,0.048,38,0.564,41,0.868,42,0.505,43,0.882,47,0.096,112,1.716,174,4.025,181,1.425,232,0.066,233,0.153,237,2.364,241,0.004,242,0.004,249,0.196,260,1.182,295,4.015,298,4.272,311,7.516,325,0.661,367,3.124,373,5.829,374,5.829,375,5.008,376,5.829,377,5.008,378,4.497,379,5.008,380,5.008,392,1.487,394,5.829,404,1.487,440,0.994,451,2.759,476,3.353,585,1.188,617,4.124,622,4.432,624,4.432,625,1.456,706,2.545,709,2.457,725,2.993,726,3.746,738,3.774,752,4.563,764,3.43,766,4.971,767,3.149,812,2.23,902,2.204,1010,3.813,1278,2.407,1637,4.015,2871,4.015,2875,4.971,2876,4.971,2886,4.971,2887,3.43,2897,6.88,2898,3.43,2902,3.43,2944,2.631,2948,6.416,2953,3.43,2954,4.971,2955,3.858,2956,3.858,2957,5.59,2958,3.858,2959,3.858,2960,3.858,2961,3.858,2962,3.858,2963,3.858,2964,3.858,2965,3.858,2966,3.858,2967,6.574,2968,3.858,2969,3.858,2970,6.41,2971,3.858,2972,3.858,2973,3.858,2974,7.208,2975,5.59,2976,4.971,2977,5.59,2978,5.59,2979,5.59,2980,3.858,2981,3.858,2982,3.858,2983,3.858,2984,7.208,2985,3.858,2986,3.858,2987,3.858]],["title/classes/UpdateUserEmailPreferencesDto.html",[233,0.128,296,3.357]],["body/classes/UpdateUserEmailPreferencesDto.html",[7,0.007,29,0.098,30,0.098,31,0.079,38,0.496,42,0.484,47,0.134,112,1.721,181,2.871,232,0.108,233,0.213,241,0.006,242,0.006,249,0.32,260,1.04,296,5.584,298,5.049,325,1.08,367,3.078,392,1.308,440,1.383,562,4.663,585,1.94,625,2.378,706,3.539,709,2.29,725,3.838,738,4.936,741,6.346,752,6.883,778,5.584,1010,5.303,2948,6.056,2988,5.604,2989,7.498,2990,7.498,2991,6.302,2992,7.775,2993,6.302]],["title/classes/UpdateUserProfileInterestsDto.html",[233,0.128,305,3.357]],["body/classes/UpdateUserProfileInterestsDto.html",[7,0.007,29,0.106,30,0.106,31,0.085,38,0.432,42,0.457,47,0.139,112,1.497,163,4.25,232,0.116,233,0.222,241,0.006,242,0.006,249,0.343,260,0.904,305,5.83,307,6.625,325,1.159,367,2.839,392,1.138,404,1.332,440,1.443,490,4.057,585,2.083,625,2.552,706,3.079,709,2.111,725,3.695,746,5.536,748,5.871,2165,5.152,2948,5.83,2994,6.014,2995,5.521,2996,6.764,2997,5.152]],["title/controllers/UserCollaborationController.html",[243,1.071,2998,3.56]],["body/controllers/UserCollaborationController.html",[7,0.007,29,0.058,30,0.058,31,0.047,34,1.144,38,0.453,40,1.435,41,0.806,42,0.448,43,0.674,45,1.487,47,0.153,49,0.49,112,1.69,148,2.662,154,4.921,155,2.85,185,2.066,232,0.064,233,0.102,234,0.756,236,1.124,237,1.62,241,0.004,242,0.004,243,0.857,245,1.028,247,1.443,249,0.19,250,1.962,260,0.95,263,3.296,264,2.778,269,2.729,276,4.925,280,1.164,281,3.49,284,3.729,289,3.125,312,2.552,316,2.687,317,2.862,318,1.796,319,3.731,320,3.874,321,3.235,322,2.802,323,2.98,324,1.443,325,0.641,326,1.62,333,3.282,334,2.687,347,1.382,349,3.507,350,2.802,352,1.93,361,1.57,364,2.244,382,2.211,387,1.258,392,1.328,404,1.209,448,2.021,451,1.847,515,2.063,553,4.925,554,3.559,557,4.433,558,1.901,590,2.091,626,1.382,627,1.028,644,1.325,645,1.412,680,2.311,681,1.703,682,1.796,683,1.661,684,1.796,775,6.367,778,6.123,1054,1.325,1091,2.436,1360,3.411,1399,3.327,1548,2.687,1549,3.559,1592,3.327,1623,1.796,1624,2.089,1654,2.862,1662,3.327,1675,3.559,1883,2.021,1940,3.729,1944,4.921,1946,2.021,1947,2.687,2173,3.927,2514,3.559,2947,6.494,2998,4.165,2999,4.369,3000,3.327,3001,3.741,3002,6.721,3003,6.721,3004,7.558,3005,6.721,3006,3.741,3007,3.054,3008,5.467,3009,3.559,3010,6.46,3011,3.741,3012,3.327,3013,5.744,3014,3.741,3015,3.741,3016,3.741,3017,3.741,3018,3.741,3019,3.327,3020,3.741,3021,3.741,3022,3.741,3023,4.406,3024,3.327,3025,5.467,3026,3.741,3027,2.687,3028,3.741,3029,3.741,3030,3.741,3031,5.467,3032,3.741,3033,3.054,3034,3.741,3035,3.741,3036,6.46,3037,3.741,3038,5.467,3039,3.741,3040,3.741,3041,3.327,3042,3.741,3043,3.741]],["title/injectables/UserCollaborationService.html",[443,0.862,3023,3.188]],["body/injectables/UserCollaborationService.html",[7,0.007,29,0.072,30,0.072,31,0.058,34,1.327,38,0.553,40,1.707,41,0.959,42,0.444,43,0.802,45,1.77,47,0.149,49,0.604,52,1.315,64,1.135,112,0.85,154,4.126,155,3.51,165,1.366,182,1.419,185,2.106,232,0.079,233,0.126,234,1.28,236,0.947,241,0.005,242,0.005,249,0.234,250,2.076,269,2.547,280,0.949,289,2.724,352,2.212,361,1.949,364,5.07,382,2.029,387,1.646,404,1.371,443,1.169,515,1.739,518,2.565,565,1.566,590,2.294,626,2.34,627,1.267,636,2.312,643,1.902,644,1.632,645,1.739,648,3.851,649,2.49,652,3.378,660,2.875,661,2.875,662,3.318,663,2.573,664,2.573,665,2.573,858,3.463,874,2.885,876,2.341,1277,2.764,1398,4.098,1674,4.345,1692,2.764,1696,3.22,1701,3.143,1720,3.68,1883,2.49,1975,4.187,1990,3.22,2999,5.099,3002,6.442,3003,6.442,3005,6.442,3012,4.098,3019,4.098,3023,4.323,3041,7.517,3044,4.098,3045,7.244,3046,4.608,3047,4.608,3048,6.338,3049,4.608,3050,4.608,3051,4.608,3052,4.608,3053,4.608,3054,4.608,3055,4.608,3056,4.608,3057,4.608,3058,4.608,3059,4.608,3060,4.608,3061,4.608,3062,4.608,3063,4.608,3064,4.608,3065,4.608,3066,4.608]],["title/controllers/UserController.html",[243,1.071,3067,3.56]],["body/controllers/UserController.html",[7,0.007,29,0.065,30,0.065,31,0.052,34,1.231,38,0.475,40,1.504,41,0.845,42,0.451,43,0.706,45,1.559,47,0.157,49,0.543,80,2.373,81,2.104,82,2.824,112,1.684,128,3.305,129,2.168,131,3.528,132,2.825,133,2.825,134,3.284,136,2.584,151,4.305,174,4.948,232,0.071,233,0.113,234,0.836,236,1.531,241,0.004,242,0.004,243,0.949,245,1.139,247,1.597,249,0.21,250,2,260,0.996,263,3.387,269,2.804,301,3.683,321,3.581,322,3.102,323,3.102,324,1.597,325,0.71,333,3.475,347,1.529,350,2.937,352,1.502,368,2.394,382,1.647,387,1.45,392,1.253,404,1.387,562,3.528,590,2.506,626,1.529,627,1.139,644,1.466,645,1.563,680,3.148,681,1.885,682,1.988,683,1.838,684,1.988,685,4.268,686,3.155,737,3.247,1420,2.696,1549,4.848,1552,4.497,1593,4.023,1623,1.988,1657,6.079,1658,5.584,1862,5.673,1873,3.683,1883,2.238,1884,4.268,1886,3.155,1890,3.683,2189,3.683,2318,3.581,2319,2.696,2334,2.825,2339,3.683,2349,2.825,2350,2.825,3027,2.975,3033,4.801,3067,4.481,3068,3.683,3069,7.865,3070,7.865,3071,7.865,3072,6.84,3073,4.142,3074,4.142,3075,6.079,3076,3.683,3077,4.142,3078,4.142,3079,4.142,3080,4.142,3081,4.142,3082,4.142,3083,4.142,3084,4.142,3085,4.142,3086,4.142,3087,4.142,3088,4.142,3089,5.882,3090,4.142,3091,4.142,3092,2.975,3093,3.683,3094,4.142,3095,4.142,3096,4.142,3097,4.142,3098,4.142,3099,4.142,3100,4.142]],["title/controllers/UserEndorsementController.html",[243,1.071,3101,3.56]],["body/controllers/UserEndorsementController.html",[7,0.007,29,0.083,30,0.083,31,0.066,34,1.455,38,0.444,40,1.403,41,0.788,42,0.434,43,0.659,45,1.455,47,0.156,49,0.693,112,1.521,157,5.14,158,4.314,232,0.091,233,0.145,234,1.067,236,1.087,237,1.566,241,0.005,242,0.005,243,1.211,245,1.453,247,2.038,249,0.268,250,1.944,260,0.929,263,3.253,264,4.191,280,1.153,289,2.987,318,2.537,319,3.833,322,3.062,323,3.062,324,2.038,325,0.906,326,2.288,347,1.951,349,3.43,350,2.74,387,1.354,518,2.461,558,2.685,590,2.533,626,1.951,627,1.453,676,4.606,680,3.282,681,2.406,682,2.537,683,2.345,684,2.537,1049,5.925,1582,7.62,1583,7.62,1593,4.456,1601,6.18,1612,5.673,1625,4.844,1633,4.699,1640,6.18,1946,2.855,2999,4.489,3101,5.294,3102,4.699,3103,5.284,3104,5.284,3105,5.284,3106,6.18,3107,5.284,3108,5.284,3109,5.284,3110,5.284,3111,4.699,3112,5.284,3113,5.284,3114,5.284,3115,5.284,3116,5.284]],["title/injectables/UserFollowService.html",[443,0.862,3117,3.188]],["body/injectables/UserFollowService.html",[7,0.007,29,0.07,30,0.07,31,0.057,34,1.306,38,0.518,40,1.56,41,0.876,42,0.406,43,0.733,45,1.618,47,0.144,49,0.59,52,1.285,64,1.109,112,1.496,138,2.932,139,3.431,165,1.335,185,2.247,232,0.077,233,0.123,234,1.26,236,1.472,241,0.004,242,0.004,249,0.229,250,1.968,269,2.741,280,1.243,289,3.082,333,4.373,352,2.198,382,2.41,387,1.58,443,1.151,515,2.915,565,1.531,636,2.29,643,1.859,652,3.634,858,3.429,874,3.258,876,3.637,1054,1.595,1277,2.702,1493,4.062,1520,3.677,1696,2.289,1883,2.433,1990,3.17,2502,2.433,2657,2.81,2660,3.072,2665,4.062,2668,4.481,2999,4.852,3092,3.235,3117,4.255,3118,4.005,3119,7.158,3120,7.158,3121,7.158,3122,4.504,3123,5.369,3124,4.504,3125,6.239,3126,4.504,3127,7.801,3128,4.504,3129,4.504,3130,4.504,3131,8.018,3132,4.504,3133,4.504,3134,4.504,3135,3.431,3136,4.504,3137,4.504,3138,7.158,3139,7.158,3140,4.504,3141,8.773,3142,4.753,3143,6.239,3144,6.239,3145,6.239,3146,4.504,3147,6.239,3148,4.504,3149,4.504,3150,4.504]],["title/controllers/UserFollowsController.html",[243,1.071,3151,3.56]],["body/controllers/UserFollowsController.html",[7,0.007,29,0.071,30,0.071,31,0.057,34,1.312,38,0.458,40,1.45,41,0.814,42,0.427,43,0.681,45,1.702,47,0.148,49,0.594,112,1.772,138,4.079,139,3.453,174,4.98,232,0.078,233,0.124,234,0.915,236,1.288,237,1.857,241,0.005,242,0.005,243,1.038,245,1.246,247,1.748,249,0.23,250,1.971,260,0.96,263,3.316,264,3.184,269,2.746,280,1.169,289,3.085,318,2.176,319,3.824,321,3.527,322,2.471,323,3.055,324,1.748,325,0.777,326,1.963,333,3.649,347,1.674,349,3.545,350,2.832,352,1.834,368,2.62,382,2.011,387,1.399,392,1.415,404,1.366,551,4.501,558,2.303,946,2.528,1493,4.079,1521,5.565,1552,4.056,1623,2.176,1624,2.531,1657,5.862,1658,5.862,1883,2.449,1946,2.449,2501,4.501,2502,3.385,2519,3.256,2520,4.898,2562,5.902,2566,5.572,2999,4.478,3027,3.256,3033,5.862,3092,3.256,3093,4.031,3117,4.898,3142,4.773,3151,4.773,3152,4.031,3153,7.181,3154,8.132,3155,7.181,3156,4.533,3157,4.533,3158,6.266,3159,6.266,3160,4.533,3161,4.533,3162,4.533,3163,5.572,3164,4.533,3165,4.533,3166,4.533,3167,6.266,3168,4.533,3169,4.533,3170,4.533,3171,4.031,3172,4.533,3173,4.533,3174,4.533,3175,4.533,3176,4.533,3177,4.533]],["title/controllers/UserHighlightsController.html",[243,1.071,3178,3.56]],["body/controllers/UserHighlightsController.html",[7,0.007,29,0.041,30,0.041,31,0.033,34,0.868,38,0.49,40,1.55,41,0.871,42,0.459,43,0.728,45,1.607,47,0.138,49,0.341,111,1.364,112,1.684,134,3.821,136,1.625,144,2.985,145,4.604,146,1.696,148,2.709,185,1.99,232,0.045,233,0.071,234,0.526,236,0.536,237,0.772,241,0.003,242,0.003,243,0.597,245,0.716,247,1.004,249,0.132,250,2.025,260,1.026,263,3.447,264,4.365,269,2.854,276,5.245,280,1.244,281,2.789,284,2.827,287,1.887,289,3.146,312,4.014,316,1.871,317,2.17,318,1.25,319,3.789,320,3.097,321,3.391,322,2.938,323,3.103,324,1.004,325,0.446,326,1.128,347,0.962,349,3.677,350,3.027,352,1.503,361,1.301,368,3.402,382,2.086,387,1.333,392,1.446,404,1.048,448,1.407,515,0.983,553,5.36,554,2.699,557,4.789,558,1.323,590,1.559,627,0.716,644,0.922,645,0.983,680,2.182,737,1.711,791,5.769,793,1.871,1005,3.933,1006,5.467,1481,2.977,1595,5.234,1619,4.484,1623,1.25,1624,3.587,1654,3.583,1862,3.933,1871,4.895,1876,2.316,1877,2.316,1878,3.686,1879,2.316,1881,4.007,1883,2.239,1884,3.221,1886,1.984,1891,2.316,1894,2.316,1895,2.316,1896,2.316,1932,2.126,1939,2.316,1946,1.407,1954,2.126,1956,2.316,2514,3.832,2520,2.827,2562,3.158,2657,1.625,2665,1.696,2997,1.984,2999,4.548,3007,2.126,3009,3.832,3027,1.871,3076,4.591,3178,3.158,3179,2.316,3180,2.605,3181,6.425,3182,4.591,3183,6.425,3184,6.425,3185,6.425,3186,6.425,3187,6.425,3188,6.425,3189,6.425,3190,2.605,3191,6.625,3192,2.605,3193,2.605,3194,2.605,3195,2.605,3196,6.672,3197,2.605,3198,4.145,3199,5.886,3200,2.605,3201,5.163,3202,2.605,3203,4.145,3204,2.605,3205,2.605,3206,2.605,3207,2.605,3208,2.605,3209,2.605,3210,2.605,3211,2.605,3212,2.605,3213,5.886,3214,4.145,3215,2.605,3216,2.605,3217,2.605,3218,2.605,3219,2.605,3220,2.605,3221,2.605,3222,2.605,3223,2.316,3224,2.605,3225,5.163,3226,2.316,3227,2.316,3228,2.605,3229,2.605,3230,2.605,3231,2.605,3232,2.316,3233,5.163,3234,2.605,3235,2.605,3236,2.605,3237,2.605,3238,2.605,3239,2.605,3240,2.605,3241,2.605,3242,4.145,3243,2.605,3244,2.605,3245,2.605,3246,2.605,3247,2.605,3248,2.605,3249,2.605,3250,2.605,3251,2.605]],["title/injectables/UserHighlightsService.html",[443,0.862,1884,2.916]],["body/injectables/UserHighlightsService.html",[7,0.007,29,0.041,30,0.041,31,0.033,34,0.865,38,0.529,40,1.649,41,0.926,42,0.429,43,0.775,45,1.71,47,0.138,49,0.34,52,0.741,64,0.639,112,0.762,128,1.834,134,2.308,136,1.619,144,2.977,145,3.879,146,1.69,165,1.225,182,1.975,185,2.333,232,0.045,233,0.071,234,0.835,236,1.059,241,0.003,242,0.003,249,0.261,250,2.06,269,2.231,280,1.249,289,3.098,352,2.321,361,1.51,364,3.089,368,2.389,378,1.359,382,2.287,387,1.615,404,1.204,443,0.762,448,1.402,484,2.819,485,2.969,486,2.579,487,2.969,508,0.864,512,2.977,515,1.943,518,2.634,565,0.882,581,1.056,590,2.274,626,1.526,627,1.136,634,3.353,636,2.124,639,1.69,642,4.006,643,1.071,644,0.919,645,0.979,648,3.879,649,1.402,652,3.835,660,3.213,661,3.213,662,3.577,663,2.308,664,2.308,665,2.876,675,1.556,757,1.5,791,4.219,793,1.864,794,1.864,799,0.958,858,2.607,874,2.674,876,2.617,922,1.984,925,2.233,949,1.667,1006,1.977,1054,1.463,1191,1.864,1277,3.523,1441,2.118,1458,3.675,1459,2.308,1520,3.374,1529,3.675,1674,3.089,1692,1.556,1696,2.617,1701,2.819,1720,3.471,1863,4.58,1866,2.308,1871,4.006,1883,2.233,1884,2.579,1975,2.977,1990,2.1,2000,2.308,2052,3.924,2061,2.118,2302,2.118,2304,3.675,2367,2.118,2388,2.308,2440,2.308,2486,2.308,2502,1.402,2657,1.619,2660,1.77,2665,1.69,2999,4.856,3123,4.471,3131,5.703,3135,1.977,3191,7.135,3196,7.23,3226,2.308,3227,2.308,3252,2.308,3253,5.151,3254,5.151,3255,5.151,3256,5.151,3257,5.151,3258,5.151,3259,5.151,3260,2.595,3261,5.151,3262,2.595,3263,4.133,3264,2.595,3265,2.595,3266,2.595,3267,5.703,3268,2.595,3269,2.595,3270,2.595,3271,2.595,3272,2.595,3273,2.595,3274,2.595,3275,2.595,3276,2.595,3277,2.595,3278,6.414,3279,2.595,3280,2.595,3281,2.595,3282,2.595,3283,2.595,3284,2.595,3285,2.595,3286,2.595,3287,2.595,3288,3.675,3289,4.133,3290,4.133,3291,4.133,3292,2.595,3293,2.595,3294,2.595,3295,4.133,3296,2.595,3297,4.133,3298,4.133,3299,4.133,3300,2.595,3301,4.133,3302,2.595,3303,2.595,3304,2.595,3305,2.595,3306,2.595,3307,2.595,3308,2.595,3309,2.595,3310,2.595,3311,2.595,3312,2.595,3313,2.595,3314,2.595,3315,2.595,3316,2.595,3317,2.595,3318,2.595,3319,2.595,3320,2.595,3321,2.595,3322,2.595,3323,2.595,3324,2.595,3325,2.595,3326,2.595,3327,2.595,3328,2.595,3329,5.151,3330,2.595,3331,2.595,3332,5.151,3333,5.151,3334,2.595,3335,4.133,3336,5.151,3337,2.595,3338,2.595,3339,4.133,3340,2.595,3341,2.595]],["title/controllers/UserInsightMemberController.html",[243,1.071,2045,3.56]],["body/controllers/UserInsightMemberController.html",[7,0.007,29,0.049,30,0.049,31,0.04,34,1.01,38,0.417,40,1.32,41,0.741,42,0.437,43,0.62,45,1.369,47,0.151,49,0.415,107,3.379,112,0.889,140,3.805,141,2.409,148,2.134,181,1.168,185,2.243,232,0.054,233,0.087,234,0.639,236,1.202,237,1.429,241,0.003,242,0.003,243,0.725,245,0.869,247,1.22,249,0.16,250,1.894,260,0.874,263,3.136,269,2.596,276,5.185,280,1.218,281,3.158,284,3.289,286,2.059,287,1.44,289,3.01,316,2.272,317,1.656,318,1.518,319,3.474,320,3.505,321,3.204,322,2.775,323,2.775,324,1.22,325,0.542,326,1.369,333,2.969,334,2.272,347,1.168,349,3.227,350,2.578,352,2.215,361,1.445,364,1.897,382,2.454,387,1.138,392,1.338,404,1.136,448,1.709,515,2.656,553,4.627,554,2.059,557,4.079,558,1.607,587,1.012,590,1.278,627,0.869,644,1.12,645,1.193,680,2.038,681,1.44,682,1.518,683,1.404,684,1.518,739,4.654,755,2.059,760,6.057,762,6.069,1054,1.707,1086,3.674,1087,2.272,1088,2.813,1091,3.805,1099,2.813,1549,3.139,1552,2.525,1623,1.518,1624,1.766,1654,3.423,1675,3.139,1881,3.93,1933,3.936,1936,4.452,1940,3.289,1944,5.362,1946,1.709,1947,2.272,1949,2.272,1950,3.505,1951,2.059,1953,2.582,1955,3.936,1959,3.805,1962,5.197,1964,4.288,1966,6.259,1973,2.813,1977,6.491,1986,2.813,1988,2.409,2022,4.459,2045,3.674,2049,2.582,2068,2.582,2173,3.464,2502,1.709,2514,3.139,2657,1.973,2941,6.206,2943,5.745,2944,4.8,3009,3.139,3075,3.936,3342,5.745,3343,2.813,3344,2.813,3345,5.197,3346,7.038,3347,3.163,3348,3.163,3349,4.822,3350,4.822,3351,4.822,3352,5.845,3353,3.163,3354,2.813,3355,3.163,3356,4.288,3357,3.163,3358,3.163,3359,3.163,3360,7.417,3361,3.163,3362,3.163,3363,3.163,3364,3.163,3365,2.813,3366,3.163,3367,3.163,3368,4.288,3369,4.822,3370,2.813,3371,3.163,3372,3.163,3373,4.822,3374,4.822,3375,6.259,3376,6.259,3377,3.163,3378,3.163,3379,6.595,3380,4.822,3381,3.163,3382,3.163,3383,3.163,3384,4.822,3385,3.163,3386,3.163,3387,3.163,3388,3.163,3389,3.163,3390,4.822,3391,4.822,3392,4.822,3393,4.822,3394,3.163,3395,3.163,3396,3.163,3397,3.163,3398,3.163,3399,3.163,3400,3.163]],["title/controllers/UserInsightsController.html",[243,1.071,2044,3.56]],["body/controllers/UserInsightsController.html",[7,0.007,29,0.056,30,0.056,31,0.045,34,1.116,38,0.404,40,1.278,41,0.845,42,0.435,43,0.601,45,1.325,47,0.153,49,0.474,107,4.039,112,1.526,148,1.74,185,2.267,232,0.062,233,0.099,234,0.73,236,1.302,237,1.579,241,0.004,242,0.004,243,0.828,245,0.993,247,1.394,249,0.183,250,1.867,260,0.847,263,3.075,264,3.55,269,2.546,276,5.163,280,1.107,281,3.42,284,3.635,287,2.882,289,3.016,312,3.635,316,2.596,317,2.79,318,1.735,319,3.449,320,3.797,321,3.181,322,2.756,323,2.756,324,1.394,325,0.619,326,1.565,347,1.334,349,3.125,350,2.497,352,2.158,361,1.399,366,2.167,382,2.258,384,2.167,385,2.753,387,1.233,392,1.312,404,0.97,448,1.952,515,2.389,553,4.36,554,2.353,556,4.06,557,3.95,558,1.836,581,1.785,587,2.385,590,1.412,627,0.993,644,1.279,645,1.364,680,2.252,681,1.645,682,1.735,683,1.604,684,1.735,733,5.944,736,4.06,737,2.885,739,4.397,1054,1.279,1069,3.213,1082,4.36,1214,3.213,1370,2.753,1548,2.596,1549,3.469,1552,2.79,1623,1.735,1654,1.892,1675,2.353,1881,2.975,1933,5.168,1941,4.739,1942,6.069,1944,4.06,1946,1.952,1947,2.596,1948,4.35,1949,2.596,1950,3.797,1951,2.353,1953,2.95,1955,4.35,1959,4.122,2022,4.766,2023,3.635,2044,4.06,2047,2.753,2049,2.95,2068,2.95,2514,3.469,2770,2.95,2943,2.95,2944,2.465,3007,2.95,3009,4.122,3075,4.35,3182,6.626,3223,3.213,3232,3.213,3342,5.704,3344,3.213,3345,6.626,3354,3.213,3365,3.213,3368,4.739,3370,3.213,3375,3.213,3376,3.213,3379,4.739,3401,3.213,3402,7.452,3403,3.614,3404,3.614,3405,3.614,3406,3.614,3407,3.614,3408,3.614,3409,3.614,3410,5.329,3411,3.614,3412,3.614,3413,3.614,3414,5.329,3415,3.614,3416,5.329,3417,3.614,3418,3.614,3419,3.614,3420,3.614,3421,3.614,3422,3.614,3423,3.614,3424,3.614,3425,3.614,3426,3.614,3427,3.614,3428,3.614,3429,3.614,3430,5.329,3431,3.614,3432,3.614,3433,3.614,3434,3.614,3435,3.614,3436,3.614,3437,3.614,3438,3.614,3439,3.614,3440,3.614,3441,3.614,3442,3.614,3443,3.614,3444,3.614,3445,3.614]],["title/modules/UserModule.html",[0,1.194,23,2.702]],["body/modules/UserModule.html",[0,1.584,2,1.685,3,2.445,7,0.007,16,5.45,17,4.674,23,5.619,26,2.501,27,1.801,28,1.685,29,0.07,30,0.07,31,0.056,33,2.56,47,0.166,49,0.585,51,2.033,52,1.274,78,2.907,80,2.501,81,2.269,82,2.977,111,2.338,112,1.64,128,1.982,129,2.338,130,3.645,134,3.462,136,2.786,138,4.037,139,3.402,144,3.585,145,2.204,146,2.907,150,4.454,151,2.581,152,4.037,153,3.402,154,4.037,155,3.402,157,3.719,158,3.645,165,1.323,231,2.685,232,0.077,233,0.122,241,0.004,242,0.004,245,1.705,333,4.661,427,2.823,583,2.269,1420,2.907,1625,5.723,1669,3.971,1883,4.522,1884,5.723,1886,3.402,1900,3.971,2213,5.021,2223,3.045,2224,3.207,2318,4.803,2319,2.907,2998,5.427,3023,5.709,3024,3.971,3067,5.864,3092,3.207,3101,5.427,3111,3.971,3117,6.257,3123,5.222,3135,3.402,3151,5.427,3171,3.971,3178,5.864,3446,3.971,3447,4.465,3448,3.971,3449,3.971,3450,4.465,3451,5.427,3452,4.465,3453,4.465,3454,4.465,3455,4.465]],["title/controllers/UserNotificationController.html",[243,1.071,3451,3.56]],["body/controllers/UserNotificationController.html",[7,0.007,29,0.091,30,0.091,31,0.073,34,1.552,38,0.373,40,1.18,41,0.663,42,0.39,43,0.554,45,1.223,47,0.16,49,0.766,112,1.58,152,4.827,153,4.45,232,0.1,233,0.16,234,1.18,236,1.201,241,0.005,242,0.005,243,1.338,245,1.606,247,2.253,249,0.296,250,1.8,260,0.781,263,2.924,264,3.767,269,2.421,276,4.626,280,1.068,289,2.854,312,3.984,318,2.804,319,3.66,321,3.375,322,2.924,323,2.924,324,2.253,325,1.001,326,2.529,347,2.157,349,2.884,350,2.304,387,1.138,392,0.983,558,2.968,590,2.461,626,2.157,627,1.606,644,2.068,645,2.204,680,3.134,1548,4.196,1619,5.648,1883,3.156,1946,3.156,2999,4.286,3027,4.196,3123,5.082,3135,4.45,3451,5.648,3456,5.195,3457,5.842,3458,8.843,3459,5.842,3460,7.619,3461,5.842,3462,5.842,3463,5.842,3464,5.842]],["title/injectables/UserNotificationService.html",[443,0.862,3123,2.916]],["body/injectables/UserNotificationService.html",[7,0.007,29,0.066,30,0.066,31,0.053,34,1.249,38,0.539,40,1.661,41,0.933,42,0.461,43,0.78,45,1.722,47,0.151,49,0.554,52,1.205,64,1.04,145,2.085,152,2.75,153,3.218,165,1.252,182,1.301,185,2.185,232,0.073,233,0.116,234,1.205,236,1.226,241,0.004,242,0.004,249,0.214,250,2.05,280,1.247,284,2.881,289,2.964,333,4.295,352,2.242,361,0.933,364,4.147,368,2.442,382,2.303,387,1.543,417,5.304,443,1.1,451,3.413,518,2.66,565,1.436,590,2.287,626,2.203,627,1.161,636,2.226,643,1.744,644,1.496,645,1.594,648,3.708,649,2.282,652,2.583,662,3.123,663,2.359,664,2.359,665,2.359,799,2.203,858,3.334,874,1.923,1054,2.448,1277,2.534,1485,6.149,1486,5.644,1487,3.756,1488,3.756,1493,2.75,1504,5.124,1507,3.448,1883,3.223,1975,3.997,1990,3.031,2052,5.268,2999,4.99,3092,3.034,3123,3.721,3127,6.681,3196,6.133,3267,6.681,3288,3.756,3465,3.756,3466,6.915,3467,6.915,3468,6.915,3469,6.915,3470,4.224,3471,4.224,3472,5.965,3473,4.224,3474,4.224,3475,4.224,3476,4.224,3477,4.224,3478,4.224,3479,5.965,3480,4.224,3481,4.224,3482,4.224,3483,4.224,3484,4.224,3485,6.915,3486,4.224,3487,4.224,3488,4.224,3489,4.224,3490,4.224,3491,4.224,3492,4.224,3493,4.224,3494,4.224,3495,4.224,3496,4.224,3497,4.224,3498,4.224,3499,4.224,3500,4.224,3501,5.965,3502,5.965,3503,4.224,3504,6.915,3505,4.224,3506,4.224,3507,4.224,3508,4.224,3509,4.224]],["title/classes/UserOnboardingDto.html",[233,0.128,282,3.357]],["body/classes/UserOnboardingDto.html",[7,0.007,29,0.099,30,0.099,31,0.08,38,0.498,42,0.485,47,0.134,112,1.44,163,4.088,232,0.109,233,0.214,241,0.006,242,0.006,249,0.322,260,1.044,282,5.609,307,6.508,325,1.088,367,3.012,392,1.314,394,6.903,404,1.432,440,1.389,490,3.806,585,1.954,625,2.395,706,3.555,709,2.295,725,3.85,726,3.555,746,5.326,748,5.745,1278,3.959,2165,4.835,2970,7.848,2995,5.18,2997,4.835,3510,7.521,3511,5.643,3512,6.346,3513,6.346,3514,6.346]],["title/classes/UserRepoOptionsDto.html",[233,0.128,3515,3.188]],["body/classes/UserRepoOptionsDto.html",[7,0.007,29,0.095,30,0.095,31,0.076,38,0.554,42,0.457,43,0.888,47,0.104,232,0.104,233,0.166,237,2.774,241,0.005,242,0.005,249,0.308,260,1.162,280,1.086,440,1.35,465,2.995,510,3.269,581,1.55,585,1.868,587,2.431,588,3.177,589,2.746,590,2.453,592,3.858,593,4.24,594,4.092,596,2.435,597,3.586,599,3.388,600,3.388,604,3.177,605,4.24,606,3.278,607,3.388,608,4.85,609,3.508,610,4.092,611,3.083,612,3.388,613,3.508,614,3.388,615,3.508,616,3.858,617,2.913,618,2.913,619,3.388,620,3.388,621,3.508,626,2.241,627,1.668,1512,4.139,3515,5.18,3516,4.953]],["title/classes/UserRepoOptionsDto-1.html",[233,0.107,510,1.535,3515,2.655]],["body/classes/UserRepoOptionsDto-1.html",[7,0.007,29,0.105,30,0.105,31,0.085,38,0.43,42,0.456,47,0.139,163,4.24,232,0.116,233,0.222,237,2.573,241,0.006,242,0.006,249,0.342,260,0.901,280,1.181,285,6.169,325,1.155,392,1.134,440,1.44,585,2.075,625,2.543,706,3.068,709,2.106,725,3.687,737,3.343,748,5.864,989,3.895,1512,5.523,2995,5.5,3009,5.272,3515,5.523,3516,6.61,3517,5.992,3518,8.682,3519,6.738,3520,6.738]],["title/modules/UserReposModule.html",[0,1.194,24,3.188]],["body/modules/UserReposModule.html",[0,2.052,2,2.51,3,3.168,7,0.007,24,6.437,26,3.241,27,2.683,28,2.51,29,0.104,30,0.104,31,0.084,33,2.746,47,0.154,49,0.872,51,3.028,52,1.898,111,3.482,112,1.482,113,4.536,115,5.48,165,1.971,231,3.479,232,0.114,233,0.182,241,0.006,242,0.006,427,3.658,583,3.379,1512,4.536,3521,5.914,3522,5.914,3523,5.914,3524,6.982,3525,6.651,3526,6.651]],["title/injectables/UserReposService.html",[443,0.862,3524,3.357]],["body/injectables/UserReposService.html",[7,0.007,29,0.076,30,0.076,31,0.061,34,1.371,38,0.531,40,1.608,41,0.903,42,0.418,43,0.755,45,1.667,47,0.153,49,0.634,52,1.38,64,1.191,111,2.533,112,0.892,113,5.85,115,4.468,165,1.433,182,1.489,185,2.16,232,0.083,233,0.133,234,1.323,236,0.995,241,0.005,242,0.005,249,0.245,250,1.998,269,2.599,280,1.124,289,2.972,343,4.301,352,2.279,361,1.759,382,2.08,387,1.551,404,1.138,443,1.208,515,1.825,518,1.713,565,1.644,581,2.033,590,1.968,626,1.786,627,1.33,636,2.359,643,1.997,644,1.713,645,1.825,648,3.93,649,2.613,652,3.447,660,3.018,661,3.018,662,3.43,663,2.701,664,2.701,665,2.701,703,2.26,745,5.183,753,3.149,754,3.948,757,2.796,858,3.534,874,2.202,876,2.458,1054,1.713,1277,2.901,1512,5.85,1674,4.455,1692,2.901,1696,3.328,1720,3.774,1975,4.294,1990,3.328,2036,3.948,2037,4.301,2052,5.659,2061,3.948,3515,5.43,3524,4.705,3527,4.301,3528,7.428,3529,4.837,3530,4.837,3531,6.551,3532,4.837,3533,4.837,3534,4.837,3535,4.837,3536,4.837,3537,4.837,3538,6.551,3539,4.837,3540,4.837,3541,4.837,3542,4.837,3543,4.837]],["title/injectables/UserService.html",[333,2.374,443,0.862]],["body/injectables/UserService.html",[7,0.007,29,0.047,30,0.047,31,0.037,34,0.965,38,0.54,40,1.682,41,0.992,42,0.438,43,0.79,45,1.743,47,0.141,49,0.391,52,0.851,64,0.734,82,3.043,112,1.713,163,3.319,165,0.884,174,3.539,181,2.081,185,2.421,232,0.051,233,0.082,234,0.931,236,0.613,241,0.003,242,0.003,249,0.151,250,2.076,269,2.548,277,1.86,280,1.209,282,4.553,285,2.272,287,2.886,289,1.535,292,2.434,295,4.553,296,4.553,298,4.471,305,4.553,307,3.311,333,2.342,340,2.652,341,2.652,342,2.652,344,2.652,352,2.045,353,4.276,355,3.763,357,1.078,358,1.203,359,2.652,361,1.99,362,3.763,366,4.53,370,2.272,371,3.763,373,2.272,374,2.272,375,2.272,376,2.272,377,2.272,378,1.561,379,2.272,380,2.272,382,2.398,384,4.53,385,5.754,387,1.56,394,3.511,404,1.227,443,0.85,445,2.142,476,1.789,508,0.993,515,2.734,517,2.876,518,1.995,565,1.013,596,0.776,597,1.231,636,1.878,643,1.231,652,2.745,799,1.101,858,2.813,874,2.565,876,2.863,925,1.611,949,1.203,1013,1.86,1054,1.056,1277,4.345,1360,2.876,1420,1.941,1425,2.272,1504,3.843,1507,2.434,1508,2.652,1674,3.379,1692,1.789,1696,2.863,1717,2.434,1720,4.295,1883,1.611,1947,4.047,1975,3.257,1990,2.342,2240,2.652,2989,2.652,2990,2.652,3544,2.652,3545,5.634,3546,5.634,3547,5.634,3548,5.634,3549,5.634,3550,5.634,3551,5.634,3552,5.634,3553,5.634,3554,2.982,3555,2.982,3556,4.609,3557,2.982,3558,2.982,3559,2.982,3560,2.982,3561,2.982,3562,6.339,3563,2.982,3564,2.982,3565,2.982,3566,2.982,3567,2.982,3568,2.982,3569,2.982,3570,2.982,3571,2.982,3572,2.982,3573,2.982,3574,2.982,3575,2.982,3576,2.982,3577,2.982,3578,2.982,3579,2.982,3580,2.982,3581,2.982,3582,2.982,3583,2.982,3584,2.982,3585,2.982,3586,2.982,3587,2.982,3588,2.982,3589,4.609,3590,2.982,3591,2.982,3592,2.982,3593,2.982,3594,2.982,3595,2.982,3596,2.982,3597,7.245,3598,4.609,3599,2.982,3600,2.982,3601,2.982,3602,2.982,3603,2.982,3604,2.652,3605,2.982,3606,2.982,3607,7.245,3608,2.982,3609,2.982,3610,2.982,3611,2.982,3612,2.982,3613,2.982,3614,2.982,3615,2.982,3616,4.609,3617,2.982,3618,2.982,3619,6.339,3620,4.609,3621,2.982,3622,2.982,3623,2.982,3624,2.982]],["title/modules/VoteModule.html",[0,1.194,25,3.357]],["body/modules/VoteModule.html",[0,1.992,2,2.39,3,3.076,7,0.007,17,5.149,25,6.831,26,3.146,27,2.555,28,2.39,29,0.099,30,0.099,31,0.08,33,3.22,47,0.16,49,0.83,51,2.884,52,1.808,78,4.124,80,3.146,81,3.219,86,4.678,87,4.826,165,1.877,231,3.377,232,0.109,233,0.174,241,0.006,242,0.006,245,2.144,427,3.551,581,1.618,583,3.219,2605,6.438,2631,6.59,2632,5.633,3625,5.633,3626,5.633,3627,6.335,3628,5.633,3629,6.335,3630,6.335]],["title/injectables/VoteService.html",[443,0.862,2631,3.188]],["body/injectables/VoteService.html",[7,0.007,29,0.081,30,0.081,31,0.065,34,1.435,38,0.522,40,1.552,41,0.872,42,0.404,43,0.729,45,1.609,47,0.141,49,0.679,52,1.478,64,1.275,86,3.106,87,3.945,165,1.534,185,2.235,232,0.089,233,0.142,234,1.385,236,1.065,241,0.005,242,0.005,249,0.263,250,1.933,269,2.672,280,1.231,289,3.108,352,2.174,382,2.292,387,1.594,443,1.265,515,2.901,565,1.76,581,1.751,636,2.425,640,6.586,643,2.138,652,3.543,703,2.42,858,3.632,874,3.121,876,3.484,1054,1.833,1335,3.945,1696,2.631,1990,3.484,2502,3.704,2503,3.532,2623,5.597,2631,4.677,2657,3.23,2660,3.532,2665,4.464,2668,3.719,3631,4.604,3632,7.687,3633,7.687,3634,5.178,3635,5.178,3636,6.857,3637,5.178,3638,5.178,3639,5.178,3640,5.178,3641,5.178,3642,5.178,3643,5.178,3644,6.857,3645,6.857,3646,6.857,3647,8.747,3648,6.857,3649,5.178,3650,5.178,3651,5.178]],["title/changelog.html",[3652,2.965,3653,3.177,3654,3.461]],["body/changelog.html",[3,1.916,7,0.007,28,0.236,31,0.036,40,0.238,41,0.507,42,0.111,43,0.112,62,1.047,64,0.787,80,0.475,82,0.565,84,0.706,86,1.266,88,1.266,90,1.266,92,1.266,112,1.581,119,0.735,128,3.215,145,1.577,148,1.697,151,2.585,161,1.047,174,1.178,178,4.045,182,1.55,184,0.803,185,1.359,210,1.272,212,1.266,224,0.735,225,1.723,226,0.803,229,2.185,230,0.476,236,0.59,241,0.001,242,0.001,243,0.921,248,3.356,260,0.158,264,2.641,265,3.65,273,1.047,277,0.39,285,2.185,286,1.867,287,3.524,292,0.961,298,1.178,299,1.877,307,1.516,311,2.852,328,3.616,347,1.485,353,0.735,357,1.037,361,0.634,365,1.047,367,0.385,368,3.529,369,2.341,370,0.897,378,0.327,387,0.411,392,0.355,438,0.767,440,0.977,444,0.846,449,3.876,457,1.516,463,0.846,476,1.266,478,2.047,480,2.047,484,2.383,492,1.44,500,2.082,503,5.121,508,1.919,510,0.247,512,2.325,517,1.565,528,0.681,534,0.961,550,1.801,562,3.723,581,1.877,587,1.119,592,1.274,594,0.581,596,0.306,597,0.689,616,2.043,628,0.681,629,1.956,631,0.706,636,0.947,668,2.06,674,1.516,675,1.72,680,1.212,683,0.937,737,3.24,738,0.617,739,2.903,740,0.897,755,0.407,757,1.22,758,1.212,762,0.846,788,1.272,793,0.846,795,2.185,799,1.059,800,5.676,801,4.388,802,1.593,812,1.22,820,0.51,902,0.464,908,1.047,920,1.557,925,0.338,929,1.22,938,1.41,940,1.608,941,1.086,944,1.184,949,0.674,955,1.608,956,0.897,965,3.736,966,3.196,967,2.106,986,1.608,990,2.047,1009,0.961,1010,1.956,1011,1.608,1043,1.608,1045,2.662,1049,0.846,1054,0.417,1061,0.846,1074,2.434,1076,0.803,1082,2.655,1091,0.767,1103,4.388,1117,0.735,1139,0.961,1175,0.556,1191,0.846,1222,1.047,1258,2.55,1273,1.047,1283,0.961,1301,0.897,1316,1.047,1317,0.51,1335,2.185,1357,3.835,1360,1.993,1370,0.476,1390,1.047,1406,3.352,1425,1.608,1486,0.961,1491,0.961,1493,0.767,1497,1.047,1499,0.556,1511,1.047,1549,1.374,1608,0.361,1624,1.178,1635,0.51,1637,0.846,1675,4.166,1722,0.897,1723,1.047,1736,0.556,1741,1.867,1782,0.961,1788,2.23,1805,7.665,1807,1.047,1813,0.556,1833,5.428,1862,0.897,1904,4.187,1911,0.961,1936,0.897,2106,2.889,2131,1.047,2136,2.55,2163,1.877,2173,0.846,2347,1.199,2393,1.877,2415,0.476,2418,0.476,2459,0.961,2510,0.961,2562,0.476,2587,1.047,2597,0.961,2623,0.961,2714,5.23,2785,1.047,2820,0.51,2871,1.516,2897,0.961,2910,1.047,2944,0.803,2954,1.877,2976,1.485,3009,6.155,3013,1.047,3106,1.047,3163,1.485,3356,2.55,3460,1.877,3604,1.877,3652,0.476,3654,1.485,3655,1.047,3656,1.67,3657,3.769,3658,1.67,3659,2.23,3660,5.199,3661,8.732,3662,1.178,3663,1.178,3664,1.178,3665,1.178,3666,8.678,3667,7.663,3668,2.111,3669,1.178,3670,1.178,3671,2.868,3672,1.178,3673,1.178,3674,1.178,3675,3.494,3676,1.178,3677,1.178,3678,1.178,3679,2.868,3680,4.022,3681,7.07,3682,3.494,3683,5.632,3684,7.13,3685,2.23,3686,1.67,3687,3.107,3688,1.178,3689,1.178,3690,1.178,3691,1.178,3692,1.178,3693,2.868,3694,1.178,3695,3.494,3696,1.178,3697,1.178,3698,1.67,3699,4.255,3700,1.178,3701,1.178,3702,1.178,3703,1.178,3704,2.508,3705,1.178,3706,1.178,3707,1.178,3708,4.022,3709,1.178,3710,1.178,3711,1.178,3712,1.178,3713,1.178,3714,1.178,3715,4.673,3716,2.508,3717,4.255,3718,2.111,3719,5.035,3720,5.035,3721,2.55,3722,2.111,3723,2.111,3724,2.111,3725,2.111,3726,2.111,3727,2.111,3728,6.883,3729,2.868,3730,2.868,3731,3.976,3732,2.868,3733,2.868,3734,2.868,3735,3.195,3736,2.868,3737,2.868,3738,1.67,3739,2.868,3740,2.111,3741,6.653,3742,6.875,3743,1.877,3744,1.178,3745,1.178,3746,1.178,3747,1.178,3748,1.178,3749,1.047,3750,1.178,3751,1.178,3752,9.067,3753,2.868,3754,2.111,3755,7.13,3756,2.111,3757,1.178,3758,1.178,3759,2.111,3760,1.178,3761,1.178,3762,2.111,3763,2.111,3764,2.868,3765,2.111,3766,2.868,3767,2.111,3768,2.508,3769,2.508,3770,2.55,3771,2.868,3772,6.804,3773,1.178,3774,1.723,3775,2.111,3776,3.976,3777,2.868,3778,3.494,3779,2.868,3780,2.868,3781,2.868,3782,2.868,3783,2.111,3784,2.111,3785,1.178,3786,1.178,3787,2.111,3788,1.178,3789,2.841,3790,2.868,3791,2.868,3792,1.178,3793,1.178,3794,1.178,3795,5.035,3796,3.494,3797,2.111,3798,2.868,3799,2.111,3800,1.67,3801,1.67,3802,1.67,3803,1.67,3804,1.67,3805,1.178,3806,2.868,3807,1.178,3808,2.111,3809,4.022,3810,1.178,3811,1.178,3812,0.846,3813,1.178,3814,1.178,3815,1.178,3816,1.178,3817,1.178,3818,1.178,3819,1.178,3820,1.178,3821,1.178,3822,2.111,3823,2.111,3824,2.508,3825,6.73,3826,3.195,3827,1.67,3828,3.769,3829,5.352,3830,1.67,3831,5.76,3832,1.178,3833,1.047,3834,1.178,3835,1.178,3836,1.178,3837,1.178,3838,1.67,3839,0.625,3840,4.155,3841,1.178,3842,1.178,3843,2.111,3844,1.178,3845,1.178,3846,0.625,3847,2.508,3848,1.178,3849,1.178,3850,1.877,3851,1.178,3852,1.178,3853,1.178,3854,1.178,3855,1.178,3856,1.178,3857,1.178,3858,2.111,3859,0.625,3860,0.625,3861,0.625,3862,1.178,3863,0.625,3864,0.625,3865,0.625,3866,1.178,3867,1.178,3868,1.178,3869,0.625,3870,4.477,3871,1.67,3872,0.625,3873,0.625,3874,2.111,3875,0.625,3876,0.625,3877,1.178,3878,1.178,3879,1.178,3880,1.178,3881,1.178,3882,1.178,3883,0.625,3884,0.625,3885,0.625,3886,0.625,3887,2.111,3888,3.576,3889,3.195,3890,2.508,3891,2.508,3892,2.508,3893,2.508,3894,5.496,3895,2.508,3896,2.508,3897,2.508,3898,2.23,3899,2.55,3900,2.508,3901,2.508,3902,2.508,3903,3.195,3904,4.673,3905,2.508,3906,3.195,3907,2.508,3908,2.111,3909,2.111,3910,2.111,3911,2.111,3912,2.111,3913,2.111,3914,2.111,3915,2.111,3916,2.111,3917,1.67,3918,1.67,3919,2.111,3920,2.111,3921,3.107,3922,2.111,3923,2.111,3924,2.111,3925,2.111,3926,2.111,3927,2.111,3928,4.673,3929,4.673,3930,2.508,3931,2.508,3932,1.178,3933,1.178,3934,2.111,3935,2.111,3936,1.178,3937,1.178,3938,2.111,3939,2.111,3940,2.111,3941,2.111,3942,3.107,3943,2.508,3944,4.322,3945,2.508,3946,2.111,3947,1.178,3948,1.178,3949,1.178,3950,1.67,3951,1.485,3952,1.178,3953,1.178,3954,0.625,3955,5.035,3956,4.022,3957,0.625,3958,0.625,3959,7.188,3960,0.625,3961,0.625,3962,1.178,3963,1.178,3964,1.178,3965,4.86,3966,2.111,3967,2.508,3968,2.111,3969,4.472,3970,3.494,3971,2.111,3972,2.868,3973,4.472,3974,2.111,3975,2.111,3976,2.111,3977,4.673,3978,2.55,3979,2.111,3980,2.111,3981,2.111,3982,1.178,3983,1.178,3984,4.29,3985,1.178,3986,0.625,3987,1.178,3988,1.67,3989,0.625,3990,0.625,3991,1.67,3992,2.868,3993,1.178,3994,1.178,3995,1.178,3996,1.178,3997,0.625,3998,1.178,3999,1.178,4000,1.178,4001,1.178,4002,1.178,4003,2.508,4004,1.178,4005,1.178,4006,1.178,4007,4.022,4008,1.178,4009,1.178,4010,1.178,4011,1.178,4012,1.178,4013,1.178,4014,1.047,4015,1.178,4016,1.67,4017,1.67,4018,1.178,4019,1.178,4020,1.178,4021,1.178,4022,1.178,4023,1.178,4024,2.111,4025,1.178,4026,1.178,4027,1.178,4028,1.178,4029,1.178,4030,1.178,4031,1.178,4032,1.178,4033,1.178,4034,2.111,4035,1.178,4036,1.178,4037,1.178,4038,1.178,4039,0.625,4040,1.67,4041,4.86,4042,2.111,4043,1.178,4044,1.178,4045,1.178,4046,1.178,4047,1.178,4048,1.178,4049,3.494,4050,1.178,4051,1.178,4052,1.178,4053,1.178,4054,1.178,4055,1.178,4056,3.352,4057,1.178,4058,1.178,4059,1.047,4060,1.178,4061,1.178,4062,1.178,4063,1.178,4064,1.67,4065,4.29,4066,1.877,4067,1.178,4068,1.178,4069,1.178,4070,1.178,4071,1.178,4072,1.178,4073,0.625,4074,2.111,4075,1.178,4076,1.178,4077,1.178,4078,1.178,4079,1.178,4080,1.178,4081,1.178,4082,1.178,4083,1.178,4084,2.508,4085,1.178,4086,1.178,4087,3.576,4088,1.178,4089,1.178,4090,1.178,4091,2.111,4092,1.178,4093,1.178,4094,1.178,4095,1.178,4096,1.178,4097,1.178,4098,1.178,4099,1.67,4100,2.508,4101,1.178,4102,1.485,4103,1.178,4104,3.494,4105,1.178,4106,0.625,4107,1.047,4108,1.178,4109,1.178,4110,2.111,4111,1.178,4112,1.178,4113,2.868,4114,1.178,4115,1.047,4116,1.178,4117,1.178,4118,1.178,4119,1.178,4120,1.178,4121,1.178,4122,1.178,4123,1.047,4124,2.111,4125,1.178,4126,1.485,4127,2.111,4128,1.178,4129,1.178,4130,1.178,4131,1.178,4132,1.178,4133,1.178,4134,1.178,4135,5.76,4136,2.508,4137,3.195,4138,2.508,4139,1.178,4140,1.178,4141,0.961,4142,1.178,4143,1.178,4144,1.178,4145,1.178,4146,1.178,4147,1.178,4148,1.178,4149,1.178,4150,1.178,4151,1.178,4152,1.178,4153,1.178,4154,1.178,4155,1.178,4156,1.178,4157,1.178,4158,1.178,4159,1.178,4160,1.178,4161,1.178,4162,2.868,4163,1.178,4164,1.178,4165,1.178,4166,1.178,4167,1.178,4168,1.178,4169,1.047,4170,2.111,4171,1.178,4172,1.67,4173,1.67,4174,1.178,4175,1.047,4176,1.178,4177,1.178,4178,1.178,4179,1.178,4180,2.111,4181,1.178,4182,1.178,4183,1.178,4184,1.178,4185,1.178,4186,1.178,4187,1.178,4188,1.67,4189,1.178,4190,1.178,4191,1.178,4192,1.178,4193,1.178,4194,5.199,4195,1.178,4196,1.178,4197,1.178,4198,1.178,4199,1.178,4200,1.178,4201,1.178,4202,1.178,4203,1.178,4204,1.178,4205,1.178,4206,1.178,4207,1.178,4208,1.178,4209,2.868,4210,0.961,4211,1.178,4212,1.178,4213,1.877,4214,1.178,4215,1.178,4216,1.877,4217,1.178,4218,1.178,4219,1.178,4220,1.178,4221,1.178,4222,1.178,4223,1.178,4224,2.508,4225,1.178,4226,1.178,4227,1.178,4228,1.178,4229,1.178,4230,1.178,4231,1.178,4232,1.67,4233,2.111,4234,1.178,4235,0.625,4236,0.625,4237,0.625,4238,0.625,4239,0.625,4240,0.625,4241,0.625,4242,0.625,4243,0.625,4244,0.625,4245,0.625,4246,0.625,4247,0.625,4248,0.625,4249,2.868,4250,1.877,4251,2.111,4252,1.178,4253,1.178,4254,1.178,4255,1.178,4256,1.178,4257,1.178,4258,1.178,4259,2.868,4260,1.178,4261,1.178,4262,0.625,4263,0.625,4264,0.625,4265,3.784,4266,0.625,4267,0.625,4268,0.625,4269,0.625,4270,0.625,4271,0.625,4272,2.841,4273,0.625,4274,0.625,4275,0.625,4276,0.625,4277,0.961,4278,0.625,4279,0.625,4280,0.625,4281,0.625,4282,0.625,4283,0.625,4284,0.625,4285,0.625,4286,0.556,4287,1.047,4288,0.625,4289,0.625,4290,0.625,4291,0.625,4292,3.352,4293,0.625,4294,0.625,4295,0.625,4296,0.556,4297,0.625,4298,0.625,4299,0.556,4300,0.556,4301,0.625,4302,0.625,4303,0.625,4304,0.625,4305,0.625,4306,0.625,4307,0.625,4308,3.107,4309,0.625,4310,0.625,4311,0.625,4312,0.625,4313,1.178,4314,0.625,4315,0.625,4316,0.625,4317,0.625,4318,0.625,4319,0.625,4320,0.625,4321,1.178,4322,0.51,4323,0.625,4324,0.625,4325,0.625,4326,0.625,4327,0.625,4328,0.625,4329,0.625,4330,0.625,4331,0.625,4332,0.625,4333,0.625,4334,0.625,4335,0.625,4336,0.625,4337,0.625,4338,0.625,4339,0.625,4340,0.625,4341,0.625,4342,0.625,4343,0.625,4344,0.625,4345,1.485,4346,0.625,4347,0.625,4348,0.625,4349,0.625,4350,0.625,4351,0.625,4352,0.625,4353,0.625,4354,0.625,4355,0.625,4356,0.625,4357,0.625,4358,0.625,4359,0.625,4360,1.67,4361,0.625,4362,0.625,4363,0.625,4364,0.625,4365,0.625,4366,0.625,4367,0.625,4368,0.625,4369,0.625,4370,0.51,4371,0.625,4372,0.625,4373,0.625,4374,0.625,4375,0.625,4376,0.625,4377,0.625,4378,0.625,4379,0.625,4380,1.178,4381,0.625,4382,1.047,4383,0.625,4384,0.625,4385,0.625,4386,1.178,4387,1.178,4388,0.625,4389,1.67,4390,0.625,4391,0.625,4392,1.178,4393,0.625,4394,0.625,4395,0.625,4396,0.625,4397,0.625,4398,0.625,4399,0.625,4400,0.625,4401,0.625,4402,0.625,4403,0.625,4404,0.625,4405,1.178,4406,0.625,4407,0.625,4408,0.625,4409,0.625,4410,0.556,4411,0.625,4412,0.625,4413,0.625,4414,0.625,4415,0.625,4416,0.625,4417,0.625,4418,0.625,4419,0.625,4420,0.625,4421,0.625,4422,0.625,4423,0.625,4424,0.625,4425,0.625,4426,0.625,4427,0.625,4428,0.625,4429,0.625,4430,0.556,4431,0.625,4432,0.625,4433,0.625,4434,0.625,4435,0.625,4436,0.625,4437,0.625,4438,0.625,4439,0.625,4440,0.625,4441,0.625]],["title/coverage.html",[4442,5.224]],["body/coverage.html",[7,0.007,31,0.032,42,0.133,71,2.068,72,2.068,73,2.068,74,2.068,75,2.068,76,2.068,80,1.022,82,1.216,84,1.519,86,1.519,88,1.519,90,1.519,92,1.519,101,1.93,104,1.93,107,1.464,109,1.649,112,1.247,113,2.765,115,1.728,116,1.728,124,1.728,126,1.728,128,1.124,129,3.539,131,1.519,132,2.765,134,1.414,138,1.649,140,1.649,142,1.58,144,1.464,145,2.001,147,1.649,148,2.483,150,1.819,151,1.464,152,1.649,154,1.649,157,1.519,185,0.737,233,0.256,241,0.003,242,0.003,243,2.075,244,1.93,246,2.253,248,1.819,282,1.819,289,0.844,295,1.819,296,1.819,298,1.414,305,1.819,326,1.097,330,1.93,333,1.287,335,1.649,337,1.649,369,2.068,425,1.819,433,3.04,434,2.639,436,3.791,437,3.861,438,3.772,439,3.309,443,1.701,447,1.728,449,1.414,453,1.649,522,3.309,523,1.728,525,1.649,542,1.93,543,2.253,576,1.728,578,1.93,581,0.647,584,1.819,586,2.068,587,1.855,588,4.172,590,0.671,631,1.519,633,2.253,644,0.897,648,1.25,666,1.93,667,2.253,671,1.819,678,1.819,681,1.153,683,1.124,685,1.58,687,3.457,698,1.728,699,2.253,700,3.309,733,1.819,734,3.309,735,3.309,739,2.502,745,1.649,760,1.93,761,3.309,768,1.93,769,2.253,770,2.253,775,1.93,776,3.309,777,3.309,791,1.819,792,2.253,815,1.819,816,2.253,817,2.253,826,1.728,856,2.253,879,2.253,880,3.309,920,2.261,921,2.253,925,5.359,951,1.022,995,2.253,1003,2.253,1033,2.253,1051,2.253,1084,3.309,1085,2.253,1114,4.161,1127,2.253,1136,2.253,1167,2.253,1279,2.253,1282,2.253,1300,2.253,1315,2.253,1334,2.253,1349,3.088,1350,2.253,1394,4.257,1395,2.253,1424,2.253,1457,2.253,1481,1.819,1482,2.253,1484,2.253,1504,1.728,1512,3.951,1519,2.253,1544,1.93,1545,2.253,1554,1.728,1565,2.253,1575,1.93,1576,2.253,1625,1.58,1630,1.819,1670,2.253,1722,1.93,1724,2.253,1725,2.253,1739,1.728,1740,2.253,1755,3.309,1756,2.253,1786,2.253,1811,1.93,1812,2.253,1860,1.93,1861,2.253,1871,1.728,1884,1.58,1901,2.253,1903,2.253,1912,2.068,1927,1.93,1928,2.253,1942,1.819,1950,1.519,1959,1.649,1960,3.309,1961,2.253,2008,2.068,2009,3.088,2022,1.728,2023,1.728,2024,2.253,2044,1.93,2045,1.93,2050,2.253,2092,2.253,2105,2.253,2106,1.819,2120,3.861,2121,2.253,2126,1.93,2148,2.253,2166,1.93,2167,2.253,2182,1.819,2186,1.728,2197,1.93,2198,2.253,2209,2.253,2213,1.519,2267,2.253,2305,2.253,2306,2.253,2318,1.326,2329,1.93,2330,2.253,2333,1.464,2337,1.819,2347,1.819,2355,2.068,2357,2.253,2391,3.641,2392,2.253,2423,2.253,2488,1.93,2489,2.253,2490,2.253,2521,1.728,2531,1.93,2532,2.253,2533,2.253,2558,1.728,2569,1.93,2570,2.253,2571,2.253,2595,1.728,2605,1.93,2606,2.253,2607,2.253,2631,1.728,2646,2.253,2676,2.253,2701,2.253,2733,1.728,2737,2.253,2751,1.819,2752,3.861,2755,3.309,2756,3.309,2767,2.068,2769,2.068,2842,2.253,2863,2.253,2864,2.253,2905,2.253,2908,2.253,2933,2.068,2934,2.253,2937,3.309,2941,1.93,2947,1.93,2948,4.161,2953,2.253,2988,2.253,2994,2.253,2998,1.93,2999,4.397,3000,2.253,3023,1.728,3044,2.253,3067,1.93,3068,2.253,3101,1.93,3102,2.253,3117,1.728,3118,2.253,3123,1.58,3151,1.93,3152,2.253,3178,1.93,3179,2.253,3252,2.253,3342,3.309,3343,2.253,3401,2.253,3451,1.93,3456,2.253,3465,2.253,3510,2.253,3511,2.253,3515,2.765,3516,3.309,3517,2.253,3524,1.819,3527,2.253,3544,2.253,3631,2.253,4014,2.253,4065,1.93,4107,2.253,4287,7.428,4442,2.068,4443,2.533,4444,6.76,4445,2.533,4446,8.452,4447,9.453,4448,8.353,4449,3.309,4450,2.253,4451,2.253,4452,6.76,4453,8.452,4454,2.533,4455,5.068,4456,2.253,4457,2.253,4458,2.253,4459,3.605,4460,2.253,4461,2.253,4462,3.605,4463,2.253,4464,2.253,4465,2.253,4466,7.801,4467,8.241,4468,5.068,4469,5.068,4470,2.253,4471,2.253,4472,2.533,4473,2.253,4474,2.068,4475,2.533,4476,2.533,4477,2.533,4478,2.533]],["title/miscellaneous/enumerations.html",[4479,2.429,4480,5.003]],["body/miscellaneous/enumerations.html",[7,0.007,41,0.784,148,2.526,151,3.998,241,0.005,242,0.005,249,0.266,357,3.174,358,3.541,436,2.328,586,4.282,587,2.908,588,4.858,595,5.645,597,4.088,601,4.968,610,3.414,629,4.717,630,5.645,631,4.148,668,4.968,687,3.578,737,2.855,758,2.923,1021,4.282,1031,4.502,1174,5.645,1183,5.645,1267,5.645,1278,4.315,1383,4.968,1394,3.146,1504,4.717,1510,6.15,1521,4.968,1574,5.645,1701,4.717,1744,4.148,2009,3.996,2015,6.714,2016,5.645,2017,5.645,2018,5.268,2019,5.645,2020,5.645,2021,5.645,2256,6.15,2262,6.15,2391,3.768,2409,6.15,2410,6.15,2411,5.268,2412,6.15,2413,6.15,2414,5.645,2415,5.268,2416,5.645,2417,5.645,2418,5.268,4474,5.645,4479,3.273,4480,4.665,4481,5.246,4482,5.246,4483,5.246,4484,6.916,4485,6.916,4486,6.916,4487,4.665,4488,5.246,4489,4.665]],["title/miscellaneous/functions.html",[4479,2.429,4490,5.003]],["body/miscellaneous/functions.html",[7,0.006,241,0.006,242,0.006,249,0.384,4470,6.736,4471,8.105,4479,4.726,4490,6.736,4491,7.575]],["title/index.html",[249,0.197,3652,2.965,3653,3.177]],["body/index.html",[7,0.007,28,1.775,30,0.074,31,0.081,128,2.853,148,2.099,172,3.84,178,3.379,229,3.584,230,5.995,241,0.005,242,0.005,347,1.737,368,3.716,449,4.088,464,3.379,473,3.379,486,2.935,581,1.642,596,1.672,597,1.942,636,1.905,755,3.063,758,3.68,788,5.995,812,4.549,940,3.584,956,3.584,1010,3.209,1011,5.578,1076,3.209,1082,2.935,1117,2.935,1191,4.617,1204,3.84,1904,5.578,2108,3.209,2150,4.183,2723,4.183,2871,4.617,2997,3.584,3009,4.185,3142,6.277,3655,4.183,3721,4.183,3728,6.998,3743,4.183,3770,5.716,3774,3.84,3776,6.512,3789,7.995,3812,3.379,3833,4.183,3850,4.183,3870,6.998,3888,4.183,3898,4.183,3899,4.183,3942,4.183,3951,4.183,3984,3.584,4056,4.183,4059,5.716,4065,3.584,4066,5.716,4087,4.183,4102,4.183,4115,4.183,4123,4.183,4126,4.183,4141,6.424,4210,3.84,4213,4.183,4216,6.998,4250,5.716,4265,4.183,4272,6.998,4292,7.327,4299,4.183,4300,8.414,4308,5.716,4322,3.84,4345,5.716,4370,5.977,4410,4.183,4430,4.183,4442,3.84,4492,4.704,4493,4.704,4494,5.716,4495,4.704,4496,4.704,4497,6.428,4498,4.183,4499,4.704,4500,4.704,4501,4.704,4502,4.704,4503,4.704,4504,4.704,4505,4.704,4506,4.704,4507,4.704,4508,4.704,4509,4.704,4510,4.704,4511,4.704,4512,4.704,4513,4.183,4514,4.183,4515,6.428,4516,4.704,4517,4.704,4518,4.183,4519,4.183,4520,4.704,4521,4.704,4522,8.24,4523,4.704,4524,4.704,4525,6.428,4526,4.704,4527,4.704,4528,4.704,4529,4.704,4530,4.704,4531,4.704,4532,4.704,4533,4.704,4534,6.428,4535,4.704,4536,4.704,4537,6.428,4538,4.704,4539,4.704,4540,4.704,4541,4.704,4542,4.704,4543,4.704,4544,4.704,4545,6.428,4546,4.704,4547,6.428,4548,6.428,4549,4.704,4550,4.704,4551,4.704,4552,4.704,4553,4.704,4554,4.704,4555,4.704,4556,4.704,4557,4.704,4558,4.704,4559,4.704,4560,4.704,4561,6.428,4562,6.428,4563,4.704,4564,4.704,4565,4.704,4566,4.704,4567,4.704,4568,6.428,4569,4.704,4570,4.704,4571,4.704,4572,4.704,4573,4.704,4574,4.704,4575,4.704,4576,4.704,4577,4.704,4578,4.704,4579,4.704,4580,4.704,4581,4.704,4582,4.704,4583,6.428,4584,4.704,4585,4.704,4586,4.704,4587,4.704,4588,3.84]],["title/license.html",[3652,2.965,3653,3.177,3812,2.796]],["body/license.html",[7,0.006,28,2.425,241,0.006,242,0.006,551,4.615,758,2.716,800,4.183,812,3.714,944,3.511,955,4.895,1204,5.245,1437,5.245,1532,5.245,1904,5.994,1911,5.245,2820,5.245,3142,4.895,3749,5.714,3774,6.423,3812,4.615,4065,4.895,4322,6.423,4498,8.477,4588,5.245,4589,8.505,4590,6.426,4591,7.868,4592,6.426,4593,6.426,4594,6.426,4595,6.426,4596,6.426,4597,6.426,4598,6.426,4599,6.426,4600,6.426,4601,6.426,4602,6.426,4603,6.426,4604,6.426,4605,6.426,4606,6.426,4607,6.426,4608,6.426,4609,7.868,4610,6.426,4611,6.426,4612,6.426,4613,6.426,4614,6.426,4615,6.426,4616,7.868,4617,7.868,4618,6.426,4619,6.426,4620,6.426,4621,6.426,4622,6.426,4623,6.426,4624,6.426,4625,6.426,4626,6.426,4627,6.426,4628,6.426,4629,6.426,4630,6.426,4631,6.426,4632,6.426,4633,6.426,4634,6.426,4635,6.426,4636,6.426,4637,6.426,4638,6.426,4639,6.426,4640,6.426,4641,6.426]],["title/modules.html",[2,2.415]],["body/modules.html",[1,4.71,2,2.333,6,4.217,7,0.006,8,4.441,9,4.441,10,4.025,11,4.441,12,4.441,13,4.441,14,4.441,15,4.441,16,4.025,17,3.452,18,4.441,19,4.441,20,4.217,21,4.441,22,4.441,23,3.574,24,4.217,25,4.441,241,0.006,242,0.006,424,4.217,2084,4.71,2248,4.217,3921,8.767,4642,9.859,4643,9.859,4644,9.871,4645,5.498,4646,6.183]],["title/overview.html",[4647,5.69]],["body/overview.html",[1,7.352,2,1.254,3,1.974,4,2.955,5,2.955,6,6.212,7,0.007,8,5.799,9,5.166,10,5.256,11,5.166,12,6.046,13,4.327,14,5.166,15,6.294,16,5.854,17,4.94,18,5.799,19,5.799,20,5.351,21,6.223,22,5.799,23,5.522,24,5.351,25,5.799,26,2.02,27,1.341,28,1.254,182,1.023,241,0.004,242,0.004,245,0.914,326,3.397,333,3.986,335,5.107,337,5.107,420,2.955,421,2.955,422,2.955,423,2.955,424,5.351,425,5.635,435,2.532,453,3.922,510,1.311,525,3.922,565,1.129,572,2.955,573,2.955,575,2.955,576,5.351,585,1.023,616,1.689,685,4.894,815,5.635,826,4.109,850,2.955,851,2.955,852,2.955,1074,2.532,1554,4.109,1561,2.955,1562,2.955,1625,5.252,1664,2.955,1666,2.955,1667,2.955,1722,2.532,1884,4.894,1950,4.705,1959,3.922,2023,5.351,2039,2.955,2040,2.955,2042,2.955,2084,5.976,2085,2.955,2086,2.955,2087,2.955,2186,4.109,2213,4.843,2244,2.955,2245,2.955,2246,2.955,2247,2.955,2248,5.351,2318,4.407,2352,2.955,2353,2.955,2354,2.955,2399,2.955,2400,2.955,2402,2.955,2521,5.351,2558,5.351,2595,5.351,2631,5.351,2640,2.955,2641,2.955,2642,2.955,2670,2.955,2671,2.955,2672,2.955,2696,2.955,2697,2.955,2698,2.955,2730,2.955,2731,2.955,2732,2.955,2733,5.351,2748,2.955,2750,2.955,2751,4.816,2836,2.955,2838,2.955,2839,2.955,3023,4.109,3117,5.351,3123,3.758,3446,2.955,3448,2.955,3449,2.955,3521,2.955,3522,2.955,3523,2.955,3524,5.635,3625,2.955,3626,2.955,3628,2.955,3685,2.955,3687,2.955,4647,2.955,4648,3.323,4649,3.323]],["title/properties.html",[440,1.001,3731,3.461]],["body/properties.html",[7,0.007,61,5.343,241,0.006,242,0.006,328,5.038,392,1.18,440,1.247,636,2.078,720,6.77,758,3.506,812,4.795,992,5.725,1199,5.725,1675,4.566,3659,6.237,3812,5.038,3984,5.343,4175,6.237,4286,6.237,4382,6.237,4588,5.725,4645,6.237,4650,7.014,4651,7.014,4652,7.014,4653,7.014,4654,7.014,4655,7.014,4656,7.014,4657,7.014,4658,7.014,4659,7.014,4660,7.014,4661,7.014,4662,7.014,4663,7.014,4664,7.014,4665,7.014]],["title/miscellaneous/typealiases.html",[4479,2.429,4666,5.627]],["body/miscellaneous/typealiases.html",[7,0.006,42,0.398,241,0.006,242,0.006,249,0.384,4449,6.183,4479,4.726,4667,7.575,4668,8.674,4669,6.736]],["title/miscellaneous/variables.html",[4277,4.593,4479,2.429]],["body/miscellaneous/variables.html",[7,0.007,29,0.062,42,0.207,71,4.635,72,4.635,73,4.635,74,4.635,75,4.635,76,4.635,112,1.047,148,1.854,170,5.432,172,5.432,174,3.17,176,5.049,178,4.078,185,1.935,191,5.049,224,3.542,241,0.004,242,0.004,249,0.2,280,0.744,289,1.891,322,1.555,352,1.86,387,1.296,392,0.663,404,1.019,440,0.701,473,2.831,479,3.068,500,2.356,508,2.677,512,2.279,518,2.01,596,2.372,597,3.765,681,2.585,683,2.52,746,2.689,801,3.003,820,3.218,1031,2.566,1247,5.049,1394,2.364,1504,3.873,1521,2.831,1532,4.635,1612,3.218,1729,5.049,1912,4.635,1915,3.505,2108,3.873,2130,3.505,2752,4.325,2755,3.218,2756,4.635,2767,4.635,2769,4.635,2770,3.218,2771,3.505,2772,3.505,2773,3.505,2774,3.505,2818,3.505,2871,2.831,2944,2.689,3840,3.505,3944,5.049,3978,3.505,3984,4.325,4141,3.218,4169,3.505,4210,3.218,4277,3.218,4296,3.505,4370,3.218,4449,3.218,4450,3.505,4451,5.049,4456,3.505,4457,5.049,4458,3.505,4459,5.049,4460,5.049,4461,5.049,4462,3.505,4463,5.918,4464,3.505,4465,3.505,4473,3.505,4474,4.635,4479,2.459,4487,3.505,4489,3.505,4494,3.505,4513,3.505,4514,5.049,4518,3.505,4519,3.505,4669,5.049,4670,3.942,4671,3.942,4672,3.942,4673,5.678,4674,5.678,4675,3.942,4676,3.942,4677,3.942,4678,3.942,4679,3.942,4680,3.942,4681,3.942,4682,3.942,4683,3.942,4684,3.942,4685,3.942,4686,3.942,4687,3.942,4688,3.942,4689,3.942,4690,8.284,4691,3.942,4692,3.942,4693,3.942,4694,3.942,4695,3.942,4696,3.942,4697,3.942,4698,3.942,4699,3.942,4700,3.942,4701,3.942,4702,3.942,4703,3.942,4704,3.942,4705,3.942,4706,3.942,4707,3.942,4708,3.942,4709,3.942,4710,5.678,4711,3.942,4712,5.678,4713,3.942,4714,3.942,4715,5.678,4716,3.942,4717,5.678,4718,3.942,4719,5.678,4720,3.942,4721,5.678,4722,5.678,4723,3.942,4724,3.942,4725,5.678,4726,3.942,4727,3.942,4728,3.942,4729,3.942,4730,3.942,4731,3.942,4732,3.942,4733,3.942,4734,3.942,4735,3.942,4736,3.942,4737,3.942,4738,3.942,4739,3.942,4740,3.942,4741,3.942,4742,5.678,4743,3.942,4744,3.942,4745,3.942,4746,3.942,4747,5.678,4748,3.942,4749,3.942,4750,3.942,4751,3.942,4752,3.942,4753,3.942,4754,3.942,4755,3.942,4756,3.942,4757,3.942,4758,3.942,4759,3.942,4760,3.942,4761,3.942,4762,3.942,4763,3.942,4764,3.942,4765,3.942,4766,3.942,4767,3.942,4768,3.942,4769,3.942,4770,3.942,4771,3.942,4772,3.942,4773,5.678,4774,5.678,4775,5.678,4776,3.942,4777,3.942]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":925,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":4513,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["0.7",{"_index":4696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":4447,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":4455,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":4469,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":4477,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":4475,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4467,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":4445,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":4446,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":4448,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4453,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4466,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":4468,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":4444,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4452,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":4109,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":801,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01301c9",{"_index":3758,"title":{},"body":{"changelog.html":{}}}],["01t00:30:00z",{"_index":4771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":3831,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3825,"title":{},"body":{"changelog.html":{}}}],["03600f8",{"_index":3702,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":4121,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1103,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["04082d7",{"_index":4206,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3681,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3959,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":966,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["0848443",{"_index":4358,"title":{},"body":{"changelog.html":{}}}],["08f1679",{"_index":3759,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3955,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":4165,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":3971,"title":{},"body":{"changelog.html":{}}}],["0e8a16",{"_index":1229,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["0eb10bb",{"_index":3995,"title":{},"body":{"changelog.html":{}}}],["0fe8b4d",{"_index":3690,"title":{},"body":{"changelog.html":{}}}],["0})@column({type",{"_index":1160,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{}}}],["1",{"_index":510,"title":{"interfaces/ChatResponse-1.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":4426,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":4423,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":4421,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":4417,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":4106,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":4099,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":4091,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":4073,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":4064,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":4040,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":4039,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":4033,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":4024,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":4022,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":4016,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":4011,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":4006,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":4414,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":4002,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":3998,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":3997,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":3991,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":3987,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":3965,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":3956,"title":{},"body":{"changelog.html":{}}}],["1.26.0",{"_index":3954,"title":{},"body":{"changelog.html":{}}}],["1.27.0",{"_index":3946,"title":{},"body":{"changelog.html":{}}}],["1.28.0",{"_index":3887,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":3828,"title":{},"body":{"changelog.html":{}}}],["1.29.1",{"_index":3866,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":4408,"title":{},"body":{"changelog.html":{}}}],["1.30.0",{"_index":3862,"title":{},"body":{"changelog.html":{}}}],["1.30.1",{"_index":3847,"title":{},"body":{"changelog.html":{}}}],["1.30.2",{"_index":3846,"title":{},"body":{"changelog.html":{}}}],["1.31.0",{"_index":3830,"title":{},"body":{"changelog.html":{}}}],["1.31.1",{"_index":3839,"title":{},"body":{"changelog.html":{}}}],["1.32.0",{"_index":3827,"title":{},"body":{"changelog.html":{}}}],["1.33.0",{"_index":3715,"title":{},"body":{"changelog.html":{}}}],["1.33.1",{"_index":3707,"title":{},"body":{"changelog.html":{}}}],["1.34.0",{"_index":3698,"title":{},"body":{"changelog.html":{}}}],["1.35.0",{"_index":3694,"title":{},"body":{"changelog.html":{}}}],["1.36.0",{"_index":3686,"title":{},"body":{"changelog.html":{}}}],["1.37.0",{"_index":3659,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.4.0",{"_index":4404,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":4401,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":4399,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":4376,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":4372,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":4344,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":4340,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":4337,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":4334,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":4329,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":4327,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":4320,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":4318,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":4369,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":4367,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":4364,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":4362,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":4359,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":4355,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":4352,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":4349,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":4315,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":4311,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":4268,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":4264,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":4262,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":4295,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":4291,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":4289,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":4285,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":4282,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":4279,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":4276,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":4271,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":4249,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":4247,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":4245,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":4135,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":508,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1031,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1018,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":606,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["10000",{"_index":4725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":4690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":3940,"title":{},"body":{"changelog.html":{}}}],["1045024650",{"_index":1263,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1045024650})@primarycolumn('integer",{"_index":1219,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@column({type",{"_index":1192,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":607,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":2714,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["113e98b",{"_index":3706,"title":{},"body":{"changelog.html":{}}}],["115",{"_index":3948,"title":{},"body":{"changelog.html":{}}}],["116",{"_index":3924,"title":{},"body":{"changelog.html":{}}}],["117",{"_index":3926,"title":{},"body":{"changelog.html":{}}}],["118",{"_index":3922,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":3708,"title":{},"body":{"changelog.html":{}}}],["120",{"_index":3952,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":987,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":952,"title":{},"body":{"entities/DbContribution.html":{}}}],["1225197",{"_index":3794,"title":{},"body":{"changelog.html":{}}}],["124",{"_index":3932,"title":{},"body":{"changelog.html":{}}}],["125",{"_index":3936,"title":{},"body":{"changelog.html":{}}}],["127.0.0.1",{"_index":4512,"title":{},"body":{"index.html":{}}}],["128",{"_index":3885,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3992,"title":{},"body":{"changelog.html":{}}}],["130",{"_index":3883,"title":{},"body":{"changelog.html":{}}}],["131",{"_index":3881,"title":{},"body":{"changelog.html":{}}}],["133",{"_index":1511,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["133'})@column({type",{"_index":1496,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["135",{"_index":3864,"title":{},"body":{"changelog.html":{}}}],["136",{"_index":3860,"title":{},"body":{"changelog.html":{}}}],["138",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":814,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":957,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":943,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1057,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1077,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":803,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["14",{"_index":3858,"title":{},"body":{"changelog.html":{}}}],["141",{"_index":3856,"title":{},"body":{"changelog.html":{}}}],["143",{"_index":3841,"title":{},"body":{"changelog.html":{}}}],["144",{"_index":3844,"title":{},"body":{"changelog.html":{}}}],["147",{"_index":3756,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":4184,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":990,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["150",{"_index":3834,"title":{},"body":{"changelog.html":{}}}],["151",{"_index":3836,"title":{},"body":{"changelog.html":{}}}],["154",{"_index":3804,"title":{},"body":{"changelog.html":{}}}],["155",{"_index":3757,"title":{},"body":{"changelog.html":{}}}],["155e99e",{"_index":4131,"title":{},"body":{"changelog.html":{}}}],["157",{"_index":3814,"title":{},"body":{"changelog.html":{}}}],["158",{"_index":3760,"title":{},"body":{"changelog.html":{}}}],["159",{"_index":3816,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":934,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":3699,"title":{},"body":{"changelog.html":{}}}],["161",{"_index":3713,"title":{},"body":{"changelog.html":{}}}],["164",{"_index":3701,"title":{},"body":{"changelog.html":{}}}],["165",{"_index":3705,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":4396,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":4161,"title":{},"body":{"changelog.html":{}}}],["168",{"_index":3696,"title":{},"body":{"changelog.html":{}}}],["1680fb3",{"_index":3908,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":4017,"title":{},"body":{"changelog.html":{}}}],["170",{"_index":3691,"title":{},"body":{"changelog.html":{}}}],["171",{"_index":3689,"title":{},"body":{"changelog.html":{}}}],["173",{"_index":3677,"title":{},"body":{"changelog.html":{}}}],["176",{"_index":3672,"title":{},"body":{"changelog.html":{}}}],["177",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":4255,"title":{},"body":{"changelog.html":{}}}],["17d7725",{"_index":3765,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3695,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":802,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["196",{"_index":1297,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["196})@primarygeneratedcolumn",{"_index":1286,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1bbeaf6",{"_index":4220,"title":{},"body":{"changelog.html":{}}}],["1c3378e",{"_index":3761,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":4134,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":4019,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":1012,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":614,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":2175,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["2/3",{"_index":4454,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1045,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{}}}],["200",{"_index":4689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":942,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":965,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["2023",{"_index":800,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"license.html":{}}}],["20491d8",{"_index":3777,"title":{},"body":{"changelog.html":{}}}],["2073883",{"_index":4119,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":4281,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":4290,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3829,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":3693,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":991,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1209,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1212,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":968,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:39.000000",{"_index":1165,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22:04:39.000000'})@column({type",{"_index":1151,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22d3cc1",{"_index":4373,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":3687,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["234343",{"_index":2398,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":2396,"title":{},"body":{"classes/RepoInfo.html":{}}}],["237133",{"_index":1001,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":1097,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["237133})@column('bigint",{"_index":1451,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@column({type",{"_index":1035,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["237133})@primarycolumn('bigint",{"_index":996,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":1059,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["23b2a83",{"_index":3799,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":3685,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["247e0ba",{"_index":4183,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":1074,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"overview.html":{}}}],["250",{"_index":1779,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":4715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1760,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":930,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{}}}],["26",{"_index":3838,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":4100,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":4441,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":4420,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":967,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["286e864",{"_index":3931,"title":{},"body":{"changelog.html":{}}}],["287",{"_index":1166,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["287})@column({type",{"_index":1143,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["28a3b76",{"_index":3692,"title":{},"body":{"changelog.html":{}}}],["28f6699",{"_index":3857,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":4007,"title":{},"body":{"changelog.html":{}}}],["293c4d3",{"_index":3873,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":4155,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":4181,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":4433,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":4333,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":4005,"title":{},"body":{"changelog.html":{}}}],["2d6609a",{"_index":3882,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":4021,"title":{},"body":{"changelog.html":{}}}],["2ee076b",{"_index":3773,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":4174,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":4649,"title":{},"body":{"overview.html":{}}}],["3.5",{"_index":4752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30",{"_index":616,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["3000",{"_index":4693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":4519,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["30})@type(undefined)@isin(['7",{"_index":619,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["31",{"_index":3682,"title":{},"body":{"changelog.html":{}}}],["31333",{"_index":1050,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31333})@column({type",{"_index":1038,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31e4d60",{"_index":4275,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":1497,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["3282435",{"_index":4189,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":4157,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":4368,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":4422,"title":{},"body":{"changelog.html":{}}}],["35",{"_index":4648,"title":{},"body":{"overview.html":{}}}],["3549897",{"_index":3697,"title":{},"body":{"changelog.html":{}}}],["35a08da",{"_index":3918,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":4083,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":4046,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":4195,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":4047,"title":{},"body":{"changelog.html":{}}}],["38f1dc9",{"_index":3848,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":4390,"title":{},"body":{"changelog.html":{}}}],["39bdd16",{"_index":3945,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":4045,"title":{},"body":{"changelog.html":{}}}],["3d2b7eb",{"_index":3737,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":1923,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":4069,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":4067,"title":{},"body":{"changelog.html":{}}}],["42211",{"_index":728,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":1388,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":710,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":3520,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["43",{"_index":4072,"title":{},"body":{"changelog.html":{}}}],["43311",{"_index":1509,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["43311})@column({type",{"_index":1489,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["436f2db",{"_index":3784,"title":{},"body":{"changelog.html":{}}}],["4456742596",{"_index":1225,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["4552c66",{"_index":4258,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":4111,"title":{},"body":{"changelog.html":{}}}],["475e5dd",{"_index":3890,"title":{},"body":{"changelog.html":{}}}],["47dc78b",{"_index":3740,"title":{},"body":{"changelog.html":{}}}],["487c1a2",{"_index":3673,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":1002,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":998,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["4b264d5",{"_index":4114,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":4120,"title":{},"body":{"changelog.html":{}}}],["4deaadd",{"_index":3837,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1278,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":3513,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":2971,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":604,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1043,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5238f58",{"_index":3763,"title":{},"body":{"changelog.html":{}}}],["5385049",{"_index":4052,"title":{},"body":{"changelog.html":{}}}],["544673a",{"_index":3842,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":4037,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":4101,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":4029,"title":{},"body":{"changelog.html":{}}}],["5736810",{"_index":729,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":713,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["58",{"_index":4031,"title":{},"body":{"changelog.html":{}}}],["58540e7",{"_index":3910,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":4434,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":4179,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":4151,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":3986,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":3990,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":4429,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":4301,"title":{},"body":{"changelog.html":{}}}],["5ee770b",{"_index":3879,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":4387,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":3979,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":1206,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["607cf5d",{"_index":4403,"title":{},"body":{"changelog.html":{}}}],["60].map(async",{"_index":2195,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["611b923",{"_index":3853,"title":{},"body":{"changelog.html":{}}}],["612",{"_index":1265,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["612})@column('integer",{"_index":1240,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["618225f",{"_index":4187,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":4205,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":4398,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":4261,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":4018,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":4411,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":4082,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":4305,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":4020,"title":{},"body":{"changelog.html":{}}}],["648dbeb",{"_index":4032,"title":{},"body":{"changelog.html":{}}}],["64d869f",{"_index":3747,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":4014,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["66fb61e",{"_index":3916,"title":{},"body":{"changelog.html":{}}}],["672ea80",{"_index":3791,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":4270,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":4009,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":4227,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":4234,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":4090,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":3983,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":4278,"title":{},"body":{"changelog.html":{}}}],["6df9486",{"_index":3897,"title":{},"body":{"changelog.html":{}}}],["6fa4a7d",{"_index":3727,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1782,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["70a6e7b",{"_index":3769,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":989,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["71359796})@column",{"_index":1290,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["71359796})@column({type",{"_index":963,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlightReaction.html":{}}}],["71359796})@primarycolumn({type",{"_index":1153,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["71a164d",{"_index":3665,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":4004,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":4215,"title":{},"body":{"changelog.html":{}}}],["7338f09",{"_index":3754,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":4425,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":4000,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":4086,"title":{},"body":{"changelog.html":{}}}],["762c1cb",{"_index":3835,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":3993,"title":{},"body":{"changelog.html":{}}}],["7728bc8",{"_index":3884,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":4348,"title":{},"body":{"changelog.html":{}}}],["78133",{"_index":730,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@column({type",{"_index":1040,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":715,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":756,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["79bf61d",{"_index":4298,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":4284,"title":{},"body":{"changelog.html":{}}}],["7c846ec",{"_index":3751,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":4027,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":4437,"title":{},"body":{"changelog.html":{}}}],["7e2756b",{"_index":3863,"title":{},"body":{"changelog.html":{}}}],["7e29c6e",{"_index":3767,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":4339,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":4375,"title":{},"body":{"changelog.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1774,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["8080:3001",{"_index":4548,"title":{},"body":{"index.html":{}}}],["80a866f",{"_index":3800,"title":{},"body":{"changelog.html":{}}}],["81",{"_index":3989,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":4385,"title":{},"body":{"changelog.html":{}}}],["828b7d2",{"_index":3845,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":3974,"title":{},"body":{"changelog.html":{}}}],["83fe57d",{"_index":3811,"title":{},"body":{"changelog.html":{}}}],["85a7549",{"_index":3937,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":4217,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":4199,"title":{},"body":{"changelog.html":{}}}],["86e013f",{"_index":3925,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":3969,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":3970,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":4125,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":4314,"title":{},"body":{"changelog.html":{}}}],["88e08d2",{"_index":3723,"title":{},"body":{"changelog.html":{}}}],["88e0adc",{"_index":3817,"title":{},"body":{"changelog.html":{}}}],["89",{"_index":3930,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":4223,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":4023,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":4371,"title":{},"body":{"changelog.html":{}}}],["8bfda45",{"_index":3933,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":3980,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":2163,"title":{},"body":{"classes/PageOptionsDto.html":{},"changelog.html":{}}}],["90'])@isint()@isoptional",{"_index":620,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["911df68",{"_index":4346,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":3975,"title":{},"body":{"changelog.html":{}}}],["9427269",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["94331ba",{"_index":3861,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":4203,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":4351,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":4140,"title":{},"body":{"changelog.html":{}}}],["971adeb",{"_index":3797,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":4048,"title":{},"body":{"changelog.html":{}}}],["98980b0",{"_index":3907,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":4055,"title":{},"body":{"changelog.html":{}}}],["9b12042",{"_index":3865,"title":{},"body":{"changelog.html":{}}}],["9bee970",{"_index":3775,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":3981,"title":{},"body":{"changelog.html":{}}}],["9fc3be7",{"_index":3815,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":4774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_stripe",{"_index":2702,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":1590,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["a057e0e",{"_index":3807,"title":{},"body":{"changelog.html":{}}}],["a08abfd",{"_index":4182,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":4391,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":4068,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":4297,"title":{},"body":{"changelog.html":{}}}],["a398b89",{"_index":3678,"title":{},"body":{"changelog.html":{}}}],["a5a4789",{"_index":3913,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":4263,"title":{},"body":{"changelog.html":{}}}],["abb24de",{"_index":3738,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":4074,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":4615,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":4409,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":4407,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":2951,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":2949,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":1400,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1142,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1137,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":3395,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1086,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["accessing",{"_index":4347,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":2149,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{}}}],["accessroles",{"_index":1978,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["action",{"_index":3749,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["actions",{"_index":3745,"title":{},"body":{"changelog.html":{}}}],["active",{"_index":1383,"title":{},"body":{"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":1382,"title":{},"body":{"entities/DbSubscription.html":{}}}],["adapter",{"_index":4058,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":3009,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"index.html":{}}}],["addcustomer",{"_index":857,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":2705,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":864,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1191,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["addgroupby(\"author_login",{"_index":2301,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addgroupby(\"emoji_id",{"_index":3334,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addhighlightforuser",{"_index":3198,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":3181,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":3190,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":2051,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":2058,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":3182,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":3197,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":3403,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":1962,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":3347,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":1971,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":2025,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2030,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":3988,"title":{},"body":{"changelog.html":{}}}],["additions",{"_index":1168,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addmemberforinsight",{"_index":3349,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":657,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":659,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":2285,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":2483,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":2487,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":2303,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["adds",{"_index":2514,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect",{"_index":1717,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["addselect(\"count(emoji_id",{"_index":3331,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":2002,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":2300,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":3644,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":2291,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":2293,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":3143,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"users.login",{"_index":3290,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"users.name",{"_index":2000,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect(`${interval}::integer",{"_index":2236,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addselect(qb",{"_index":2456,"title":{},"body":{"injectables/RepoService.html":{}}}],["addusercollaboration",{"_index":3002,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":3006,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":3049,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":3119,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":3126,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":3466,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":3473,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":3253,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":3264,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":3467,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(userid",{"_index":3475,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":3254,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":3266,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addusernotification",{"_index":3468,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":3477,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":3528,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":3532,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":4102,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":4393,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":2944,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":2980,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":4557,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":4190,"title":{},"body":{"changelog.html":{}}}],["ae44652",{"_index":3803,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":4093,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":4260,"title":{},"body":{"changelog.html":{}}}],["afde490",{"_index":3893,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":4332,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":2438,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":4667,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":2442,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":2444,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":2443,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":2445,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_prs",{"_index":1138,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allof",{"_index":4705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":3709,"title":{},"body":{"changelog.html":{}}}],["along",{"_index":4142,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":3909,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":3826,"title":{},"body":{"changelog.html":{}}}],["alpha.10",{"_index":3957,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":3824,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":3823,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":3964,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":3963,"title":{},"body":{"changelog.html":{}}}],["alpha.6",{"_index":3962,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":3961,"title":{},"body":{"changelog.html":{}}}],["alpha.8",{"_index":3960,"title":{},"body":{"changelog.html":{}}}],["alpha.9",{"_index":3958,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":2502,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":4607,"title":{},"body":{"license.html":{}}}],["ands",{"_index":1594,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere(\"insight_members.access",{"_index":1999,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":1998,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":2690,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":2662,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":2856,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":3646,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":3140,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":3139,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":3335,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":3333,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlights.user_id",{"_index":3293,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_notifications.read_at",{"_index":3491,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":3490,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(`now",{"_index":2290,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repos\".\"topics",{"_index":2374,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":2387,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":467,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["api",{"_index":3984,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":4460,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":4494,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":4549,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["api_host",{"_index":4510,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":557,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apibody",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":2520,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidocs",{"_index":4252,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":4703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":981,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1243,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":948,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":959,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1020,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":4747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":982,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":923,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional",{"_index":983,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":937,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apipaginatedresponse",{"_index":681,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":2323,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":1559,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":1640,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":3412,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":3372,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":2189,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":692,"title":{},"body":{"controllers/ContributorController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":2349,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":3028,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":1890,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":1893,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apiproperty",{"_index":725,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({description",{"_index":706,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({type",{"_index":2114,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":622,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":1750,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":617,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":599,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":605,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":1747,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apitags",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apitags(\"authentication",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"contributors",{"_index":690,"title":{},"body":{"controllers/ContributorController.html":{}}}],["apitags(\"emojis",{"_index":1558,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":1633,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":1829,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":1888,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":1953,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"pull",{"_index":561,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":2321,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":2775,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":3027,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apitoken",{"_index":1731,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":1945,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":3368,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":2713,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":4518,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["appearing",{"_index":4208,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":4516,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":498,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["applies",{"_index":2362,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["apply(httploggermiddleware",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["applydecorators",{"_index":4702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applyquerybuilderfilters",{"_index":2358,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":2360,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1321,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":4144,"title":{},"body":{"changelog.html":{}}}],["apt",{"_index":527,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1257,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":4640,"title":{},"body":{"license.html":{}}}],["array",{"_index":746,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":3415,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":4360,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":1574,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":4564,"title":{},"body":{"index.html":{}}}],["assign",{"_index":4353,"title":{},"body":{"changelog.html":{}}}],["assignee",{"_index":1194,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1169,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1170,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":4598,"title":{},"body":{"license.html":{}}}],["associating",{"_index":4028,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":4415,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":4136,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/dtos/user",{"_index":3579,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":558,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["auth/supabase.user.decorator",{"_index":1946,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["authcontroller",{"_index":244,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":2909,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":2912,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["authguard",{"_index":2906,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":2907,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1199,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"properties.html":{}}}],["author_avatar",{"_index":1171,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_login",{"_index":1172,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{}}}],["authorization",{"_index":495,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["authorized",{"_index":1935,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":4631,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":2479,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":2480,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":4646,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1195,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["await",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["aws:main",{"_index":1272,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1254,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["b0169e7",{"_index":4153,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":4071,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":4294,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":4328,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":4129,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":4192,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":4413,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":4288,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":4397,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":4361,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":4196,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":4043,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":4001,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":4145,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":4319,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":1157,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":4652,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":3753,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":4176,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":4254,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":556,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bag",{"_index":3762,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":550,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["baseentity",{"_index":974,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":2424,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(range",{"_index":2429,"title":{},"body":{"injectables/RepoService.html":{}}}],["baseline",{"_index":4388,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":858,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":4309,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":4418,"title":{},"body":{"changelog.html":{}}}],["bb26d27",{"_index":3788,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":4317,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":4015,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":4379,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":3994,"title":{},"body":{"changelog.html":{}}}],["bdougie",{"_index":787,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column({type",{"_index":1434,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["bdougie'})@isstring",{"_index":784,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2254,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["be5fae7",{"_index":3941,"title":{},"body":{"changelog.html":{}}}],["bearer",{"_index":496,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["beautiful",{"_index":4053,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":3833,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":4525,"title":{},"body":{"index.html":{}}}],["below",{"_index":464,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["beneficial",{"_index":4527,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":3684,"title":{},"body":{"changelog.html":{}}}],["beta.10",{"_index":4244,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":4243,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":4242,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":4241,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":4240,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":4239,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":4238,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":4237,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":4236,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":4235,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":3683,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":3680,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":3679,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":3822,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":3821,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":3820,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":3819,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":3818,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":4495,"title":{},"body":{"index.html":{}}}],["better",{"_index":4084,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":4076,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":935,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":2719,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":4499,"title":{},"body":{"index.html":{}}}],["bio",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["blocking",{"_index":3875,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["body.interests",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":738,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":4471,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["boxes",{"_index":1810,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":956,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":4555,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":4149,"title":{},"body":{"changelog.html":{}}}],["brian",{"_index":1106,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":4644,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4642,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1805,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["bugs",{"_index":4661,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3728,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":1990,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["building",{"_index":3703,"title":{},"body":{"changelog.html":{}}}],["builds",{"_index":4545,"title":{},"body":{"index.html":{}}}],["business",{"_index":4533,"title":{},"body":{"index.html":{}}}],["c",{"_index":4590,"title":{},"body":{"license.html":{}}}],["c000984",{"_index":3953,"title":{},"body":{"changelog.html":{}}}],["c013b70",{"_index":4326,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":4330,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":4383,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":4038,"title":{},"body":{"changelog.html":{}}}],["c54dcd9",{"_index":3876,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":3976,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":4193,"title":{},"body":{"changelog.html":{}}}],["c8dab92",{"_index":3902,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca9a69c",{"_index":3927,"title":{},"body":{"changelog.html":{}}}],["cae5dbd",{"_index":3868,"title":{},"body":{"changelog.html":{}}}],["canaccess",{"_index":3374,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":1726,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":1728,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":1363,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":1351,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":1352,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":2726,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":1367,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":1353,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":3379,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":1963,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":1976,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["capabilities",{"_index":4044,"title":{},"body":{"changelog.html":{}}}],["capturing",{"_index":3938,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":2718,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":3912,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":4526,"title":{},"body":{"index.html":{}}}],["catch",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":4394,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":4427,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":4336,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":4363,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":4267,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":4030,"title":{},"body":{"changelog.html":{}}}],["certificate",{"_index":4722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cfe2a69",{"_index":3923,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":4233,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":1205,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":1173,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changelog",{"_index":3654,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["channel",{"_index":4582,"title":{},"body":{"index.html":{}}}],["character",{"_index":927,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":466,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":4595,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":434,"title":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["check",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":3545,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":3558,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":2771,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":2830,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":2835,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":2832,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":2833,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":1979,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":3163,"title":{},"body":{"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["chinese",{"_index":1771,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":441,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["chore",{"_index":1803,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ci",{"_index":3675,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":4517,"title":{},"body":{"index.html":{}}}],["claim",{"_index":4634,"title":{},"body":{"license.html":{}}}],["class",{"_index":233,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":585,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"overview.html":{}}}],["clc",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":1925,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":915,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":1922,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":4708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":4188,"title":{},"body":{"changelog.html":{}}}],["cli_split_kwargs",{"_index":1274,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1252,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":4565,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":1912,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":4654,"title":{},"body":{"properties.html":{}}}],["close",{"_index":1208,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1267,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1250,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":1174,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closes",{"_index":3755,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":572,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":575,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":574,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":573,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":694,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":695,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_customermodule",{"_index":850,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":852,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":851,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":1561,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":1562,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":1664,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":1667,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":1665,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":1666,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":1897,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":1898,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":2039,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":2040,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":2041,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":2042,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":2085,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":2086,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":2087,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":2244,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":2247,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":2246,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":2245,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":2352,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":2353,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":2354,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":2399,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":2402,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":2401,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":2400,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":2670,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":2671,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":2673,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":2672,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":2640,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":2642,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":2643,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":2641,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":2696,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":2698,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":2697,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":2730,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":2731,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":2732,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2748,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":2750,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2749,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":2836,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":2838,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":2837,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":2839,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":3446,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":3448,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":3447,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":3449,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":3521,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":3522,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_providers",{"_index":3523,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":3625,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":3628,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":3627,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":3626,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":2468,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(count(\"user_notifications\".\"id",{"_index":3582,"title":{},"body":{"injectables/UserService.html":{}}}],["code",{"_index":449,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":552,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["code'})@column({type",{"_index":1073,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":477,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["codename",{"_index":4680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":542,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["coderefactorsuggestionservice",{"_index":453,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["collaborate",{"_index":780,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":1407,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":778,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":3010,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3021,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":3455,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":3000,"title":{},"body":{"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["collaboration.controller.ts:116",{"_index":3018,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:44",{"_index":3015,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:62",{"_index":3011,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:89",{"_index":3022,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":3025,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":777,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"coverage.html":{}}}],["collaboration.dto.ts:11",{"_index":785,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":2950,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":783,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":1395,"title":{},"body":{"entities/DbUserCollaboration.html":{},"coverage.html":{}}}],["collaboration.entity.ts:108",{"_index":1403,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:118",{"_index":1410,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:128",{"_index":1401,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:26",{"_index":1404,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:33",{"_index":1419,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:40",{"_index":1413,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:48",{"_index":1417,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:56",{"_index":1412,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:67",{"_index":1409,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:78",{"_index":1414,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:88",{"_index":1402,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:98",{"_index":1415,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":3024,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":3044,"title":{},"body":{"injectables/UserCollaborationService.html":{},"coverage.html":{}}}],["collaboration.service.ts:12",{"_index":3047,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:18",{"_index":3051,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:24",{"_index":3053,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:38",{"_index":3050,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:42",{"_index":3056,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:46",{"_index":3055,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:50",{"_index":3052,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":3037,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":1396,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":3013,"title":{},"body":{"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["collection",{"_index":2131,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["color",{"_index":1228,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorize",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":973,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":1454,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1269,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1266,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1268,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1233,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["columns",{"_index":1477,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":779,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":4522,"title":{},"body":{"index.html":{}}}],["comment",{"_index":717,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["comments",{"_index":1175,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["commit",{"_index":1788,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["commitmessages",{"_index":1787,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["committing",{"_index":4558,"title":{},"body":{"index.html":{}}}],["common",{"_index":3919,"title":{},"body":{"changelog.html":{}}}],["common/constants/order",{"_index":646,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":682,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/filter",{"_index":2187,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":626,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["common/dtos/page.dto",{"_index":645,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["common/filters/repo",{"_index":2223,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["community",{"_index":4575,"title":{},"body":{"index.html":{}}}],["company",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":4563,"title":{},"body":{"index.html":{}}}],["completely",{"_index":3895,"title":{},"body":{"changelog.html":{}}}],["completing",{"_index":4130,"title":{},"body":{"changelog.html":{}}}],["completionsurl",{"_index":4754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":4655,"title":{},"body":{"properties.html":{}}}],["component",{"_index":4410,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["computed",{"_index":1147,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["concurrency",{"_index":4302,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":4614,"title":{},"body":{"license.html":{}}}],["config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":4389,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":2868,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["conflict",{"_index":3783,"title":{},"body":{"changelog.html":{}}}],["conflictexception",{"_index":2657,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":3381,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":2665,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connected_at",{"_index":3604,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["connection",{"_index":1532,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["connections",{"_index":3943,"title":{},"body":{"changelog.html":{}}}],["connector",{"_index":3896,"title":{},"body":{"changelog.html":{}}}],["console.error(\"openai",{"_index":520,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.log",{"_index":4191,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":4062,"title":{},"body":{"changelog.html":{}}}],["consolelogger",{"_index":818,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":825,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":2158,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(configservice",{"_index":566,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":824,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":635,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":861,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":2107,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":1566,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":1676,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":1967,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":2027,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":2055,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":2094,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":889,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(prinsightrepository",{"_index":2212,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(pullrequestrepository",{"_index":2271,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(reporepository",{"_index":2426,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":2679,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":2649,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":2845,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":3634,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":2739,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":2125,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":3046,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":3122,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":3260,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(usernotificationrepository",{"_index":3470,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userreporepository",{"_index":3529,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":3554,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["contact",{"_index":4506,"title":{},"body":{"index.html":{}}}],["contain",{"_index":2974,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":4265,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["content",{"_index":452,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["contents",{"_index":4323,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":4775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":3741,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":4637,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":4570,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":933,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":4568,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":940,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":579,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":580,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":595,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":598,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":584,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":638,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":986,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":582,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":2306,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":2317,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":2314,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":2455,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":2414,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":576,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":631,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":697,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":688,"title":{},"body":{"controllers/ContributorController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":1279,"title":{},"body":{"classes/DbPullRequestContributor.html":{},"coverage.html":{}}}],["contributor.dto.ts:14",{"_index":1281,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":1280,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.tolowercase",{"_index":2289,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/contributor.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":666,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributormodule",{"_index":9,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributors",{"_index":668,"title":{},"body":{"controllers/ContributorController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":243,"title":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"contributors",{"_index":689,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"emojis",{"_index":1557,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":1632,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":1828,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":1887,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":1952,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"prs",{"_index":560,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":2320,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":2776,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":3026,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":3112,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":3229,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":3370,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":3463,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"users",{"_index":3093,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllers",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CodeRefactorSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":4577,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":3877,"title":{},"body":{"changelog.html":{}}}],["cool",{"_index":781,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":4609,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4322,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":4589,"title":{},"body":{"license.html":{}}}],["corners",{"_index":1809,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["correct",{"_index":3752,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":4123,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["count",{"_index":629,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":4212,"title":{},"body":{"changelog.html":{}}}],["countqueryresult",{"_index":3315,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["couple",{"_index":4560,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":4442,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":3438,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["create(createendorsementdto",{"_index":1680,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createcheckoutsession",{"_index":2703,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":2707,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":3106,"title":{},"body":{"controllers/UserEndorsementController.html":{},"changelog.html":{}}}],["created_at",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":979,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":1577,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":1585,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":698,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["createhighlightdto",{"_index":3201,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":733,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":3418,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":3414,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":3419,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":2939,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":2938,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":2940,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":760,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":3388,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createlog",{"_index":2093,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":2097,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":768,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":4773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"repos",{"_index":2467,"title":{},"body":{"injectables/RepoService.html":{}}}],["creates",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":775,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["createusercollaborationdto.message",{"_index":3034,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["createuserhighlightdto",{"_index":791,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":4003,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":941,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["creator",{"_index":708,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":701,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["ctx",{"_index":1733,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":1735,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1370,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["current_period_end_at",{"_index":1354,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":1355,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentrepoids",{"_index":3436,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find(id",{"_index":3441,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":3424,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter(repo",{"_index":3428,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map(cr",{"_index":3437,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":2090,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":854,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":855,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":2772,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":2774,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":2773,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":2778,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":10,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":863,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1000,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":337,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":815,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":4542,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":4186,"title":{},"body":{"changelog.html":{}}}],["d08173f",{"_index":3935,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":4201,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":4307,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":4132,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":4230,"title":{},"body":{"changelog.html":{}}}],["d3afb4b",{"_index":3734,"title":{},"body":{"changelog.html":{}}}],["d3cb75a",{"_index":3886,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":3985,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":4253,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":4635,"title":{},"body":{"license.html":{}}}],["data",{"_index":512,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["data.choices[0]?.message.content",{"_index":514,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["database",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":104,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":799,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":4770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(confirmed_at",{"_index":3605,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.created_at",{"_index":3601,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.updated_at",{"_index":3602,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":3325,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":3236,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":1916,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["day",{"_index":1139,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{},"changelog.html":{}}}],["days",{"_index":618,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["db",{"_index":1499,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["dbapiconfig",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbc66f3",{"_index":4185,"title":{},"body":{"changelog.html":{}}}],["dbcontribution",{"_index":84,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":2313,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":116,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":142,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":1551,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":157,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbendorsement})@apibody({type",{"_index":1588,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":1621,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbinsight",{"_index":107,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":140,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":3351,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":109,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":1933,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":126,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":147,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":131,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbpullrequestcontributor",{"_index":678,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":3085,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":92,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":2542,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":88,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":2500,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":90,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":2580,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":86,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":2616,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":2339,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbsubscription",{"_index":124,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbuser",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbusercollaboration",{"_index":154,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":3008,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":134,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":3317,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":144,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":1878,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":1481,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":3215,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":3076,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbusernotification",{"_index":152,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbusernotification})@apinotfoundresponse({description",{"_index":3461,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["dbuserrepo",{"_index":115,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":150,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":138,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":3169,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd",{"_index":2235,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["dd5e668",{"_index":4248,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":4079,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":4036,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":4599,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":4641,"title":{},"body":{"license.html":{}}}],["debug",{"_index":820,"title":{},"body":{"injectables/CustomLogger.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":828,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo",{"_index":2371,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":3302,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorator",{"_index":4406,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{}}}],["default",{"_index":596,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":2783,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":4721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":1624,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":1956,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":3246,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":2528,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":2565,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":2602,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":2637,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":2530,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":2568,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":2604,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":2639,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":3176,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id",{"_index":1662,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":3399,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":1939,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3206,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2497,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2540,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2578,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2614,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2506,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2546,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2583,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2619,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3166,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":1592,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":3361,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["deleted",{"_index":1214,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":922,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["deletedatecolumn",{"_index":978,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":1578,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":1591,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":3183,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":3202,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":3184,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":3205,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":1595,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":3255,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":3270,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":3256,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":3272,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":1056,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["deletions",{"_index":1176,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["demo",{"_index":4303,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":3871,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":3809,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":4250,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deprecated",{"_index":3744,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":3739,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":1701,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":2252,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":2198,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"coverage.html":{}}}],["description.controller.ts:24",{"_index":2202,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":524,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":1786,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["description.dto.ts:13",{"_index":1791,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":1795,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":1801,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":1794,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":1793,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:62",{"_index":1790,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":2203,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":522,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["description.service.ts:10",{"_index":2206,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:13",{"_index":2208,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:26",{"_index":2207,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":1757,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":4653,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":4035,"title":{},"body":{"changelog.html":{}}}],["developer",{"_index":4312,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":4141,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["df56c4f",{"_index":4010,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":3888,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagrams",{"_index":3904,"title":{},"body":{"changelog.html":{}}}],["diff",{"_index":536,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":531,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["digital",{"_index":3719,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":647,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":4484,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":534,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["disable",{"_index":485,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{}}}],["discord.find",{"_index":4578,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1831,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":4694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":4697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":1827,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1010,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":2989,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":1004,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":2298,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["distinct(true",{"_index":3305,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["distribute",{"_index":4605,"title":{},"body":{"license.html":{}}}],["dit",{"_index":4550,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":4717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":732,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["doc'})@column({type",{"_index":1047,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":723,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":4292,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":4504,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":3778,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":4138,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":3978,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":4256,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":4065,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":4296,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["dot",{"_index":4650,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1113,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1107,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["down",{"_index":4159,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":2647,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":2653,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":2677,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":2683,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":2534,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":2539,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":2535,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":2545,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":2491,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":2496,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":2492,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":2505,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":2843,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":2849,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":2572,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":2577,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":2573,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":2582,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":3632,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":3638,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":2608,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":2613,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":2609,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":2618,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1177,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["dry",{"_index":4299,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dto/create",{"_index":1627,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos",{"_index":4219,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":650,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":448,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/filter",{"_index":2366,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["dtos/highlight",{"_index":1882,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2068,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/pull",{"_index":2185,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":2346,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/update",{"_index":1947,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["duration",{"_index":1914,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":4457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":4554,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1769,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e043912",{"_index":3915,"title":{},"body":{"changelog.html":{}}}],["e0d38ca",{"_index":4171,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":4366,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":4310,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":3996,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":4163,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":4063,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":4222,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":4122,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":4416,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":2117,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":4257,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":4283,"title":{},"body":{"changelog.html":{}}}],["ed28e07",{"_index":3949,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":4168,"title":{},"body":{"changelog.html":{}}}],["edit",{"_index":2943,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":3624,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":1009,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"changelog.html":{}}}],["emoji.controller",{"_index":1564,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":1555,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":1458,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":1544,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":3191,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":11,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":1568,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1029,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":1554,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["encounter",{"_index":4524,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":4569,"title":{},"body":{"index.html":{}}}],["end",{"_index":474,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbSubscription.html":{}}}],["ended_at",{"_index":1356,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":707,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":1669,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":3102,"title":{},"body":{"controllers/UserEndorsementController.html":{},"coverage.html":{}}}],["endorsement.controller.ts:25",{"_index":3107,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:41",{"_index":3110,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":1628,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":700,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["endorsement.dto.ts:11",{"_index":711,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":714,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:26",{"_index":716,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:34",{"_index":719,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:41",{"_index":722,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:48",{"_index":724,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":1626,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":3111,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":1575,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"coverage.html":{}}}],["endorsementmodule",{"_index":12,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":1678,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1049,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"changelog.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":1707,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":1705,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":1715,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":1625,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":4699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":1630,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["endpoint",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":1833,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":1817,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":4435,"title":{},"body":{"changelog.html":{}}}],["english",{"_index":1762,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1763,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["entire",{"_index":532,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"changelog.html":{},"overview.html":{}}}],["entities.map(notification",{"_index":3492,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["entities/emoji.entity",{"_index":1556,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":1629,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/insight",{"_index":1988,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":1949,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":2184,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":2345,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/user",{"_index":1883,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":920,"title":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":628,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":4480,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":600,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":4066,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":3942,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":4493,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":4769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1259,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["error",{"_index":517,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error(message",{"_index":830,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":516,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["error).tostring",{"_index":2811,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":521,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":3776,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["escape",{"_index":3299,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":484,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["etl",{"_index":3928,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":2820,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":2825,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":2829,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everywhere",{"_index":4054,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":709,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["exception/responses",{"_index":4097,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["executioncontext",{"_index":1729,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":3241,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":3193,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":2498,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existinguser",{"_index":3382,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":3387,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":3386,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":2782,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["experiment",{"_index":3729,"title":{},"body":{"changelog.html":{}}}],["experimental",{"_index":3768,"title":{},"body":{"changelog.html":{}}}],["explain",{"_index":4438,"title":{},"body":{"changelog.html":{}}}],["explore",{"_index":4739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":4335,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1911,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":4306,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":589,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":3972,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":2918,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2930,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":2929,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":4061,"title":{},"body":{"changelog.html":{}}}],["f0304d4",{"_index":4246,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":4197,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":4225,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":4096,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":4211,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":4343,"title":{},"body":{"changelog.html":{}}}],["f57c5b6",{"_index":3905,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":4078,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":4105,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":4156,"title":{},"body":{"changelog.html":{}}}],["f73f891",{"_index":3782,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":4112,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":4164,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":4158,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":4146,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{}}}],["false})@column('boolean",{"_index":1216,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":1064,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["false})@column({type",{"_index":1438,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":741,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":2959,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":4034,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":1063,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":4060,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":4098,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":4402,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":4148,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":4354,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":3968,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":4162,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["fed79a1",{"_index":3810,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":4095,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":444,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["fetcher",{"_index":488,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":493,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["fetches",{"_index":3213,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["fetching",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["ff434b5",{"_index":3714,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":3771,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":3973,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1204,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":1741,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["filter.module",{"_index":2250,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":2356,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":2224,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":2357,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":2364,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:79",{"_index":2361,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":2365,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtering",{"_index":3920,"title":{},"body":{"changelog.html":{}}}],["filteroptionsdto",{"_index":1739,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":675,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["filters.foreach(([sql",{"_index":2388,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":2379,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([\"repos.stars",{"_index":2377,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`:topic",{"_index":2373,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=lower(:repo",{"_index":2370,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`now",{"_index":2231,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`regexp_replace(regexp_replace(user_highlights.url",{"_index":3300,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["filters.push([`repos.id",{"_index":2368,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`user_highlights.user_id",{"_index":3296,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["filterservice",{"_index":2272,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2173,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["findall",{"_index":634,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(pageoptionsdto",{"_index":639,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbycontributor",{"_index":2268,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":2277,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":1671,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":1683,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":2307,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":2309,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrecipientuserid",{"_index":1672,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":1685,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":2308,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":2315,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoowneroruser",{"_index":1673,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":1687,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":1579,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":1598,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":2052,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":2061,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":3481,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["findallcontributorswithfilters",{"_index":2269,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":2279,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":1546,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":1547,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":1580,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":1604,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":1581,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":1606,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":1650,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":1690,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallhighlightreactions",{"_index":3257,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":3276,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":1863,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":1866,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":1864,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":1870,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":3069,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":3073,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":1964,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":1981,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":3345,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":3354,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallreposwithfilters",{"_index":2331,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":2336,"title":{},"body":{"controllers/RepoController.html":{}}}],["findalltopreposbyusername",{"_index":3070,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":3078,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":3003,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":3012,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercreatedendorsements",{"_index":1582,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":3104,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(username",{"_index":1610,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":1583,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":3108,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(username",{"_index":1614,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":2536,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":2548,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":2493,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":2508,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":2574,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":2585,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":2610,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":2621,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":2270,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":2281,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbycustomerid",{"_index":859,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":868,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":860,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":870,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcontributorpullrequests",{"_index":3071,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":3082,"title":{},"body":{"controllers/UserController.html":{}}}],["findendorsementbyid",{"_index":1584,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":1617,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findinsightpagebyid",{"_index":1929,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":1931,"title":{},"body":{"controllers/InsightController.html":{}}}],["findonebyemail",{"_index":3546,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":3560,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1674,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1692,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":2332,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":2341,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyusername",{"_index":3547,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":3564,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":3072,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":3087,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":3089,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":3258,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":3281,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["finds",{"_index":1593,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["finduserfollowerbyid",{"_index":3120,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":3130,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["first",{"_index":795,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["fitness",{"_index":4627,"title":{},"body":{"license.html":{}}}],["fix",{"_index":3743,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fix(cli",{"_index":1256,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixed",{"_index":1804,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fixes",{"_index":3661,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":1061,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":4365,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":4536,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1521,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":3453,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":3152,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:33",{"_index":3164,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:51",{"_index":3160,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:73",{"_index":3170,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":3171,"title":{},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":3118,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":3124,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":3129,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:25",{"_index":3132,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:41",{"_index":3128,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:70",{"_index":3134,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":1493,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["followeduserid",{"_index":3127,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":1524,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followeruserid",{"_index":3131,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":3141,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":3145,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":3142,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":1520,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["follows",{"_index":2562,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3214,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":2553,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":1519,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:18",{"_index":1526,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:25",{"_index":1528,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":1525,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":1522,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":1527,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":1523,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":3501,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":3504,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":3158,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":3153,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":3156,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":3278,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["force",{"_index":3869,"title":{},"body":{"changelog.html":{}}}],["formal",{"_index":1800,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1796,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1150,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":4556,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":3917,"title":{},"body":{"changelog.html":{}}}],["forroutes(`v1",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":1552,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":2501,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":1934,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":2890,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":4594,"title":{},"body":{"license.html":{}}}],["french",{"_index":1765,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["from(`(${querybuilder.getquery",{"_index":3311,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["from(dbendorsement",{"_index":1714,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":2297,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(entity",{"_index":2447,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user_id",{"_index":1485,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1117,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":757,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"changelog.html":{}}}],["fullname",{"_index":2393,"title":{},"body":{"classes/RepoInfo.html":{},"changelog.html":{}}}],["function",{"_index":4107,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":4160,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":4490,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":4612,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":4088,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":457,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["generatecoderefactor",{"_index":548,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":447,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["generated",{"_index":4126,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generatedescription",{"_index":482,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":568,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprdescription",{"_index":545,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":546,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":2199,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":454,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":570,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":523,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"interfaces/ChatResponse-1.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["generates",{"_index":549,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generation",{"_index":3889,"title":{},"body":{"changelog.html":{}}}],["generator",{"_index":3891,"title":{},"body":{"changelog.html":{}}}],["german",{"_index":1766,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["get(\"/:id",{"_index":1954,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/contributions",{"_index":2322,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/reactions",{"_index":1895,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:owner/:repo",{"_index":2348,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":2327,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:username",{"_index":3094,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":3172,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":3097,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":3095,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":3099,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/created",{"_index":3113,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/following",{"_index":3250,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":3251,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":2192,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":1889,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":2560,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":2524,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":2598,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":2633,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/received",{"_index":3115,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":1645,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":1649,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":1642,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":1892,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/search",{"_index":691,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/service",{"_index":1832,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/user/:username/created",{"_index":1656,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":1660,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":1845,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":1653,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":3371,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1548,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":1932,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":2316,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":1876,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":2342,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":2310,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":3088,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3162,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":3074,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":3083,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":3079,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3105,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":3218,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":3212,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":2172,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":1872,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2549,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2509,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2586,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2622,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3109,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":1607,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":1599,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":1867,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":672,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":1815,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":1611,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":1615,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":1819,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":1618,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":3355,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["getallhighlightreactions",{"_index":1865,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":1875,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":3185,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":3209,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getdomain",{"_index":4463,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":4741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":4736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":4738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":4740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":4737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfollowinghighlightrepos",{"_index":3186,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":3211,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":3187,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":3217,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowstatusbyusername",{"_index":3154,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":3161,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":2210,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":2217,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getpullrequestinsights",{"_index":2168,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":2171,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":2359,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":2363,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getschemapath(model",{"_index":4707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":4706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2155,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstripe",{"_index":2709,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":3652,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["getuserhighlight",{"_index":3188,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":3220,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getusernotifications",{"_index":3458,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":3459,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["ghcr.io/open",{"_index":4551,"title":{},"body":{"index.html":{}}}],["git",{"_index":3748,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/open",{"_index":4663,"title":{},"body":{"properties.html":{}}}],["github",{"_index":476,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":3595,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com",{"_index":3308,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["github.com/open",{"_index":807,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":3603,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["given",{"_index":459,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["globals",{"_index":3722,"title":{},"body":{"changelog.html":{}}}],["goes",{"_index":1156,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["gpt",{"_index":4751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":4593,"title":{},"body":{"license.html":{}}}],["graph",{"_index":4645,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"users.login",{"_index":1718,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":1651,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":1722,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":2523,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":1723,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["guide",{"_index":4572,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":4573,"title":{},"body":{"index.html":{}}}],["hack",{"_index":3733,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":3589,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":4166,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":2757,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":2759,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hasnextpage",{"_index":2122,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":2123,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":4147,"title":{},"body":{"changelog.html":{}}}],["headers",{"_index":494,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["headers(\"x",{"_index":1636,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":1813,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":1859,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1825,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1822,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1811,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":13,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":1816,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":1820,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":767,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1100,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":764,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":4592,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1405,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["hidden",{"_index":4110,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":4124,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":3199,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":1877,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":1900,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":3179,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:116",{"_index":3210,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:134",{"_index":3195,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:157",{"_index":3208,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:175",{"_index":3219,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:191",{"_index":3216,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:44",{"_index":3200,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:59",{"_index":3221,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:76",{"_index":3224,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:97",{"_index":3204,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":3237,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":3226,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":792,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":809,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":806,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":797,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":804,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1424,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:104",{"_index":1443,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:115",{"_index":1429,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:126",{"_index":1436,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:137",{"_index":1435,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":1450,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:153",{"_index":1442,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:29",{"_index":1433,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:36",{"_index":1452,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:43",{"_index":1448,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:50",{"_index":1445,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:60",{"_index":1432,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:70",{"_index":1439,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:80",{"_index":1427,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:90",{"_index":1446,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:97",{"_index":1428,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":3322,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":3324,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":3323,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":3321,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":3245,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":3227,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight/entities/user",{"_index":3228,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/highlight.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_id",{"_index":1441,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":4489,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":1860,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightid",{"_index":3196,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":14,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":1871,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":1021,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1022,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":1456,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":1440,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":1862,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["highlights.service",{"_index":1886,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":3252,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:132",{"_index":3275,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:15",{"_index":3262,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:154",{"_index":3265,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:166",{"_index":3284,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:170",{"_index":3271,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:174",{"_index":3277,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:195",{"_index":3282,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:212",{"_index":3268,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:24",{"_index":3269,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:243",{"_index":3273,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:30",{"_index":3280,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:52",{"_index":3274,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:96",{"_index":3279,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":3267,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":4632,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":4659,"title":{},"body":{"properties.html":{}}}],["host",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1734,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":4169,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":3301,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":1823,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":101,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1226,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1276,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1200,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://github.com/open",{"_index":720,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":2876,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1032,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1025,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":2902,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":2982,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":2887,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":2964,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpstatus",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1148,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1799,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":1596,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":1620,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":951,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":3592,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter(identity",{"_index":3593,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":3594,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":3518,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["ignore",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":4566,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":4377,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":4041,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":881,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":4623,"title":{},"body":{"license.html":{}}}],["import",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":4049,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3717,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":4618,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":3562,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":3774,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["inclusion",{"_index":3892,"title":{},"body":{"changelog.html":{}}}],["increase",{"_index":4070,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":249,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":3798,"title":{},"body":{"changelog.html":{}}}],["indexes",{"_index":3796,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":2880,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1062,"title":{},"body":{"entities/DbInsight.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":3947,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":754,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":2392,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":2397,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":2395,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":2201,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3364,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1798,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["inherited",{"_index":608,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":4428,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":443,"title":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":565,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":643,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":651,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":872,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":1571,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":1697,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":2069,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":1989,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":2034,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":2100,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":2225,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":2283,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbrepo",{"_index":2441,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":2687,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":2658,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":2853,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":3642,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":2745,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":3580,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":3057,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":3285,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":3286,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbusernotification",{"_index":3486,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":3537,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":3136,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin(\"insights",{"_index":2004,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":1704,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["innerjoin(\"users",{"_index":3288,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":2478,"title":{},"body":{"injectables/RepoService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":3064,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":3063,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":2072,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1108,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["inserting/updating",{"_index":2810,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":739,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":1941,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3350,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight.controller",{"_index":2046,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":3401,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:100",{"_index":3409,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:49",{"_index":3406,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:67",{"_index":3404,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":1948,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":735,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":744,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":742,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":750,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1136,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:18",{"_index":1154,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:30",{"_index":1161,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":1152,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:52",{"_index":1145,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:63",{"_index":1144,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:74",{"_index":1163,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":3376,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1126,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1121,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter(insightrepo",{"_index":3425,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":1753,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1087,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1112,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":2005,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":2006,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":2003,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":2001,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1125,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":1927,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":1744,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":1745,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":2384,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":2376,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":2378,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":1977,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":1973,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":3392,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":1970,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":1959,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":2008,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":2022,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":1069,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":3426,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1070,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":2029,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":2023,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":2057,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1082,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["insights.id",{"_index":2080,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":2074,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":1951,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":2209,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:10",{"_index":2214,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:17",{"_index":2216,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:21",{"_index":2220,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:39",{"_index":2218,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":1968,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":15,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":3411,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":1950,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":4331,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":4515,"title":{},"body":{"index.html":{}}}],["installed",{"_index":4500,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":519,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["instead",{"_index":3951,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["instructions",{"_index":471,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["integer",{"_index":1013,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserService.html":{}}}],["integration",{"_index":3742,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":4657,"title":{},"body":{"properties.html":{}}}],["interests",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":2994,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":2996,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interface",{"_index":433,"title":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["interfaces",{"_index":435,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"interfaces/PageMetaParameters.html":{},"overview.html":{}}}],["internal",{"_index":1235,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":1140,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["invalid",{"_index":553,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["invitation",{"_index":1099,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1088,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1089,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":763,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["invites",{"_index":3852,"title":{},"body":{"changelog.html":{}}}],["is_accepted",{"_index":1316,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":1052,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":3600,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":736,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":748,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["isarray()@apiproperty({isarray",{"_index":2110,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":752,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["iscreatinglogs",{"_index":2104,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":810,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":766,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":623,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":632,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":1754,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":2161,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":2265,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":2266,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":2419,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1776,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":2952,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1785,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1802,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"view",{"_index":2946,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([7",{"_index":2162,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint",{"_index":2157,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ismember",{"_index":3380,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":727,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{}}}],["isoptional",{"_index":624,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":771,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":726,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":718,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issues",{"_index":2410,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["isurl",{"_index":2984,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":1738,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["italian",{"_index":1767,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":1720,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":2326,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":662,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["items",{"_index":2130,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2165,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":2164,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":2012,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":2013,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["job",{"_index":4273,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":4384,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":3850,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["join(\"\\n",{"_index":481,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":977,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["js",{"_index":3578,"title":{},"body":{"injectables/UserService.html":{}}}],["js/dist/module/lib/types",{"_index":446,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["json",{"_index":3732,"title":{},"body":{"changelog.html":{}}}],["json.stringify",{"_index":499,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["json.stringify(parameters",{"_index":919,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":2788,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":2920,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key's",{"_index":4511,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":4658,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":4622,"title":{},"body":{"license.html":{}}}],["kindly",{"_index":4505,"title":{},"body":{"index.html":{}}}],["korean",{"_index":1772,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1231,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1221,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1178,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1179,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":4735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":455,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":954,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_merged_at",{"_index":630,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1180,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["latest",{"_index":2785,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["left",{"_index":3849,"title":{},"body":{"changelog.html":{}}}],["leftjoin(\"users",{"_index":1706,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":2454,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":2452,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":2073,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":2453,"title":{},"body":{"injectables/RepoService.html":{}}}],["lenght",{"_index":3914,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":929,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["letters",{"_index":2975,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":4540,"title":{},"body":{"index.html":{}}}],["liability",{"_index":4636,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4633,"title":{},"body":{"license.html":{}}}],["lib",{"_index":4535,"title":{},"body":{"index.html":{}}}],["library",{"_index":3780,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":3812,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":592,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(1",{"_index":2237,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":661,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["limitation",{"_index":4601,"title":{},"body":{"license.html":{}}}],["limited",{"_index":4624,"title":{},"body":{"license.html":{}}}],["limits",{"_index":4081,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":487,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{}}}],["line_items",{"_index":2721,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1190,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["link",{"_index":4178,"title":{},"body":{"changelog.html":{}}}],["linkedin",{"_index":2886,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":4251,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":4113,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":4059,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":4553,"title":{},"body":{"index.html":{}}}],["list",{"_index":3840,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listallpullrequests",{"_index":2169,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":2178,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listing",{"_index":1549,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["literal",{"_index":442,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{}}}],["live",{"_index":4492,"title":{},"body":{"index.html":{}}}],["load",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":4025,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":2461,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":2464,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":2465,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":2463,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":2462,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":2871,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":4514,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["location",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":821,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":891,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":833,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":2099,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":770,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":774,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:15",{"_index":773,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:7",{"_index":772,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":2089,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":841,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":1908,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":2777,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":880,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":1907,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":897,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":899,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":901,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:36",{"_index":895,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:40",{"_index":904,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:44",{"_index":893,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:59",{"_index":906,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":890,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":1909,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":840,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":817,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:27",{"_index":834,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:37",{"_index":832,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":838,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:57",{"_index":829,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":836,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":827,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":3944,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":4461,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":4534,"title":{},"body":{"index.html":{}}}],["login",{"_index":1425,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["loglevels",{"_index":843,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":883,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":894,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":2084,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":884,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":896,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":885,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":898,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":886,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":900,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1134,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":887,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":903,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":826,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":2096,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":819,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":2470,"title":{},"body":{"injectables/RepoService.html":{}}}],["lowercase",{"_index":3832,"title":{},"body":{"changelog.html":{}}}],["machines",{"_index":4501,"title":{},"body":{"index.html":{}}}],["made",{"_index":1430,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":1273,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["main'})@column('text",{"_index":1245,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":2954,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["maker",{"_index":2986,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":2968,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["managed",{"_index":4152,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":2758,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":2764,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":3671,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":4117,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":4213,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":976,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["marknotificationsasread",{"_index":3469,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":3483,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":2985,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":2987,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":2145,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1777,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{}}}],["max(10",{"_index":1784,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(10000",{"_index":2160,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(500",{"_index":1781,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":465,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxlength",{"_index":456,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":790,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1158,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["mechanics",{"_index":4089,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":762,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":3352,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":3366,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":2048,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":3343,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:118",{"_index":3367,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:155",{"_index":3362,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:50",{"_index":3358,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:76",{"_index":3353,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":3369,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":761,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":765,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":2945,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1085,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:105",{"_index":1101,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:22",{"_index":1096,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:29",{"_index":1098,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:36",{"_index":1111,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:47",{"_index":1109,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:58",{"_index":1092,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:68",{"_index":1093,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:78",{"_index":1110,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:85",{"_index":1094,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:95",{"_index":1104,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":2049,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":1961,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":1969,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:20",{"_index":1974,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:26",{"_index":1983,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:40",{"_index":1972,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:44",{"_index":1987,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:48",{"_index":1985,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:52",{"_index":1980,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:75",{"_index":1982,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":3360,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":3356,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["memory",{"_index":1830,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":4687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":4691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":1826,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":463,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["merchantability",{"_index":4626,"title":{},"body":{"license.html":{}}}],["merge",{"_index":955,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"license.html":{}}}],["mergeable",{"_index":1181,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":1182,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_at",{"_index":1183,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["message",{"_index":451,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":502,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":2106,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":649,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["meta.dto.ts",{"_index":2121,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":2134,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":2132,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":2137,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":2129,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":2127,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":2135,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":1486,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["metadata",{"_index":1357,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["methods",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":4057,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":3795,"title":{},"body":{"changelog.html":{}}}],["migrations",{"_index":3772,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":1778,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{}}}],["min(0",{"_index":1783,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2159,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(100",{"_index":1780,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimal",{"_index":4042,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":2018,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":2017,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":786,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["minlength(20",{"_index":789,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":813,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minor",{"_index":4392,"title":{},"body":{"changelog.html":{}}}],["misaligned",{"_index":3785,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":4479,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3770,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mit",{"_index":4588,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mkdocs",{"_index":4313,"title":{},"body":{"changelog.html":{}}}],["mm",{"_index":2234,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":4544,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2723,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":500,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":4749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":4603,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":2193,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["months'})@apiokresponse({type",{"_index":2176,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":4228,"title":{},"body":{"changelog.html":{}}}],["mostactive",{"_index":2019,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":2020,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mount",{"_index":4356,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":4324,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":3898,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mrpizza",{"_index":2892,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["much",{"_index":4116,"title":{},"body":{"changelog.html":{}}}],["n",{"_index":509,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["name",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":1222,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["naming",{"_index":4108,"title":{},"body":{"changelog.html":{}}}],["ncommit",{"_index":539,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":4497,"title":{},"body":{"index.html":{}}}],["needs",{"_index":4539,"title":{},"body":{"index.html":{}}}],["nest",{"_index":4380,"title":{},"body":{"changelog.html":{}}}],["nestjs",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":839,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":429,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":984,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":907,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":910,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":1910,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":2913,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["newinsight",{"_index":3416,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":3384,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newlog",{"_index":2101,"title":{},"body":{"injectables/LogService.html":{}}}],["newuser",{"_index":3598,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":3606,"title":{},"body":{"injectables/UserService.html":{}}}],["newusercollaboration",{"_index":3031,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["newuserhighlight",{"_index":3319,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":3540,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":486,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["nextfunction",{"_index":1906,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":4431,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":4502,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1230,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["non",{"_index":478,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"changelog.html":{}}}],["noninfringement",{"_index":4630,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":3805,"title":{},"body":{"changelog.html":{}}}],["notable",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":4508,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1696,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":3619,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":2668,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":4616,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":3135,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":3465,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":3471,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":3480,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":3482,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:46",{"_index":3478,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:57",{"_index":3474,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:69",{"_index":3476,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:81",{"_index":3484,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":1491,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["notification.constants",{"_index":1507,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["notification.constants.ts",{"_index":4474,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":3454,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":3456,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:27",{"_index":3462,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":1484,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:18",{"_index":1492,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:25",{"_index":1506,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:32",{"_index":1490,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:43",{"_index":1505,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:53",{"_index":1495,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:63",{"_index":1500,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:73",{"_index":1502,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:83",{"_index":1498,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":3493,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":3485,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":3507,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":3460,"title":{},"body":{"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["notified_at",{"_index":1487,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":946,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{}}}],["npm",{"_index":3789,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":4503,"title":{},"body":{"index.html":{}}}],["null",{"_index":1277,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":3243,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":1957,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":4695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":4698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":4688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":4692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":4724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":4733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":2976,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["numerical",{"_index":1155,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":4651,"title":{},"body":{"properties.html":{}}}],["object",{"_index":2367,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":2222,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":747,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtaining",{"_index":4597,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":3720,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":4586,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":660,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["old",{"_index":3712,"title":{},"body":{"changelog.html":{}}}],["onboarded",{"_index":2881,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onboarding.dto",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":3511,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":3512,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":3514,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding/insight",{"_index":3939,"title":{},"body":{"changelog.html":{}}}],["onetomany",{"_index":1027,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":758,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_pull_requests",{"_index":2469,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":2471,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["openapi",{"_index":4209,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":4559,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1637,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":2957,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":4745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":4013,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["optional",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["options.code}\\n",{"_index":483,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["options.commitmessages",{"_index":538,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":540,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.descriptionlength",{"_index":505,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":535,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":537,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":627,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":588,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:12",{"_index":1902,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":1746,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:16",{"_index":2153,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":2420,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":603,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":1752,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":2010,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":2259,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":2151,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1749,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":2421,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":2152,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":2014,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":1751,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":2408,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":2011,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":2154,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":2156,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":2260,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":2261,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":2264,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":2255,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":2375,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["options.repo",{"_index":2369,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":2241,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":2242,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.temperature",{"_index":507,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":541,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":2372,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["order",{"_index":1011,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["orderby",{"_index":591,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["orderby(\"endorsements.created_at",{"_index":1700,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":2081,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":3066,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":3295,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"users.name",{"_index":2007,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":2481,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":593,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":610,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":2482,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":611,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":654,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1600,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["origin",{"_index":970,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":1918,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere(\"lower(users.login",{"_index":1711,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orwhere(`:userid",{"_index":2079,"title":{},"body":{"injectables/InsightsService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":4639,"title":{},"body":{"license.html":{}}}],["out",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":4342,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":4274,"title":{},"body":{"changelog.html":{}}}],["outside",{"_index":480,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"changelog.html":{}}}],["over",{"_index":2174,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["overview",{"_index":4647,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":4580,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1608,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["owneroruser",{"_index":1709,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":2476,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":1712,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":4547,"title":{},"body":{"index.html":{}}}],["package",{"_index":3731,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["package.json",{"_index":4561,"title":{},"body":{"index.html":{}}}],["packages",{"_index":3982,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":587,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["pagecount",{"_index":2124,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":644,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":665,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["pagemetadto",{"_index":648,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":2115,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":2126,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":590,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":2142,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":655,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":658,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":2140,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":2286,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.repo",{"_index":2486,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":2485,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto:16",{"_index":615,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:28",{"_index":609,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:33",{"_index":613,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:43",{"_index":621,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pages",{"_index":2136,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":3075,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":683,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":676,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":2311,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":4405,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":1623,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"emojiid",{"_index":3242,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":1654,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"memberid",{"_index":3390,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":1646,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1647,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":1643,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"username",{"_index":1657,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":2138,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":2148,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":2302,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":2780,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":3596,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":4777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":1881,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":2935,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":2936,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":4628,"title":{},"body":{"license.html":{}}}],["passed",{"_index":533,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":2919,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2917,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":3232,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id",{"_index":3035,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(\":id/members/:memberid",{"_index":3389,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":3223,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":3020,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":3363,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["path",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["paths",{"_index":3779,"title":{},"body":{"changelog.html":{}}}],["pattern",{"_index":3663,"title":{},"body":{"changelog.html":{}}}],["payment_method_types",{"_index":2717,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1091,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["pending'})@column({type",{"_index":1090,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":2133,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":3716,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":1371,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":4591,"title":{},"body":{"license.html":{}}}],["permit",{"_index":4610,"title":{},"body":{"license.html":{}}}],["person",{"_index":4596,"title":{},"body":{"license.html":{}}}],["persons",{"_index":4611,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1797,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["pgmigrate",{"_index":3901,"title":{},"body":{"changelog.html":{}}}],["pid,hostname,context",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1426,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe",{"_index":3802,"title":{},"body":{"changelog.html":{}}}],["pipelines",{"_index":4440,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":2967,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":2955,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizzas",{"_index":4103,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":4571,"title":{},"body":{"index.html":{}}}],["port",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":4620,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1768,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":3240,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":2204,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/onboarding",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":563,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":2813,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":3378,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":3007,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":1586,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3192,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":2200,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":547,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":2761,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":3348,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["postcreatecheckoutsession",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":4712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postonboarding",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":4175,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":528,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["pr!'})@column('text",{"_index":1444,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":805,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":2229,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["preferences",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["prefs.dto",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":2988,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":2991,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":2993,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prepare",{"_index":3900,"title":{},"body":{"changelog.html":{}}}],["prerequisites",{"_index":4496,"title":{},"body":{"index.html":{}}}],["present",{"_index":529,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["prettier",{"_index":4395,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":4546,"title":{},"body":{"index.html":{}}}],["previous",{"_index":2128,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["price",{"_index":1378,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":1393,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":1379,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":1358,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":975,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":988,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1264,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["primarycolumn(\"text",{"_index":1392,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1028,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1135,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1130,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":2215,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["print",{"_index":4280,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["proceed",{"_index":4574,"title":{},"body":{"index.html":{}}}],["process",{"_index":4341,"title":{},"body":{"changelog.html":{}}}],["process.env.ci",{"_index":4686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":4744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":4682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":4760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":2925,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":2928,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":2923,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":4370,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":788,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{},"index.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":782,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project?'})@column({type",{"_index":1408,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["promise",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all([30",{"_index":2194,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all(repostoremoverequests",{"_index":3435,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":3445,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":3509,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["proper",{"_index":4259,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":4321,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":440,"title":{"properties.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":985,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":4286,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":551,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"license.html":{}}}],["providers",{"_index":231,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["prquery",{"_index":2227,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":544,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["public",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"changelog.html":{}}}],["public.users",{"_index":4133,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":4604,"title":{},"body":{"license.html":{}}}],["published",{"_index":3730,"title":{},"body":{"changelog.html":{}}}],["pull",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse-1.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["pull_requests",{"_index":1164,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":2287,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_full_name",{"_index":2292,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":2294,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":2473,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":671,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontroller",{"_index":2166,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptioncontroller",{"_index":2197,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptionservice",{"_index":525,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"interfaces/ChatResponse-1.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":2186,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":16,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":2256,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":2257,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":2182,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":2274,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestservice",{"_index":685,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":2188,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":2262,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":2263,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":4629,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4304,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":4137,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":2519,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":2525,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":2561,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":2599,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":2634,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":2527,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":2564,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":2601,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":2636,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":3174,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2513,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2552,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2590,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2626,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2517,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2556,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2593,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2629,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3157,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":2221,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["qb.andwhere(sql",{"_index":2390,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":2389,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":4552,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1359,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["queries",{"_index":3806,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":680,"title":{},"body":{"controllers/ContributorController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":652,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":3587,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.andwhere(`user_highlights.user_id",{"_index":3309,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(sql",{"_index":3304,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":663,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getmany",{"_index":664,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getone",{"_index":876,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":3150,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":2304,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{}}}],["querybuilder.getrawone",{"_index":2243,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":1573,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.setparameters",{"_index":2240,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.where(\"id",{"_index":3539,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":1992,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"lower(login",{"_index":3590,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":3059,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(`users.email",{"_index":3623,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(sql",{"_index":3303,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":892,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":911,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":4576,"title":{},"body":{"index.html":{}}}],["range",{"_index":594,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["rate",{"_index":4080,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":2760,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":3735,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":2997,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":3506,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":1006,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":3207,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":1480,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":1462,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":1457,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:106",{"_index":1463,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:18",{"_index":1469,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:28",{"_index":1468,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":1474,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:48",{"_index":1465,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":1460,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":1471,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:74",{"_index":1461,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:82",{"_index":1470,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:90",{"_index":1467,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:98",{"_index":1473,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":1478,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":1466,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":1479,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":1472,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":1459,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":3336,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":3337,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1005,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":1879,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["read",{"_index":1501,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["read_at",{"_index":1488,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1149,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readme",{"_index":4104,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["real",{"_index":3786,"title":{},"body":{"changelog.html":{}}}],["rebaseable",{"_index":1184,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receipient",{"_index":1418,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive_collaboration",{"_index":2990,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":1612,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":2015,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":2992,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":712,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{}}}],["recipient_user_id",{"_index":702,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["record",{"_index":1635,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["record'})@apiokresponse({type",{"_index":1587,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":2816,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1247,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":438,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{}}}],["refactoring",{"_index":3894,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":4177,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":961,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["references",{"_index":3911,"title":{},"body":{"changelog.html":{}}}],["regex",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["registeras(\"api",{"_index":4679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":4710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":4734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":4746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":4756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":2867,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":4266,"title":{},"body":{"changelog.html":{}}}],["rejectunauthorized",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":4207,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":4412,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":4224,"title":{},"body":{"changelog.html":{}}}],["relationships",{"_index":3859,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":3870,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["releasing",{"_index":3790,"title":{},"body":{"changelog.html":{}}}],["relevantevents",{"_index":2769,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":2822,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":4218,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":1675,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["remove(id",{"_index":1694,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removed",{"_index":2503,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removeinsight",{"_index":2053,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":2064,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":1930,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":1938,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":1965,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":1984,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":3346,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":3359,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":2026,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2032,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":1940,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":3045,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":3054,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":3004,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":3016,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":3121,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":3133,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removing",{"_index":3711,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":4194,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":581,"title":{},"body":{"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":2343,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":994,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":960,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":2404,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1114,"title":{},"body":{"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:18",{"_index":1515,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:22",{"_index":1533,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:25",{"_index":1517,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":1120,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:29",{"_index":1540,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:32",{"_index":1516,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":1123,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:36",{"_index":1536,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:39",{"_index":1514,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:40",{"_index":1124,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:46",{"_index":1530,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:47",{"_index":1119,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:49",{"_index":1513,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:56",{"_index":1537,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:57",{"_index":1115,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:63",{"_index":1531,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:67",{"_index":1116,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:71",{"_index":1539,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:75",{"_index":1122,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:79",{"_index":1535,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":1483,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.fullname",{"_index":2037,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":2036,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":3431,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouserstargazers",{"_index":1299,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1288,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1314,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1305,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":1333,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1324,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":1543,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":1534,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":1348,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":1339,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":2047,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":2024,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:15",{"_index":2031,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:19",{"_index":2033,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:9",{"_index":2028,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":753,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":3516,"title":{},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":2319,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["repo/user",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":703,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":578,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":2329,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":2409,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":2248,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":2213,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":640,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":1742,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":745,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":3430,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":17,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":601,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":2406,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":1603,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":1710,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":2333,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":2422,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":2428,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":4530,"title":{},"body":{"index.html":{}}}],["repos",{"_index":737,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":2472,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":3080,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":3408,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto.ts",{"_index":3517,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repos.dto.ts:12",{"_index":3519,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.id",{"_index":2380,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":3525,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":3526,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":3527,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":3530,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:19",{"_index":3534,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:25",{"_index":3536,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:39",{"_index":3533,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:49",{"_index":3535,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos_id",{"_index":3867,"title":{},"body":{"changelog.html":{}}}],["reposearchoptionsdto",{"_index":2337,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":2318,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":3766,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":636,"title":{},"body":{"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":2488,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":2531,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":2681,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":2651,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":3439,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":3443,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":3427,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":3433,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":3432,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":2569,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":2847,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":3442,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":4198,"title":{},"body":{"changelog.html":{}}}],["repotouserstars",{"_index":4200,"title":{},"body":{"changelog.html":{}}}],["repotousersubmissions",{"_index":4202,"title":{},"body":{"changelog.html":{}}}],["repotouservotes",{"_index":4204,"title":{},"body":{"changelog.html":{}}}],["repovotecontroller",{"_index":2605,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":3636,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":4585,"title":{},"body":{"index.html":{}}}],["representing",{"_index":939,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":2763,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{}}}],["req.headers",{"_index":2815,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3017,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":554,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":3194,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":3365,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":2251,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":2167,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:29",{"_index":2180,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:42",{"_index":2183,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:54",{"_index":2177,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["request.entity.ts",{"_index":1167,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:101",{"_index":1246,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:108",{"_index":1253,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:128",{"_index":1234,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:138",{"_index":1224,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:145",{"_index":1203,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:152",{"_index":1201,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:162",{"_index":1198,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:172",{"_index":1197,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:18",{"_index":1220,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:182",{"_index":1213,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:192",{"_index":1210,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:202",{"_index":1239,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:212",{"_index":1262,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:222",{"_index":1236,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:229",{"_index":1211,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":1193,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:243",{"_index":1215,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:25",{"_index":1244,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:250",{"_index":1207,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:261",{"_index":1218,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:32",{"_index":1241,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:39",{"_index":1251,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:46",{"_index":1217,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:53",{"_index":1238,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:60",{"_index":1237,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:67",{"_index":1242,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:74",{"_index":1261,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:84",{"_index":1249,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:94",{"_index":1255,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":1737,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":2249,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":686,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":2267,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:116",{"_index":2280,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:17",{"_index":2273,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:24",{"_index":2275,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:30",{"_index":2276,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:48",{"_index":2278,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:73",{"_index":2282,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":4776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":1397,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":1398,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":1399,"title":{},"body":{"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{}}}],["requesting",{"_index":3854,"title":{},"body":{"changelog.html":{}}}],["requestmethod",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":562,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserController.html":{},"changelog.html":{}}}],["requests/code",{"_index":437,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"coverage.html":{}}}],["requests/dtos/create",{"_index":1755,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["requests/dtos/pull",{"_index":687,"title":{},"body":{"controllers/ContributorController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requests/pull",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse-1.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["require(\"node",{"_index":491,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["required",{"_index":2720,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":4436,"title":{},"body":{"changelog.html":{}}}],["reserved",{"_index":2978,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["response",{"_index":492,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["response.decorator",{"_index":684,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":4451,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":2864,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":2891,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":2872,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:116",{"_index":2888,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:122",{"_index":2877,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:128",{"_index":2895,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":2904,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":2896,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":2874,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":2869,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":2885,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":2870,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":2900,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":2882,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":2884,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":2879,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":2865,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":2878,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":2893,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":2903,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":2899,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":2866,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":513,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["response.ok",{"_index":511,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["response.on(\"finish",{"_index":1917,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":4600,"title":{},"body":{"license.html":{}}}],["results",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":3843,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":4092,"title":{},"body":{"changelog.html":{}}}],["retrieves",{"_index":1619,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["retrieving",{"_index":3700,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":3967,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":3966,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":4094,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":4602,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":4232,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["rounded",{"_index":1808,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":3764,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":4532,"title":{},"body":{"index.html":{}}}],["rules",{"_index":4170,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":4300,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":4350,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":4345,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["russian",{"_index":1770,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["san",{"_index":2889,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":812,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":796,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":2962,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/api.opensauced.pizza",{"_index":3655,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":4660,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":4664,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":4662,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":993,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":971,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":759,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1118,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":2394,"title":{},"body":{"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":1748,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights/pull/1",{"_index":811,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1447,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":808,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1431,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":731,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":721,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/open",{"_index":3674,"title":{},"body":{"changelog.html":{}}}],["sauced/triage",{"_index":4507,"title":{},"body":{"index.html":{}}}],["saucedopen",{"_index":2898,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":2973,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":4012,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":4026,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":4210,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":4229,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":4378,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":4386,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":4430,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["search",{"_index":2347,"title":{},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["searchallpullrequestcontributors",{"_index":669,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":670,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":2170,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":2181,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":673,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["secretkey",{"_index":4757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":4767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["see",{"_index":4567,"title":{},"body":{"index.html":{}}}],["select",{"_index":949,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":2446,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"count(full_name",{"_index":3314,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"emoji_id",{"_index":3330,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"pull_requests.author_login",{"_index":2299,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"users.login",{"_index":1716,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["select(['repo.id",{"_index":2451,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":2228,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`regexp_replace(regexp_replace(user_highlights.url",{"_index":3306,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(`to_char(now",{"_index":2232,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1146,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":1975,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":4608,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1102,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":3792,"title":{},"body":{"changelog.html":{}}}],["servers",{"_index":4077,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":4221,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":2729,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":2728,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":2770,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["setparameters(querybuilder.getparameters",{"_index":3313,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["shall",{"_index":4617,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":798,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":793,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["short",{"_index":1072,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1053,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":3851,"title":{},"body":{"changelog.html":{}}}],["showcase",{"_index":1227,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1223,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["sig",{"_index":2814,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1270,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1260,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":2817,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["simple",{"_index":4172,"title":{},"body":{"changelog.html":{}}}],["simplify",{"_index":3718,"title":{},"body":{"changelog.html":{}}}],["singleline",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2150,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["skip(pageoptionsdto.skip",{"_index":2082,"title":{},"body":{"injectables/InsightsService.html":{}}}],["slow",{"_index":4050,"title":{},"body":{"changelog.html":{}}}],["small",{"_index":3736,"title":{},"body":{"changelog.html":{}}}],["snippet",{"_index":460,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["soft",{"_index":4180,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":4498,"title":{},"body":{"index.html":{},"license.html":{}}}],["sort",{"_index":3880,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["source_branch",{"_index":1185,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":704,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":705,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1186,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1162,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach(type",{"_index":2238,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1141,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":2386,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests.repo_id",{"_index":2385,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":2021,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1764,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["spec",{"_index":4338,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":3855,"title":{},"body":{"changelog.html":{}}}],["specifications",{"_index":462,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["split",{"_index":3906,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":2875,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":908,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"changelog.html":{}}}],["src/.../api",{"_index":4671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":4670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":4672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":4481,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../db",{"_index":4673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":4674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":4482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":4491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../openai.config.ts",{"_index":4675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":4483,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pull",{"_index":4485,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":4486,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":4676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":4677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":4669,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":4487,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":4678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:199",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:109",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:139",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:156",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:175",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:73",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:94",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":426,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":2863,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":3510,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":2905,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":2908,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":2911,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":2916,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":2914,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":4449,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":4488,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":4450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":1740,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":2120,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":2105,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":2113,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":2109,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":2355,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":879,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":1903,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/util/cli",{"_index":4456,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":4458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":4459,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":4462,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":4464,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":4465,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":921,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":962,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":953,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":964,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":936,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":958,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":947,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":969,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":950,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":931,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":972,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":577,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":633,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":637,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":641,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":586,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":2305,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":667,"title":{},"body":{"controllers/ContributorController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts:24",{"_index":679,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":696,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/customer/customer.entity.ts",{"_index":995,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:17",{"_index":997,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:27",{"_index":999,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":853,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":856,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":867,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":871,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:27",{"_index":869,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:36",{"_index":866,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":862,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":1545,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:25",{"_index":1553,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":1563,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":1565,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":1567,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":1569,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":1570,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1003,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:17",{"_index":1017,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:24",{"_index":1019,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:31",{"_index":1026,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:38",{"_index":1014,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:48",{"_index":1007,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:58",{"_index":1024,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:65",{"_index":1008,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:69",{"_index":1023,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":699,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/dto/update",{"_index":2934,"title":{},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/endorsement",{"_index":1724,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":1576,"title":{},"body":{"controllers/EndorsementController.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts:101",{"_index":1622,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:112",{"_index":1613,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:128",{"_index":1616,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:143",{"_index":1597,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:29",{"_index":1589,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:43",{"_index":1605,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:56",{"_index":1602,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:70",{"_index":1609,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":1668,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":1670,"title":{},"body":{"injectables/EndorsementService.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.service.ts:105",{"_index":1689,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:125",{"_index":1691,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:13",{"_index":1677,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:150",{"_index":1693,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:165",{"_index":1695,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:19",{"_index":1679,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:23",{"_index":1681,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:27",{"_index":1682,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:45",{"_index":1684,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:64",{"_index":1686,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:83",{"_index":1688,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1033,"title":{},"body":{"entities/DbEndorsement.html":{},"coverage.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:11",{"_index":1037,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:18",{"_index":1036,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:25",{"_index":1039,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:32",{"_index":1041,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:39",{"_index":1044,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:46",{"_index":1046,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:56",{"_index":1048,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:66",{"_index":1034,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/health/health.controller.ts",{"_index":1812,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":1818,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1821,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1858,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":1901,"title":{},"body":{"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":1482,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":1861,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:28",{"_index":1874,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:41",{"_index":1869,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:55",{"_index":1880,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":1899,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":734,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":2009,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":2937,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":1084,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1051,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:101",{"_index":1058,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:109",{"_index":1080,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:113",{"_index":1071,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:27",{"_index":1060,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:37",{"_index":1081,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:47",{"_index":1068,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":1066,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":1065,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:71",{"_index":1075,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:81",{"_index":1055,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:91",{"_index":1078,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":1960,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":1928,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:25",{"_index":1937,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:42",{"_index":1943,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":2043,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":2050,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":2056,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":2060,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":2063,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:41",{"_index":2059,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:45",{"_index":2067,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:49",{"_index":2065,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:53",{"_index":2062,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":3342,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":816,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":769,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":1127,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":1133,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1132,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1129,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1131,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1128,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":2088,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":2092,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":2098,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":2095,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":4470,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pull",{"_index":436,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":2391,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":4472,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1282,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":1287,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":1295,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":1291,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":1284,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":1292,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":1285,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":1294,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":1289,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1300,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":1304,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":1311,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":1307,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":1302,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":1308,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":1303,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":1310,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":1306,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1315,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":1320,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":1330,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":1326,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":1323,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":1318,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":1327,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":1319,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":1329,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":1325,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":1334,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":1338,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":1345,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":1341,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":1336,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":1342,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":1337,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":1344,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":1340,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":2330,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:22",{"_index":2340,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:35",{"_index":2344,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:49",{"_index":2335,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:62",{"_index":2338,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":2403,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":2423,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:140",{"_index":2435,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:15",{"_index":2427,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:155",{"_index":2436,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:170",{"_index":2433,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:199",{"_index":2434,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:22",{"_index":2439,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:32",{"_index":2431,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:56",{"_index":2430,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":2489,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":2644,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":2646,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":2652,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":2656,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":2654,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":2650,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":2532,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":2674,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":2676,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":2682,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":2686,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":2684,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":2680,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":2752,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":2699,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":2701,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":2710,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":2706,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":2708,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":2704,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":2570,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":2840,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":2842,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":2848,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":2852,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":2850,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":2846,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":1349,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1512,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":776,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":2948,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1394,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/user",{"_index":2999,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":3068,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:33",{"_index":3091,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:47",{"_index":3086,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":3077,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:79",{"_index":3081,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":4476,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":3450,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":3544,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:107",{"_index":3575,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:131",{"_index":3571,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":3555,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:146",{"_index":3577,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:156",{"_index":3573,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:166",{"_index":3569,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:170",{"_index":3567,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:177",{"_index":3561,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":3557,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":3563,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:63",{"_index":3565,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":3559,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":2606,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":3629,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":3631,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":3637,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":3641,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:46",{"_index":3639,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":3635,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["stable",{"_index":4381,"title":{},"body":{"changelog.html":{}}}],["stack",{"_index":831,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1322,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":1301,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":2499,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":2645,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":2490,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":2504,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":2507,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":2511,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":2515,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":2518,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":2522,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":2648,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":2655,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":2663,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":2664,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1283,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":2675,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":2533,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":2544,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":2547,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":2550,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":2554,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":2557,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":2559,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":2678,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":2685,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":4154,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":2691,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":2692,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":19,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":2537,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":2551,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":2538,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":2555,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":2460,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":2417,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":2558,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":18,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":2494,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":2512,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":2495,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":2516,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":2510,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":2411,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":2418,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":2521,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":473,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbSubscription.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":4520,"title":{},"body":{"index.html":{}}}],["started",{"_index":3653,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":1915,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":4709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stash",{"_index":3724,"title":{},"body":{"changelog.html":{}}}],["state",{"_index":1187,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["statements",{"_index":4443,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":3721,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":1360,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":1919,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":1920,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["strategy",{"_index":4173,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":3903,"title":{},"body":{"changelog.html":{}}}],["stress",{"_index":3725,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(process.env.api_codename",{"_index":4681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":4685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":4683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":4684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":4700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":4748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":4755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":4750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":4766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":4764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":4758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":4762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":4759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":4711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":4726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":4720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":4731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":4713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":4727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":4718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":4730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":4714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":4728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":4723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":4732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":4716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":4729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":888,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":905,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1758,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":1792,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":2712,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":2831,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":2700,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2826,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":865,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":424,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":335,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":20,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":2733,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":2751,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":21,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":3899,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":4656,"title":{},"body":{"properties.html":{}}}],["stuff",{"_index":4118,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":1807,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["styles",{"_index":4056,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":1391,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":1375,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":4742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":2823,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":2824,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subject",{"_index":4613,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":4606,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1317,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":2579,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":2459,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":2416,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":2597,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":2841,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":2571,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":2581,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":2584,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":2588,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":2591,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":2594,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":2596,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":2844,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":2851,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":2859,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":2857,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":2858,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":22,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":2575,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":2589,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":2576,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":2592,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":2595,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":2587,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":2440,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["subquery.getrawone",{"_index":3316,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquery_for_count",{"_index":3312,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquerycount",{"_index":2425,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":2437,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":2211,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":2219,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":2413,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":1365,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":2793,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":2792,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":2795,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":2828,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":1350,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":1374,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":1364,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":1368,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":1387,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":1386,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":1376,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":1389,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":1384,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":1377,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":1380,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":1381,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":1366,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":1369,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":1373,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":1372,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":2800,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":2787,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":2791,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":2790,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":2734,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":2735,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":2737,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":2742,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":2744,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":2740,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":2789,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":2804,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":2802,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":2786,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":2766,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":4761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":2741,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":1390,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["subscriptionsessioncancelurl",{"_index":4765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":4763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":4619,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":2724,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":4139,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":4704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":469,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":472,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion",{"_index":458,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.controller",{"_index":2253,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":543,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"coverage.html":{}}}],["suggestion.controller.ts:25",{"_index":555,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":450,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":1756,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["suggestion.dto.ts:13",{"_index":1761,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:24",{"_index":1775,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:34",{"_index":1773,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:41",{"_index":1759,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":559,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":439,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"coverage.html":{}}}],["suggestion.service.ts:10",{"_index":567,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion.service.ts:14",{"_index":571,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion.service.ts:25",{"_index":569,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestions",{"_index":3688,"title":{},"body":{"changelog.html":{}}}],["suite",{"_index":4521,"title":{},"body":{"index.html":{}}}],["summary",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["supabase",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"properties.html":{}}}],["supabase.guard",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":445,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserService.html":{}}}],["supabaseauthdto",{"_index":330,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":4668,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":2921,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":326,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":2927,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":2924,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":2926,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":425,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":2922,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":842,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":2932,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":849,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":847,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":845,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":2931,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":848,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":3921,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supporting",{"_index":3929,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":4643,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3977,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":4075,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":503,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["t",{"_index":2108,"title":{},"body":{"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":4772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{}}}],["tables",{"_index":4214,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4478,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":4293,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":4269,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1258,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["take",{"_index":3950,"title":{},"body":{"changelog.html":{}}}],["take(pageoptionsdto.limit",{"_index":2083,"title":{},"body":{"injectables/InsightsService.html":{}}}],["target",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["target_branch",{"_index":1188,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1189,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["targets",{"_index":4085,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":2449,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":755,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{},"index.html":{}}}],["team'})@column({type",{"_index":1067,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":743,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":4316,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":4665,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":506,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["temporary",{"_index":4127,"title":{},"body":{"changelog.html":{}}}],["tense",{"_index":530,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":4308,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":4531,"title":{},"body":{"index.html":{}}}],["tester",{"_index":3726,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":4272,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":4529,"title":{},"body":{"index.html":{}}}],["text",{"_index":479,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1275,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{}}}],["th3nn3ss'})@column('text",{"_index":1202,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1271,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1248,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":3405,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":3357,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":2312,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":1550,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":1601,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":2179,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":677,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":2334,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":1873,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":1868,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":2711,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":3502,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.basefilterquerybuilder(range",{"_index":2484,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":874,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":564,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":1732,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":1842,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":1844,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":1857,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":1849,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":1853,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":1855,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":1851,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":1847,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":1837,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":1839,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":497,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":501,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":2722,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":2727,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":2725,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":2819,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":653,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":2325,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":873,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":878,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":2779,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":2118,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":1835,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":1843,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":1840,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":1572,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":1560,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":1698,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":1713,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":1699,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":1721,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":1639,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":1641,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":1659,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":3114,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":1661,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":3116,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":1644,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":1648,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":1652,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":1655,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":1663,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":2295,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findonebyid(id",{"_index":3597,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generateprompt(options.language",{"_index":504,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.hasnextpage",{"_index":2147,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":2146,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":1834,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":1856,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":1848,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":1852,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":1854,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":1850,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":1846,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":1991,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":1993,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":1995,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":1994,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":3385,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":3375,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":3377,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":3391,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":3400,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":3398,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":2035,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":2038,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":2070,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":2075,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":2077,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":2076,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":1996,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":3444,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":3420,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":3434,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":3417,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":3413,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":1955,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":3373,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":1958,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":3421,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.itemcount",{"_index":2143,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2141,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.logger",{"_index":909,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":918,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`${query",{"_index":914,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`error",{"_index":2809,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":1921,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":912,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":2812,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":1926,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":917,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":1924,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":916,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":2102,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":2103,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":844,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":846,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":2827,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":2834,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":3494,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":1836,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":1838,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":2119,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":2139,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":2144,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":2226,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":2205,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":2284,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":2296,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":2190,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":3096,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":693,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":2191,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":2196,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":2230,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":2466,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":2450,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":2350,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":2351,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":2324,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":2328,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":2688,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":2693,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":2694,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":2695,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":2659,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":2666,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":2667,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":2669,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":2854,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":2860,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":2861,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":2862,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":3643,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":3649,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":3650,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":3651,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":2567,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":2563,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":2529,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":2526,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":913,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":2716,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":2715,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":2781,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":2821,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":2806,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":2603,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":2600,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":2457,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":2239,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":2746,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":2747,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":3058,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":3060,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":3062,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":3061,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.addusercollaboration",{"_index":3032,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":3029,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":3036,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":3043,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":3040,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows",{"_index":3137,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":3146,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":3148,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":3149,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":3175,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":3173,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":3177,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":3329,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":3338,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":3340,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":3341,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":3320,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":3287,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.manager.createquerybuilder",{"_index":3310,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":3326,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":3328,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":3327,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":3230,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":3244,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":3239,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":3249,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":1891,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":3098,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":1896,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":1894,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":3238,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":3233,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":3231,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction(highlightid",{"_index":3248,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":3234,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":3487,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":3495,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":3508,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":3147,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(userid",{"_index":3339,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":3464,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userreporepository.create",{"_index":3541,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":3538,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":3542,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.create",{"_index":3599,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":3581,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":3607,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":3383,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserNotificationService.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":3030,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":1658,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":2808,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":2638,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":2635,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":1841,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":515,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":902,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":4051,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":938,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":794,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{}}}],["tld",{"_index":4419,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":4701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todatetime",{"_index":2767,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":2794,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":2796,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":2799,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":2798,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":2797,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":2801,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":2805,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":2803,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1159,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["token",{"_index":1736,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["token\")_token",{"_index":1638,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["token.guard",{"_index":1631,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":1725,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":1727,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":1730,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":526,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":4541,"title":{},"body":{"index.html":{}}}],["top",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":2016,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":2382,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":2381,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":2383,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":1743,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["topics",{"_index":3934,"title":{},"body":{"changelog.html":{}}}],["toprepos",{"_index":3100,"title":{},"body":{"controllers/UserController.html":{}}}],["tort",{"_index":4638,"title":{},"body":{"license.html":{}}}],["total",{"_index":932,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["transformer",{"_index":751,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["translatetime",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":470,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":1385,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":1361,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":1362,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":3808,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":2112,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":2111,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["turbo",{"_index":4753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":2897,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["twitter_username",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4666,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":489,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["typeorm",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":1824,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":882,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":583,"title":{},"body":{"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/PullRequestModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":2091,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":2405,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":2736,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forrootasync",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":4216,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":4562,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":3874,"title":{},"body":{"changelog.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":4719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":1806,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["unable",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":1944,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":4439,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":490,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["undefined})@column({type",{"_index":1196,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":2995,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":602,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":612,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":2258,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":2407,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isoptional",{"_index":1789,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":749,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":2977,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["undo",{"_index":4231,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":2543,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":2566,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":2541,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":3155,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":3165,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":3167,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":924,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":4538,"title":{},"body":{"index.html":{}}}],["unix",{"_index":4768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":518,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unnecessary",{"_index":468,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unprocessableentityexception",{"_index":3410,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":2894,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":1406,"title":{},"body":{"entities/DbUserCollaboration.html":{},"changelog.html":{}}}],["update",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":4008,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":1076,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["updated_at",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":980,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":3393,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":3397,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":3396,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":3038,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferences",{"_index":3548,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":3566,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":2933,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["updatehighlightdto",{"_index":3225,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":3235,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":3189,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":3222,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":2054,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":2066,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":1942,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":3423,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":3422,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter(repoinfo",{"_index":3440,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find(repoinfo",{"_index":3429,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":3402,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":3407,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":1966,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":1986,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":2941,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":3394,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":3549,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":3568,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":3550,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":3570,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":3551,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":3572,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{}}}],["updateuser",{"_index":3552,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":3574,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusercollaboration",{"_index":3005,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":3019,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":2947,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["updateusercollaborationdto.status",{"_index":3039,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":295,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":296,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":3259,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":3283,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":305,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":3553,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":3576,"title":{},"body":{"injectables/UserService.html":{}}}],["upgrades",{"_index":3872,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":2784,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":2738,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":2743,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["url'})@column({type",{"_index":1042,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":4743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":3704,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":3781,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":1904,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":1905,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["usefactory",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":1634,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["useless",{"_index":3298,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1105,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3203,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":3014,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apiokresponse({type",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":3610,"title":{},"body":{"injectables/UserService.html":{}}}],["user.collaborations",{"_index":1422,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.collaborations)@joincolumn({name",{"_index":1416,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.company",{"_index":3613,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":3452,"title":{},"body":{"modules/UserModule.html":{}}}],["user.display_email",{"_index":3621,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":3615,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":2953,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":2969,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":2961,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":2956,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2983,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2981,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:56",{"_index":2958,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:65",{"_index":2966,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:74",{"_index":2960,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:83",{"_index":2972,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:91",{"_index":2965,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:99",{"_index":2963,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":3609,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1420,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.github_sponsors_url",{"_index":3617,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":1455,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":1449,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":3033,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1083,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":1079,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":3620,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":3618,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":3614,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":3608,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":3622,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1298,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1293,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1313,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1309,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1332,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1328,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":1347,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":1343,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":1423,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.request_collaborations)@joincolumn({name",{"_index":1411,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.service",{"_index":3092,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{}}}],["user.timezone",{"_index":3616,"title":{},"body":{"injectables/UserService.html":{}}}],["user.toprepos",{"_index":1542,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":1538,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.twitter_username",{"_index":3612,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":3611,"title":{},"body":{"injectables/UserService.html":{}}}],["user/collaborations",{"_index":3001,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/update",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":3103,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{}}}],["user/highlights",{"_index":3180,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":3344,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":3457,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/user",{"_index":1885,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user/user.service",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user_collaborations",{"_index":1421,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows_deleted_at",{"_index":3144,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":1475,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["user_highlights",{"_index":1453,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.user_id=users.id",{"_index":3289,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":3291,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":3294,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":1054,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["user_id=:userid",{"_index":3297,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_metadata",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_notifications",{"_index":1508,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserService.html":{}}}],["user_notifications.read_at",{"_index":3584,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.type",{"_index":3583,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.user_id=users.id",{"_index":3488,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_repos",{"_index":1518,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":1541,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":3041,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":3042,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":2998,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercollaborationrepository",{"_index":3048,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":3023,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":3067,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["userendorsementcontroller",{"_index":3101,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowrepository",{"_index":3125,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":3151,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":3117,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":3247,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":3261,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":3263,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":3178,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":1884,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":2045,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":2044,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["usermodule",{"_index":23,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"controllers/EndorsementController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":3159,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":3168,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":3090,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3084,"title":{},"body":{"controllers/UserController.html":{}}}],["username.tolowercase",{"_index":3591,"title":{},"body":{"injectables/UserService.html":{}}}],["usernames",{"_index":2979,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":3479,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":3499,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":3498,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":3500,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":3496,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":3497,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":3451,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":3472,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":3123,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":1504,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":3503,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":3505,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":282,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrelations",{"_index":2432,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":2477,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":3515,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["userreporepository",{"_index":3531,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":3556,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":24,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":3524,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":2807,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"index.html":{}}}],["users_email",{"_index":3588,"title":{},"body":{"injectables/UserService.html":{}}}],["users_notification_count",{"_index":3585,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1296,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1312,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1331,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":1346,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":1529,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["userservice",{"_index":333,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":674,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["utc",{"_index":2970,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":1913,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":2768,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1015,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1030,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["v4'})@column({type",{"_index":1464,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1095,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1016,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":475,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["validate",{"_index":2910,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"changelog.html":{}}}],["validate(user",{"_index":2915,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":2116,"title":{},"body":{"classes/PageDto.html":{}}}],["validation",{"_index":3801,"title":{},"body":{"changelog.html":{}}}],["validator",{"_index":625,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["value",{"_index":597,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":3787,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":4287,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":4277,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":928,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["velocity",{"_index":3878,"title":{},"body":{"changelog.html":{}}}],["verbose",{"_index":822,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":835,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verify",{"_index":4424,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":4382,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":4432,"title":{},"body":{"changelog.html":{}}}],["versioning",{"_index":3793,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":4150,"title":{},"body":{"changelog.html":{}}}],["videos",{"_index":4579,"title":{},"body":{"index.html":{}}}],["view",{"_index":1936,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["view'})@isstring()@isin(['view",{"_index":2942,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":1476,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":740,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visual",{"_index":4584,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":4128,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":4583,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":4587,"title":{},"body":{"index.html":{}}}],["vite",{"_index":4143,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":4543,"title":{},"body":{"index.html":{}}}],["void",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":4325,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":4357,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":992,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":926,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex/api.opensauced.pizza",{"_index":4400,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":2873,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":1335,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":2615,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":3630,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":2607,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":2617,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":2620,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":2624,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":2627,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":2630,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":2632,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":3633,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":3640,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":2623,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":3647,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":3648,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":25,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":2611,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":2625,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":2612,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":2628,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":2458,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":2415,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":2631,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":3710,"title":{},"body":{"changelog.html":{}}}],["waitlist",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":2883,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":823,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":837,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warnings",{"_index":3746,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":4625,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4621,"title":{},"body":{"license.html":{}}}],["watch",{"_index":4523,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":2412,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":4528,"title":{},"body":{"index.html":{}}}],["web",{"_index":1814,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":3999,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":2754,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":2756,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":2765,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:78",{"_index":2762,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":2755,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":4473,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":2753,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":2818,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":2901,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":1510,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":1503,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"contribution.repo_id",{"_index":656,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"customer.id=:id",{"_index":875,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"customer.stripe_customer_id=:id",{"_index":877,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"endorsements.creator_user_id",{"_index":1702,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"endorsements.id",{"_index":1719,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":1703,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"id",{"_index":3586,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":1997,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":2071,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":2078,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(repos.full_name",{"_index":1708,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":2689,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":2661,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":2855,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":3645,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":2475,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":2474,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":3065,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.user_id",{"_index":3138,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":3332,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":3292,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.user_id",{"_index":3318,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":3489,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["where(\"user_repos.user_id",{"_index":3543,"title":{},"body":{"injectables/UserReposService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":2448,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":2288,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`user_highlights.url",{"_index":3307,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["whether",{"_index":1437,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["windows",{"_index":4509,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":2660,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":944,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"license.html":{}}}],["work",{"_index":4226,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":4087,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["workflows",{"_index":3750,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":4167,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":4537,"title":{},"body":{"index.html":{}}}],["writing",{"_index":4115,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["written",{"_index":461,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["xa",{"_index":1232,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":4374,"title":{},"body":{"changelog.html":{}}}],["year",{"_index":3813,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":642,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{}}}],["yml",{"_index":3676,"title":{},"body":{"changelog.html":{}}}],["you'})@column({type",{"_index":1494,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["youtube",{"_index":4581,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":2233,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["zone",{"_index":945,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { ApiConfig, DbApiConfig, DbLoggingConfig, EndpointConfig, StripeConfig, OpenAIConfig } from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n        OpenAIConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) => ({\n        parseInt8: true,\n        type: configService.get(\"db-api.connection\"),\n        host: configService.get(\"db-api.host\"),\n        port: configService.get(\"db-api.port\"),\n        username: configService.get(\"db-api.username\"),\n        password: configService.get(\"db-api.password\"),\n        database: configService.get(\"db-api.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbUserRepo,\n          DbUserHighlight,\n          DbUserHighlightReaction,\n          DbUserNotification,\n          DbUserCollaboration,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n          DbInsight,\n          DbInsightMember,\n          DbInsightRepo,\n          DbCustomer,\n          DbSubscription,\n          DbPullRequest,\n          DbPRInsight,\n          DbUserToUserFollows,\n          DbEmoji,\n          DbUserTopRepo,\n          DbEndorsement,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"OS\"),\n        ssl: {\n          ca: configService.get(\"db-api.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) => ({\n        parseInt8: true,\n        type: configService.get(\"db-logging.connection\"),\n        host: configService.get(\"db-logging.host\"),\n        port: configService.get(\"db-logging.port\"),\n        username: configService.get(\"db-logging.username\"),\n        password: configService.get(\"db-logging.password\"),\n        database: configService.get(\"db-logging.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbLog,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"LG\"),\n        ssl: {\n          ca: configService.get(\"db-logging.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor (\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource,\n  ) {}\n\n  configure (consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HttpLoggerMiddleware)\n      .forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email: session_email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role, name, bio, location, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url, notification_count } = await this.userService.checkAddUser(user);\n\n      userProfile = { is_onboarded, insights_role, is_waitlisted, name, location, bio, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url, notification_count };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n      @Body() body: UserOnboardingDto,\n  ): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { email, user_metadata: { sub } } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserProfileInterestsDto,\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserEmailPreferencesDto,\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor (private configService: ConfigService) {}\n\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n  ) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \\\"```suggestion\\\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse-1.html":{"url":"interfaces/ChatResponse-1.html","title":"interface - ChatResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor (private configService: ConfigService) {}\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n    tone: string,\n  ) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"}`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength, options.tone),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor (private codeRefactorSuggestionService: CodeRefactorSuggestionService) {\n\n  }\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription (\n  @Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto,\n  ) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw (new BadRequestException);\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor (private configService: ConfigService) {}\n\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n  ) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \\\"```suggestion\\\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbContribution,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor (\n    private readonly pullRequestService: PullRequestService,\n  ) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors (\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ContributorController } from \"./contributor.controller\";\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbPullRequest,\n    ], \"ApiConnection\"),\n    PullRequestModule,\n  ],\n  controllers: [ContributorController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: Number, example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: Number, example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: Number,\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: Number,\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n    name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n    is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n    repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n    username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n    message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsDateString, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor (\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogService,\n  ) {\n    super(\n      context,\n      {\n        ...options,\n        logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n      },\n    );\n\n    this.logsService = logsService;\n  }\n\n  async log (message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error (message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn (message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_CustomerModule_exports\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbCustomer,\n    ], \"ApiConnection\"),\n  ],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor (\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById (id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer (userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor (name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery (query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError (error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow (time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`);\n  }\n\n  logMigration (message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild (message: string) {\n    this.logger.warn(message);\n  }\n\n  log (level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters (parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:56\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn, ManyToOne, JoinColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbInsightRepo } from \"./insight-repo.entity\";\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, insightRepo => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, insight => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:74\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  PrimaryColumn, Column,\n} from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:152\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:250\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:192\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:229\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:182\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:243\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:261\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:222\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:212\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations)@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.collaborations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.request_collaborations)\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n    highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n    user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n    emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor (\n    private emojiService: EmojiService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis (\n  @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbEmoji,\n    ], \"ApiConnection\"),\n  ],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor (\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor (\n    private readonly endorsementService: EndorsementService,\n    private readonly userService: UserService,\n  ) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement (\n  @Headers(\"X-OpenSauced-token\")_token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto,\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements (\n  @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername (\n  @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo (\n  @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById (@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements (\n  @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements (\n  @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById (@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_imports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbEndorsement,\n    ], \"ApiConnection\"),\n    UserModule,\n    AuthModule,\n  ],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor (\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create (createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByCreatorUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.creator_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByRecipientUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByRepoOwnerOrUser (repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllEndorsementsByRepo (owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllEndorsementsByRepoByUser (owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findOneById (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async remove (id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor (private configService: ConfigService) {}\n\n  canActivate (host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n    descriptionLength: number;\n\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n    temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n    language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n    code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n    descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n    temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n    tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n    language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n    diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\n      \"chore: fixed a bug with the UI\",\n      \"style: added some rounded corners to some boxes\",\n    ],\n  })\n  @IsOptional()\n    commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiBadRequestResponse, ApiNotFoundResponse } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightReaction } from \"../user/entities/user-highlight-reaction.entity\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightReactions (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { HighlightController } from \"./highlight.controller\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserHighlight,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use (request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags, ApiUnauthorizedResponse, ApiBadRequestResponse, ApiBearerAuth, ApiBody } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor (\n    private readonly insightsService: InsightsService,\n  ) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor (\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById (id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsightMember (insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember (id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember (id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight (userId: number, insightId: number, accessRoles: string[], checkOwner = true): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers (\n    pageOptionsDto: PageOptionsDto,\n    insightId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor (\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n  ) {}\n\n  async addInsightRepo (insightId: number, repo: RepoInfo) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo (id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbInsight,\n      DbInsightRepo,\n      DbInsightMember,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor (\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsight (insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight (id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight (id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: InsightPageOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(`:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `, { userId })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor (\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog (log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor (\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests (\n    @Query() pageOptionsDto: PullRequestPageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights (\n    @Query() pageOptionsDto: FilterOptionsDto,\n  ): Promise {\n    return Promise.all([30, 60].map(async interval => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor (private pullRequestDescriptionService: PullRequestDescriptionService) {\n\n  }\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription (\n  @Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto,\n  ) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw (new BadRequestException);\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor (private configService: ConfigService) {}\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n    tone: string,\n  ) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"}`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength, options.tone),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor (\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  subQueryCountPrs (qb: SelectQueryBuilder, type = \"all\", interval = 0, options: FilterOptionsDto) {\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, interval);\n\n    filters.push([`now() - INTERVAL '${interval} days'  {\n    const queryBuilder = this.baseQueryBuilder()\n      .select(`TO_CHAR(now() - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n      .addSelect(`${interval}::INTEGER`, \"interval\")\n      .limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach(type => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbPullRequest,\n      DbPRInsight,\n    ], \"ApiConnection\"),\n    RepoFilterModule,\n  ],\n  controllers: [PullRequestController, PullRequestDescriptionController, CodeRefactorSuggestionController],\n  providers: [PullRequestService, PullRequestInsightsService, PullRequestDescriptionService, CodeRefactorSuggestionService],\n  exports: [PullRequestService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\"\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor (\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  async findAll (\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor (\n    contributor: string,\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addGroupBy(\"author_login\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters (\n    @Query() pageOptionsDto: RepoSearchOptionsDto,\n  ): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters (options: FilterOptionsDto, range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=LOWER(:repo)`, { repo: decodeURIComponent(options.repo) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([`\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `, {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([`\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND now() - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters (qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: Number, example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: Number,\n    example: 234343,\n  })\n  @IsNumber()\n    id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n    fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder (range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND now() - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND now() - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters (pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const range = pageOptionsDto.range!;\n    const queryBuilder = this.baseFilterQueryBuilder(range);\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStars,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStargazers,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor (private configService: ConfigService) {}\n\n  get stripe () {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer (id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession (customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\"),\n  ],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor (\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription (subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [\n    StripeSubscriptionModule,\n    CustomerModule,\n    StripeModule,\n    UserModule,\n  ],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { toDateTime } from \"./utils\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/user.service\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor (\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService,\n  ) {}\n\n  private async manageSubscriptionStatusChange (subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw (new BadRequestException);\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, { expand: [\"default_payment_method\"] });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(`Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`);\n      throw (new BadRequestException);\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook (@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw (new BadRequestException);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserSubmissions,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n  })\n  readonly notification_count?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n    access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n    status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, { message: \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\" })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { UserService } from \"../user/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor (\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations (\n    @Query() pageOptionsDto: PageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration (\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n\n    const newUserCollaboration = await this.userCollaborationService.addUserCollaboration({\n      user_id: user.id,\n      request_user_id: userId,\n      message: createUserCollaborationDto.message,\n      status: \"pending\",\n    });\n\n    return newUserCollaboration;\n  }\n\n  @Patch(\":id\")\n  @ApiOperation({\n    operationId: \"updateUserCollaboration\",\n    summary: \"Updates a user collaboration\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to find user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateUserCollaborationDto })\n  async updateUserCollaboration (\n    @Param(\"id\") id: string,\n      @UserId() userId: number,\n      @Body() updateUserCollaborationDto: UpdateUserCollaborationDto,\n  ): Promise {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw (new UnauthorizedException);\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById (\n    @Param(\"id\") id: string,\n      @UserId() userId: number,\n  ): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor (\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById (id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration (userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration (id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration (id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor (\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService,\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById (\n    @Param(\"username\") username: string,\n  ): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor (private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements (\n  @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements (\n  @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor (\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async findUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId (userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor (\n    private readonly userService: UserService,\n    private readonly userFollowService: UserFollowService,\n  ) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiConflictResponse } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser (\n    @Body() createHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getUserHighlight (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser (\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, { ...updateHighlightDto, shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser (\n    @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightUserReactions (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  async addHighlightReactionForUser (\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightReactionForUser (\n    @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(highlightId, userId, emojiId);\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor (\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([`user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`, { userId: followerUserId }]);\n    }\n\n    if (pageOptionsDto.repo) {\n      // eslint-disable-next-line no-useless-escape\n      filters.push([`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`, { repo: decodeURIComponent(pageOptionsDto.repo) }]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllHighlightRepos (pageOptionsDto: PageOptionsDto, follwerUserId?: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .distinct(true)\n\n      // eslint-disable-next-line no-useless-escape\n      .select(`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')`, \"full_name\")\n      .where(`user_highlights.url LIKE '%github.com%'`);\n\n    if (follwerUserId) {\n      queryBuilder.andWhere(`user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`, { userId: follwerUserId });\n    }\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const subQuery = this.userHighlightRepository.manager.createQueryBuilder()\n      .from(`(${queryBuilder.getQuery()})`, \"subquery_for_count\")\n      .setParameters(queryBuilder.getParameters())\n      .select(\"count(full_name)\");\n\n    const countQueryResult = await subQuery.getRawOne();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_highlights.user_id = :userId\", { userId })\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserHighlight (userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : (new Date),\n    });\n\n    return this.userHighlightRepository.save(newUserHighlight);\n  }\n\n  async updateUserHighlight (highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight (highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions (highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder\n      .addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReaction[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction (highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction (userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction (id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService,\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @Param(\"id\", ParseIntPipe) insightId: number,\n      @UserId() userId: number,\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"]);\n\n    if (!canAccess) {\n      throw new (UnauthorizedException);\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  async addInsightMember (\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n      @Param(\"id\", ParseIntPipe) insightId: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"], false);\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  async updateInsightMember (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n      @Body() updateInsightMemberDto: UpdateInsightMemberDto,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new (UnauthorizedException);\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeInsightMemberById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @UserId() userId: string,\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser (\n    @Body() createInsightDto: CreateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw (new BadRequestException);\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async repo => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Body() updateInsightDto: UpdateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter(insightRepo => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(repo => !updateInsightDto.repos.find(repoInfo => `${repoInfo.id}` === `${repo.repo_id}`));\n\n      const reposToRemoveRequests = reposToRemove.map(async insightRepo => this.insightsRepoService.removeInsightRepo(insightRepo.id));\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map(cr => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(repoInfo => !currentRepoIds.find(id => `${id}` === `${repoInfo.id}`));\n\n      const repoToAddRequests = reposToAdd.map(async repo => this.insightsRepoService.addInsightRepo(insight.id, repo));\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new (UnprocessableEntityException);\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n      DbUserHighlight,\n      DbUserHighlightReaction,\n      DbUserToUserFollows,\n      DbUserTopRepo,\n      DbUserNotification,\n      DbUserCollaboration,\n      DbRepo,\n      DbEndorsement,\n    ], \"ApiConnection\"),\n    PullRequestModule,\n    RepoModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n  ],\n  exports: [UserService, UserHighlightsService, UserFollowService, RepoService, EndorsementService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserNotification})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor (\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserNotification })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications (\n    @UserId() userId: number,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor (\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .andWhere(\"user_notifications.read_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n    const notificationIds = entities.map(notification => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification (userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: (new Date),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification (userId: number, followedUserId: number ) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightNotification (userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead (notificationIds: number[]) {\n    const updates = notificationIds.map(async id => this.userNotificationRepository.update(id, { read_at: (new Date) }));\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nUserReposService \n\nUserReposService \n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserRepo,\n    ], \"ApiConnection\"),\n  ],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor (\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserRepo (userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: UserRepoOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder\n      .where(\"user_repos.user_id = :userId\", { userId });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UpdateUserDto } from \"./dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"./dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"./dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../auth/dtos/user-onboarding.dto\";\nimport { userNotificationTypes } from \"./entities/user-notification.constants\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"user_notifications\".\"id\"), 0)\n          FROM user_notifications\n          WHERE user_id = :userId\n          AND user_notifications.type IN (:...userNotificationTypes)\n          AND user_notifications.read_at IS NULL\n        )::INTEGER`,\n        \"users_notification_count\",\n      )\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      queryBuilder.setParameters({ userId: id, userNotificationTypes });\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByUsername (username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"LOWER(login) = :username\", { username: username.toLowerCase() });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n      confirmed_at,\n    } = user;\n    const github = identities!.filter(identity => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      return await this.findOneById(id, true);\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: new Date(github.created_at),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n        connected_at: confirmed_at ? new Date(confirmed_at) : (new Date),\n      });\n\n      await newUser.save();\n\n      return newUser;\n    }\n  }\n\n  async updateUser (id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding (id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole (id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests (id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences (id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async findOneByEmail (email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserVotes,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.37.0 (2023-06-06)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n🍕 Features\n\nadd endpoint for fetching contributors based on filters (#177) (9427269)\nadd endpoints for managing endorsements (#176) (487c1a2)\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.37.0-beta.4 (2023-06-01)\n🍕 Features\n\nadd endpoint for fetching contributors based on filters (#177) (9427269)\n\n1.37.0-beta.3 (2023-05-31)\n🍕 Features\n\nadd endpoints for managing endorsements (#176) (487c1a2)\n\n1.37.0-beta.2 (2023-05-31)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n1.37.0-beta.1 (2023-05-24)\n🍕 Features\n\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.36.0 (2023-05-23)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.36.0-beta.2 (2023-05-22)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\n\n1.36.0-beta.1 (2023-05-22)\n🍕 Features\n\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.35.0 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.35.0-beta.1 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.34.0 (2023-05-16)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.2 (2023-05-16)\n🍕 Features\n\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.1 (2023-05-15)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\n\n1.33.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.1-beta.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.0 (2023-05-11)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd endpoint for fetching user notifications (#155) (01301c9)\nadd first commit and pull request date (08f1679)\nadd user notification count to session data (#158) (1c3378e)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect misaligned migrations to real values (bb26d27)\ncorrect npm package not releasing (672ea80)\ncorrect server versioning (1225197)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\nnormalize pull requests status for queries (a057e0e)\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.9 (2023-05-11)\n🐛 Bug Fixes\n\nnormalize pull requests status for queries (a057e0e)\n\n1.33.0-beta.8 (2023-05-11)\n🐛 Bug Fixes\n\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.7 (2023-05-11)\n🍕 Features\n\nadd user notification count to session data (#158) (1c3378e)\n\n1.33.0-beta.6 (2023-05-11)\n🍕 Features\n\nadd endpoint for fetching user notifications (#155) (01301c9)\n\n🐛 Bug Fixes\n\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\n\n1.33.0-beta.5 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect server versioning (1225197)\n\n1.33.0-beta.4 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect misaligned migrations to real values (bb26d27)\n\n1.33.0-beta.3 (2023-05-05)\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\n\n1.33.0-beta.2 (2023-05-04)\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n1.33.0-beta.1 (2023-05-04)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n1.33.0-alpha.3 (2023-05-04)\n🤖 Build System\n\nupdate dependencies (abb24de)\n\n1.33.0-alpha.2 (2023-05-03)\n🐛 Bug Fixes\n\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n1.33.0-alpha.1 (2023-05-03)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\n\n1.32.0-alpha.1 (2023-04-28)\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\n\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n1.29.0-alpha.3 (2023-03-21)\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n🍕 Features\n\nexperimental build improvements (70a6e7b)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\n\n1.32.0 (2023-05-02)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.32.0-beta.1 (2023-04-26)\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.31.1-beta.1 (2023-04-26)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.31.0-beta.1 (2023-04-25)\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.30.2-beta.1 (2023-04-24)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n1.30.1 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\nleft join users for insight members to show pending invites (611b923)\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.3 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\n\n1.30.1-beta.2 (2023-04-20)\n🐛 Bug Fixes\n\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.1 (2023-04-18)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\n\n1.30.1-beta.1 (2023-04-14)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.2 (2023-04-04)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n\nadd user name to insight members list (7e2756b)\n\n1.30.0-beta.1 (2023-04-04)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\n\n1.29.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.1-beta.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\nremove day conversion from pr velocity (5ee770b)\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.4 (2023-03-28)\n🐛 Bug Fixes\n\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.3 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\n\n1.29.0-beta.2 (2023-03-21)\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\n\n1.29.0-beta.1 (2023-03-21)\n🍕 Features\n\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n1.28.0 (2023-03-16)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo full_name to pull request endpoints (#124) (8bfda45)\nadd repo topics (d08173f)\nadd search endpoint for repos with filters (#125) (85a7549)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n1.28.0-beta.3 (2023-03-15)\n🍕 Features\n\nadd search endpoint for repos with filters (#125) (85a7549)\n\n1.28.0-beta.2 (2023-03-15)\n🍕 Features\n\nadd repo full_name to pull request endpoints (#124) (8bfda45)\n\n1.28.0-beta.1 (2023-03-15)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.27.0 (2023-03-10)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.2 (2023-03-10)\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.1 (2023-03-06)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n1.26.0 (2023-02-28)\n1.27.0-alpha.1 (2023-03-09)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.25.0-alpha.10 (2023-03-08)\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\n\n1.25.0-alpha.9 (2023-03-07)\n🍕 Features\n\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\n\n1.25.0-alpha.8 (2023-03-07)\n🍕 Features\n\nadd endpoint for pull requests (#116) (86e013f)\n\n1.25.0-alpha.7 (2023-03-07)\n🐛 Bug Fixes\n\ncorrect user entity name length (66fb61e)\n\n1.25.0-alpha.6 (2023-02-23)\n🐛 Bug Fixes\n\ncorrect references cascade options (a5a4789)\n\n1.25.0-alpha.5 (2023-02-16)\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\n\n1.25.0-alpha.4 (2023-02-16)\n🍕 Features\n\nadd repo topics (d08173f)\n\n1.25.0-alpha.3 (2023-02-14)\n🐛 Bug Fixes\n\ncorrect user entity lenght (e043912)\n\n1.25.0-alpha.2 (2023-02-10)\n🍕 Features\n\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\n\n1.25.0-alpha.1 (2023-02-02)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\nupdate environment and database connections to new logging model (39bdd16)\n\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\ncorrect missing alpha interests migrations (58540e7)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n1.24.0-alpha.6 (2023-02-01)\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\n\n1.24.0-alpha.5 (2023-02-01)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\n\n1.24.0-alpha.4 (2023-02-01)\n🧑‍💻 Code Refactoring\n\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\n\n1.24.0-alpha.3 (2023-01-31)\n🧑‍💻 Code Refactoring\n\nremove supabase, code split migrations and diagrams (98980b0)\n\n🤖 Build System\n\ncorrect diagram database generator inclusion (afde490)\n\n1.24.0-alpha.2 (2023-01-31)\n🍕 Features\n\nupdate environment and database connections to new logging model (39bdd16)\n\n1.24.0-alpha.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/openai.config.ts\n            \n            variable\n            OpenAIConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contributor/contributor.controller.ts\n            \n            controller\n            ContributorController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/dto/create-endorsement.dto.ts\n            \n            class\n            CreateEndorsementDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/endorsement/dto/update-endorsement.dto.ts\n            \n            class\n            UpdateEndorsementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement-token.guard.ts\n            \n            guard\n            EndorsementTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.controller.ts\n            \n            controller\n            EndorsementController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.service.ts\n            \n            injectable\n            EndorsementService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/endorsement/entities/endorsement.entity.ts\n            \n            entity\n            DbEndorsement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.controller.ts\n            \n            controller\n            CodeRefactorSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            injectable\n            CodeRefactorSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n            \n            class\n            GenerateCodeRefactorSuggestionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-pull-request-description.dto.ts\n            \n            class\n            GeneratePullRequestDescriptionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n            \n            class\n            PullRequestContributorOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor.dto.ts\n            \n            class\n            DbPullRequestContributor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.controller.ts\n            \n            controller\n            PullRequestDescriptionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            injectable\n            PullRequestDescriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-collaboration.dto.ts\n            \n            class\n            CreateUserCollaborationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-collaboration.dto.ts\n            \n            class\n            UpdateUserCollaborationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/entities/user-collaboration.entity.ts\n            \n            entity\n            DbUserCollaboration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.controller.ts\n            \n            controller\n            UserCollaborationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.service.ts\n            \n            injectable\n            UserCollaborationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-endorsement.controller.ts\n            \n            controller\n            UserEndorsementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\nYou also need the .env environment file added to your repo for the project to run. To get it, kindly contact @open-sauced/triage team.\n\nNote: For Windows users, the API_HOST key's value in the .env file should be 127.0.0.1, instead of 0.0.0.0, so that the project can run correctly on localhost.\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        23 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    25 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    24 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    30 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    35 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.37.0\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return parseInt(request.user?.user_metadata.sub as string, 10);\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
