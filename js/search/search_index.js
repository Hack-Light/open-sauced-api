var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.211,1,3.534]],["body/modules/AppModule.html",[0,1.211,1,7.246,2,1.154,3,1.859,4,2.684,5,2.684,6,4.936,7,0.007,8,5.2,9,4.709,10,5.2,11,5.2,12,5.2,13,5.2,14,5.2,15,4.936,16,4.033,17,5.2,18,5.2,19,4.936,20,5.2,21,5.2,22,4.177,23,4.936,24,5.2,25,1.903,26,1.236,27,1.154,28,0.049,29,0.049,30,0.039,31,3.02,32,2.881,33,0.63,34,4.648,35,3.02,36,6.364,37,0.194,38,3.02,39,0.607,40,0.704,41,0.298,42,0.291,43,5.667,44,0.63,45,2.164,46,0.172,47,3.02,48,0.397,49,3.02,50,1.402,51,0.866,52,5.655,53,4.608,54,1.678,55,4.648,56,3.02,57,4.131,58,2.462,59,3.02,60,2.296,61,4.131,62,5.667,63,0.73,64,5.667,65,3.02,66,3.02,67,2.462,68,2.462,69,2.462,70,3.789,71,3.789,72,3.789,73,3.789,74,3.789,75,3.789,76,4.648,77,1.96,78,3.02,79,1.859,80,1.526,81,2.217,82,1.96,83,2.777,84,3.02,85,2.777,86,2.296,87,2.777,88,2.296,89,2.777,90,2.296,91,2.777,92,2.296,93,2.684,94,3.02,95,3.02,96,3.02,97,3.02,98,3.02,99,2.054,100,2.296,101,3.02,102,4.648,103,2.296,104,3.02,105,3.02,106,2.676,107,3.02,108,3.017,109,4.648,110,2.951,111,0.835,112,3.162,113,2.684,114,3.162,115,3.162,116,3.02,117,2.462,118,1.878,119,3.02,120,3.02,121,3.535,122,2.684,123,3.162,124,2.462,125,3.162,126,3.02,127,2.703,128,1.678,129,2.684,130,2.89,131,3.331,132,2.164,133,2.583,134,5.518,135,1.878,136,3.02,137,3.017,138,2.296,139,3.017,140,2.296,141,2.89,142,2.684,143,2.676,144,1.482,145,1.96,146,3.017,147,1.036,148,2.164,149,3.331,150,1.738,151,3.017,152,2.296,153,3.017,154,2.296,155,3.02,156,2.777,157,2.462,158,3.02,159,2.684,160,3.02,161,3.779,162,4.648,163,1.385,164,5.667,165,4.648,166,8.8,167,3.02,168,3.789,169,3.02,170,3.789,171,3.02,172,2.676,173,3.02,174,4.131,175,3.02,176,3.331,177,3.02,178,4.648,179,2.653,180,1.412,181,4.648,182,3.162,183,1.332,184,3.02,185,4.648,186,4.131,187,3.02,188,4.648,189,4.131,190,3.02,191,5.667,192,3.789,193,3.02,194,3.02,195,3.02,196,3.02,197,3.02,198,3.02,199,3.02,200,3.02,201,3.02,202,3.02,203,3.02,204,3.02,205,2.164,206,3.02,207,3.02,208,2.296,209,3.02,210,1.804,211,3.02,212,3.02,213,3.02,214,3.02,215,3.02,216,3.02,217,3.02,218,3.02,219,2.684,220,3.02,221,3.02,222,1.878,223,2.462,224,2.054,225,2.054,226,3.02,227,2.296,228,2.296,229,1.298,230,0.054,231,0.079,232,0.607,233,3.02,234,0.952,235,1.412,236,3.02,237,3.02,238,3.02,239,0.003,240,0.003]],["title/controllers/AuthController.html",[241,1.083,242,3.534]],["body/controllers/AuthController.html",[7,0.007,28,0.046,29,0.046,30,0.037,33,0.925,37,0.475,39,1.486,40,0.87,41,0.461,42,0.713,44,1.542,46,0.152,48,0.373,60,2.161,81,2.939,82,1.844,111,1.679,183,1.271,230,0.05,231,0.074,232,0.571,234,1.116,239,0.003,240,0.003,241,0.662,242,3.372,243,0.799,244,2.525,245,1.111,246,3.908,247,0.144,248,1.983,249,5.453,250,6.681,251,6.681,252,6.681,253,6.681,254,6.681,255,6.681,256,2.842,257,6.57,258,1.012,259,2.842,260,4.435,261,3.412,262,3.864,263,5.771,264,2.842,265,2.842,266,2.842,267,2.809,268,2.842,269,2.842,270,3.94,271,5.474,272,5.453,273,5.453,274,5.172,275,2.757,276,2.842,277,2.842,278,1.119,279,4.112,280,4.415,281,2.842,282,5.467,283,4.684,284,5.101,285,3.731,286,2.842,287,2.864,288,2.842,289,2.842,290,5.022,291,2.842,292,2.842,293,6.332,294,5.073,295,2.842,296,4.551,297,5.474,298,4.435,299,4.846,300,5.453,301,2.842,302,2.842,303,5.073,304,2.842,305,4.788,306,2.842,307,2.842,308,2.842,309,6.236,310,1.933,311,2.842,312,2.842,313,2.842,314,2.037,315,1.48,316,1.356,317,3.753,318,3.68,319,3.343,320,3.059,321,3.059,322,1.111,323,0.492,324,1.221,325,2.525,326,2.037,327,2.842,328,5.08,329,2.842,330,2.842,331,2.755,332,2.037,333,3.539,334,2.525,335,3.539,336,2.525,337,5.453,338,2.525,339,2.525,340,2.525,341,2.525,342,2.525,343,2.842,344,2.842,345,1.062,346,2.842,347,3.628,348,2.957,349,2.842,350,1.92,351,3.39,352,4.435,353,3.615,354,3.94,355,1.587,356,1.859,357,3.94,358,5.453,359,1.18,360,3.615,361,5.453,362,1.698,363,2.525,364,1.698,365,0.935,366,1.636,367,2.317,368,3.372,369,3.615,370,3.94,371,3.372,372,3.372,373,3.372,374,3.372,375,3.372,376,2.309,377,3.372,378,3.372,379,3.94,380,1.953,381,2.842,382,1.698,383,2.161,384,2.842,385,1.432,386,2.842,387,2.842,388,2.842,389,2.842,390,1.179,391,4.435,392,2.161,393,2.842,394,2.842,395,2.842,396,2.842,397,2.842,398,2.842,399,3.615,400,2.842,401,4.846,402,0.438,403,2.842,404,2.842,405,2.842,406,2.842,407,2.842,408,2.842,409,2.842,410,2.842,411,2.842,412,2.842,413,2.842,414,2.842,415,3.94,416,2.842,417,2.842]],["title/modules/AuthModule.html",[0,1.211,6,3.161]],["body/modules/AuthModule.html",[0,1.93,2,2.235,3,2.961,6,6.596,7,0.007,9,5.841,22,5.181,23,6.122,25,3.032,26,2.395,27,2.235,28,0.095,29,0.095,30,0.076,32,3.105,46,0.166,48,0.768,99,3.979,111,1.051,112,3.979,113,5.198,117,4.769,229,3.182,230,0.104,231,0.153,239,0.006,240,0.006,242,6.179,243,2.082,324,4.087,325,5.198,418,5.198,419,5.198,420,5.198,421,5.198,422,6.122,423,6.817,424,5.85,425,3.348,426,7.405,427,4.769,428,5.85,429,5.85,430,5.198]],["title/interfaces/ChatResponse.html",[431,2.777,432,3.016]],["body/interfaces/ChatResponse.html",[7,0.007,28,0.083,29,0.083,30,0.067,41,0.428,46,0.145,48,0.677,53,4.403,54,2.866,111,0.927,183,1.478,210,3.081,224,3.508,225,3.508,230,0.092,231,0.135,232,1.036,234,1.397,239,0.005,240,0.005,247,0.262,248,1.137,275,3.206,278,0.663,279,2.772,315,2.686,350,2.044,351,4.243,364,3.081,380,1.883,382,3.081,385,1.322,390,0.859,402,1.052,431,3.081,432,4.964,433,3.922,434,2.394,435,3.922,436,4.964,437,4.204,438,1.226,439,6.191,440,6.065,441,1.226,442,6.235,443,3.696,444,3.922,445,4.642,446,2.772,447,4.932,448,4.204,449,2.53,450,6.439,451,3.347,452,3.922,453,4.642,454,4.642,455,3.696,456,5.817,457,3.922,458,6.797,459,3.922,460,3.922,461,3.696,462,3.696,463,2.605,464,3.922,465,3.922,466,3.922,467,3.922,468,3.922,469,4.583,470,4.583,471,3.696,472,4.204,473,4.583,474,3.081,475,6.065,476,4.204,477,2.772,478,4.204,479,3.922,480,3.922,481,4.583,482,3.508,483,3.696,484,3.206,485,3.696,486,3.922,487,3.922,488,3.081,489,3.922,490,3.508,491,3.922,492,3.508,493,3.922,494,3.922,495,3.922,496,3.922,497,3.922,498,1.845,499,3.922,500,3.696,501,3.696,502,3.922,503,3.922,504,3.508,505,3.922,506,1.733,507,3.922,508,2.062,509,3.922,510,2.969,511,3.922,512,3.922,513,1.927,514,3.922,515,5.061,516,1.807,517,3.922,518,3.922,519,3.922]],["title/interfaces/ChatResponse-1.html",[431,2.313,432,2.513,508,1.548]],["body/interfaces/ChatResponse-1.html",[7,0.007,28,0.082,29,0.082,30,0.066,41,0.426,46,0.144,48,0.67,53,4.378,54,2.834,111,0.916,127,3.231,128,2.834,147,2.609,183,1.462,210,3.046,224,3.468,225,3.468,230,0.091,231,0.134,232,1.025,234,1.387,239,0.005,240,0.005,247,0.259,248,1.124,278,0.656,279,2.741,315,2.656,350,2.035,351,4.211,364,3.046,380,1.869,382,3.046,385,1.312,390,1.35,402,1.173,431,3.046,432,4.937,433,3.877,434,2.367,438,1.217,439,6.163,440,6.019,441,1.217,442,6.215,443,3.654,444,3.877,446,2.741,447,2.834,449,2.502,450,6.415,452,3.877,453,5.174,454,4.608,455,3.654,457,3.877,459,3.877,460,3.877,461,3.654,462,3.654,463,2.576,464,3.877,465,3.877,466,3.877,467,3.877,468,3.877,474,3.046,479,3.877,480,3.877,482,3.468,483,3.654,484,3.17,485,3.654,486,3.877,487,3.877,488,3.046,489,3.877,490,4.608,491,3.877,492,3.468,493,3.877,494,3.877,495,3.877,496,3.877,497,3.877,498,1.825,499,3.877,500,5.451,501,3.654,502,3.877,503,3.877,504,3.468,505,3.877,506,1.713,507,3.877,508,2.039,509,3.877,510,2.935,511,3.877,512,3.877,513,1.905,514,3.877,515,5.039,516,1.786,517,3.877,518,3.877,519,3.877,520,4.157,521,4.608,522,4.157,523,3.309,524,6.201,525,4.531,526,3.046,527,4.531,528,4.531,529,4.531,530,4.531,531,4.531,532,4.157,533,4.531,534,4.157,535,4.531,536,4.531,537,4.531,538,4.531,539,4.531]],["title/controllers/CodeRefactorSuggestionController.html",[241,1.083,540,3.534]],["body/controllers/CodeRefactorSuggestionController.html",[7,0.007,28,0.094,29,0.094,30,0.076,33,1.54,37,0.374,39,1.17,40,0.644,41,0.388,42,0.561,44,1.214,46,0.156,48,0.765,147,1.997,183,1.669,230,0.103,231,0.152,232,1.17,234,1.192,239,0.005,240,0.005,241,1.357,243,1.637,245,2.275,247,0.295,248,1.787,258,0.797,261,2.952,279,3.969,315,3.032,316,2.777,317,3.622,318,4.411,321,2.952,322,2.275,323,1.007,324,2.502,345,2.176,347,2.857,348,2.328,350,1.462,380,1.606,385,1.127,390,0.97,434,3.427,435,5.614,436,5.834,445,6.285,446,3.13,447,4.506,448,4.746,451,5.261,456,6.69,513,2.176,516,2.039,540,5.614,541,5.173,542,4.746,543,7.204,544,5.822,545,5.822,546,7.383,547,6.56,548,5.291,549,5.291,550,5.822,551,4.59,552,3.778,553,5.822,554,5.614,555,4.59,556,2.941,557,5.173,558,4.746,559,4.746,560,3.619,561,5.822,562,5.822]],["title/injectables/CodeRefactorSuggestionService.html",[441,0.835,451,3.016]],["body/injectables/CodeRefactorSuggestionService.html",[7,0.007,28,0.078,29,0.078,30,0.062,33,1.358,37,0.474,39,1.484,40,0.817,41,0.416,42,0.712,44,1.358,46,0.141,48,0.631,53,4.908,54,2.672,111,0.864,183,1.378,210,3.89,224,3.27,225,3.27,230,0.085,231,0.126,232,1.309,234,1.62,239,0.005,240,0.005,247,0.244,248,1.628,275,2.989,278,0.95,279,2.584,315,2.504,350,1.987,351,4.048,364,2.872,380,1.796,382,2.872,385,1.261,390,0.801,402,1.22,431,2.872,432,4.226,434,3.674,435,6.018,436,5.533,437,3.919,439,3.656,441,1.17,442,6.11,443,3.445,444,3.656,445,5.383,446,2.584,447,4.846,448,3.919,449,2.359,450,6.289,451,4.226,452,5.615,453,5.023,454,5.383,455,3.445,456,5.615,457,3.656,458,6.561,459,3.656,460,3.656,461,3.445,462,3.445,463,2.429,464,3.656,465,3.656,466,3.656,467,3.656,468,3.656,469,4.272,470,4.272,471,3.445,472,3.919,473,4.272,474,2.872,475,5.786,476,3.919,477,2.584,478,3.919,479,3.656,480,5.615,481,4.272,482,3.27,483,3.445,484,2.989,485,3.445,486,3.656,487,3.656,488,2.872,489,3.656,490,3.27,491,3.656,492,3.27,493,3.656,494,3.656,495,3.656,496,3.656,497,3.656,498,1.72,499,3.656,500,3.445,501,3.445,502,3.656,503,3.656,504,3.27,505,3.656,506,1.615,507,3.656,508,1.922,509,3.656,510,2.767,511,3.656,512,3.656,513,1.796,514,3.656,515,4.92,516,2.281,517,3.656,518,3.656,519,3.656,563,1.615,564,3.656,565,4.808,566,4.272,567,4.808,568,4.272,569,4.808]],["title/modules/ContributionModule.html",[0,1.211,8,3.331]],["body/modules/ContributionModule.html",[0,2.023,2,2.411,3,3.104,7,0.007,8,6.778,16,5.097,25,3.178,26,2.583,27,2.411,28,0.102,29,0.102,30,0.082,32,3.255,46,0.165,48,0.829,50,2.929,51,1.809,77,4.095,79,3.104,80,3.188,83,4.638,163,1.88,229,3.336,230,0.112,231,0.165,239,0.006,240,0.006,243,2.183,425,3.509,570,5.607,571,5.607,572,5.607,573,6.31,574,6.535,575,6.31,576,6.394,577,5.144,578,5.607,579,1.614,580,6.31,581,3.286]],["title/classes/ContributionPageOptionsDto.html",[231,0.122,582,3.331]],["body/classes/ContributionPageOptionsDto.html",[7,0.007,28,0.087,29,0.087,30,0.07,37,0.552,41,0.452,42,0.895,46,0.139,230,0.125,231,0.184,235,2.841,239,0.005,240,0.005,247,0.274,258,1.176,278,1.007,323,0.935,355,2.518,356,2.951,438,1.264,463,2.73,508,3.13,582,5.043,583,1.708,584,5.737,585,2.674,586,2.905,587,2.573,588,2.429,589,5.951,590,3.665,591,4.051,592,3.954,593,7.008,594,2.437,595,3.605,596,6.954,597,4.051,598,4.505,599,5.043,600,5.404,601,4.802,602,2.905,603,4.051,604,3.003,605,3.111,606,4.772,607,3.229,608,3.954,609,2.814,610,3.111,611,3.229,612,3.111,613,3.229,614,3.665,615,2.652,616,2.652,617,3.111,618,3.111,619,3.229,620,3.665,621,3.507,622,3.665,623,2.065,624,2.019,625,1.519,626,4.205,627,4.787,628,5.737,629,4.787,630,5.404]],["title/injectables/ContributionService.html",[441,0.835,574,3.161]],["body/injectables/ContributionService.html",[7,0.007,28,0.092,29,0.092,30,0.074,33,1.516,37,0.467,39,1.461,40,0.805,41,0.382,42,0.701,44,1.186,46,0.163,48,0.747,51,1.629,63,1.375,83,3.396,163,1.694,180,1.727,183,2.084,230,0.101,231,0.149,232,1.461,234,1.164,239,0.005,240,0.005,247,0.288,248,1.767,267,2.393,278,1.031,350,2.193,380,2.006,385,1.101,441,1.306,563,1.91,574,4.946,577,4.634,582,6.056,585,1.834,588,2.17,593,4.634,596,5.051,608,2.872,609,2.96,624,2.124,625,1.598,631,5.051,632,5.203,633,5.685,634,2.469,635,5.685,636,7.271,637,3.689,638,6.402,639,5.685,640,3.867,641,2.327,642,2.034,643,2.172,644,4.634,645,4.323,646,4.146,647,3.056,648,5.051,649,5.685,650,3.445,651,5.685,652,5.051,653,5.051,654,5.685,655,5.051,656,5.051,657,5.685,658,3.534,659,3.534,660,3.787,661,3.159,662,3.159,663,3.159]],["title/classes/CreateEndorsementDto.html",[231,0.122,664,3.161]],["body/classes/CreateEndorsementDto.html",[7,0.007,28,0.084,29,0.137,30,0.067,37,0.56,41,0.499,42,0.66,46,0.122,111,1.465,222,4.255,230,0.092,231,0.179,239,0.005,240,0.005,247,0.263,258,1.192,278,1.185,323,0.896,359,1.885,365,3.154,376,4.247,390,1.451,402,1.343,438,1.23,583,1.637,594,1.784,615,2.541,620,3.564,622,3.564,623,1.979,634,2,664,4.656,665,7.895,666,4.222,667,6.812,668,6.812,669,3.558,670,6.812,671,6.812,672,3.833,673,7.006,674,6.082,675,2.447,676,5.18,677,5.18,678,5.58,679,5.18,680,5.18,681,5.18,682,5.18,683,6.082,684,4.222,685,5.18,686,5.58,687,5.18,688,5.18,689,5.18,690,5.18,691,3.938,692,3.785,693,6.201,694,4.603,695,5.18,696,4.603,697,5.18,698,4.603]],["title/classes/CreateInsightDto.html",[231,0.122,699,3.331]],["body/classes/CreateInsightDto.html",[7,0.007,28,0.094,29,0.094,30,0.076,37,0.521,40,0.974,41,0.498,46,0.152,161,3.849,179,2.132,230,0.104,231,0.213,239,0.005,240,0.005,247,0.296,258,1.11,284,4.796,323,1.009,359,1.262,390,1.351,402,1.315,438,1.328,583,1.844,585,2.752,623,2.228,634,2.16,672,3.668,675,2.388,691,3.856,692,3.43,699,5.296,700,6.954,701,4.754,702,6.169,703,3.321,704,4.443,705,4.186,706,5.62,707,4.754,708,5.831,709,5.182,710,5.831,711,5.836,712,5.027,713,6.567,714,5.536,715,5.182,716,5.831,717,4.754,718,6.025,719,3.784,720,4.754,721,3.784,722,5.831,723,3.356,724,2.506,725,3.356]],["title/classes/CreateInsightMemberDto.html",[231,0.122,726,3.534]],["body/classes/CreateInsightMemberDto.html",[7,0.007,28,0.109,29,0.109,30,0.088,37,0.434,41,0.456,46,0.144,230,0.12,231,0.212,239,0.006,240,0.006,247,0.343,258,0.925,296,5.103,323,1.169,390,1.126,402,1.385,438,1.454,583,2.136,623,2.582,672,3.055,675,2.15,691,3.659,700,6.598,705,4.406,721,5.253,726,6.154,727,5.509,728,5.8,729,7.192,730,6.005,731,6.758,732,7.192,733,5.509]],["title/classes/CreateLogDto.html",[231,0.122,734,3.534]],["body/classes/CreateLogDto.html",[7,0.007,28,0.105,29,0.105,30,0.085,37,0.548,41,0.449,42,0.891,46,0.116,205,6.116,222,5.306,230,0.116,231,0.208,235,2.89,239,0.006,240,0.006,247,0.331,258,1.168,402,1.425,438,1.424,449,4.188,583,2.063,622,4.623,623,2.493,692,4.12,734,6.026,735,7.887,736,5.799,737,8.535,738,6.526,739,6.526,740,6.526]],["title/classes/CreateUserCollaborationDto.html",[231,0.122,741,3.534]],["body/classes/CreateUserCollaborationDto.html",[7,0.007,28,0.102,29,0.102,30,0.082,37,0.499,41,0.482,46,0.138,111,1.511,147,2.663,172,5.185,230,0.112,231,0.203,239,0.006,240,0.006,247,0.32,258,1.062,323,1.092,390,1.293,402,1.447,438,1.395,449,4.42,454,4.292,583,1.995,623,2.411,672,3.509,675,2.33,678,6.329,691,3.801,692,3.903,741,5.903,742,6.855,743,5.144,744,6.288,745,7.763,746,7.763,747,6.898,748,6.31,749,6.31,750,6.31,751,6.31,752,5.607,753,4.798,754,4.798,755,6.31,756,5.607]],["title/classes/CreateUserHighlightDto.html",[231,0.122,757,3.331]],["body/classes/CreateUserHighlightDto.html",[7,0.007,28,0.088,29,0.088,30,0.071,37,0.535,41,0.496,42,0.802,46,0.126,111,1.55,144,4.523,230,0.097,231,0.186,239,0.005,240,0.005,247,0.277,258,1.139,323,0.945,365,3.101,376,4.492,390,1.386,402,1.477,438,1.273,454,3.715,477,3.809,526,5.153,583,1.727,615,3.477,620,4.097,622,4.097,623,2.087,672,3.203,675,2.422,691,3.556,692,3.864,724,3.045,742,7.032,752,4.853,756,4.853,757,5.078,758,4.853,759,5.637,760,6.181,761,6.33,762,5.461,763,5.461,764,6.297,765,2.648,766,4.599,767,5.388,768,2.971,769,5.461,770,5.461,771,5.461,772,5.461,773,6.297,774,5.461,775,5.461,776,7.086,777,4.853,778,3.143,779,5.461,780,2.347]],["title/injectables/CustomLogger.html",[441,0.835,781,3.331]],["body/injectables/CustomLogger.html",[7,0.007,28,0.073,29,0.073,30,0.058,33,1.296,37,0.55,39,1.679,40,0.924,41,0.45,42,0.805,44,1.684,46,0.137,48,0.59,53,4.929,54,2.496,205,5.786,210,4.595,222,6.004,230,0.08,231,0.118,232,1.249,234,1.459,235,2.165,239,0.005,240,0.005,247,0.228,248,2.053,385,1.564,402,1.503,438,1.117,441,1.117,449,4.659,515,5.426,516,2.828,563,1.509,587,2.272,594,1.17,640,5.681,781,5.107,782,7.755,783,3.991,784,7.127,785,8.563,786,6.27,787,6.582,788,7.691,789,6.834,790,4.491,791,7.691,792,5.681,793,6.215,794,4.491,795,4.491,796,4.491,797,7.691,798,4.491,799,4.491,800,4.491,801,4.491,802,4.491,803,4.491,804,4.491,805,4.491,806,4.491,807,3.991,808,3.991,809,4.491,810,4.491,811,4.491,812,8.075,813,4.491,814,4.491,815,6.215]],["title/modules/CustomerModule.html",[0,1.211,9,3.016]],["body/modules/CustomerModule.html",[0,2.093,2,2.549,3,3.211,7,0.007,9,6.1,25,3.287,26,2.731,27,2.549,28,0.108,29,0.108,30,0.087,32,2.797,46,0.159,48,0.876,50,3.096,51,1.912,115,5.462,163,1.988,229,3.451,230,0.119,231,0.175,239,0.006,240,0.006,335,6.278,425,3.63,581,3.474,816,5.928,817,5.928,818,5.928,819,6.671,820,5.928,821,6.671]],["title/injectables/CustomerService.html",[335,3.016,441,0.835]],["body/injectables/CustomerService.html",[7,0.007,28,0.09,29,0.09,30,0.073,33,1.5,37,0.558,39,1.687,40,0.929,41,0.442,42,0.809,44,1.751,46,0.149,48,0.734,51,1.602,63,1.351,115,3.801,163,1.665,230,0.099,231,0.146,232,1.445,234,1.144,239,0.005,240,0.005,247,0.283,248,2.041,278,1.144,287,2.618,335,4.667,350,1.805,359,1.958,385,1.626,402,1.371,441,1.292,516,2.786,563,1.877,634,2.454,641,2.288,650,3.608,820,4.965,822,4.965,823,7.067,824,3.699,825,7.953,826,7.953,827,5.588,828,5.588,829,7.192,830,5.588,831,7.461,832,5.588,833,5.588,834,5.588,835,5.588,836,5.588,837,5.588,838,5.588,839,5.588,840,3.251,841,5.588,842,3.633,843,5.588,844,5.588]],["title/classes/DatabaseLoggerMiddleware.html",[103,3.534,231,0.122]],["body/classes/DatabaseLoggerMiddleware.html",[7,0.007,28,0.129,29,0.07,30,0.056,33,1.258,37,0.564,39,1.91,40,0.984,41,0.454,42,0.832,44,1.765,45,5.697,46,0.124,48,0.565,63,1.041,67,3.509,68,3.509,69,3.509,103,5.297,182,5.408,183,1.234,205,5.411,230,0.107,231,0.113,232,1.212,234,1.687,235,2.117,239,0.004,240,0.004,247,0.218,278,0.896,364,2.571,382,2.571,385,1.699,402,1.469,438,1.084,449,4.152,515,4.331,516,2.645,583,1.361,594,1.122,640,5.874,787,6.899,789,6.19,845,7.901,846,3.509,847,4.918,848,6.967,849,6.967,850,6.967,851,6.967,852,6.967,853,6.967,854,6.967,855,4.304,856,6.033,857,4.304,858,9.572,859,4.304,860,4.304,861,4.304,862,4.304,863,4.304,864,3.711,865,4.304,866,4.304,867,4.304,868,4.304,869,2.358,870,4.304,871,4.304,872,4.304,873,4.304,874,4.304,875,3.824,876,4.304,877,4.304,878,7.551,879,4.304,880,6.967,881,6.033,882,4.304,883,6.967,884,4.304,885,4.304,886,4.304]],["title/entities/DbContribution.html",[83,2.777,887,1.145]],["body/entities/DbContribution.html",[7,0.007,28,0.062,29,0.062,30,0.05,37,0.556,40,0.791,41,0.486,42,0.763,46,0.127,63,0.922,79,2.858,80,1.927,83,3.306,111,0.994,127,2.64,179,2.613,180,1.159,230,0.068,231,0.1,239,0.004,240,0.004,247,0.193,258,1.185,278,1.076,285,2.569,323,0.66,355,2.331,356,2.731,359,1.642,365,3.148,376,3.953,390,1.393,402,1.102,438,0.994,474,3.306,498,1.364,506,2.401,560,3.441,579,1.941,587,1.394,594,2.18,627,4.431,628,5.311,629,5.162,634,1.617,669,3.523,675,2.429,686,4.512,765,3.126,768,2.997,780,2.378,869,3.27,887,1.364,888,3.389,889,3.108,890,3.241,891,4.918,892,3.972,893,3.813,894,4.638,895,4.638,896,4.114,897,6.351,898,3.813,899,4.918,900,5.535,901,3.813,902,4.862,903,3.813,904,2.438,905,3.695,906,3.401,907,6.586,908,2.378,909,3.972,910,1.724,911,3.425,912,3.595,913,2.858,914,3.813,915,2.278,916,2.858,917,3.813,918,2.858,919,3.813,920,3.813,921,3.507,922,4.208,923,4.208,924,2.594,925,3.813,926,2.119,927,3.813,928,3.076,929,3.813,930,3.389,931,3.813,932,2.378,933,2.975,934,2.975,935,2.278,936,3.813,937,5.535,938,3.813,939,3.813,940,3.241,941,2.882,942,2.05,943,3.076,944,3.076,945,2.796,946,2.378,947,2.882,948,3.196,949,3.343,950,2.87,951,1.561,952,1.561,953,2.9,954,3.813,955,2.733,956,2.195,957,3.109,958,2.195,959,3.109,960,3.813,961,3.389]],["title/entities/DbCustomer.html",[115,3.161,887,1.145]],["body/entities/DbCustomer.html",[7,0.007,28,0.102,29,0.102,30,0.082,37,0.499,40,0.698,41,0.442,46,0.138,63,1.526,111,1.395,115,5.281,118,4.826,180,1.917,230,0.112,231,0.165,239,0.006,240,0.006,247,0.32,258,1.062,278,0.999,359,1.95,365,3.019,390,1.293,399,6.329,402,1.197,438,1.395,498,2.258,587,2.307,602,4.173,675,2.33,831,7.472,887,1.913,890,3.178,894,5.038,895,5.038,896,4.469,918,3.104,940,3.178,941,4.043,942,3.392,949,3.442,951,2.583,952,2.583,955,4.522,962,5.607,963,4.798,964,6.31,965,5.607,966,6.31,967,6.31,968,2.929,969,5.607]],["title/entities/DbEmoji.html",[141,2.89,887,1.145]],["body/entities/DbEmoji.html",[7,0.007,28,0.071,29,0.071,30,0.057,37,0.558,40,0.918,41,0.486,42,0.799,46,0.135,63,1.062,134,3.34,141,3.805,143,4.385,144,3.93,145,2.851,179,2.238,180,1.335,230,0.078,231,0.115,239,0.005,240,0.005,247,0.223,258,1.188,278,0.787,285,2.841,323,0.76,355,2.52,356,2.953,359,1.524,365,3.15,376,4.172,390,1.381,402,1.279,438,1.1,477,4.095,498,1.572,506,2.056,508,1.757,594,1.985,675,2.418,765,3.1,768,2.566,780,1.887,869,3.242,887,1.508,889,3.36,890,3.119,904,2.696,905,3.655,906,3.273,908,2.63,909,3.401,910,1.986,911,3.396,912,3.564,913,3.046,915,2.624,916,2.447,918,2.447,921,3.003,932,2.63,933,3.29,934,3.29,935,2.624,940,3.119,945,3.092,946,2.63,947,3.187,948,3.456,949,3.279,950,3.103,951,1.798,952,1.798,958,2.528,970,3.903,971,7.044,972,5.356,973,5.793,974,4.393,975,4.393,976,7.076,977,4.163,978,4.654,979,3.903,980,3.805,981,4.393,982,4.163,983,3.581,984,4.393,985,4.393,986,4.393,987,3.581,988,4.989,989,6.12,990,4.393,991,4.393,992,4.393,993,4.393,994,4.989,995,3.092,996,3.903,997,3.148,998,2.851,999,4.393]],["title/entities/DbEndorsement.html",[156,2.777,887,1.145]],["body/entities/DbEndorsement.html",[7,0.007,28,0.072,29,0.13,30,0.058,37,0.56,40,0.494,41,0.499,42,0.84,46,0.11,63,1.079,111,1.378,156,3.697,180,1.356,222,3.847,230,0.079,231,0.117,239,0.005,240,0.005,247,0.226,258,1.192,278,1.072,355,2.542,359,1.915,365,3.155,376,3.223,390,1.451,402,1.343,438,1.112,498,1.597,506,2.079,594,1.613,634,1.808,667,6.312,668,6.312,669,3.297,670,6.312,671,6.312,673,7.037,674,5.499,675,2.424,678,5.045,683,5.499,696,3.966,698,3.966,765,2.312,768,2.595,780,1.918,869,2.418,887,1.525,890,3.499,894,5.41,895,5.41,896,4.798,904,1.966,905,3.14,906,2.659,908,2.659,910,2.018,911,2.533,912,2.659,913,2.475,918,2.475,932,2.659,940,3.499,946,2.659,949,3.567,950,2.726,951,1.827,952,1.827,968,2.072,980,5.182,982,4.209,983,3.638,995,3.126,997,3.198,1000,3.966,1001,4.463,1002,3.198,1003,4.463,1004,4.463,1005,3.966,1006,4.463,1007,4.463,1008,4.463,1009,6.188,1010,4.706,1011,4.463,1012,5.833,1013,4.463,1014,4.463,1015,4.463,1016,3.394,1017,3.966]],["title/entities/DbInsight.html",[106,2.675,887,1.145]],["body/entities/DbInsight.html",[7,0.007,28,0.06,29,0.06,30,0.048,37,0.56,40,0.895,41,0.481,42,0.754,46,0.133,63,0.892,81,3.356,82,2.394,106,3.109,108,4.566,110,1.921,111,1.452,179,3.031,180,1.121,230,0.066,231,0.097,239,0.004,240,0.004,247,0.187,258,1.192,278,0.905,323,0.638,355,2.287,356,2.68,359,1.749,365,3.154,390,1.408,402,1.085,438,0.971,447,2.05,498,1.32,506,2.629,585,2.27,587,1.349,594,2.16,675,2.443,702,4.86,703,2.617,704,3.664,705,4.491,706,4.108,721,2.394,724,2.321,760,3.871,765,2.924,768,3.281,778,3.109,780,2.746,869,3.058,887,1.331,889,3.049,890,3.203,894,4.566,895,4.566,896,4.05,897,4.8,902,3.674,904,2.816,905,3.608,906,3.362,908,2.321,910,1.668,911,3.203,912,3.362,913,3.129,916,2.16,918,2.16,921,2.651,926,2.05,928,3.002,932,3.362,940,3.203,941,2.813,942,2.904,943,3.002,944,3.002,945,2.729,946,2.321,947,2.813,948,3.136,949,3.309,950,3.1,951,1.51,952,1.51,968,2.508,987,3.007,994,4.404,995,2.729,1002,2.644,1018,3.278,1019,6.392,1020,6.392,1021,2.623,1022,3.689,1023,3.871,1024,2.644,1025,3.689,1026,3.278,1027,3.689,1028,5.042,1029,6.252,1030,5.402,1031,4.8,1032,3.689,1033,3.689,1034,3.689,1035,3.689,1036,4.8,1037,5.402,1038,3.689,1039,5.402,1040,3.689,1041,4.404,1042,3.689,1043,3.674,1044,2.805,1045,3.689,1046,3.689,1047,3.689,1048,3.689,1049,2.293,1050,3.689]],["title/entities/DbInsightMember.html",[139,3.016,887,1.145]],["body/entities/DbInsightMember.html",[7,0.007,28,0.06,29,0.06,30,0.048,37,0.553,40,0.868,41,0.484,42,0.866,46,0.096,63,0.898,111,0.975,139,3.522,179,3.036,180,1.128,230,0.066,231,0.097,239,0.004,240,0.004,247,0.188,258,1.178,278,0.908,296,3.922,355,2.295,356,2.689,359,1.753,365,3.14,390,1.434,402,1.28,438,0.975,477,3.793,498,1.328,506,2.79,587,1.357,594,2.044,675,2.467,705,3.848,721,5.587,728,6.439,733,3.026,765,3.217,766,3.522,768,3.288,780,3.032,869,3.245,887,1.337,889,3.06,890,3.21,894,3.522,895,3.522,896,3.123,904,3.109,905,3.729,906,3.568,908,2.332,910,1.678,911,3.399,912,3.568,913,2.822,916,3.136,918,2.17,921,2.662,924,2.525,932,3.369,940,3.316,941,2.826,942,2.917,945,2.741,946,2.332,947,2.826,949,3.316,950,3.308,951,1.519,952,1.519,968,2.519,980,3.374,982,3.691,995,2.741,997,2.66,1002,2.66,1012,4.126,1021,2.247,1023,3.889,1024,2.66,1043,3.691,1044,2.822,1051,7.112,1052,3.298,1053,5.709,1054,4.597,1055,5.7,1056,6.414,1057,3.298,1058,4.163,1059,3.712,1060,3.712,1061,3.712,1062,3.298,1063,3.712,1064,2.307,1065,3.712,1066,6.27,1067,3.712,1068,3.712,1069,4.822,1070,4.126,1071,3.712,1072,4.822,1073,4.822,1074,3.298,1075,4.126,1076,3.712,1077,3.712,1078,3.712,1079,3.298,1080,3.298]],["title/entities/DbInsightRepo.html",[108,3.016,887,1.145]],["body/entities/DbInsightRepo.html",[7,0.007,28,0.073,29,0.073,30,0.059,37,0.551,40,0.853,41,0.472,42,0.743,46,0.137,63,1.093,106,4.439,108,4.051,148,3.238,180,1.373,230,0.08,231,0.118,239,0.005,240,0.005,247,0.229,258,1.174,278,1.077,323,0.782,355,2.558,359,1.92,365,3.136,390,1.394,402,0.962,438,1.121,477,3.355,498,1.617,506,2.591,579,2.236,587,1.652,594,2.01,669,3.319,675,2.429,705,4.521,723,4.116,724,2.682,725,2.601,765,2.882,768,3.233,780,2.682,869,3.014,887,1.538,889,3.411,890,3.157,904,2.75,905,3.578,906,3.313,908,2.682,910,2.043,911,3.157,912,3.313,913,3.084,918,2.496,926,2.511,928,3.469,932,3.313,940,3.157,941,3.251,942,3.355,943,3.469,944,3.469,945,3.153,946,2.682,948,3.062,949,3.313,950,3.15,951,1.85,952,1.85,968,3.319,995,3.153,1023,4.473,1024,3.238,1026,4.016,1051,7.125,1054,5.799,1064,3.88,1081,3.238,1082,4.519,1083,4.519,1084,3.88,1085,3.436,1086,4.519,1087,4.519,1088,4.519,1089,4.519,1090,4.519,1091,4.519,1092,4.016,1093,4.519]],["title/entities/DbLog.html",[125,3.161,887,1.145]],["body/entities/DbLog.html",[7,0.007,28,0.101,29,0.101,30,0.081,37,0.576,40,0.689,41,0.472,46,0.111,63,1.505,125,5.236,180,1.891,205,5.989,222,5.195,230,0.111,231,0.163,239,0.006,240,0.006,247,0.316,258,1.228,355,2.99,359,1.809,365,3.188,402,1.443,438,1.383,449,4.1,587,2.275,765,2.876,887,1.897,940,3.793,941,4.009,946,3.591,995,3.144,1094,5.53,1095,6.223,1096,6.223,1097,6.223,1098,6.223,1099,6.223,1100,6.223,1101,6.223,1102,6.223]],["title/entities/DbPRInsight.html",[146,3.016,887,1.145]],["body/entities/DbPRInsight.html",[7,0.007,28,0.071,29,0.071,30,0.057,37,0.533,40,0.488,41,0.495,46,0.109,63,1.066,131,6.105,146,3.982,147,2.922,179,3.33,180,1.34,230,0.078,231,0.115,239,0.005,240,0.005,247,0.224,258,1.136,278,1.188,359,1.527,365,3.099,390,1.383,434,3.955,438,1.102,498,1.578,508,2.454,526,4.961,560,5.163,587,1.612,594,2.374,616,3.011,627,5.649,634,1.793,675,2.419,765,2.293,869,2.398,887,1.512,890,3.4,892,5.018,902,4.173,905,2.512,911,2.512,912,2.636,913,2.454,916,3.643,918,2.454,932,2.636,933,3.298,934,3.298,940,3.4,941,3.195,942,3.298,949,3.488,951,1.805,952,1.805,956,2.538,980,5.401,1103,3.918,1104,7.057,1105,7.057,1106,5.753,1107,5.795,1108,7.057,1109,5.452,1110,7.057,1111,4.409,1112,4.409,1113,7.63,1114,6.136,1115,6.136,1116,6.136,1117,6.136,1118,4.409,1119,4.409,1120,4.409,1121,4.409,1122,6.136,1123,6.136,1124,6.136,1125,6.136,1126,6.136,1127,3.918,1128,4.409,1129,5.452,1130,4.409,1131,3.352,1132,4.409,1133,7.057]],["title/entities/DbPullRequest.html",[130,2.89,887,1.145]],["body/entities/DbPullRequest.html",[7,0.007,28,0.034,29,0.092,30,0.027,37,0.572,40,0.632,41,0.49,42,0.879,46,0.079,63,0.505,127,4.371,130,2.151,131,6.41,147,3.143,172,2.966,179,2.975,180,0.635,208,3.918,230,0.037,231,0.055,239,0.003,240,0.003,247,0.106,258,1.219,278,1.08,285,2.392,323,0.361,355,1.585,356,1.858,359,1.236,365,3.18,376,1.802,390,1.49,402,1.355,434,4.152,438,0.622,477,4.258,498,0.747,506,0.702,526,4.732,579,0.885,587,0.763,594,2.206,595,1.451,634,1.011,669,2.057,675,2.507,704,3.552,723,2.55,724,1.487,725,1.202,760,4.093,765,3.041,869,2.85,887,0.853,890,3.616,892,1.161,902,4.64,904,0.92,905,3.466,906,3.134,908,1.487,911,2.986,912,3.134,913,2.916,916,2.728,918,1.384,921,2.528,922,2.631,923,3.918,932,3.134,933,3.921,934,3.921,940,3.37,941,1.802,942,1.123,946,1.487,948,1.698,949,3.632,950,1.525,951,0.855,952,0.855,958,3.288,980,2.151,1075,2.631,1084,2.151,1085,1.588,1127,1.856,1131,1.588,1134,1.856,1135,4.43,1136,4.43,1137,4.43,1138,4.43,1139,4.43,1140,4.43,1141,3.612,1142,5.075,1143,4.43,1144,5.712,1145,4.43,1146,5.712,1147,4.43,1148,5.712,1149,5.712,1150,3.612,1151,5.712,1152,4.43,1153,4.43,1154,5.712,1155,4.43,1156,4.43,1157,5.153,1158,2.48,1159,2.088,1160,2.088,1161,5.153,1162,5.153,1163,3.46,1164,2.088,1165,2.088,1166,4.579,1167,2.088,1168,2.088,1169,2.088,1170,2.088,1171,2.821,1172,3.46,1173,3.46,1174,2.088,1175,3.46,1176,5.153,1177,2.088,1178,2.088,1179,2.088,1180,2.088,1181,3.075,1182,2.088,1183,5.153,1184,2.088,1185,2.088,1186,2.088,1187,2.088,1188,3.46,1189,3.075,1190,2.088,1191,2.088,1192,3.46,1193,3.46,1194,4.43,1195,3.46,1196,3.46,1197,3.46,1198,3.46,1199,3.46,1200,1.856,1201,2.088,1202,3.46,1203,2.088,1204,2.088,1205,2.088,1206,2.088,1207,2.088,1208,2.088,1209,2.088,1210,1.856,1211,2.088,1212,2.088,1213,2.088,1214,4.579,1215,2.088,1216,2.088,1217,2.088,1218,2.088,1219,2.088,1220,2.088,1221,2.088,1222,2.088,1223,3.46,1224,3.46,1225,3.075,1226,3.46,1227,2.088,1228,2.088,1229,2.088,1230,2.088,1231,2.088,1232,2.088,1233,2.088,1234,1.702,1235,5.471,1236,5.153,1237,1.856,1238,2.088,1239,2.088,1240,1.856,1241,2.088,1242,2.088,1243,2.088,1244,2.067,1245,2.151]],["title/entities/DbRepoToUserStargazers.html",[91,2.777,887,1.145]],["body/entities/DbRepoToUserStargazers.html",[7,0.007,28,0.071,29,0.071,30,0.057,37,0.558,40,0.78,41,0.475,42,0.799,46,0.142,63,1.062,79,3.046,81,3.634,82,2.851,91,3.656,110,2.288,111,1.529,179,2.238,180,1.335,230,0.078,231,0.115,239,0.005,240,0.005,247,0.223,258,1.188,278,1.067,285,2.841,323,0.76,355,2.52,356,2.953,359,1.842,365,3.15,390,1.334,438,1.1,498,1.572,506,2.056,579,2.049,594,1.985,634,1.788,669,3.718,675,2.371,765,3.1,768,2.566,780,1.887,869,3.242,887,1.508,889,3.36,890,2.883,904,2.696,905,3.655,906,3.273,908,2.63,909,3.401,910,1.986,911,3.396,912,3.564,913,3.046,915,2.624,916,2.447,918,3.317,921,3.003,926,3.401,928,4.234,932,2.63,933,3.29,934,3.29,935,2.624,940,2.883,943,3.914,944,3.914,945,3.092,946,2.63,947,3.187,948,3.738,949,3.119,950,3.103,951,1.798,952,1.798,956,2.528,958,2.528,968,2.039,995,3.092,1021,2.806,1064,2.731,1246,3.903,1247,6.762,1248,4.393,1249,4.393,1250,2.988,1251,4.393,1252,4.393,1253,4.393,1254,2.988,1255,4.393,1256,4.393,1257,4.393,1258,4.393,1259,4.393,1260,4.393,1261,2.988,1262,4.393,1263,3.903]],["title/entities/DbRepoToUserStars.html",[87,2.777,887,1.145]],["body/entities/DbRepoToUserStars.html",[7,0.007,28,0.071,29,0.071,30,0.057,37,0.558,40,0.78,41,0.475,42,0.799,46,0.142,63,1.062,79,3.046,81,3.634,82,2.851,87,3.656,110,2.288,111,1.529,179,2.238,180,1.335,230,0.078,231,0.115,239,0.005,240,0.005,247,0.223,258,1.188,278,1.067,285,2.841,323,0.76,355,2.52,356,2.953,359,1.842,365,3.15,390,1.334,438,1.1,498,1.572,506,2.056,579,2.049,594,1.985,634,1.788,669,3.718,675,2.371,765,3.1,768,2.566,780,1.887,869,3.242,887,1.508,889,3.36,890,2.883,904,2.696,905,3.655,906,3.273,908,2.63,909,3.401,910,1.986,911,3.396,912,3.564,913,3.046,915,2.624,916,2.447,918,3.317,921,3.003,926,3.401,928,4.234,932,2.63,933,3.29,934,3.29,935,2.624,940,2.883,943,3.914,944,3.914,945,3.092,946,2.63,947,3.187,948,3.738,949,3.119,950,3.103,951,1.798,952,1.798,956,2.528,958,2.528,968,2.039,995,3.092,1021,2.806,1064,2.731,1250,2.988,1254,2.988,1261,2.988,1264,3.903,1265,6.307,1266,4.393,1267,4.393,1268,4.393,1269,4.393,1270,4.393,1271,4.393,1272,4.393,1273,4.393,1274,4.393,1275,4.393,1276,4.393,1277,4.393,1278,3.903]],["title/entities/DbRepoToUserSubmissions.html",[89,2.777,887,1.145]],["body/entities/DbRepoToUserSubmissions.html",[7,0.007,28,0.067,29,0.067,30,0.054,37,0.56,40,0.758,41,0.475,42,0.826,46,0.14,63,1.01,79,2.979,81,3.553,82,2.709,89,3.528,110,2.174,111,1.507,179,2.874,180,1.268,230,0.074,231,0.109,239,0.004,240,0.004,247,0.212,258,1.192,278,1.05,285,2.741,323,0.722,355,2.452,356,2.873,359,1.816,365,3.155,390,1.359,438,1.061,498,1.494,506,1.984,579,2.011,594,2.049,634,1.726,669,3.649,675,2.396,704,3.075,724,2.537,765,3.049,768,2.476,778,3.399,780,1.794,869,3.189,887,1.455,889,3.269,890,3.05,904,2.602,905,3.617,906,3.506,908,2.537,909,3.282,910,1.887,911,3.341,912,3.506,913,2.979,915,2.494,916,2.361,918,3.263,921,2.897,926,3.282,928,4.14,932,2.537,933,3.174,934,3.174,935,2.494,940,3.05,943,3.808,944,3.808,945,2.983,946,2.537,947,3.075,948,3.655,949,3.218,950,3.019,951,1.709,952,1.709,956,2.403,958,2.403,968,1.938,995,2.983,1021,2.753,1028,4.232,1031,3.71,1064,2.595,1250,2.84,1254,2.84,1261,2.84,1279,3.71,1280,6.089,1281,6.986,1282,4.175,1283,4.175,1284,4.175,1285,5.905,1286,5.905,1287,4.175,1288,4.175,1289,4.175,1290,4.175,1291,4.175,1292,4.175,1293,4.175,1294,4.175,1295,4.175,1296,4.175,1297,3.71]],["title/entities/DbRepoToUserVotes.html",[85,2.777,887,1.145]],["body/entities/DbRepoToUserVotes.html",[7,0.007,28,0.071,29,0.071,30,0.057,37,0.558,40,0.78,41,0.475,42,0.799,46,0.142,63,1.062,79,3.046,81,3.634,82,2.851,85,3.656,110,2.288,111,1.529,179,2.238,180,1.335,230,0.078,231,0.115,239,0.005,240,0.005,247,0.223,258,1.188,278,1.067,285,2.841,323,0.76,355,2.52,356,2.953,359,1.842,365,3.15,390,1.334,438,1.1,498,1.572,506,2.056,579,2.049,594,1.985,634,1.788,669,3.718,675,2.371,765,3.1,768,2.566,780,1.887,869,3.242,887,1.508,889,3.36,890,2.883,904,2.696,905,3.655,906,3.273,908,2.63,909,3.401,910,1.986,911,3.396,912,3.564,913,3.046,915,2.624,916,2.447,918,3.317,921,3.003,926,3.401,928,4.234,932,2.63,933,3.29,934,3.29,935,2.624,940,2.883,943,3.914,944,3.914,945,3.092,946,2.63,947,3.187,948,3.738,949,3.119,950,3.103,951,1.798,952,1.798,956,2.528,958,2.528,968,2.039,995,3.092,1021,2.806,1064,2.731,1250,2.988,1254,2.988,1261,2.988,1298,3.903,1299,6.307,1300,4.393,1301,4.393,1302,4.393,1303,4.393,1304,4.393,1305,4.393,1306,4.393,1307,4.393,1308,4.393,1309,4.393,1310,4.393,1311,4.393,1312,3.903]],["title/entities/DbSubscription.html",[123,3.161,887,1.145]],["body/entities/DbSubscription.html",[7,0.007,28,0.048,29,0.048,30,0.039,37,0.559,40,0.329,41,0.49,42,0.845,46,0.1,63,0.718,111,0.825,123,3.122,179,1.678,180,0.903,230,0.053,231,0.078,239,0.003,240,0.003,247,0.151,258,1.19,278,0.812,323,0.514,355,2.007,359,1.476,365,3.152,390,1.434,402,1.197,438,0.825,471,4.521,472,5.876,477,3.875,498,1.063,506,2.991,508,1.188,587,1.086,594,2.32,675,2.468,694,2.639,704,3.285,765,3.49,768,3.732,780,3.423,869,3.429,887,1.131,890,2.792,902,4.291,904,3.51,905,3.857,906,3.825,908,2.711,909,4.947,910,1.343,911,3.591,912,3.77,913,3.508,916,1.835,918,2.523,924,5.28,940,3.526,941,2.39,942,1.597,946,1.972,948,2.252,949,2.951,950,3.585,951,1.216,952,1.216,979,2.639,1021,1.964,1210,2.639,1313,6.671,1314,2.639,1315,4.983,1316,4.983,1317,4.983,1318,4.983,1319,4.983,1320,4.983,1321,4.264,1322,4.983,1323,5.559,1324,4.239,1325,4.983,1326,4.983,1327,4.589,1328,2.97,1329,5.902,1330,2.97,1331,4.589,1332,2.97,1333,2.97,1334,4.797,1335,6.309,1336,2.97,1337,2.97,1338,2.97,1339,2.97,1340,2.97,1341,2.97,1342,4.078,1343,2.97,1344,2.97,1345,2.97,1346,2.97,1347,4.019,1348,2.97,1349,6.309,1350,2.97,1351,2.97,1352,2.97,1353,2.97,1354,2.639,1355,2.97,1356,2.97,1357,2.97]],["title/entities/DbUserCollaboration.html",[153,3.016,887,1.145]],["body/entities/DbUserCollaboration.html",[7,0.007,28,0.053,29,0.053,30,0.043,37,0.553,40,0.662,41,0.483,42,0.847,46,0.118,63,0.798,81,3.718,111,1.635,147,2.576,153,3.226,179,2.746,180,1.002,230,0.059,231,0.086,239,0.004,240,0.004,247,0.167,258,1.178,278,0.857,296,3.701,323,0.571,355,2.141,356,2.508,359,1.839,365,3.141,390,1.393,402,1.158,438,0.893,449,3.506,498,1.18,506,2.811,587,1.206,594,2.091,675,2.429,744,6.554,747,4.417,754,2.508,765,3.286,766,4.322,768,3.149,780,3.07,869,3.269,887,1.225,889,2.854,890,2.925,894,4.322,895,4.322,896,3.833,904,3.148,905,3.744,906,3.594,908,2.136,910,1.491,911,3.424,912,3.594,913,2.663,916,3.003,918,1.988,921,2.439,924,3.381,926,2.763,928,3.701,932,3.227,940,3.191,941,2.589,942,2.672,943,3.325,944,3.325,945,2.511,946,2.136,947,2.589,948,2.935,949,3.075,950,3.309,951,1.35,952,1.35,968,1.531,980,4.14,982,3.381,995,2.511,997,2.364,1002,2.364,1005,2.931,1010,3.78,1012,3.78,1017,2.931,1021,2.503,1023,3.563,1024,2.364,1043,3.381,1044,2.508,1057,2.931,1058,3.883,1062,2.931,1069,5.918,1070,5.064,1324,4.442,1358,5.202,1359,2.931,1360,5.983,1361,5.983,1362,5.316,1363,6.35,1364,4.971,1365,3.298,1366,3.298,1367,3.298,1368,3.298,1369,4.971,1370,4.417,1371,4.971,1372,3.298,1373,3.298,1374,3.298,1375,3.298,1376,3.298,1377,3.298,1378,3.298,1379,3.298,1380,3.298,1381,3.298,1382,4.971,1383,3.298,1384,2.141,1385,3.298,1386,3.298,1387,3.298]],["title/entities/DbUserHighlight.html",[133,2.583,887,1.145]],["body/entities/DbUserHighlight.html",[7,0.007,28,0.05,29,0.093,30,0.04,37,0.562,40,0.909,41,0.483,42,0.872,46,0.123,63,0.743,81,3.063,111,1.558,127,3.063,133,2.617,143,3.696,144,4.576,145,1.993,147,2.202,150,2.71,179,3.2,180,0.933,230,0.055,231,0.08,239,0.003,240,0.003,247,0.156,258,1.198,278,0.826,323,0.531,355,2.049,356,2.401,359,1.646,365,3.16,376,3.606,390,1.429,402,1.306,438,0.846,477,4.218,498,1.099,526,1.835,579,1.204,587,1.123,594,1.904,675,2.463,704,3.344,723,3.296,724,2.759,725,1.768,753,2.335,759,4.104,760,4.962,761,4.882,764,4.184,765,3.298,766,5.092,767,5.966,768,3.29,773,5.705,777,4.184,780,2.759,869,3.066,887,1.16,889,2.732,890,3.293,904,2.829,905,3.613,906,3.371,908,2.023,910,1.388,911,3.212,912,3.371,913,2.567,916,2.921,918,2.567,924,2.089,926,1.707,928,3.568,940,2.991,941,2.452,942,1.651,943,2.617,944,3.183,945,2.379,946,2.023,947,2.452,948,2.81,949,3.361,950,3.05,951,1.257,952,1.257,955,2.201,963,2.335,968,2.186,972,4.355,987,2.504,988,3.839,994,3.839,1021,2.425,1023,3.375,1024,2.201,1043,3.203,1044,2.335,1073,4.184,1074,2.729,1075,5.555,1080,2.729,1084,3.992,1085,2.335,1235,5.089,1358,5.273,1384,1.993,1388,2.729,1389,5.265,1390,6.924,1391,3.071,1392,3.071,1393,3.071,1394,4.709,1395,3.071,1396,3.071,1397,3.071,1398,3.071,1399,3.071,1400,3.071,1401,3.839,1402,3.071,1403,3.071,1404,3.071,1405,3.839,1406,3.071,1407,3.071,1408,3.071,1409,3.071,1410,3.071,1411,3.071,1412,3.071,1413,3.071,1414,3.071,1415,2.729,1416,3.071,1417,3.071,1418,2.729,1419,3.071,1420,3.071]],["title/entities/DbUserHighlightReaction.html",[143,2.675,887,1.145]],["body/entities/DbUserHighlightReaction.html",[7,0.007,28,0.06,29,0.06,30,0.048,37,0.56,40,0.779,41,0.484,42,0.865,46,0.139,63,0.892,81,3.049,111,1.406,133,3.552,135,2.293,141,3.974,142,3.278,143,4.311,144,4.572,179,3.281,180,1.121,230,0.066,231,0.097,239,0.004,240,0.004,247,0.187,258,1.192,278,1.007,285,2.508,323,0.638,355,2.287,356,2.68,359,1.83,365,3.096,390,1.303,402,1.085,438,0.971,477,2.904,498,1.32,506,1.815,594,1.834,675,2.341,765,2.924,768,2.265,780,1.585,869,3.058,887,1.331,889,3.049,890,2.88,904,2.38,905,3.519,906,3.023,908,2.321,909,3.002,910,1.668,911,3.203,912,3.362,913,2.814,915,2.204,916,3.524,918,3.315,921,2.651,926,3.552,928,4.349,930,3.278,932,2.321,933,2.904,934,2.904,935,2.204,940,3.066,943,3.91,944,3.91,945,2.729,946,2.321,947,2.813,948,3.675,949,3.066,950,2.816,951,1.51,952,1.51,956,2.123,958,2.123,968,1.712,973,6.701,976,6.105,980,4.865,982,4.786,983,3.007,995,2.729,997,3.871,1002,2.644,1021,2.623,1075,4.108,1200,3.278,1358,5.265,1384,2.394,1405,6.105,1421,3.278,1422,6.655,1423,5.68,1424,3.689,1425,3.689,1426,3.689,1427,3.689,1428,3.689,1429,3.689,1430,3.689,1431,3.689,1432,3.689,1433,3.689,1434,3.689,1435,3.689,1436,3.689,1437,3.689,1438,3.689,1439,3.689,1440,3.689,1441,3.689,1442,3.689,1443,3.689,1444,3.689]],["title/classes/DbUserHighlightRepo.html",[231,0.122,1445,3.331]],["body/classes/DbUserHighlightRepo.html",[7,0.007,28,0.11,29,0.11,30,0.088,37,0.437,40,0.9,41,0.358,42,0.783,46,0.121,144,4.417,230,0.121,231,0.178,239,0.006,240,0.006,247,0.345,258,0.932,365,2.861,390,1.134,402,1.253,438,1.461,498,2.436,579,2.079,583,2.153,675,2.159,723,5.003,724,3.493,725,4.68,890,2.787,949,3.328,951,2.787,952,2.787,1081,4.88,1084,5.054,1445,5.826,1446,7.224,1447,6.809]],["title/entities/DbUserNotification.html",[151,3.016,887,1.145]],["body/entities/DbUserNotification.html",[7,0.007,28,0.067,29,0.111,30,0.054,37,0.55,40,0.461,41,0.495,42,0.851,46,0.122,63,1.008,111,1.656,144,2.895,151,3.829,179,2.157,180,1.267,230,0.074,231,0.109,239,0.004,240,0.004,247,0.211,258,1.172,278,1.049,359,1.886,365,3.135,390,1.427,402,1.258,438,1.06,449,3.855,498,1.492,506,1.982,587,1.524,594,1.538,626,3.525,675,2.461,729,5.243,753,4.487,765,3.048,766,3.829,768,3.122,780,2.535,869,2.91,887,1.454,890,3.339,894,5.294,895,5.294,896,4.695,902,5.064,904,2.6,905,3.507,906,3.199,908,2.535,910,1.885,911,3.048,912,3.199,913,2.359,916,2.359,918,2.359,924,2.836,932,2.535,940,3.433,941,3.073,942,2.242,946,2.535,949,3.433,950,3.017,951,1.707,952,1.707,955,2.988,963,3.171,965,3.705,968,1.936,969,3.705,998,3.829,1021,2.399,1041,4.81,1070,4.487,1358,5.205,1448,3.705,1449,6.085,1450,5.582,1451,6.085,1452,6.085,1453,4.17,1454,4.17,1455,7.353,1456,4.17,1457,3.829,1458,4.17,1459,4.17,1460,4.17,1461,5.243,1462,4.17,1463,5.243,1464,4.17,1465,5.9,1466,4.17,1467,4.17,1468,4.658,1469,4.17,1470,4.17,1471,3.399,1472,3.705,1473,4.17,1474,3.705,1475,3.705]],["title/entities/DbUserRepo.html",[114,3.161,887,1.145]],["body/entities/DbUserRepo.html",[7,0.007,28,0.084,29,0.084,30,0.067,37,0.545,40,0.85,41,0.468,42,0.661,46,0.122,63,1.256,111,1.566,112,5.93,114,4.664,180,1.578,230,0.092,231,0.136,239,0.005,240,0.005,247,0.263,258,1.161,278,1.122,355,2.747,359,1.661,365,3.124,390,1.414,402,1.057,438,1.232,477,3.686,498,1.859,506,2.304,579,2.23,587,1.899,594,1.787,669,3.563,675,2.448,723,4.419,724,2.946,725,2.99,765,2.562,768,2.875,780,2.232,869,2.68,887,1.69,890,3.342,904,2.289,905,3.342,906,2.946,908,2.946,910,2.348,911,2.807,912,2.946,913,2.742,918,3.486,932,2.946,940,2.807,941,3.571,942,2.792,946,2.946,949,3.475,950,3.021,951,2.126,952,2.126,955,3.722,963,3.95,968,3.563,1021,2.689,1081,3.722,1084,4.263,1085,3.95,1415,6.094,1418,6.094,1476,5.93,1477,5.195,1478,5.195,1479,5.195,1480,5.195,1481,5.195,1482,5.195]],["title/entities/DbUserToUserFollows.html",[137,3.016,887,1.145]],["body/entities/DbUserToUserFollows.html",[7,0.007,28,0.077,29,0.077,30,0.062,37,0.546,40,0.528,41,0.472,42,0.82,46,0.131,63,1.154,111,1.631,137,4.203,179,2.368,180,1.449,230,0.085,231,0.125,239,0.005,240,0.005,247,0.242,258,1.164,278,1.094,285,3.006,323,0.825,355,2.631,356,3.083,359,1.591,365,3.127,390,1.374,438,1.164,498,1.707,506,2.176,594,2.056,675,2.41,765,3.179,768,2.716,780,2.049,869,3.324,887,1.596,889,3.508,890,3.01,904,2.853,905,3.715,906,3.389,908,2.783,909,3.599,910,2.156,911,3.482,912,3.655,913,3.154,915,2.849,916,2.59,918,3.402,921,3.178,932,2.783,933,3.482,934,3.482,935,2.849,940,3.01,945,3.272,946,2.783,947,3.373,948,3.178,949,3.229,950,3.24,951,1.952,952,1.952,956,2.745,958,2.745,968,2.214,995,3.272,1021,2.576,1064,2.965,1250,3.244,1254,3.244,1261,3.244,1358,5.198,1483,4.238,1484,5.995,1485,6.096,1486,4.77,1487,4.77,1488,6.477,1489,4.77,1490,4.77,1491,4.77,1492,4.77,1493,4.238]],["title/entities/DbUserTopRepo.html",[149,3.331,887,1.145]],["body/entities/DbUserTopRepo.html",[7,0.007,28,0.069,29,0.069,30,0.055,37,0.553,40,0.766,41,0.472,42,0.791,46,0.141,63,1.027,79,3.002,80,2.146,81,3.581,111,1.515,149,4.284,150,5.319,179,2.186,180,1.291,230,0.075,231,0.111,239,0.004,240,0.004,247,0.351,258,1.178,278,1.056,285,2.775,323,0.735,355,2.475,356,2.9,359,1.825,365,3.14,390,1.318,438,1.074,498,1.52,506,2.009,579,2.293,594,1.957,634,1.747,669,3.673,675,2.355,761,4.546,765,3.067,768,2.507,780,1.825,869,3.207,887,1.473,889,3.3,890,2.832,904,2.634,905,3.63,906,3.226,909,3.323,910,1.92,911,3.36,912,3.526,913,3.002,915,2.538,916,2.391,918,3.282,921,2.933,926,3.323,928,4.172,932,2.569,933,3.214,934,3.214,935,2.538,940,2.832,943,3.845,944,3.845,945,3.02,946,2.569,947,3.113,948,3.683,949,3.073,950,3.048,951,1.739,952,1.739,956,2.445,958,2.445,968,1.972,995,3.02,1021,2.771,1064,2.641,1081,3.044,1250,2.89,1254,2.89,1261,2.89,1358,5.228,1384,2.757,1494,4.248,1495,4.248,1496,4.874,1497,4.248,1498,4.248,1499,4.248,1500,4.248,1501,4.248,1502,4.248,1503,4.248,1504,4.248,1505,4.248,1506,4.248,1507,4.248]],["title/controllers/EmojiController.html",[241,1.083,1508,3.534]],["body/controllers/EmojiController.html",[7,0.007,28,0.098,29,0.098,30,0.079,33,1.583,37,0.391,39,1.223,40,0.674,41,0.399,42,0.587,44,1.269,46,0.162,48,0.799,141,4.72,230,0.108,231,0.159,232,1.223,234,1.246,239,0.006,240,0.006,241,1.418,243,1.711,245,2.379,247,0.309,248,1.824,258,0.833,261,3.036,319,3.432,320,3.036,321,3.036,322,2.379,323,1.053,345,2.274,348,2.434,385,1.179,390,1.014,516,2.132,588,2.461,624,2.274,625,1.711,864,3.262,996,7.922,1508,5.773,1509,5.409,1510,8.915,1511,6.087,1512,4.362,1513,4.927,1514,4.37,1515,6.087,1516,6.087,1517,3.954,1518,6.087,1519,2.825,1520,2.986,1521,2.752,1522,2.986,1523,5.628,1524,5.409,1525,4.962,1526,6.087,1527,6.087,1528,6.087,1529,6.087]],["title/modules/EmojiModule.html",[0,1.211,10,3.331]],["body/modules/EmojiModule.html",[0,2.098,2,2.558,3,3.218,7,0.007,10,6.666,25,3.295,26,2.741,27,2.558,28,0.108,29,0.108,30,0.087,32,2.807,46,0.163,48,0.879,50,3.108,51,1.919,141,5.004,163,1.995,229,3.458,230,0.119,231,0.175,239,0.006,240,0.006,243,2.263,581,3.487,1508,6.562,1523,6.327,1524,5.95,1525,5.458,1530,5.95,1531,5.95,1532,6.696,1533,6.696]],["title/injectables/EmojiService.html",[441,0.835,1523,3.161]],["body/injectables/EmojiService.html",[7,0.007,28,0.096,29,0.096,30,0.077,33,1.557,37,0.525,39,1.501,40,0.826,41,0.393,42,0.72,44,1.557,46,0.163,48,0.778,51,1.699,63,1.433,141,3.685,163,1.766,180,1.801,183,2.14,230,0.105,231,0.155,232,1.501,234,1.213,239,0.006,240,0.006,247,0.301,248,1.802,350,2.154,380,2.06,385,1.446,441,1.342,516,2.076,563,1.991,588,2.481,624,2.79,625,1.666,632,5.305,634,2.508,637,3.846,641,2.426,642,2.121,643,2.265,646,4.21,647,3.186,650,2.547,660,3.888,661,3.294,662,3.294,663,3.294,824,3.781,840,2.679,1523,5.079,1525,4.832,1534,5.267,1535,5.927,1536,5.927,1537,7.467,1538,5.927,1539,5.927,1540,5.927,1541,5.927,1542,5.927,1543,4.832]],["title/controllers/EndorsementController.html",[241,1.083,1544,3.534]],["body/controllers/EndorsementController.html",[7,0.007,28,0.052,29,0.052,30,0.042,33,1.014,37,0.511,39,1.598,40,0.88,41,0.471,42,0.766,44,1.658,46,0.145,48,0.421,111,1.387,156,5.225,172,4.577,183,1.394,230,0.057,231,0.084,232,0.644,234,0.996,235,1.478,239,0.004,240,0.004,241,0.747,243,0.901,245,1.252,247,0.163,248,2.048,258,1.088,261,3.581,270,4.322,279,2.615,315,2.533,316,1.529,318,2.906,319,2.658,320,3.257,321,3.321,322,1.252,323,0.554,331,2.97,332,2.297,345,1.198,348,3.257,350,1.221,359,1.608,380,1.342,385,1.577,390,0.81,402,1.436,492,2.18,516,2.786,548,3.486,579,2.159,588,2.58,624,1.198,625,0.901,664,5.539,673,6.417,864,3.317,1016,6.506,1512,2.297,1514,4.78,1517,3.418,1519,1.488,1520,1.572,1521,1.449,1522,1.572,1544,3.699,1545,2.848,1546,7.056,1547,7.056,1548,7.056,1549,7.056,1550,6.27,1551,5.224,1552,6.859,1553,7.056,1554,3.205,1555,3.205,1556,3.205,1557,3.205,1558,3.205,1559,3.205,1560,3.205,1561,2.848,1562,4.654,1563,4.864,1564,4.322,1565,3.205,1566,3.205,1567,3.205,1568,3.205,1569,4.864,1570,6.27,1571,3.205,1572,4.322,1573,3.205,1574,3.205,1575,2.848,1576,3.205,1577,4.276,1578,3.205,1579,3.205,1580,3.205,1581,5.35,1582,3.205,1583,3.205,1584,3.205,1585,3.205,1586,3.205,1587,3.205,1588,3.699,1589,2.613,1590,3.205,1591,3.205,1592,1.529,1593,1.781,1594,3.655,1595,2.848,1596,2.848,1597,2.613,1598,2.613,1599,2.297,1600,2.848,1601,3.205,1602,2.848,1603,3.205,1604,2.613,1605,3.205,1606,2.297,1607,3.205,1608,3.205,1609,6.27,1610,3.205,1611,3.205,1612,3.205,1613,3.205,1614,3.205,1615,3.157,1616,3.157,1617,3.205,1618,3.205,1619,4.322,1620,3.205,1621,3.205,1622,3.205,1623,2.533,1624,3.205,1625,3.205,1626,3.965,1627,3.965,1628,3.205,1629,3.205,1630,3.205,1631,2.848,1632,3.205]],["title/modules/EndorsementModule.html",[0,1.211,11,3.331]],["body/modules/EndorsementModule.html",[0,1.995,2,2.357,3,3.062,6,6.204,7,0.007,11,6.834,22,5.25,25,3.134,26,2.526,27,2.357,28,0.1,29,0.1,30,0.08,32,3.21,46,0.166,48,0.81,50,2.864,51,1.768,93,5.482,99,4.197,156,4.574,163,1.838,229,3.29,230,0.11,231,0.162,239,0.006,240,0.006,243,2.153,425,3.461,581,3.213,673,4.691,1544,6.33,1594,5.956,1595,5.482,1598,5.03,1599,5.487,1600,5.482,1633,5.482,1634,5.482,1635,5.482,1636,6.17,1637,6.17,1638,5.482]],["title/injectables/EndorsementService.html",[441,0.835,1594,2.89]],["body/injectables/EndorsementService.html",[7,0.007,28,0.053,29,0.053,30,0.043,33,1.032,37,0.545,39,1.679,40,0.925,41,0.439,42,0.805,44,1.742,46,0.142,48,0.431,51,0.94,63,0.793,111,0.89,156,1.96,163,0.977,180,2.277,183,2.493,230,0.058,231,0.086,232,0.995,234,0.672,239,0.004,240,0.004,247,0.166,248,2.065,275,3.707,278,0.964,287,2.636,350,2.345,359,1.622,366,2.85,380,2.423,385,1.587,402,1.415,441,0.89,513,1.226,516,2.806,563,1.102,579,2.137,588,2.602,624,1.85,625,0.922,632,3.87,634,1.941,637,2.129,641,1.343,642,1.174,643,1.253,646,4.462,647,1.763,650,3.927,658,4.66,659,4.66,660,4.479,661,4.165,662,4.165,663,4.165,664,5.098,703,2.441,824,2.926,840,3.388,842,1.657,1016,3.765,1550,5.299,1572,4.399,1575,2.915,1577,3.823,1594,3.078,1596,2.915,1597,2.674,1598,2.674,1619,5.299,1639,2.915,1640,5.963,1641,5.963,1642,5.963,1643,3.562,1644,3.87,1645,3.28,1646,3.28,1647,4.951,1648,3.28,1649,3.28,1650,3.28,1651,3.28,1652,3.28,1653,3.28,1654,3.28,1655,3.28,1656,3.28,1657,3.28,1658,3.28,1659,3.28,1660,3.28,1661,1.96,1662,3.28,1663,3.28,1664,3.28,1665,2.501,1666,3.28,1667,3.28,1668,3.28,1669,7.495,1670,5.098,1671,3.28,1672,3.28,1673,4.861,1674,5.963,1675,4.399,1676,3.28,1677,5.963,1678,4.951,1679,4.951,1680,3.28,1681,4.951,1682,3.28,1683,3.28,1684,3.28,1685,3.28,1686,2.674,1687,3.28,1688,3.28,1689,3.012,1690,3.28]],["title/guards/EndorsementTokenGuard.html",[1599,3.331,1691,3.534]],["body/guards/EndorsementTokenGuard.html",[7,0.007,28,0.1,29,0.1,30,0.081,33,1.604,37,0.494,39,1.545,40,0.851,41,0.404,42,0.741,44,1.296,46,0.137,48,0.816,53,5.259,54,3.452,147,2.131,161,3.235,168,6.268,179,2.811,230,0.11,231,0.163,232,1.545,234,1.272,239,0.006,240,0.006,247,0.315,350,2.251,385,1.617,441,1.381,492,4.225,564,4.724,704,3.235,847,5.064,1599,5.51,1604,5.064,1606,4.452,1692,5.52,1693,7.42,1694,5.52,1695,8.968,1696,6.212,1697,6.212,1698,7.754,1699,6.212,1700,8.351,1701,6.212,1702,6.212,1703,6.212,1704,6.212,1705,7.42,1706,6.212,1707,7.689]],["title/classes/FilterOptionsDto.html",[231,0.122,1708,3.161]],["body/classes/FilterOptionsDto.html",[7,0.007,28,0.081,29,0.081,30,0.065,37,0.574,41,0.481,42,0.914,46,0.143,230,0.089,231,0.175,235,2.916,239,0.005,240,0.005,247,0.253,258,1.224,278,0.968,323,0.863,402,1.411,438,1.199,463,2.519,508,3.008,579,1.924,583,1.576,585,2.426,586,2.681,587,2.44,588,2.382,590,3.476,591,3.841,592,3.8,594,2.385,595,3.368,597,3.841,598,4.33,602,2.681,603,3.841,604,2.771,605,2.87,606,4.624,607,2.979,608,3.8,609,2.597,610,2.87,611,2.979,612,2.87,613,2.979,614,3.476,615,2.447,616,2.447,617,2.87,618,2.87,619,2.979,620,4.361,621,3.236,622,4.361,623,1.905,625,1.876,626,2.979,675,1.772,684,4.065,692,3.729,724,2.868,725,2.87,1708,4.54,1709,7.441,1710,5.117,1711,5.117,1712,5.391,1713,5.358,1714,3.792,1715,4.431,1716,5.075,1717,4.065,1718,4.987,1719,3.792,1720,4.431,1721,4.987,1722,3.392,1723,3.792]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[231,0.122,445,3.161]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[7,0.007,28,0.089,29,0.089,30,0.072,37,0.537,41,0.496,46,0.127,230,0.098,231,0.187,239,0.005,240,0.005,247,0.28,258,1.144,278,1.176,323,0.956,390,1.477,402,1.391,434,4.019,436,5.619,438,1.283,445,4.858,447,5.179,453,5.89,456,6.359,504,5.89,583,1.748,594,1.861,623,2.112,672,3.78,675,2.355,691,3.914,692,3.673,693,6.016,896,4.111,1724,7.059,1725,4.912,1726,7.031,1727,5.528,1728,5.528,1729,4.912,1730,5.528,1731,7.031,1732,4.912,1733,6.346,1734,6.346,1735,6.346,1736,6.346,1737,6.346,1738,6.346,1739,6.346,1740,6.346,1741,6.346,1742,5.528,1743,4.912,1744,5.528,1745,3.962,1746,4.507,1747,4.507,1748,4.912,1749,4.912,1750,4.912,1751,4.507,1752,4.912,1753,4.912,1754,4.912]],["title/classes/GeneratePullRequestDescriptionDto.html",[231,0.122,521,3.161]],["body/classes/GeneratePullRequestDescriptionDto.html",[7,0.007,28,0.078,29,0.078,30,0.062,37,0.548,41,0.5,42,0.763,46,0.116,127,4.159,147,2.991,161,3.391,230,0.085,231,0.171,239,0.005,240,0.005,247,0.244,258,1.167,278,1.141,323,0.832,390,1.558,402,1.449,434,4.047,438,1.17,453,5.625,500,4.666,504,5.625,521,4.429,524,6.742,526,4.728,534,6.742,583,1.52,594,1.697,615,3.195,620,3.845,622,3.845,623,1.837,672,3.578,675,2.414,691,3.739,692,3.674,693,5.615,714,4.226,896,3.748,1158,3.445,1724,7.108,1726,6.561,1729,4.272,1731,6.561,1732,4.272,1733,5.786,1734,5.786,1735,5.786,1736,5.786,1737,5.786,1738,5.786,1739,5.786,1740,5.786,1741,5.786,1743,4.272,1745,3.445,1746,3.919,1747,3.919,1748,4.272,1749,4.272,1750,4.272,1751,3.919,1752,4.272,1753,4.272,1754,4.272,1755,4.272,1756,7.384,1757,5.786,1758,4.808,1759,4.808,1760,4.808,1761,4.808,1762,4.808,1763,4.808,1764,4.808,1765,4.808,1766,6.512,1767,6.512,1768,6.512,1769,7.384,1770,4.808,1771,4.808,1772,4.808,1773,4.808,1774,4.272,1775,4.808,1776,4.272,1777,4.808,1778,4.808,1779,4.808]],["title/controllers/HealthController.html",[241,1.083,1780,3.534]],["body/controllers/HealthController.html",[7,0.007,28,0.084,29,0.084,30,0.068,33,1.436,37,0.442,44,1.436,46,0.145,48,0.686,53,4.431,54,2.904,58,4.259,176,3.744,223,4.259,227,5.234,228,6.466,230,0.093,231,0.137,232,1.05,234,1.788,235,1.587,239,0.005,240,0.005,241,1.218,243,1.469,245,2.042,247,0.265,248,2.108,258,0.942,261,3.272,320,3.079,321,3.079,322,2.042,323,0.904,345,3.327,348,2.753,385,1.333,516,2.411,724,3.516,778,4.71,1780,5.234,1781,4.642,1782,7.76,1783,8.732,1784,5.225,1785,6.884,1786,6.884,1787,5.225,1788,5.225,1789,6.884,1790,5.225,1791,6.884,1792,6.884,1793,6.884,1794,7.699,1795,6.884,1796,6.884,1797,5.225,1798,5.225,1799,5.225,1800,5.225,1801,5.225,1802,6.117,1803,6.884,1804,5.225,1805,5.225,1806,5.225,1807,5.225,1808,5.225,1809,5.225,1810,6.884,1811,5.225,1812,5.225,1813,5.225,1814,5.225,1815,5.225,1816,5.225,1817,5.225,1818,5.225,1819,5.225,1820,5.225,1821,5.225,1822,5.225,1823,5.225,1824,5.225,1825,5.225,1826,5.225]],["title/modules/HealthModule.html",[0,1.211,12,3.331]],["body/modules/HealthModule.html",[0,2.183,2,2.735,7,0.007,12,6.002,28,0.116,29,0.116,30,0.093,32,3.002,46,0.158,48,0.94,57,7.442,58,5.837,230,0.127,231,0.188,239,0.006,240,0.006,243,2.355,1780,6.75,1827,7.16,1828,7.16]],["title/controllers/HighlightController.html",[241,1.083,1829,3.534]],["body/controllers/HighlightController.html",[7,0.007,28,0.078,29,0.078,30,0.063,33,1.362,37,0.475,39,1.487,40,0.819,41,0.449,42,0.713,44,1.543,46,0.162,48,0.634,110,2.514,111,1.173,133,4.112,134,4.965,135,3.001,143,3.758,144,4.282,145,3.133,147,2.24,230,0.086,231,0.126,232,0.97,234,0.988,235,1.467,239,0.005,240,0.005,241,1.125,243,1.357,245,1.886,247,0.245,248,1.983,258,1.012,261,3.414,267,2.81,274,4.059,278,0.952,319,2.952,320,3.17,321,3.17,322,1.886,323,0.835,345,1.804,348,2.959,359,1.413,385,1.433,390,1.087,551,4.059,555,4.059,588,2.403,624,1.804,625,1.836,642,1.727,643,1.844,703,2.673,864,3.179,899,5.802,972,5.626,1445,5.302,1514,4.563,1519,2.241,1520,2.368,1521,2.182,1522,2.368,1562,4.261,1588,4.965,1592,2.302,1623,2.514,1829,4.965,1830,4.289,1831,5.626,1832,7.359,1833,8.282,1834,8.282,1835,4.289,1836,4.827,1837,4.827,1838,4.827,1839,4.827,1840,5.392,1841,3.935,1842,4.289,1843,4.827,1844,4.827,1845,4.289,1846,4.289,1847,4.289,1848,4.289,1849,4.827,1850,3.629,1851,4.827,1852,2.595,1853,4.6,1854,4.827,1855,3.67,1856,4.827,1857,4.827,1858,3.935,1859,4.289,1860,4.289,1861,4.827,1862,4.827,1863,4.289,1864,4.289,1865,4.289]],["title/modules/HighlightModule.html",[0,1.211,13,3.331]],["body/modules/HighlightModule.html",[0,2.098,2,2.558,3,3.218,7,0.007,13,6.666,22,5.354,25,3.295,26,2.741,27,2.558,28,0.108,29,0.108,30,0.087,32,3.375,46,0.163,48,0.879,50,3.108,51,1.919,99,4.554,133,4.473,134,5.091,135,4.162,163,1.995,230,0.119,231,0.175,239,0.006,240,0.006,243,2.263,581,3.487,1829,6.562,1866,6.696,1867,6.696,1868,6.696,1869,5.95]],["title/classes/HighlightOptionsDto.html",[231,0.122,1840,3.161]],["body/classes/HighlightOptionsDto.html",[7,0.007,28,0.091,29,0.091,30,0.073,37,0.559,41,0.458,42,0.901,46,0.142,144,3.543,230,0.1,231,0.189,235,2.859,239,0.005,240,0.005,247,0.285,258,1.191,278,1.026,323,0.973,390,0.936,402,1.113,438,1.297,463,2.841,508,3.189,579,2.226,583,1.778,585,2.329,586,3.023,587,2.64,588,2.452,590,3.76,591,4.156,592,4.029,594,2.392,595,3.529,597,3.236,598,3.236,602,3.023,603,4.156,604,3.125,605,3.236,606,4.844,607,3.359,608,4.029,609,2.928,610,3.236,611,3.359,612,3.236,613,3.359,614,3.76,615,3.543,616,2.759,617,3.236,618,3.236,619,3.359,620,3.76,622,3.76,623,2.148,624,2.101,625,1.581,675,1.918,692,3.352,724,3.102,725,3.236,1710,4.911,1717,4.584,1840,4.911,1870,6.416,1871,5.623]],["title/injectables/HttpLoggerMiddleware.html",[100,3.534,441,0.835]],["body/injectables/HttpLoggerMiddleware.html",[7,0.007,28,0.094,29,0.094,30,0.076,33,1.538,37,0.474,39,1.168,40,0.643,41,0.306,42,0.56,44,1.212,45,4.165,46,0.151,48,0.763,67,4.738,68,4.738,69,4.738,100,6.16,147,3.131,182,5.796,183,2.114,225,5.017,230,0.131,231,0.152,234,1.659,239,0.005,240,0.005,247,0.295,350,2.139,385,1.569,438,1.325,441,1.325,449,3.619,484,5.297,490,6.283,563,1.953,594,1.922,595,2.437,846,4.738,847,4.738,1010,4.42,1872,7.199,1873,6.16,1874,5.813,1875,8.521,1876,5.813,1877,7.375,1878,5.813,1879,7.375,1880,4.738,1881,4.738,1882,5.813,1883,5.813,1884,5.165,1885,5.813,1886,5.813,1887,7.375,1888,8.521,1889,7.375,1890,5.813,1891,5.813,1892,5.813,1893,5.813,1894,5.813,1895,5.813]],["title/controllers/InsightController.html",[241,1.083,1896,3.534]],["body/controllers/InsightController.html",[7,0.007,28,0.081,29,0.081,30,0.065,33,1.396,37,0.43,39,1.345,40,0.741,41,0.441,42,0.645,44,1.396,46,0.157,48,0.658,106,4.339,111,1.354,147,1.718,183,1.435,230,0.089,231,0.131,232,1.006,234,1.025,235,1.521,239,0.005,240,0.005,241,1.167,243,1.408,245,1.957,247,0.254,248,1.902,258,0.916,261,3.218,262,3.381,267,2.649,274,4.161,278,1.166,287,2.84,310,3.406,316,2.389,317,3.284,318,3.998,319,3.408,320,3.014,321,3.014,322,1.957,323,0.866,324,2.152,345,1.871,347,2.457,348,2.676,350,1.257,359,1.815,380,1.846,385,0.97,390,1.34,513,1.871,551,4.161,552,3.25,555,4.161,556,2.53,585,2.783,705,4.493,1049,3.113,1517,2.608,1562,3.598,1589,4.082,1592,2.389,1593,2.783,1623,3.485,1644,4.343,1850,4.189,1896,5.089,1897,4.45,1898,8.386,1899,8.386,1900,5.007,1901,4.082,1902,5.456,1903,5.007,1904,6.692,1905,5.089,1906,5.007,1907,5.007,1908,4.45,1909,4.552,1910,4.45,1911,5.402,1912,5.007,1913,5.089,1914,6.692,1915,2.692,1916,3.588,1917,4.082,1918,3.588,1919,4.503,1920,3.25,1921,5.007,1922,4.082,1923,4.082,1924,5.456,1925,4.45,1926,4.45,1927,5.007]],["title/injectables/InsightMemberService.html",[441,0.835,1928,3.016]],["body/injectables/InsightMemberService.html",[7,0.007,28,0.065,29,0.065,30,0.052,33,1.197,37,0.545,39,1.667,40,0.918,41,0.436,42,0.799,44,1.73,46,0.151,48,0.527,51,1.15,63,0.97,139,4.351,140,3.051,161,3.811,163,1.196,179,1.467,180,1.219,183,1.921,230,0.071,231,0.105,232,1.154,234,1.175,239,0.004,240,0.004,247,0.204,248,2.051,267,2.651,278,1.111,287,2.549,350,2.199,359,1.836,362,4.812,366,2.31,380,2.136,385,1.672,402,1.381,441,1.031,513,1.499,516,2.348,563,1.348,588,2.245,594,1.046,595,1.682,624,2.145,625,1.128,634,2.138,641,1.643,642,1.436,643,1.533,646,3.59,647,2.157,650,3.461,658,2.494,659,2.494,660,2.99,661,2.23,662,2.23,663,2.23,705,1.969,824,3.224,840,3.031,842,2.9,1049,2.494,1244,3.43,1543,3.271,1643,4.005,1661,2.397,1665,2.9,1675,3.565,1689,3.911,1919,4.372,1920,2.604,1926,3.565,1928,3.726,1929,7.039,1930,3.565,1931,5.957,1932,6.704,1933,5.957,1934,6.704,1935,5.957,1936,4.012,1937,6.704,1938,4.012,1939,5.741,1940,4.012,1941,4.012,1942,7.157,1943,4.012,1944,3.859,1945,4.012,1946,7.142,1947,7.743,1948,7.317,1949,4.012,1950,4.012,1951,4.012,1952,4.012,1953,4.012,1954,4.012,1955,3.565,1956,4.012,1957,3.051,1958,4.012,1959,2.9,1960,4.012,1961,4.012,1962,4.012,1963,4.012,1964,4.012,1965,4.012,1966,5.741,1967,4.012,1968,4.012,1969,3.565,1970,4.012,1971,4.012,1972,4.012,1973,4.012,1974,4.012,1975,4.012,1976,4.012]],["title/classes/InsightOptionsDto.html",[231,0.122,1977,3.789]],["body/classes/InsightOptionsDto.html",[7,0.007,28,0.079,29,0.079,30,0.064,37,0.572,41,0.475,42,0.912,46,0.132,150,2.816,230,0.117,231,0.173,235,2.91,239,0.005,240,0.005,247,0.248,258,1.218,278,0.958,323,0.846,402,1.373,438,1.184,463,2.471,508,2.979,579,1.906,583,1.547,585,2.125,586,2.63,587,2.409,588,2.37,590,3.431,591,3.792,592,3.764,594,2.397,595,3.488,597,3.792,598,4.288,601,4.347,602,2.63,603,3.792,604,2.719,605,2.816,606,4.588,607,2.923,608,3.764,609,2.548,610,2.816,611,2.923,612,2.816,613,2.923,614,3.431,615,2.4,616,2.4,617,2.816,618,2.816,619,2.923,620,4.333,621,3.175,622,4.333,623,1.869,624,1.828,625,1.376,626,3.936,692,3.7,703,2.003,998,3.175,1245,3.041,1347,3.506,1710,5.067,1711,5.067,1712,5.339,1713,5.328,1714,3.72,1716,3.72,1719,5.01,1723,3.72,1977,5.371,1978,6.326,1979,4.892,1980,4.892,1981,7.45,1982,4.892,1983,4.892,1984,5.371,1985,3.988,1986,3.988,1987,3.72,1988,3.72,1989,3.988,1990,3.988,1991,3.988]],["title/classes/InsightPageOptionsDto.html",[231,0.122,1992,3.161]],["body/classes/InsightPageOptionsDto.html",[7,0.007,28,0.098,29,0.098,30,0.079,37,0.555,41,0.455,42,0.897,46,0.108,230,0.108,231,0.159,235,2.829,239,0.006,240,0.006,247,0.307,258,1.183,278,1.062,438,1.36,463,3.06,508,3.301,583,1.915,585,2.663,586,3.256,587,2.767,588,2.493,590,3.941,591,4.356,592,4.171,594,2.427,595,3.626,597,3.486,598,3.486,602,3.256,603,4.356,604,3.366,605,3.486,606,4.978,607,3.618,608,4.171,609,3.154,610,3.486,611,3.618,612,3.486,613,3.618,614,3.941,615,2.971,616,2.971,617,3.486,618,3.486,619,3.618,624,2.263,625,1.703,1978,4.605,1992,5.148]],["title/injectables/InsightRepoService.html",[441,0.835,1993,3.161]],["body/injectables/InsightRepoService.html",[7,0.007,28,0.097,29,0.097,30,0.078,33,1.567,37,0.527,39,1.65,40,0.909,41,0.432,42,0.791,44,1.567,46,0.158,48,0.786,51,1.716,63,1.448,108,3.885,110,3.117,163,1.784,230,0.106,231,0.157,232,1.51,234,1.225,239,0.006,240,0.006,247,0.304,248,1.996,278,1.165,359,1.626,385,1.455,441,1.35,516,2.632,563,2.011,579,2.1,634,2.516,641,2.45,669,2.779,711,5.589,719,3.885,720,4.88,723,3.445,1054,4.29,1929,7.02,1946,6.694,1957,4.552,1993,5.11,1994,5.319,1995,8.212,1996,8.212,1997,5.986,1998,5.986,1999,7.513,2000,5.986,2001,5.986,2002,5.986,2003,5.986,2004,5.986,2005,5.986,2006,4.88,2007,5.319,2008,5.986]],["title/modules/InsightsModule.html",[0,1.211,14,3.331]],["body/modules/InsightsModule.html",[0,1.901,2,2.182,3,2.916,7,0.007,14,6.854,22,5.149,25,2.986,26,2.338,27,2.182,28,0.092,29,0.092,30,0.074,32,3.058,46,0.168,48,0.75,50,2.651,51,1.637,99,3.885,106,4.198,108,4.733,110,2.974,111,1.31,139,4.733,140,4.343,163,1.702,229,3.134,230,0.101,231,0.15,239,0.005,240,0.005,243,2.051,425,3.297,581,2.974,705,3.942,1896,6.11,1918,4.093,1919,5.665,1920,3.707,1928,5.805,1957,5.546,1993,6.449,2009,5.075,2010,5.075,2011,5.075,2012,5.712,2013,5.712,2014,6.11,2015,6.11,2016,7.293,2017,4.343,2018,5.712,2019,4.656]],["title/injectables/InsightsService.html",[441,0.835,1919,2.777]],["body/injectables/InsightsService.html",[7,0.007,28,0.073,29,0.073,30,0.058,33,1.297,37,0.55,39,1.679,40,0.925,41,0.439,42,0.805,44,1.743,46,0.152,48,0.591,51,1.289,63,1.087,106,3.58,111,0.808,163,1.34,180,1.366,183,2.044,230,0.08,231,0.118,232,1.25,234,0.921,239,0.005,240,0.005,247,0.228,248,2.053,267,2.533,278,1.14,287,2.819,350,2.15,359,1.889,362,4.992,380,1.967,385,1.618,402,1.099,441,1.118,513,1.68,516,2.498,563,1.511,585,1.45,588,1.93,624,1.68,625,1.264,634,2.249,641,1.841,642,1.609,643,1.718,646,3.776,647,2.417,650,3.471,660,3.239,661,2.499,662,2.499,663,2.499,705,4.1,824,3.39,840,2.033,842,2.272,889,2.145,916,1.798,1021,2.179,1053,3.419,1054,3.222,1058,2.918,1079,3.996,1092,5.527,1244,3.716,1643,4.261,1661,2.686,1665,3.142,1670,3.059,1689,3.603,1918,3.222,1919,3.716,1944,4.105,1959,3.142,1992,5.234,2020,3.996,2021,7.132,2022,5.423,2023,7.132,2024,7.132,2025,4.497,2026,4.497,2027,6.22,2028,4.497,2029,4.497,2030,4.497,2031,3.666,2032,4.497,2033,4.497,2034,4.497,2035,4.497,2036,4.497,2037,4.497,2038,3.666,2039,4.497,2040,6.22,2041,4.497,2042,4.497,2043,6.22,2044,6.22,2045,4.497,2046,4.497,2047,4.497,2048,4.497,2049,4.497,2050,4.497,2051,4.497,2052,4.497,2053,4.497]],["title/modules/LogModule.html",[0,1.211,2054,3.534]],["body/modules/LogModule.html",[0,2.061,2,2.485,3,3.162,7,0.007,25,3.237,26,2.662,27,2.485,28,0.105,29,0.105,30,0.084,32,2.727,46,0.164,48,0.854,50,3.018,51,1.864,52,7.027,54,3.614,125,4.423,182,4.423,192,5.301,229,3.398,230,0.116,231,0.17,239,0.006,240,0.006,425,3.575,781,6.911,792,6.284,807,5.778,2054,7.227,2055,5.778,2056,5.778,2057,5.778,2058,6.503,2059,5.778,2060,6.503,2061,6.503]],["title/injectables/LogService.html",[441,0.835,792,3.161]],["body/injectables/LogService.html",[7,0.007,28,0.102,29,0.102,30,0.082,33,1.619,37,0.499,39,1.56,40,0.859,41,0.408,42,0.748,44,1.316,46,0.16,48,0.829,51,1.809,63,1.526,125,4.292,161,3.286,192,5.144,230,0.112,231,0.165,232,1.56,234,1.292,239,0.006,240,0.006,247,0.32,248,1.854,350,1.584,380,1.741,385,1.222,441,1.395,446,3.392,510,3.632,516,2.21,563,2.12,634,2.564,641,2.583,734,6.672,787,6.329,792,5.281,2059,5.607,2062,5.607,2063,8.409,2064,6.31,2065,6.31,2066,7.763,2067,6.31,2068,6.31,2069,6.31,2070,6.31,2071,7.763,2072,6.31,2073,6.31,2074,6.31]],["title/classes/PageDto.html",[231,0.122,642,1.663]],["body/classes/PageDto.html",[7,0.007,28,0.098,29,0.098,30,0.079,37,0.531,39,1.219,40,0.671,41,0.485,42,0.585,46,0.154,161,3.946,230,0.108,231,0.216,232,1.523,235,2.76,239,0.006,240,0.006,247,0.308,258,1.037,323,1.05,438,1.361,510,5.228,583,1.918,585,1.957,623,2.318,642,2.711,646,4.57,647,3.261,691,3.735,712,4.126,714,5.362,717,4.945,2075,5.39,2076,6.603,2077,6.066,2078,6.058,2079,7.576,2080,6.066,2081,6.066,2082,6.066,2083,6.066,2084,6.066,2085,6.066,2086,8.262,2087,6.066,2088,6.066,2089,6.066]],["title/classes/PageMetaDto.html",[231,0.122,646,2.28]],["body/classes/PageMetaDto.html",[7,0.007,28,0.081,29,0.081,30,0.065,37,0.566,39,1.008,40,0.555,41,0.464,42,0.483,46,0.119,161,3.489,179,2.449,230,0.089,231,0.131,232,1.346,235,2.902,239,0.005,240,0.005,247,0.254,258,1.181,278,1.21,323,0.868,390,1.438,438,1.204,484,4.164,506,2.819,508,3.219,583,1.585,585,3.001,588,1.357,590,3.928,646,3.287,660,4.369,672,3.902,675,2.471,691,3.984,704,4.193,998,4.347,1028,5.769,1029,7.154,1334,5.094,2076,3.593,2090,6.809,2091,4.456,2092,7.543,2093,7.543,2094,7.543,2095,5.014,2096,6.122,2097,6.699,2098,6.699,2099,5.014,2100,7.154,2101,7.154,2102,5.014,2103,6.699,2104,5.014,2105,5.014,2106,5.952,2107,5.014,2108,5.014,2109,6.703,2110,5.014,2111,5.952,2112,5.014,2113,5.014,2114,5.014,2115,5.014,2116,5.014,2117,5.014]],["title/interfaces/PageMetaParameters.html",[431,2.777,2096,3.534]],["body/interfaces/PageMetaParameters.html",[7,0.007,28,0.114,29,0.114,30,0.092,41,0.437,46,0.125,230,0.125,239,0.006,240,0.006,247,0.358,278,1.135,431,4.219,433,5.37,438,1.493,585,2.278,588,2.591,625,1.986,660,4.745,2076,5.061,2090,5.37,2096,6.317,2118,6.275]],["title/classes/PageOptionsDto.html",[231,0.122,588,1.258]],["body/classes/PageOptionsDto.html",[7,0.007,28,0.083,29,0.083,30,0.067,37,0.543,41,0.473,42,0.867,46,0.144,230,0.091,231,0.2,235,2.837,239,0.005,240,0.005,247,0.26,258,1.112,278,1.184,323,0.888,385,0.994,390,0.855,438,1.223,463,3.438,506,1.725,508,3.643,583,1.624,585,2.462,586,2.761,588,1.842,590,3.975,591,4.394,592,4.272,594,2.433,595,3.408,597,2.956,598,3.917,602,4.104,603,3.917,604,3.782,605,2.956,608,4.479,609,3.975,610,2.956,612,2.956,614,4.404,615,2.52,616,3.339,617,2.956,618,2.956,620,4.404,621,3.333,622,4.404,623,1.962,626,3.068,645,3.905,717,4.186,1745,3.68,1746,4.186,1747,4.186,1987,5.175,2090,6.608,2109,4.563,2111,4.563,2119,6.048,2120,6.783,2121,5.135,2122,5.135,2123,5.135,2124,4.563,2125,5.135,2126,5.135,2127,8.128,2128,5.135,2129,6.806,2130,5.135,2131,5.135,2132,5.135,2133,4.563]],["title/controllers/PullRequestController.html",[241,1.083,2134,3.534]],["body/controllers/PullRequestController.html",[7,0.007,28,0.076,29,0.076,30,0.061,33,1.341,37,0.47,39,1.47,40,0.809,41,0.446,42,0.705,44,1.525,46,0.162,48,0.62,127,4.213,128,4.365,130,5.109,132,3.382,146,4.173,147,2.819,148,3.382,230,0.084,231,0.124,232,0.948,234,1.316,235,1.954,239,0.005,240,0.005,241,1.1,243,1.327,245,1.844,247,0.239,248,1.974,258,1.001,261,3.391,267,2.791,320,3.141,321,3.141,322,1.844,323,0.817,345,1.764,348,2.925,385,1.416,434,3.646,488,2.82,542,3.848,558,3.848,559,3.848,560,5.109,585,1.522,588,2.474,624,1.764,625,2.057,642,1.689,643,1.803,864,3.375,921,3.155,1049,3.998,1107,3.21,1514,4.521,1519,2.191,1520,2.316,1521,2.134,1522,2.316,1562,3.457,1708,5.342,1841,3.848,1858,3.848,1920,3.063,2134,4.89,2135,4.194,2136,8.218,2137,8.218,2138,8.218,2139,4.72,2140,4.72,2141,4.608,2142,6.431,2143,6.431,2144,4.72,2145,4.72,2146,4.72,2147,6.431,2148,4.72,2149,4.72,2150,5.628,2151,4.194,2152,6.431,2153,4.89,2154,3.998,2155,4.72,2156,4.89,2157,4.747,2158,3.848,2159,4.194,2160,4.374,2161,4.194,2162,4.72,2163,5.714,2164,4.72,2165,4.194,2166,4.72,2167,4.72,2168,4.72,2169,4.72,2170,4.72,2171,4.72]],["title/controllers/PullRequestDescriptionController.html",[241,1.083,2172,3.534]],["body/controllers/PullRequestDescriptionController.html",[7,0.007,28,0.094,29,0.094,30,0.076,33,1.54,37,0.374,39,1.17,40,0.644,41,0.388,42,0.561,44,1.214,46,0.156,48,0.765,127,3.522,128,4.103,147,3.018,183,1.669,230,0.103,231,0.152,232,1.17,234,1.192,239,0.005,240,0.005,241,1.357,243,1.637,245,2.275,247,0.295,248,1.787,258,0.797,261,2.952,279,3.969,284,3.778,315,3.032,316,2.777,317,3.622,318,4.411,321,2.952,322,2.275,323,1.007,324,2.502,345,2.176,347,2.857,348,2.328,350,1.462,380,1.606,385,1.127,390,1.497,434,3.427,446,3.13,513,2.176,516,2.039,521,6.285,522,4.746,523,5.261,526,4.411,542,4.746,543,7.818,547,6.56,548,5.291,549,5.291,551,4.59,552,3.778,554,5.614,555,4.59,556,2.941,558,4.746,559,4.746,560,3.619,2172,5.614,2173,5.173,2174,5.822,2175,5.822,2176,5.822,2177,5.822,2178,5.173,2179,5.822,2180,5.822]],["title/injectables/PullRequestDescriptionService.html",[441,0.835,523,3.016]],["body/injectables/PullRequestDescriptionService.html",[7,0.007,28,0.076,29,0.076,30,0.061,33,1.343,37,0.47,39,1.472,40,0.811,41,0.414,42,0.706,44,1.343,46,0.14,48,0.621,53,4.885,54,2.63,111,0.85,127,3.073,128,4.37,147,2.911,183,1.356,210,3.849,224,3.219,225,3.219,230,0.084,231,0.124,232,1.295,234,1.61,239,0.005,240,0.005,247,0.24,248,1.615,278,0.942,279,2.544,315,2.464,350,1.974,351,4.005,364,2.827,380,1.777,382,2.827,385,1.247,390,1.309,402,1.339,431,2.827,432,4.181,434,3.65,439,3.598,441,1.157,442,6.082,443,3.391,444,3.598,446,2.544,447,2.63,449,2.322,450,6.254,452,5.569,453,5.348,454,5.348,455,3.391,457,3.598,459,3.598,460,3.598,461,3.391,462,3.391,463,2.391,464,3.598,465,3.598,466,3.598,467,3.598,468,3.598,474,2.827,479,3.598,480,5.569,482,3.219,483,3.391,484,2.942,485,3.391,486,3.598,487,3.598,488,2.827,489,3.598,490,4.382,491,3.598,492,3.219,493,3.598,494,3.598,495,3.598,496,3.598,497,3.598,498,1.693,499,3.598,500,5.249,501,3.391,502,3.598,503,3.598,504,3.219,505,3.598,506,1.59,507,3.598,508,1.892,509,3.598,510,2.724,511,3.598,512,3.598,513,1.768,514,3.598,515,4.888,516,2.257,517,3.598,518,3.598,519,3.598,520,3.858,521,5.348,522,3.858,523,4.181,524,6.705,525,4.205,526,2.827,527,4.205,528,4.205,529,4.205,530,4.205,531,4.205,532,3.858,533,4.205,534,3.858,535,4.205,536,4.205,537,4.205,538,4.205,539,4.205,563,1.59,564,3.598,566,4.205,568,4.205,2181,4.732,2182,4.732,2183,4.732]],["title/injectables/PullRequestInsightsService.html",[441,0.835,2160,3.161]],["body/injectables/PullRequestInsightsService.html",[7,0.007,28,0.081,29,0.081,30,0.065,33,1.4,37,0.518,39,1.62,40,0.836,41,0.471,42,0.728,44,1.575,46,0.153,48,0.66,51,1.441,63,1.216,128,4.667,146,4.355,147,2.963,148,3.603,163,1.498,183,1.441,210,5.269,230,0.089,231,0.132,232,1.349,234,1.374,239,0.005,240,0.005,247,0.255,248,1.479,267,1.655,278,1.037,350,2.023,380,1.387,385,1.299,402,1.035,434,3.898,441,1.206,488,3.004,513,1.879,563,1.689,594,1.749,595,2.814,616,3.293,625,1.414,634,2.355,641,2.058,650,2.16,703,2.058,824,3.551,840,3.034,892,4.479,1106,4.099,1107,6.286,1109,4.468,1665,3.39,1673,4.099,1689,3.816,1708,5.876,1711,3.42,1944,4.639,2078,3.42,2154,3.126,2156,3.823,2160,4.565,2161,4.468,2184,4.468,2185,6.711,2186,7.554,2187,5.028,2188,5.269,2189,5.028,2190,6.711,2191,5.028,2192,5.028,2193,5.028,2194,5.028,2195,5.028,2196,5.963,2197,4.099,2198,3.42,2199,3.603,2200,5.028,2201,5.028,2202,5.028,2203,5.028,2204,5.028,2205,5.028,2206,4.099,2207,5.028,2208,5.028,2209,5.028,2210,5.028,2211,5.028,2212,5.028,2213,5.028,2214,5.028,2215,4.468,2216,4.468,2217,4.468,2218,5.028]],["title/modules/PullRequestModule.html",[0,1.211,15,3.161]],["body/modules/PullRequestModule.html",[0,1.882,2,2.148,3,2.887,7,0.007,15,6.516,25,2.956,26,2.302,27,2.148,28,0.091,29,0.091,30,0.073,32,3.027,46,0.168,48,0.738,50,2.61,51,1.612,127,4.152,128,3.125,130,4.489,132,4.029,146,4.686,147,2.887,148,4.029,163,1.675,229,3.102,230,0.1,231,0.147,239,0.005,240,0.005,243,2.03,425,3.264,434,2.61,436,4.686,447,4.013,451,5.781,523,5.781,540,6.065,557,4.996,581,2.928,1920,3.649,2134,6.065,2156,5.49,2157,6.14,2158,4.584,2160,6.059,2172,6.065,2178,4.996,2198,3.825,2219,4.996,2220,4.996,2221,4.996,2222,4.996,2223,6.059,2224,5.623,2225,4.996,2226,5.623,2227,5.623,2228,5.623]],["title/classes/PullRequestPageOptionsDto.html",[231,0.122,2150,3.331]],["body/classes/PullRequestPageOptionsDto.html",[7,0.007,28,0.067,29,0.067,30,0.054,37,0.573,41,0.481,42,0.912,46,0.132,147,2.933,230,0.121,231,0.154,235,2.92,239,0.004,240,0.004,247,0.21,258,1.221,278,0.877,323,0.716,355,2.099,356,2.46,402,1.41,434,3.968,438,1.054,463,2.09,508,2.726,579,1.744,583,1.308,585,2.844,586,2.224,587,2.145,588,2.265,589,5.184,590,3.055,591,3.377,592,3.444,594,2.325,595,3.284,597,4.27,598,4.816,602,2.224,603,3.377,604,2.299,605,2.381,606,4.27,607,2.471,608,3.444,609,2.154,610,2.381,611,2.471,612,2.381,613,2.471,614,3.055,615,2.03,616,2.03,617,2.381,618,2.381,619,2.471,620,4.452,621,2.684,622,4.452,623,1.58,624,1.546,625,1.65,626,4.68,629,4.637,675,2.161,692,3.636,724,3.188,725,2.381,753,3.145,1141,4.783,1150,4.783,1234,4.783,1324,4.238,1710,4.637,1711,4.637,1712,4.886,1713,5.058,1714,3.145,1716,5.184,1717,3.372,1719,3.145,1720,3.676,1722,2.814,1723,3.145,2124,3.676,2150,4.204,2229,6.97,2230,4.136,2231,4.136,2232,7.435,2233,6.818,2234,4.136,2235,3.676,2236,4.136,2237,4.136,2238,7.23,2239,4.136,2240,4.136,2241,4.136,2242,4.136,2243,3.372,2244,4.136]],["title/injectables/PullRequestService.html",[441,0.835,2157,3.016]],["body/injectables/PullRequestService.html",[7,0.007,28,0.077,29,0.077,30,0.062,33,1.345,37,0.529,39,1.581,40,0.871,41,0.414,42,0.758,44,1.641,46,0.163,48,0.622,51,1.358,63,1.146,128,4.718,130,2.946,132,3.396,147,1.625,163,1.412,180,1.44,183,1.848,230,0.084,231,0.124,232,1.296,234,1.32,239,0.005,240,0.005,247,0.24,248,1.949,267,2.709,350,2.275,380,1.779,385,1.248,402,1.13,434,3.941,441,1.158,563,1.592,585,1.528,588,2.526,592,4.157,608,2.394,609,2.468,616,3.164,624,2.409,625,2.061,629,4.985,632,4.756,634,2.299,637,3.075,641,1.94,642,1.695,643,1.81,644,3.863,645,3.603,646,3.86,647,2.547,650,3.648,658,2.946,659,2.946,660,3.358,661,2.633,662,2.633,663,2.633,703,2.639,824,3.466,840,3.313,1107,4.386,1673,5.256,1713,2.946,1722,3.223,1959,3.257,2150,5.252,2154,2.946,2156,3.603,2157,4.184,2159,4.21,2188,4.7,2198,3.223,2199,3.396,2206,3.863,2245,4.21,2246,7.329,2247,5.729,2248,4.738,2249,6.513,2250,4.738,2251,6.448,2252,4.738,2253,4.738,2254,4.738,2255,4.738,2256,4.21,2257,4.738,2258,4.738,2259,4.738,2260,4.738,2261,5.729,2262,6.448,2263,4.738,2264,4.738,2265,4.738,2266,4.738,2267,4.738,2268,4.738,2269,4.738,2270,4.21]],["title/controllers/RepoContributionsController.html",[241,1.083,576,3.534]],["body/controllers/RepoContributionsController.html",[7,0.007,28,0.08,29,0.08,30,0.064,33,1.387,37,0.427,39,1.336,40,0.736,41,0.422,42,0.641,44,1.387,46,0.159,48,0.651,83,4.482,230,0.088,231,0.13,232,0.997,234,1.361,235,2.02,239,0.005,240,0.005,241,1.156,243,1.394,245,1.938,247,0.252,248,1.897,258,0.91,261,3.205,267,2.638,278,0.965,319,3.391,320,3,321,3,322,1.938,323,0.858,345,2.485,348,2.659,350,1.669,359,1.735,380,1.834,385,1.288,390,1.107,402,1.326,574,5.102,576,5.056,577,4.043,578,4.407,579,2.403,582,6.298,585,1.6,588,2.329,625,1.394,642,1.774,643,1.895,648,4.407,703,2.03,864,3.223,907,3.771,953,6.095,1513,5.202,1517,4.174,1519,2.302,1520,2.433,1521,2.242,1522,2.433,1562,3.574,1577,4.613,1592,2.366,1615,3.218,1616,3.218,1623,2.583,1689,3.359,1850,3.695,2141,4.765,2271,6.666,2272,4.407,2273,8.358,2274,8.358,2275,4.959,2276,4.959,2277,8.015,2278,6.649,2279,6.649,2280,4.959,2281,4.959,2282,4.959,2283,4.959,2284,3.907,2285,3.218,2286,3.373,2287,3.373,2288,4.959,2289,6.649,2290,3.373,2291,6.649,2292,6.649,2293,4.959,2294,3.373]],["title/controllers/RepoController.html",[241,1.083,2295,3.534]],["body/controllers/RepoController.html",[7,0.007,28,0.074,29,0.074,30,0.059,33,1.313,37,0.498,39,1.558,40,0.858,41,0.461,42,0.747,44,1.617,46,0.156,48,0.601,79,3.442,230,0.081,231,0.12,232,0.92,234,0.937,235,1.39,239,0.005,240,0.005,241,1.066,243,1.287,245,1.788,247,0.232,248,2.021,258,1.061,261,3.506,267,2.886,278,0.926,319,3.254,320,3.251,321,3.251,322,1.788,323,0.792,345,1.71,348,3.1,359,1.558,385,1.501,390,1.049,402,1.295,579,2.276,585,1.476,588,2.098,625,1.77,632,5.276,634,2.265,637,2.97,642,1.637,643,1.748,703,3.328,864,3.093,1514,4.463,1517,4.038,1519,2.124,1520,2.245,1521,2.069,1522,2.245,1562,4.713,1577,4.463,1589,3.731,1592,2.183,1615,2.97,1616,2.97,1623,2.383,1643,4.857,1661,2.734,1841,3.731,1850,3.499,1858,3.731,1901,3.731,1923,3.731,2017,3.48,2151,4.066,2153,4.788,2154,3.914,2165,4.066,2284,3.748,2286,3.113,2287,3.113,2290,3.113,2294,3.113,2295,4.788,2296,4.066,2297,8.129,2298,7.223,2299,4.463,2300,4.283,2301,4.576,2302,4.576,2303,5.556,2304,4.576,2305,5.595,2306,4.576,2307,4.066,2308,4.576,2309,4.576,2310,4.576,2311,3.731,2312,5.595,2313,3.279,2314,4.576,2315,4.283,2316,3.113,2317,4.576]],["title/modules/RepoFilterModule.html",[0,1.211,2223,3.161]],["body/modules/RepoFilterModule.html",[0,2.128,2,2.621,3,3.266,7,0.007,25,3.343,26,2.809,27,2.621,28,0.111,29,0.111,30,0.089,46,0.145,48,0.901,229,3.509,230,0.122,231,0.18,239,0.006,240,0.006,425,3.692,579,1.755,2188,5.799,2199,4.917,2223,6.429,2318,6.096,2319,6.096,2320,6.096,2321,5.593,2322,6.861]],["title/injectables/RepoFilterService.html",[441,0.835,2188,2.777]],["body/injectables/RepoFilterService.html",[7,0.007,28,0.079,29,0.079,30,0.064,33,1.377,37,0.424,39,1.499,40,0.731,41,0.392,42,0.636,44,1.377,45,3.515,46,0.142,48,0.644,63,1.186,210,4.457,230,0.087,231,0.128,239,0.005,240,0.005,247,0.378,278,0.849,350,1.231,385,0.95,402,1.15,441,1.186,510,4.294,548,5.718,549,4.73,563,1.648,579,1.908,590,2.555,592,4.207,594,1.72,595,2.768,604,4.146,616,2.407,625,1.856,650,2.836,703,2.008,864,2.836,892,4.146,913,1.962,916,2.64,978,3.73,1107,3.337,1129,4.359,1131,3.73,1245,3.05,1592,4.091,1670,3.337,1708,5.428,1711,4.49,1712,3.515,1713,3.05,1722,3.337,1944,4.593,2078,3.337,2153,5.019,2154,5.672,2188,3.943,2196,6.629,2197,3.999,2216,4.359,2217,4.359,2321,6.082,2323,4.359,2324,7.46,2325,7.46,2326,4.905,2327,4.905,2328,7.98,2329,4.905,2330,4.905,2331,6.601,2332,4.905,2333,6.082,2334,4.905,2335,4.905,2336,4.905,2337,4.905,2338,6.601,2339,4.905,2340,4.905,2341,7.46,2342,4.905,2343,4.905,2344,4.905,2345,6.601,2346,6.601,2347,4.905,2348,4.905,2349,6.601,2350,4.905,2351,4.905,2352,4.905,2353,4.905,2354,4.359,2355,4.905,2356,4.905]],["title/classes/RepoInfo.html",[231,0.122,711,3.016]],["body/classes/RepoInfo.html",[7,0.007,28,0.104,29,0.104,30,0.084,37,0.505,40,0.87,41,0.485,46,0.14,230,0.115,231,0.206,239,0.006,240,0.006,247,0.327,258,1.076,278,1.137,323,1.115,359,1.961,390,1.31,402,1.363,438,1.413,579,2.261,583,2.037,623,2.462,672,3.555,675,2.347,691,3.837,692,3.651,693,5.98,711,5.104,724,3.379,725,3.71,1084,4.889,2357,6.083,2358,5.727,2359,7.542,2360,6.445,2361,6.445,2362,6.445,2363,6.445,2364,6.445]],["title/modules/RepoModule.html",[0,1.211,16,2.583]],["body/modules/RepoModule.html",[0,2.045,2,2.454,3,3.138,7,0.007,16,5.272,25,3.213,26,2.629,27,2.454,28,0.104,29,0.104,30,0.083,32,3.29,46,0.164,48,0.843,50,2.981,51,1.841,79,2.568,163,1.913,229,3.372,230,0.114,231,0.168,239,0.006,240,0.006,243,2.206,425,3.548,2017,4.883,2198,4.368,2223,6.265,2225,5.706,2284,5.015,2295,6.444,2311,5.235,2365,5.706,2366,6.422,2367,5.706,2368,5.706,2369,6.422,2370,6.422,2371,6.422]],["title/classes/RepoPageOptionsDto.html",[231,0.122,2299,2.675]],["body/classes/RepoPageOptionsDto.html",[7,0.007,28,0.082,29,0.082,30,0.066,37,0.541,40,0.746,41,0.443,42,0.884,46,0.135,150,2.915,230,0.135,231,0.177,235,2.811,239,0.005,240,0.005,247,0.257,258,1.152,278,0.975,323,0.876,355,2.412,356,2.827,438,1.211,463,2.558,508,3.031,583,1.601,585,2.607,586,2.722,587,2.465,588,2.391,589,5.764,590,3.511,591,3.881,592,3.829,594,2.411,595,3.529,597,3.881,598,4.363,599,6.331,602,2.722,603,3.881,604,2.814,605,2.915,606,4.652,607,3.025,608,3.829,609,2.637,610,2.915,611,3.025,612,2.915,613,3.025,614,3.511,615,2.484,616,2.484,617,2.915,618,2.915,619,3.025,620,3.511,621,3.286,622,3.511,623,1.935,624,1.892,625,1.424,626,4.529,703,2.073,998,3.286,1245,3.148,1347,3.629,1984,5.496,1985,4.128,1986,4.128,1987,3.85,1988,3.85,1989,4.128,1990,4.128,1991,4.128,2299,3.881,2357,4.832,2372,6.179,2373,4.499,2374,5.064,2375,4.499,2376,5.991,2377,5.127,2378,5.991,2379,5.991,2380,5.496,2381,5.127,2382,5.496,2383,5.496,2384,5.127,2385,5.064]],["title/classes/RepoSearchOptionsDto.html",[231,0.122,2303,3.331]],["body/classes/RepoSearchOptionsDto.html",[7,0.007,28,0.078,29,0.078,30,0.063,37,0.578,41,0.479,42,0.917,46,0.141,230,0.086,231,0.171,235,2.921,239,0.005,240,0.005,247,0.246,258,1.232,278,0.954,323,0.838,402,1.37,438,1.176,463,2.448,508,2.965,579,2.031,583,1.532,585,2.392,586,2.605,587,2.394,588,2.149,589,4.978,590,3.41,591,3.768,592,3.746,594,2.412,595,3.477,597,4.268,598,4.57,599,5.313,602,2.605,603,3.768,604,2.693,605,2.789,606,4.774,607,2.895,608,3.746,609,2.524,610,2.789,611,2.895,612,2.789,613,2.895,614,3.41,615,2.378,616,2.378,617,2.789,618,2.789,619,2.895,620,4.319,621,3.145,622,4.319,623,1.852,625,1.841,626,2.895,684,3.951,692,3.686,1710,5.043,1711,5.043,1712,5.313,1713,5.313,1714,3.685,1715,4.306,1716,3.685,1719,4.978,1722,3.296,1723,3.685,2235,4.306,2299,4.57,2303,4.692,2313,5.943,2357,5.943,2372,3.951,2373,4.306,2386,4.846,2387,4.846,2388,4.846]],["title/injectables/RepoService.html",[441,0.835,2284,2.421]],["body/injectables/RepoService.html",[7,0.007,28,0.056,29,0.056,30,0.045,33,1.071,37,0.522,39,1.634,40,0.919,41,0.428,42,0.762,44,1.65,46,0.152,48,0.453,51,0.988,63,0.833,79,1.378,83,3.069,85,2.059,87,2.059,89,2.059,91,2.059,111,0.619,163,1.027,180,1.561,183,2.188,208,4.67,230,0.061,231,0.09,232,1.032,234,1.491,239,0.004,240,0.004,247,0.175,248,1.892,267,2.604,278,1.018,287,2.513,350,2.299,359,1.473,380,2.008,385,1.532,402,1.397,441,0.923,506,1.158,513,1.92,563,1.158,579,1.862,585,1.112,588,2.066,592,3.996,594,1.339,595,2.154,599,2.47,608,1.741,609,2.675,614,2.675,616,3.013,624,1.288,625,1.727,632,3.986,634,1.989,637,2.237,640,3.494,641,1.411,642,1.233,643,1.317,644,2.809,645,2.62,646,3.881,647,1.853,650,3.57,652,4.565,653,4.565,655,3.062,656,3.062,658,3.194,659,3.194,660,3.545,661,1.915,662,2.855,663,2.855,724,1.481,824,2.999,840,2.776,842,2.595,887,1.513,892,2.855,913,2.054,916,1.378,953,3.906,961,3.062,1107,4.178,1131,2.62,1263,3.062,1278,3.062,1297,3.062,1312,3.062,1577,2.957,1643,3.069,1661,2.059,1665,3.103,1686,2.809,1689,3.857,1713,2.142,1722,2.344,1944,3.918,1959,2.595,2006,2.809,2078,2.344,2154,2.142,2188,4.067,2197,2.809,2198,2.344,2199,2.47,2206,2.809,2247,5.458,2249,5.458,2256,3.062,2261,3.062,2270,3.062,2284,2.675,2298,5.458,2299,3.918,2303,4.878,2307,3.062,2311,2.809,2312,4.565,2313,2.47,2372,2.809,2377,4.67,2380,2.809,2381,2.62,2382,2.809,2383,2.809,2384,2.62,2389,3.062,2390,6.142,2391,6.142,2392,3.446,2393,3.446,2394,5.137,2395,3.446,2396,3.446,2397,3.446,2398,6.142,2399,3.446,2400,3.446,2401,3.446,2402,3.446,2403,3.446,2404,6.142,2405,3.446,2406,5.458,2407,3.446,2408,5.137,2409,3.446,2410,5.137,2411,3.446,2412,3.446,2413,3.446,2414,3.446,2415,3.446,2416,3.446,2417,3.446,2418,3.446,2419,3.446,2420,3.446,2421,3.446,2422,7.281,2423,7.281,2424,3.062,2425,2.809,2426,3.062,2427,3.446,2428,3.446,2429,3.446,2430,3.446,2431,3.446,2432,3.446,2433,3.446,2434,3.446,2435,3.446,2436,3.446,2437,3.446,2438,3.446,2439,3.446,2440,3.446,2441,3.446,2442,3.446,2443,3.446,2444,3.446,2445,3.446,2446,3.446,2447,3.446,2448,3.446,2449,3.446,2450,3.446,2451,3.446,2452,3.062,2453,3.062,2454,3.446]],["title/controllers/RepoStarController.html",[241,1.083,2455,3.534]],["body/controllers/RepoStarController.html",[7,0.007,28,0.055,29,0.055,30,0.044,33,1.058,37,0.464,39,1.453,40,0.8,41,0.465,42,0.697,44,1.826,46,0.152,48,0.445,79,2.431,80,1.712,87,4.318,88,2.576,111,0.911,230,0.06,231,0.089,232,0.681,234,1.038,235,1.541,239,0.004,240,0.004,241,0.79,243,0.953,245,1.324,247,0.172,248,1.965,258,0.989,261,3.368,262,2.563,267,2.772,278,1.186,287,3.086,316,1.616,317,3.722,319,3.268,320,3.034,321,3.034,322,1.324,323,0.586,324,1.456,345,1.895,347,3.547,348,2.891,350,1.695,359,1.75,380,1.862,385,1.4,390,1.442,402,1.335,556,1.712,579,2.458,585,1.093,588,1.373,625,0.953,642,1.212,643,1.294,703,2.489,719,2.199,864,2.179,1265,7.108,1514,2.92,1517,3.515,1519,1.573,1520,1.662,1521,1.532,1522,1.662,1562,4.527,1577,4.655,1592,1.616,1593,1.883,1615,3.292,1616,3.292,1623,2.642,1689,3.41,1850,3.379,1909,4.591,1915,1.821,2284,3.166,2285,2.199,2286,2.305,2287,2.305,2290,3.45,2294,3.45,2299,3.885,2300,2.305,2315,2.305,2316,2.305,2377,2.576,2455,3.857,2456,6.742,2457,3.011,2458,7.229,2459,7.229,2460,7.229,2461,7.229,2462,7.229,2463,3.388,2464,3.388,2465,5.503,2466,6.75,2467,6.75,2468,4.837,2469,4.348,2470,4.591,2471,3.388,2472,3.388,2473,3.388,2474,3.388,2475,3.388,2476,3.388,2477,6.185,2478,3.388,2479,3.388,2480,3.388,2481,4.381,2482,3.388,2483,3.388,2484,3.388,2485,3.388,2486,2.428,2487,4.917,2488,4.135,2489,3.011,2490,2.576,2491,3.388,2492,3.388,2493,5.072,2494,3.388,2495,3.388,2496,5.072,2497,3.388]],["title/controllers/RepoStargazeController.html",[241,1.083,2498,3.534]],["body/controllers/RepoStargazeController.html",[7,0.007,28,0.055,29,0.055,30,0.045,33,1.067,37,0.467,39,1.46,40,0.804,41,0.466,42,0.7,44,1.83,46,0.152,48,0.45,79,2.448,80,1.731,91,4.339,92,2.606,111,0.919,230,0.061,231,0.09,232,0.689,234,1.047,235,1.554,239,0.004,240,0.004,241,0.799,243,0.963,245,1.339,247,0.174,248,1.969,258,0.994,261,3.377,262,2.584,267,2.78,278,1.188,287,3.089,316,1.635,317,3.738,319,3.283,320,3.047,321,3.047,322,1.339,323,0.593,324,1.472,345,1.912,347,3.564,348,2.904,350,1.704,359,1.756,380,1.873,385,1.406,390,1.446,402,1.338,556,1.731,579,2.471,585,1.105,588,1.385,625,0.963,642,1.226,643,1.309,703,2.506,719,2.224,864,2.198,1247,4.99,1457,4.944,1485,6.347,1514,2.944,1517,3.535,1519,1.591,1520,1.681,1521,1.549,1522,1.681,1562,4.54,1577,4.671,1592,1.635,1593,1.904,1615,3.32,1616,3.32,1623,2.664,1689,3.429,1850,3.402,1915,1.842,2284,3.188,2285,2.224,2286,2.331,2287,2.331,2290,3.479,2294,3.479,2299,3.907,2300,2.331,2315,2.331,2316,2.331,2426,3.045,2468,4.865,2469,4.362,2486,2.456,2487,4.94,2490,2.606,2498,3.89,2499,6.77,2500,3.045,2501,7.263,2502,7.263,2503,7.263,2504,7.263,2505,7.263,2506,3.427,2507,3.427,2508,5.115,2509,6.788,2510,6.032,2511,3.427,2512,3.427,2513,3.427,2514,3.427,2515,3.427,2516,3.427,2517,3.427,2518,3.427,2519,3.427,2520,5.115,2521,3.427,2522,3.427,2523,3.427,2524,3.427,2525,4.163,2526,3.045,2527,3.427,2528,3.427,2529,3.89,2530,5.115,2531,3.427,2532,3.427,2533,4.546,2534,5.115,2535,3.427]],["title/controllers/RepoSubmitController.html",[241,1.083,2536,3.534]],["body/controllers/RepoSubmitController.html",[7,0.007,28,0.055,29,0.055,30,0.044,33,1.058,37,0.464,39,1.453,40,0.8,41,0.465,42,0.697,44,1.826,46,0.152,48,0.445,79,2.431,80,1.712,89,4.318,90,2.576,111,0.911,230,0.06,231,0.089,232,0.681,234,1.038,235,1.541,239,0.004,240,0.004,241,0.79,243,0.953,245,1.324,247,0.172,248,1.965,258,0.989,261,3.368,262,2.563,267,2.772,278,1.186,287,3.086,316,1.616,317,3.722,319,3.268,320,3.034,321,3.034,322,1.324,323,0.586,324,1.456,345,1.895,347,3.547,348,2.891,350,1.695,359,1.75,380,1.862,385,1.4,390,1.442,402,1.335,556,1.712,579,2.458,585,1.093,588,1.373,625,0.953,642,1.212,643,1.294,703,2.489,719,2.199,864,2.179,1281,7.597,1514,2.92,1517,3.515,1519,1.573,1520,1.662,1521,1.532,1522,1.662,1562,4.527,1577,4.655,1592,1.616,1593,1.883,1615,3.292,1616,3.292,1623,2.642,1689,3.41,1850,3.379,1909,4.591,1915,1.821,2284,3.166,2285,2.199,2286,2.305,2287,2.305,2290,3.45,2294,3.45,2299,3.885,2300,2.305,2315,2.305,2316,2.305,2425,2.762,2465,5.503,2468,4.837,2469,4.348,2470,4.591,2481,4.381,2486,2.428,2487,4.917,2490,2.576,2536,3.857,2537,6.742,2538,3.011,2539,7.229,2540,7.229,2541,7.229,2542,7.229,2543,7.229,2544,3.388,2545,3.388,2546,6.75,2547,6.75,2548,3.388,2549,3.388,2550,3.388,2551,3.388,2552,3.388,2553,3.388,2554,6.742,2555,3.388,2556,3.388,2557,3.388,2558,3.388,2559,3.388,2560,3.388,2561,3.388,2562,4.135,2563,3.011,2564,2.762,2565,3.388,2566,3.388,2567,5.072,2568,3.388,2569,3.388,2570,5.072,2571,3.388]],["title/controllers/RepoVoteController.html",[241,1.083,2572,3.534]],["body/controllers/RepoVoteController.html",[7,0.007,28,0.055,29,0.055,30,0.044,33,1.058,37,0.464,39,1.453,40,0.8,41,0.465,42,0.697,44,1.826,46,0.152,48,0.445,79,2.431,80,1.712,85,4.318,86,2.576,111,0.911,230,0.06,231,0.089,232,0.681,234,1.038,235,1.541,239,0.004,240,0.004,241,0.79,243,0.953,245,1.324,247,0.172,248,1.965,258,0.989,261,3.368,262,2.563,267,2.772,278,1.186,287,3.086,316,1.616,317,3.722,319,3.268,320,3.034,321,3.034,322,1.324,323,0.586,324,1.456,345,1.895,347,3.547,348,2.891,350,1.695,359,1.75,380,1.862,385,1.4,390,1.442,402,1.335,556,1.712,579,2.458,585,1.093,588,1.373,625,0.953,642,1.212,643,1.294,703,2.489,719,2.199,864,2.179,1299,7.108,1514,2.92,1517,3.515,1519,1.573,1520,1.662,1521,1.532,1522,1.662,1562,4.527,1577,4.655,1592,1.616,1593,1.883,1615,3.292,1616,3.292,1623,2.642,1689,3.41,1850,3.379,1909,4.591,1915,1.821,2284,3.166,2285,2.199,2286,2.305,2287,2.305,2290,3.45,2294,3.45,2299,3.885,2300,2.305,2315,2.305,2316,2.305,2424,3.011,2465,5.503,2468,4.837,2469,4.348,2470,4.591,2481,4.381,2486,2.428,2487,4.917,2490,2.576,2572,3.857,2573,6.742,2574,3.011,2575,7.229,2576,7.229,2577,7.229,2578,7.229,2579,7.229,2580,3.388,2581,3.388,2582,6.75,2583,6.75,2584,3.388,2585,3.388,2586,3.388,2587,3.388,2588,3.388,2589,3.388,2590,6.185,2591,3.388,2592,3.388,2593,3.388,2594,3.388,2595,3.388,2596,3.388,2597,3.388,2598,4.135,2599,3.011,2600,3.388,2601,3.388,2602,5.072,2603,3.388,2604,3.388,2605,5.072,2606,3.388]],["title/modules/StarModule.html",[0,1.211,17,3.331]],["body/modules/StarModule.html",[0,2.023,2,2.411,3,3.104,7,0.007,16,5.097,17,6.778,25,3.178,26,2.583,27,2.411,28,0.102,29,0.102,30,0.082,32,3.255,46,0.165,48,0.829,50,2.929,51,1.809,77,4.095,79,3.104,80,3.188,87,4.638,88,4.798,163,1.88,229,3.336,230,0.112,231,0.165,239,0.006,240,0.006,243,2.183,425,3.509,579,1.614,581,3.286,2455,6.394,2488,6.535,2489,5.607,2607,5.607,2608,6.31,2609,5.607,2610,5.607,2611,6.31,2612,6.31]],["title/injectables/StarService.html",[441,0.835,2488,3.161]],["body/injectables/StarService.html",[7,0.007,28,0.084,29,0.084,30,0.067,33,1.427,37,0.524,39,1.541,40,0.848,41,0.403,42,0.739,44,1.599,46,0.145,48,0.68,51,1.485,63,1.253,87,3.094,88,3.939,163,1.543,183,2.197,230,0.092,231,0.136,232,1.375,234,1.06,239,0.005,240,0.005,247,0.263,248,1.92,267,2.684,278,1.203,287,3.057,350,2.129,380,2.25,385,1.579,441,1.23,513,2.865,563,1.74,579,1.751,634,2.383,638,6.54,641,2.12,650,3.504,669,2.404,824,3.593,840,3.094,842,3.458,1021,1.814,1265,3.939,1665,2.617,1959,3.458,2469,3.679,2470,3.523,2477,5.58,2488,4.656,2613,4.603,2614,7.666,2615,7.666,2616,5.18,2617,5.18,2618,6.845,2619,5.18,2620,5.18,2621,5.18,2622,5.18,2623,5.18,2624,3.22,2625,5.18,2626,5.18,2627,3.523,2628,6.845,2629,6.845,2630,8.711,2631,6.845,2632,4.442,2633,5.18,2634,5.18,2635,3.712,2636,5.18]],["title/modules/StargazeModule.html",[0,1.211,18,3.331]],["body/modules/StargazeModule.html",[0,2.023,2,2.411,3,3.104,7,0.007,16,5.097,18,6.778,25,3.178,26,2.583,27,2.411,28,0.102,29,0.102,30,0.082,32,3.255,46,0.165,48,0.829,50,2.929,51,1.809,77,4.095,79,3.104,80,3.188,91,4.638,92,4.798,163,1.88,229,3.336,230,0.112,231,0.165,239,0.006,240,0.006,243,2.183,425,3.509,579,1.614,581,3.286,2498,6.394,2525,6.535,2526,5.607,2637,5.607,2638,6.31,2639,5.607,2640,5.607,2641,6.31,2642,6.31]],["title/injectables/StargazeService.html",[441,0.835,2525,3.161]],["body/injectables/StargazeService.html",[7,0.007,28,0.084,29,0.084,30,0.067,33,1.427,37,0.524,39,1.541,40,0.848,41,0.403,42,0.739,44,1.599,46,0.145,48,0.68,51,1.485,63,1.253,91,3.094,92,3.939,163,1.543,183,2.197,230,0.092,231,0.136,232,1.375,234,1.06,239,0.005,240,0.005,247,0.263,248,1.92,267,2.684,278,1.203,287,3.057,350,2.129,380,2.25,385,1.579,441,1.23,513,2.865,563,1.74,579,1.961,634,2.383,638,6.54,641,2.12,650,3.504,669,2.404,824,3.593,840,3.094,842,3.458,1021,1.814,1457,3.361,1665,2.617,1959,3.458,2469,3.679,2510,6.082,2525,4.656,2624,3.22,2627,3.523,2632,4.442,2635,3.712,2643,4.603,2644,7.666,2645,7.666,2646,5.18,2647,5.18,2648,6.845,2649,5.18,2650,5.18,2651,5.18,2652,5.18,2653,5.18,2654,5.18,2655,5.18,2656,6.845,2657,6.845,2658,8.711,2659,6.845,2660,5.18,2661,5.18,2662,5.18]],["title/modules/StripeModule.html",[0,1.211,422,3.161]],["body/modules/StripeModule.html",[0,2.128,2,2.621,3,3.266,7,0.007,25,3.343,26,2.809,27,2.621,28,0.111,29,0.111,30,0.089,32,2.877,46,0.145,48,0.901,229,3.509,230,0.122,231,0.18,239,0.006,240,0.006,333,6.299,422,6.429,425,3.692,2663,6.096,2664,6.096,2665,6.096,2666,6.861,2667,6.861]],["title/injectables/StripeService.html",[333,3.016,441,0.835]],["body/injectables/StripeService.html",[7,0.007,28,0.089,29,0.089,30,0.072,33,1.489,37,0.556,39,1.59,40,0.876,41,0.44,42,0.834,44,1.489,46,0.141,48,0.726,53,5.104,54,3.072,118,5.61,183,1.584,230,0.098,231,0.145,232,1.435,234,1.712,239,0.005,240,0.005,247,0.28,248,1.955,263,4.507,278,1.018,287,1.82,296,4.648,333,4.635,350,1.388,359,1.712,380,1.525,385,1.532,399,6.45,402,1.367,438,1.283,441,1.283,508,2.211,516,2.502,563,1.857,564,4.204,640,3.76,823,7.031,932,2.375,957,4.507,1321,4.204,1323,4.507,1329,4.204,1342,4.912,2119,6.346,2668,4.912,2669,7.912,2670,7.912,2671,7.142,2672,5.528,2673,5.528,2674,5.528,2675,5.528,2676,5.528,2677,5.528,2678,7.912,2679,5.528,2680,5.528,2681,4.912,2682,5.528,2683,5.528,2684,5.528,2685,5.528,2686,5.528,2687,5.528,2688,5.528,2689,5.528,2690,4.912,2691,5.528,2692,5.528,2693,5.528,2694,5.528,2695,5.528,2696,5.528]],["title/modules/StripeSubscriptionModule.html",[0,1.211,19,3.161]],["body/modules/StripeSubscriptionModule.html",[0,2.091,2,2.544,3,3.208,7,0.007,19,6.391,25,3.284,26,2.726,27,2.544,28,0.108,29,0.108,30,0.086,32,2.792,46,0.159,48,0.875,50,3.091,51,1.908,118,4.139,121,5.063,123,4.529,124,5.428,163,1.984,229,3.447,230,0.118,231,0.174,239,0.006,240,0.006,425,3.626,1313,5.063,2697,5.917,2698,5.917,2699,5.917,2700,6.579,2701,6.659,2702,5.917,2703,6.659]],["title/injectables/StripeSubscriptionService.html",[441,0.835,2700,3.161]],["body/injectables/StripeSubscriptionService.html",[7,0.007,28,0.102,29,0.102,30,0.082,33,1.621,37,0.541,39,1.562,40,0.86,41,0.409,42,0.749,44,1.621,46,0.156,48,0.83,51,1.812,63,1.529,118,3.93,123,4.299,124,5.153,163,1.883,230,0.112,231,0.166,232,1.562,234,1.294,239,0.006,240,0.006,247,0.321,248,1.855,362,5.028,385,1.505,441,1.396,516,2.214,563,2.124,634,2.565,641,2.588,824,3.868,1313,6.676,1329,5.91,2700,5.286,2704,5.617,2705,8.416,2706,6.321,2707,6.321,2708,7.772,2709,6.321,2710,6.321,2711,6.321,2712,6.321,2713,6.321,2714,6.321]],["title/modules/StripeWebHookModule.html",[0,1.211,20,3.331]],["body/modules/StripeWebHookModule.html",[0,2.008,2,2.382,3,3.081,7,0.007,9,5.935,19,6.22,20,6.9,22,5.264,25,3.154,26,2.552,27,2.382,28,0.101,29,0.101,30,0.081,32,3.231,46,0.162,48,0.819,99,4.24,117,5.082,118,3.875,121,4.74,122,5.539,229,2.678,230,0.111,231,0.163,239,0.006,240,0.006,243,2.166,422,6.22,425,3.483,430,5.539,2715,5.539,2716,5.539,2717,6.234,2718,6.808,2719,4.74,2720,6.234,2721,6.234]],["title/controllers/StripeWebhookController.html",[241,1.083,2718,3.331]],["body/controllers/StripeWebhookController.html",[7,0.007,28,0.069,29,0.069,30,0.055,33,1.245,37,0.383,39,1.199,40,0.661,41,0.314,42,0.575,44,1.245,46,0.155,48,0.557,53,3.977,54,2.355,111,1.072,118,4.295,121,3.223,182,4.06,183,2.266,230,0.075,231,0.111,232,0.852,234,1.79,239,0.004,240,0.004,241,0.988,243,1.192,245,1.656,247,0.215,248,1.808,258,0.58,287,2.469,315,2.207,320,2.387,322,1.656,323,0.733,331,3.49,332,3.037,333,4.484,334,3.766,335,4.484,336,3.766,345,1.584,350,2.305,355,1.516,359,1.292,364,2.532,380,2.262,382,2.532,383,4.538,385,0.821,401,6.139,402,1.382,488,4.899,506,2.005,513,2.582,516,2.091,554,5.703,602,2.278,982,2.883,1021,1.485,1315,3.766,1316,3.766,1317,3.766,1318,3.766,1319,3.766,1320,3.766,1321,3.223,1322,3.766,1323,3.455,1324,3.711,1325,3.766,1326,3.766,1329,6.236,1347,3.037,2333,3.455,2700,4.699,2702,3.766,2718,4.277,2719,5.253,2722,5.632,2723,3.455,2724,6.909,2725,6.909,2726,4.238,2727,7.5,2728,4.238,2729,4.238,2730,6.664,2731,4.238,2732,4.238,2733,6.909,2734,3.455,2735,4.238,2736,3.455,2737,3.455,2738,5.304,2739,5.304,2740,5.304,2741,5.304,2742,4.238,2743,4.238,2744,4.238,2745,6.909,2746,4.238,2747,4.238,2748,4.238,2749,4.238,2750,4.238,2751,4.238,2752,3.766,2753,4.238,2754,6.909,2755,4.238,2756,5.969,2757,4.238,2758,4.238,2759,4.238,2760,4.238,2761,4.238,2762,4.238,2763,4.238,2764,4.238,2765,4.238,2766,4.238,2767,4.238,2768,4.238,2769,4.238,2770,4.238,2771,4.238,2772,4.238,2773,4.238,2774,5.969,2775,4.238,2776,4.238,2777,4.238,2778,4.238,2779,4.238,2780,4.238,2781,6.909,2782,4.238,2783,4.238,2784,4.238,2785,6.139,2786,4.238,2787,3.455,2788,4.238,2789,4.238,2790,4.238,2791,4.238,2792,5.969,2793,4.238,2794,4.238,2795,4.238,2796,4.238,2797,4.238,2798,4.238,2799,4.238,2800,4.238,2801,4.238,2802,4.238]],["title/modules/SubmitModule.html",[0,1.211,21,3.331]],["body/modules/SubmitModule.html",[0,2.023,2,2.411,3,3.104,7,0.007,16,5.097,21,6.778,25,3.178,26,2.583,27,2.411,28,0.102,29,0.102,30,0.082,32,3.255,46,0.165,48,0.829,50,2.929,51,1.809,77,4.095,79,3.104,80,3.188,89,4.638,90,4.798,163,1.88,229,3.336,230,0.112,231,0.165,239,0.006,240,0.006,243,2.183,425,3.509,579,1.614,581,3.286,2536,6.394,2562,6.535,2563,5.607,2803,5.607,2804,5.607,2805,6.31,2806,5.607,2807,6.31,2808,6.31]],["title/injectables/SubmitService.html",[441,0.835,2562,3.161]],["body/injectables/SubmitService.html",[7,0.007,28,0.084,29,0.084,30,0.067,33,1.427,37,0.524,39,1.541,40,0.848,41,0.403,42,0.739,44,1.599,46,0.145,48,0.68,51,1.485,63,1.253,89,3.094,90,3.939,163,1.543,183,2.197,230,0.092,231,0.136,232,1.375,234,1.06,239,0.005,240,0.005,247,0.263,248,1.92,267,2.684,278,1.203,287,3.057,350,2.129,380,2.25,385,1.579,441,1.23,513,2.865,563,1.74,579,1.751,634,2.383,638,6.54,641,2.12,650,3.504,669,2.404,824,3.593,840,3.094,842,3.458,1021,1.814,1665,2.617,1959,3.458,2469,3.679,2470,3.523,2562,4.656,2564,4.222,2624,3.22,2627,3.523,2632,4.442,2635,3.712,2809,4.603,2810,7.666,2811,7.666,2812,5.18,2813,5.18,2814,6.845,2815,5.18,2816,5.18,2817,5.18,2818,5.18,2819,5.18,2820,5.18,2821,5.18,2822,6.845,2823,6.845,2824,8.711,2825,6.845,2826,6.845,2827,5.18,2828,5.18,2829,5.18]],["title/classes/SupabaseAuthDto.html",[231,0.122,328,3.534]],["body/classes/SupabaseAuthDto.html",[7,0.007,28,0.047,29,0.047,30,0.038,37,0.58,40,0.825,41,0.475,42,0.915,46,0.052,111,1.702,179,2.612,186,4.009,230,0.052,231,0.076,235,2.949,239,0.003,240,0.003,246,6.499,247,0.147,258,1.235,262,4.226,278,0.802,284,5.428,285,2.094,296,3.752,323,0.503,326,6.261,328,3.431,351,4.635,353,4.509,354,4.915,355,1.979,356,2.319,359,1.197,360,4.509,368,4.206,369,4.509,370,4.915,371,5.133,372,5.133,373,4.206,374,5.133,375,4.206,376,3.882,377,4.206,378,4.206,379,4.915,390,1.503,402,1.444,438,0.811,474,2.696,506,2.717,583,0.919,615,4.405,620,4.7,627,3.069,672,1.314,675,2.53,691,2.04,704,3.721,768,3.231,778,2.597,780,3.311,869,1.763,891,4.009,892,2.508,905,3.155,906,3.311,908,1.939,909,4.283,918,1.804,921,3.059,959,3.678,968,2.094,977,3.069,1028,4.468,1049,2.805,1072,4.009,1237,4.009,1245,2.805,1389,3.431,1401,5.083,1455,3.678,1606,4.468,2830,8.058,2831,2.582,2832,2.906,2833,2.906,2834,4.512,2835,4.512,2836,2.906,2837,2.906,2838,3.233,2839,2.906,2840,4.512,2841,2.906,2842,4.009,2843,4.009,2844,2.906,2845,2.906,2846,2.906,2847,6.235,2848,4.512,2849,2.906,2850,4.512,2851,2.906,2852,2.906,2853,4.009,2854,4.009,2855,2.906,2856,4.512,2857,4.512,2858,2.906,2859,4.512,2860,2.906,2861,4.512,2862,2.906,2863,2.906,2864,3.678,2865,4.009,2866,2.906,2867,2.906,2868,4.512,2869,4.009,2870,2.906,2871,2.906]],["title/injectables/SupabaseGuard.html",[324,1.997,441,0.835]],["body/injectables/SupabaseGuard.html",[7,0.007,28,0.118,29,0.118,30,0.095,46,0.151,48,0.959,230,0.13,231,0.191,239,0.006,240,0.006,324,3.641,427,5.955,441,1.522,563,2.454,587,2.67,2872,6.491,2873,7.304,2874,7.304]],["title/injectables/SupabaseStrategy.html",[423,3.331,441,0.835]],["body/injectables/SupabaseStrategy.html",[7,0.007,28,0.1,29,0.1,30,0.08,33,1.597,37,0.535,39,1.539,40,0.847,41,0.403,42,0.738,44,1.597,45,4.421,46,0.155,48,0.81,60,4.691,111,1.376,230,0.11,231,0.162,232,1.673,239,0.006,240,0.006,246,4.421,247,0.313,248,1.835,257,7.735,326,5.487,365,2.52,385,1.195,423,5.487,427,5.03,441,1.376,516,2.161,563,2.073,587,2.256,808,5.482,2730,6.803,2875,5.482,2876,8.325,2877,7.398,2878,6.17,2879,6.17,2880,8.325,2881,6.17,2882,6.17,2883,6.17,2884,7.656,2885,6.17,2886,6.17,2887,6.17,2888,7.656,2889,6.17,2890,6.17,2891,6.17,2892,6.17,2893,6.17,2894,6.17,2895,6.17,2896,6.17,2897,6.17,2898,6.17,2899,6.17]],["title/classes/UpdateEndorsementDto.html",[231,0.122,2900,3.789]],["body/classes/UpdateEndorsementDto.html",[7,0.007,28,0.118,29,0.118,30,0.095,46,0.15,230,0.13,231,0.191,239,0.006,240,0.006,275,4.532,323,1.261,583,2.305,587,2.665,664,4.958,666,5.943,1597,5.943,2900,6.899,2901,6.478,2902,7.29,2903,7.29]],["title/classes/UpdateInsightDto.html",[231,0.122,1911,3.331]],["body/classes/UpdateInsightDto.html",[7,0.007,28,0.105,29,0.105,30,0.084,37,0.547,40,0.942,41,0.486,46,0.115,161,3.38,230,0.115,231,0.17,239,0.006,240,0.006,247,0.329,258,1.165,275,4.035,284,4.213,402,1.218,438,1.419,583,2.052,585,2.548,587,2.888,606,4.901,634,1.897,672,3.849,675,2.261,699,6.618,701,5.292,702,6.006,703,3.234,704,4.114,705,3.876,706,4.936,707,5.292,709,5.768,711,5.126,712,4.415,713,5.768,714,4.213,715,5.768,1911,5.661,1917,5.292,2904,5.292,2905,6.491,2906,6.491,2907,6.491]],["title/classes/UpdateInsightMemberDto.html",[231,0.122,2908,3.534]],["body/classes/UpdateInsightMemberDto.html",[7,0.007,28,0.108,29,0.108,30,0.087,37,0.431,41,0.454,46,0.143,230,0.119,231,0.211,239,0.006,240,0.006,247,0.34,258,0.918,323,1.161,390,1.117,402,1.381,438,1.448,583,2.121,623,2.563,672,3.032,675,2.14,691,3.642,692,3.74,705,4.396,727,5.468,728,5.774,1053,6.968,1058,5.229,1745,4.807,1905,5.101,2904,6.569,2908,6.127,2909,6.708,2910,6.569,2911,5.481,2912,6.708,2913,6.708]],["title/classes/UpdateUserCollaborationDto.html",[231,0.122,2914,3.534]],["body/classes/UpdateUserCollaborationDto.html",[7,0.007,28,0.109,29,0.109,30,0.088,37,0.434,41,0.456,46,0.144,111,1.454,147,2.776,219,7.192,230,0.12,231,0.212,239,0.006,240,0.006,247,0.343,258,0.925,323,1.169,390,1.126,402,1.385,438,1.454,583,2.136,623,2.582,672,3.055,675,2.15,691,3.659,692,3.757,743,5.509,744,5.8,1324,5.708,1745,4.843,2914,6.154,2915,5.8,2916,6.758,2917,6.758,2918,6.758,2919,6.758]],["title/classes/UpdateUserDto.html",[231,0.122,293,3.331]],["body/classes/UpdateUserDto.html",[7,0.007,28,0.062,29,0.062,30,0.05,37,0.565,40,0.844,41,0.503,42,0.892,46,0.099,111,1.663,172,4.134,179,1.409,230,0.068,231,0.146,235,2.414,239,0.004,240,0.004,247,0.195,258,1.203,293,3.997,296,4.236,309,7.468,323,0.667,365,3.133,371,5.796,372,5.796,373,4.984,374,5.796,375,4.984,376,4.453,377,4.984,378,4.984,390,1.465,392,5.796,402,1.488,438,1.002,449,2.736,474,3.332,583,1.218,615,4.195,620,4.522,622,4.522,623,1.473,672,2.521,675,2.495,691,2.963,692,3.803,704,3.741,718,4.547,730,3.425,732,4.956,733,3.142,778,2.218,869,2.18,977,3.794,1245,2.396,1606,3.997,2838,3.997,2842,4.956,2843,4.956,2853,4.956,2854,3.425,2864,6.84,2865,3.425,2869,3.425,2911,2.622,2915,6.37,2920,3.425,2921,4.956,2922,3.854,2923,3.854,2924,5.577,2925,3.854,2926,3.854,2927,3.854,2928,3.854,2929,3.854,2930,3.854,2931,3.854,2932,3.854,2933,3.854,2934,6.554,2935,3.854,2936,3.854,2937,6.383,2938,3.854,2939,3.854,2940,3.854,2941,7.183,2942,5.577,2943,4.956,2944,5.577,2945,5.577,2946,5.577,2947,3.854,2948,3.854,2949,3.854,2950,3.854,2951,7.183,2952,3.854,2953,3.854,2954,3.854]],["title/classes/UpdateUserEmailPreferencesDto.html",[231,0.122,294,3.331]],["body/classes/UpdateUserEmailPreferencesDto.html",[7,0.007,28,0.101,29,0.101,30,0.082,37,0.497,41,0.482,46,0.137,111,1.668,179,2.829,230,0.112,231,0.203,239,0.006,240,0.006,247,0.318,258,1.059,294,5.546,296,4.999,323,1.086,365,3.086,390,1.289,438,1.39,560,4.811,583,1.984,623,2.398,672,3.498,675,2.326,691,3.793,704,4.883,707,6.308,718,6.839,744,5.546,977,5.264,2915,6.012,2955,5.578,2956,7.455,2957,7.455,2958,6.277,2959,7.738,2960,6.277]],["title/classes/UpdateUserProfileInterestsDto.html",[231,0.122,303,3.331]],["body/classes/UpdateUserProfileInterestsDto.html",[7,0.007,28,0.109,29,0.109,30,0.087,37,0.432,41,0.455,46,0.143,111,1.451,161,4.206,230,0.12,231,0.212,239,0.006,240,0.006,247,0.341,258,0.921,303,5.787,305,6.574,323,1.165,365,2.847,390,1.121,402,1.334,438,1.451,488,4.022,583,2.129,623,2.572,672,3.044,675,2.145,691,3.651,712,5.493,714,5.821,2243,5.489,2915,5.787,2961,5.983,2962,5.489,2963,6.733,2964,5.12]],["title/controllers/UserCollaborationController.html",[241,1.083,2965,3.534]],["body/controllers/UserCollaborationController.html",[7,0.007,28,0.06,29,0.06,30,0.049,33,1.138,37,0.455,39,1.423,40,0.784,41,0.446,42,0.682,44,1.477,46,0.157,48,0.491,111,1.638,147,2.784,153,4.887,154,2.843,183,2.03,230,0.066,231,0.098,232,0.751,234,1.117,235,1.658,239,0.004,240,0.004,241,0.871,243,1.051,245,1.461,247,0.19,248,1.948,258,0.969,261,3.327,262,2.756,267,2.739,274,4.888,278,1.137,279,3.462,282,3.711,287,3.072,310,2.543,314,2.679,315,2.841,316,1.783,317,3.694,318,3.848,319,3.201,320,2.832,321,3.011,322,1.461,323,0.647,324,1.606,331,3.254,332,2.679,345,1.397,347,3.474,348,2.832,350,1.89,359,1.532,362,2.233,380,2.169,385,1.247,390,1.309,402,1.212,446,2.01,449,1.834,513,2.038,551,4.888,552,3.54,555,4.402,556,1.889,588,2.128,624,1.397,625,1.051,642,1.338,643,1.428,741,6.327,744,6.081,864,2.344,1021,1.31,1058,2.426,1324,3.391,1363,3.322,1512,2.679,1513,3.54,1519,1.735,1520,1.834,1521,1.69,1522,1.834,1561,3.322,1592,1.783,1593,2.078,1623,2.841,1631,3.322,1644,3.54,1852,2.01,1909,3.711,1913,4.898,1915,2.01,1916,2.679,2141,3.909,2481,3.54,2914,6.453,2965,4.148,2966,4.334,2967,3.322,2968,3.739,2969,6.691,2970,6.691,2971,7.53,2972,6.691,2973,3.739,2974,3.048,2975,5.455,2976,3.54,2977,6.441,2978,3.739,2979,3.322,2980,5.723,2981,3.739,2982,3.739,2983,3.739,2984,3.739,2985,3.739,2986,3.322,2987,3.739,2988,3.739,2989,3.739,2990,4.381,2991,3.322,2992,5.455,2993,3.739,2994,2.679,2995,3.739,2996,3.739,2997,3.739,2998,5.455,2999,3.739,3000,3.048,3001,3.739,3002,3.739,3003,6.441,3004,3.739,3005,5.455,3006,3.739,3007,3.739,3008,3.322,3009,3.739,3010,3.739]],["title/injectables/UserCollaborationService.html",[441,0.835,2990,3.161]],["body/injectables/UserCollaborationService.html",[7,0.007,28,0.074,29,0.074,30,0.06,33,1.318,37,0.554,39,1.691,40,0.931,41,0.443,42,0.811,44,1.755,46,0.153,48,0.604,51,1.318,63,1.112,111,0.826,153,4.1,154,3.497,163,1.37,180,1.398,183,2.069,230,0.082,231,0.12,232,1.27,234,0.942,239,0.005,240,0.005,247,0.233,248,2.06,267,2.557,278,0.928,287,2.681,350,2.163,359,1.9,362,5.027,380,1.991,385,1.629,402,1.373,441,1.135,513,1.719,516,2.528,563,1.545,588,2.333,624,2.361,625,1.293,634,2.27,641,1.883,642,1.646,643,1.757,646,3.812,647,2.473,650,3.338,658,2.859,659,2.859,660,3.29,661,2.556,662,2.556,663,2.556,824,3.423,840,2.856,842,2.324,1244,2.748,1362,4.087,1643,4.312,1661,2.748,1665,3.192,1670,3.129,1689,3.646,1852,2.473,1944,4.154,1959,3.192,2966,5.052,2969,6.413,2970,6.413,2972,6.413,2979,4.087,2986,4.087,2990,4.298,3008,7.477,3011,4.087,3012,7.217,3013,4.6,3014,4.6,3015,6.318,3016,4.6,3017,4.6,3018,4.6,3019,4.6,3020,4.6,3021,4.6,3022,4.6,3023,4.6,3024,4.6,3025,4.6,3026,4.6,3027,4.6,3028,4.6,3029,4.6,3030,4.6,3031,4.6,3032,4.6,3033,4.6]],["title/controllers/UserController.html",[241,1.083,3034,3.534]],["body/controllers/UserController.html",[7,0.007,28,0.067,29,0.067,30,0.054,33,1.224,37,0.477,39,1.491,40,0.821,41,0.45,42,0.715,44,1.547,46,0.161,48,0.543,79,2.346,80,2.09,81,2.799,111,1.632,127,3.539,128,2.299,130,3.647,131,2.964,132,2.964,133,3.261,135,2.571,150,4.27,172,5.076,230,0.073,231,0.108,232,0.831,234,1.519,239,0.004,240,0.004,241,0.964,243,1.163,245,1.616,247,0.21,248,1.986,258,1.015,261,3.419,267,2.814,299,3.676,319,3.541,320,3.132,321,3.132,322,1.616,323,0.716,331,3.444,345,1.546,348,2.967,350,1.473,366,2.381,380,1.618,385,1.437,390,1.236,402,1.389,560,3.647,588,2.547,624,1.546,625,1.163,642,1.48,643,1.58,703,3.207,864,3.188,1384,2.684,1513,4.815,1517,4.452,1519,1.92,1520,2.03,1521,1.87,1522,2.03,1562,3.988,1592,1.973,1626,6.048,1627,5.558,1831,5.641,1842,3.676,1852,2.224,1853,4.238,1855,3.145,1859,3.676,2157,4.424,2158,3.372,2163,3.676,2284,3.55,2285,2.684,2300,2.814,2305,3.676,2315,2.814,2316,2.814,2994,2.964,3000,4.783,3034,4.461,3035,3.676,3036,7.833,3037,7.833,3038,7.833,3039,6.818,3040,4.136,3041,4.136,3042,6.048,3043,3.676,3044,4.136,3045,4.136,3046,4.136,3047,4.136,3048,4.136,3049,4.136,3050,4.136,3051,4.136,3052,4.136,3053,4.136,3054,4.136,3055,4.136,3056,5.867,3057,4.136,3058,4.136,3059,2.964,3060,3.676,3061,4.136,3062,4.136,3063,4.136,3064,4.136,3065,4.136,3066,4.136,3067,4.136]],["title/controllers/UserEndorsementController.html",[241,1.083,3068,3.534]],["body/controllers/UserEndorsementController.html",[7,0.007,28,0.085,29,0.085,30,0.068,33,1.444,37,0.445,39,1.391,40,0.766,41,0.432,42,0.667,44,1.444,46,0.161,48,0.692,111,1.475,156,5.095,157,4.296,230,0.094,231,0.138,232,1.059,234,1.079,235,1.601,239,0.005,240,0.005,241,1.228,243,1.482,245,2.06,247,0.267,248,1.93,258,0.947,261,3.283,262,4.148,278,1.126,287,2.937,316,2.514,317,3.793,320,3.092,321,3.092,322,2.06,323,0.912,324,2.264,345,1.969,347,3.397,348,2.768,385,1.341,516,2.425,556,2.662,588,2.573,624,1.969,625,1.482,864,3.322,1016,6.243,1514,4.726,1519,2.446,1520,2.586,1521,2.382,1522,2.586,1551,7.578,1552,7.578,1562,4.414,1570,6.152,1581,5.644,1594,4.807,1602,4.683,1609,6.152,1915,2.833,2966,4.45,3068,5.264,3069,4.683,3070,5.27,3071,5.27,3072,5.27,3073,6.152,3074,5.27,3075,5.27,3076,5.27,3077,5.27,3078,4.683,3079,5.27,3080,5.27,3081,5.27,3082,5.27,3083,5.27]],["title/injectables/UserFollowService.html",[441,0.835,3084,3.161]],["body/injectables/UserFollowService.html",[7,0.007,28,0.073,29,0.073,30,0.058,33,1.297,37,0.519,39,1.546,40,0.852,41,0.405,42,0.742,44,1.605,46,0.148,48,0.591,51,1.289,63,1.087,111,1.451,137,2.918,138,3.419,163,1.34,183,2.206,230,0.08,231,0.118,232,1.25,234,1.46,239,0.005,240,0.005,247,0.228,248,1.954,267,2.75,278,1.214,287,3.03,331,4.327,350,2.15,380,2.363,385,1.564,441,1.118,513,2.876,563,1.511,634,2.249,641,1.841,650,3.59,824,3.39,840,3.224,842,3.603,1021,1.575,1244,2.686,1457,4.037,1484,3.666,1665,2.272,1852,2.417,1959,3.142,2469,2.417,2624,2.795,2627,3.059,2632,4.037,2635,4.458,2966,4.809,3059,3.222,3084,4.231,3085,3.996,3086,7.132,3087,7.132,3088,7.132,3089,4.497,3090,5.325,3091,4.497,3092,6.22,3093,4.497,3094,7.758,3095,4.497,3096,4.497,3097,4.497,3098,7.972,3099,4.497,3100,4.497,3101,4.497,3102,3.419,3103,4.497,3104,4.497,3105,7.132,3106,7.132,3107,4.497,3108,8.73,3109,4.73,3110,6.22,3111,6.22,3112,6.22,3113,4.497,3114,6.22,3115,4.497,3116,4.497,3117,4.497]],["title/controllers/UserFollowsController.html",[241,1.083,3118,3.534]],["body/controllers/UserFollowsController.html",[7,0.007,28,0.073,29,0.073,30,0.059,33,1.303,37,0.46,39,1.438,40,0.792,41,0.426,42,0.69,44,1.688,46,0.152,48,0.594,111,1.716,137,4.054,138,3.441,172,5.108,230,0.08,231,0.119,232,0.909,234,1.279,235,1.898,239,0.005,240,0.005,241,1.054,243,1.272,245,1.768,247,0.229,248,1.956,258,0.979,261,3.348,262,3.156,267,2.756,278,1.142,287,3.033,316,2.158,317,3.786,319,3.488,320,2.498,321,3.085,322,1.768,323,0.783,324,1.944,331,3.615,345,1.691,347,3.511,348,2.861,350,1.796,366,2.604,380,1.974,385,1.385,390,1.394,402,1.368,549,4.477,556,2.286,913,2.498,1457,4.054,1485,5.529,1517,4.018,1592,2.158,1593,2.515,1626,5.833,1627,5.833,1852,2.432,1915,2.432,2468,4.477,2469,3.358,2486,3.243,2487,4.867,2529,5.867,2533,5.551,2966,4.441,2994,3.243,3000,5.833,3059,3.243,3060,4.021,3084,4.867,3109,4.75,3118,4.75,3119,4.021,3120,7.155,3121,8.096,3122,7.155,3123,4.525,3124,4.525,3125,6.247,3126,6.247,3127,4.525,3128,4.525,3129,4.525,3130,5.551,3131,4.525,3132,4.525,3133,4.525,3134,6.247,3135,4.525,3136,4.525,3137,4.525,3138,4.021,3139,4.525,3140,4.525,3141,4.525,3142,4.525,3143,4.525,3144,4.525]],["title/controllers/UserHighlightsController.html",[241,1.083,3145,3.534]],["body/controllers/UserHighlightsController.html",[7,0.007,28,0.042,29,0.042,30,0.034,33,0.864,37,0.491,39,1.537,40,0.846,41,0.458,42,0.737,44,1.595,46,0.142,48,0.342,110,1.357,111,1.632,133,3.792,135,1.62,143,2.967,144,4.553,145,1.691,147,2.834,183,1.956,230,0.046,231,0.068,232,0.524,234,0.534,235,0.792,239,0.003,240,0.003,241,0.607,243,0.733,245,1.019,247,0.132,248,2.01,258,1.046,261,3.479,262,4.321,267,2.864,274,5.204,278,1.215,279,2.771,282,2.818,285,1.923,287,3.093,310,3.995,314,1.868,315,2.157,316,1.243,317,3.752,318,3.08,319,3.356,320,2.969,321,3.134,322,1.019,323,0.451,324,1.12,345,0.974,347,3.642,348,3.058,350,1.474,359,1.271,366,3.38,380,2.048,385,1.321,390,1.424,402,1.052,446,1.401,513,0.974,551,5.317,552,2.688,555,4.755,556,1.317,588,1.59,625,0.733,642,0.933,643,0.996,703,1.696,757,5.733,759,1.868,864,2.215,972,3.92,973,5.44,1445,2.968,1564,5.219,1588,4.466,1592,1.243,1593,3.561,1623,3.553,1831,3.92,1840,4.866,1845,2.316,1846,2.316,1847,3.681,1848,2.316,1850,3.976,1852,2.227,1853,3.205,1855,1.982,1860,2.316,1863,2.316,1864,2.316,1865,2.316,1901,2.125,1908,2.316,1915,1.401,1923,2.125,1925,2.316,2481,3.811,2487,2.818,2529,3.15,2624,1.62,2632,1.691,2964,1.982,2966,4.511,2974,2.125,2976,3.811,2994,1.868,3043,4.581,3145,3.15,3146,2.316,3147,2.606,3148,6.408,3149,4.581,3150,6.408,3151,6.408,3152,6.408,3153,6.408,3154,6.408,3155,6.408,3156,6.408,3157,2.606,3158,6.596,3159,2.606,3160,2.606,3161,2.606,3162,2.606,3163,6.636,3164,2.606,3165,4.142,3166,5.873,3167,2.606,3168,5.155,3169,2.606,3170,4.142,3171,2.606,3172,2.606,3173,2.606,3174,2.606,3175,2.606,3176,2.606,3177,2.606,3178,2.606,3179,2.606,3180,5.873,3181,4.142,3182,2.606,3183,2.606,3184,2.606,3185,2.606,3186,2.606,3187,2.606,3188,2.606,3189,2.606,3190,2.316,3191,2.606,3192,5.155,3193,2.316,3194,2.316,3195,2.606,3196,2.606,3197,2.606,3198,2.606,3199,2.316,3200,5.155,3201,2.606,3202,2.606,3203,2.606,3204,2.606,3205,2.606,3206,2.606,3207,2.606,3208,2.606,3209,4.142,3210,2.606,3211,2.606,3212,2.606,3213,2.606,3214,2.606,3215,2.606,3216,2.606,3217,2.606,3218,2.606]],["title/injectables/UserHighlightsService.html",[441,0.835,1853,2.89]],["body/injectables/UserHighlightsService.html",[7,0.007,28,0.042,29,0.042,30,0.034,33,0.861,37,0.53,39,1.634,40,0.9,41,0.428,42,0.784,44,1.696,46,0.142,48,0.341,51,0.744,63,0.628,111,0.742,127,1.97,133,2.296,135,1.614,143,2.96,144,3.841,145,1.685,163,1.231,180,1.944,183,2.291,230,0.046,231,0.068,232,0.83,234,1.053,239,0.003,240,0.003,247,0.261,248,2.045,267,2.242,278,1.219,287,3.046,350,2.27,359,1.474,362,3.072,366,2.377,376,1.352,380,2.243,385,1.598,402,1.207,441,0.742,446,1.396,482,2.81,483,2.96,484,2.568,485,2.96,506,0.873,510,2.96,513,1.922,516,2.597,563,0.873,579,1.056,588,2.313,624,1.543,625,1.161,632,3.338,634,2.087,637,1.685,640,3.987,641,1.063,642,0.929,643,0.992,646,3.841,647,1.396,650,3.788,658,3.197,659,3.197,660,3.548,661,2.296,662,2.296,663,2.858,723,1.495,757,4.2,759,1.861,760,1.861,765,0.97,824,2.582,840,2.649,842,2.598,889,1.97,892,2.296,916,1.652,973,1.975,1021,1.447,1158,1.861,1244,3.501,1405,2.117,1422,3.67,1423,2.308,1484,3.367,1493,3.67,1643,3.072,1661,1.551,1665,2.598,1670,2.81,1689,3.442,1832,4.57,1835,2.308,1840,3.987,1852,2.22,1853,2.568,1944,2.96,1959,2.087,1969,2.308,2022,3.911,2031,2.117,2154,1.614,2333,2.117,2354,2.308,2406,2.308,2452,2.308,2453,2.308,2469,1.396,2624,1.614,2627,1.766,2632,1.685,2966,4.814,3090,4.441,3098,5.684,3102,1.975,3158,7.101,3163,7.187,3193,2.308,3194,2.308,3219,2.308,3220,5.143,3221,5.143,3222,5.143,3223,5.143,3224,5.143,3225,5.143,3226,5.143,3227,2.597,3228,5.143,3229,2.597,3230,4.13,3231,2.597,3232,2.597,3233,2.597,3234,5.684,3235,2.597,3236,2.597,3237,2.597,3238,2.597,3239,2.597,3240,2.597,3241,2.597,3242,2.597,3243,2.597,3244,2.597,3245,6.397,3246,2.597,3247,2.597,3248,2.597,3249,2.597,3250,2.597,3251,2.597,3252,2.597,3253,2.597,3254,2.597,3255,3.67,3256,4.13,3257,4.13,3258,4.13,3259,2.597,3260,2.597,3261,2.597,3262,4.13,3263,2.597,3264,4.13,3265,4.13,3266,4.13,3267,2.597,3268,4.13,3269,2.597,3270,2.597,3271,2.597,3272,2.597,3273,2.597,3274,2.597,3275,2.597,3276,2.597,3277,2.597,3278,2.597,3279,2.597,3280,2.597,3281,2.597,3282,2.597,3283,2.597,3284,2.597,3285,4.13,3286,2.597,3287,2.597,3288,2.597,3289,2.597,3290,2.597,3291,2.597,3292,2.597,3293,2.597,3294,2.597,3295,2.597,3296,2.597,3297,5.143,3298,2.597,3299,2.597,3300,5.143,3301,5.143,3302,2.597,3303,4.13,3304,5.143,3305,2.597,3306,2.597,3307,4.13,3308,2.597,3309,2.597]],["title/controllers/UserInsightMemberController.html",[241,1.083,2015,3.534]],["body/controllers/UserInsightMemberController.html",[7,0.007,28,0.051,29,0.051,30,0.041,33,1.004,37,0.419,39,1.31,40,0.721,41,0.435,42,0.628,44,1.36,46,0.155,48,0.415,106,3.357,111,0.865,139,3.784,140,2.405,147,2.236,179,1.156,183,2.202,230,0.056,231,0.083,232,0.636,234,1.194,235,1.463,239,0.004,240,0.004,241,0.737,243,0.889,245,1.236,247,0.16,248,1.881,258,0.892,261,3.167,267,2.607,274,5.145,278,1.189,279,3.135,282,3.276,284,2.053,285,1.468,287,2.96,314,2.267,315,1.647,316,1.509,317,3.442,318,3.484,319,3.171,320,2.805,321,2.805,322,1.236,323,0.547,324,1.359,331,2.946,332,2.267,345,1.182,347,3.199,348,2.607,350,2.167,359,1.411,362,1.889,380,2.406,385,1.129,390,1.319,402,1.139,446,1.7,513,2.621,551,4.594,552,2.053,555,4.053,556,1.598,585,1.02,588,1.303,625,0.889,642,1.132,643,1.208,705,4.602,721,2.053,726,6.022,728,6.029,864,2.069,1021,1.687,1053,3.662,1054,2.267,1055,2.81,1058,3.784,1066,2.81,1513,3.125,1517,2.508,1519,1.468,1520,1.552,1521,1.43,1522,1.552,1592,1.509,1593,1.758,1623,3.395,1644,3.125,1850,3.899,1902,3.926,1905,4.434,1909,3.276,1913,5.334,1915,1.7,1916,2.267,1918,2.267,1919,3.484,1920,2.053,1922,2.578,1924,3.926,1928,3.784,1931,5.182,1933,4.279,1935,6.234,1942,2.81,1946,6.456,1955,2.81,1957,2.405,1992,4.434,2015,3.662,2019,2.578,2038,2.578,2141,3.451,2469,1.7,2481,3.125,2624,1.966,2908,6.169,2910,5.719,2911,4.772,2976,3.125,3042,3.926,3310,5.719,3311,2.81,3312,2.81,3313,5.182,3314,7.015,3315,3.163,3316,3.163,3317,4.816,3318,4.816,3319,4.816,3320,5.831,3321,3.163,3322,2.81,3323,3.163,3324,4.279,3325,3.163,3326,3.163,3327,3.163,3328,7.39,3329,3.163,3330,3.163,3331,3.163,3332,3.163,3333,2.81,3334,3.163,3335,3.163,3336,4.279,3337,4.816,3338,2.81,3339,3.163,3340,3.163,3341,4.816,3342,4.816,3343,6.234,3344,6.234,3345,3.163,3346,3.163,3347,6.567,3348,4.816,3349,3.163,3350,3.163,3351,3.163,3352,4.816,3353,3.163,3354,3.163,3355,3.163,3356,3.163,3357,3.163,3358,4.816,3359,4.816,3360,4.816,3361,4.816,3362,3.163,3363,3.163,3364,3.163,3365,3.163,3366,3.163,3367,3.163,3368,3.163]],["title/controllers/UserInsightsController.html",[241,1.083,2014,3.534]],["body/controllers/UserInsightsController.html",[7,0.007,28,0.058,29,0.058,30,0.047,33,1.109,37,0.406,39,1.269,40,0.822,41,0.433,42,0.608,44,1.317,46,0.157,48,0.474,106,4.009,111,1.48,147,1.824,183,2.226,230,0.064,231,0.095,232,0.726,234,1.293,235,1.616,239,0.004,240,0.004,241,0.842,243,1.015,245,1.411,247,0.183,248,1.854,258,0.864,261,3.106,262,3.519,267,2.556,274,5.123,278,1.082,279,3.394,282,3.618,285,2.931,287,2.966,310,3.618,314,2.588,315,2.77,316,1.723,317,3.417,318,3.772,319,3.149,320,2.785,321,2.785,322,1.411,323,0.625,324,1.552,345,1.35,347,3.098,348,2.525,350,2.112,359,1.366,364,2.158,380,2.215,382,2.158,383,2.746,385,1.222,390,1.293,402,0.973,446,1.941,513,2.359,551,4.33,552,2.344,554,4.044,555,3.925,556,1.825,579,1.781,585,2.395,588,1.44,625,1.015,642,1.292,643,1.38,699,5.905,702,4.044,703,2.851,705,4.349,864,2.285,1021,1.265,1036,3.209,1049,4.33,1181,3.209,1334,2.746,1512,2.588,1513,3.452,1517,2.77,1519,1.676,1520,1.772,1521,1.633,1522,1.772,1592,1.723,1623,1.881,1644,2.344,1850,2.956,1902,5.147,1910,4.726,1911,6.028,1913,4.044,1915,1.941,1916,2.588,1917,4.336,1918,2.588,1919,3.772,1920,2.344,1922,2.944,1924,4.336,1928,4.097,1992,4.737,1993,3.618,2014,4.044,2017,2.746,2019,2.944,2038,2.944,2481,3.452,2737,2.944,2910,2.944,2911,2.457,2974,2.944,2976,4.097,3042,4.336,3149,6.597,3190,3.209,3199,3.209,3310,5.678,3312,3.209,3313,6.597,3322,3.209,3333,3.209,3336,4.726,3338,3.209,3343,3.209,3344,3.209,3347,4.726,3369,3.209,3370,7.425,3371,3.612,3372,3.612,3373,3.612,3374,3.612,3375,3.612,3376,3.612,3377,3.612,3378,5.319,3379,3.612,3380,3.612,3381,3.612,3382,5.319,3383,3.612,3384,5.319,3385,3.612,3386,3.612,3387,3.612,3388,3.612,3389,3.612,3390,3.612,3391,3.612,3392,3.612,3393,3.612,3394,3.612,3395,3.612,3396,3.612,3397,3.612,3398,5.319,3399,3.612,3400,3.612,3401,3.612,3402,3.612,3403,3.612,3404,3.612,3405,3.612,3406,3.612,3407,3.612,3408,3.612,3409,3.612,3410,3.612,3411,3.612,3412,3.612,3413,3.612]],["title/modules/UserModule.html",[0,1.211,22,2.675]],["body/modules/UserModule.html",[0,1.611,2,1.703,3,2.472,7,0.007,15,5.668,16,4.631,22,5.564,25,2.531,26,1.825,27,1.703,28,0.072,29,0.072,30,0.058,32,2.592,46,0.171,48,0.585,50,2.069,51,1.278,77,2.893,79,2.472,80,2.252,81,2.949,110,2.322,111,1.589,127,2.126,128,2.477,129,3.961,133,3.436,135,2.771,137,4.013,138,3.39,143,3.559,144,2.187,145,2.893,149,4.431,150,2.566,151,4.013,152,3.39,153,4.013,154,3.39,156,3.694,157,3.634,163,1.328,229,2.657,230,0.079,231,0.117,239,0.005,240,0.005,243,1.738,331,4.611,425,2.795,581,2.322,1384,2.893,1594,5.674,1638,3.961,1852,4.48,1853,5.674,1855,3.39,1869,3.961,2188,4.978,2198,3.032,2199,3.195,2284,4.753,2285,2.893,2965,5.398,2990,5.668,2991,3.961,3034,5.83,3059,3.195,3068,5.398,3078,3.961,3084,6.208,3090,5.181,3102,3.39,3118,5.398,3138,3.961,3145,5.83,3414,3.961,3415,4.458,3416,3.961,3417,3.961,3418,4.458,3419,5.398,3420,4.458,3421,4.458,3422,4.458,3423,4.458]],["title/controllers/UserNotificationController.html",[241,1.083,3419,3.534]],["body/controllers/UserNotificationController.html",[7,0.007,28,0.094,29,0.094,30,0.076,33,1.54,37,0.374,39,1.17,40,0.644,41,0.388,42,0.561,44,1.214,46,0.164,48,0.765,111,1.532,151,4.791,152,4.427,230,0.103,231,0.152,232,1.17,234,1.192,239,0.005,240,0.005,241,1.357,243,1.637,245,2.275,247,0.295,248,1.787,258,0.797,261,2.952,262,3.73,267,2.43,274,4.59,278,1.043,287,2.806,310,3.96,316,2.777,317,3.622,319,3.337,320,2.952,321,2.952,322,2.275,323,1.007,324,2.502,345,2.176,347,2.857,348,2.328,385,1.127,390,0.97,556,2.941,588,2.501,624,2.176,625,1.637,642,2.083,643,2.224,864,3.172,1512,4.172,1588,5.614,1852,3.13,1915,3.13,2966,4.249,2994,4.172,3090,5.04,3102,4.427,3419,5.614,3424,5.173,3425,5.822,3426,8.798,3427,5.822,3428,7.576,3429,5.822,3430,5.822,3431,5.822,3432,5.822]],["title/injectables/UserNotificationService.html",[441,0.835,3090,2.89]],["body/injectables/UserNotificationService.html",[7,0.007,28,0.068,29,0.068,30,0.055,33,1.241,37,0.541,39,1.646,40,0.906,41,0.46,42,0.789,44,1.708,46,0.155,48,0.554,51,1.209,63,1.02,144,2.07,151,2.738,152,3.208,163,1.257,180,1.282,183,2.145,230,0.075,231,0.11,232,1.196,234,1.218,239,0.004,240,0.004,247,0.214,248,2.035,278,1.217,282,2.869,287,2.915,331,4.251,350,2.193,359,0.913,362,4.117,366,2.428,380,2.259,385,1.528,415,5.286,441,1.069,449,3.381,516,2.622,563,1.417,588,2.326,624,2.223,625,1.186,634,2.187,641,1.727,642,1.509,643,1.612,646,3.672,647,2.268,650,2.556,660,3.098,661,2.344,662,2.344,663,2.344,765,2.223,824,3.297,840,1.907,1021,2.414,1244,2.52,1449,6.124,1450,5.618,1451,3.748,1452,3.748,1457,2.738,1468,5.091,1471,3.439,1852,3.198,1944,3.967,1959,3.005,2022,5.24,2966,4.946,3059,3.023,3090,3.698,3094,6.65,3163,6.101,3234,6.65,3255,3.748,3433,3.748,3434,6.891,3435,6.891,3436,6.891,3437,6.891,3438,4.218,3439,4.218,3440,5.949,3441,4.218,3442,4.218,3443,4.218,3444,4.218,3445,4.218,3446,4.218,3447,5.949,3448,4.218,3449,4.218,3450,4.218,3451,4.218,3452,4.218,3453,6.891,3454,4.218,3455,4.218,3456,4.218,3457,4.218,3458,4.218,3459,4.218,3460,4.218,3461,4.218,3462,4.218,3463,4.218,3464,4.218,3465,4.218,3466,4.218,3467,4.218,3468,4.218,3469,5.949,3470,5.949,3471,4.218,3472,6.891,3473,4.218,3474,4.218,3475,4.218,3476,4.218,3477,4.218]],["title/classes/UserOnboardingDto.html",[231,0.122,280,3.331]],["body/classes/UserOnboardingDto.html",[7,0.007,28,0.102,29,0.102,30,0.082,37,0.499,41,0.483,46,0.138,111,1.396,161,4.047,230,0.112,231,0.204,239,0.006,240,0.006,247,0.321,258,1.063,280,5.569,305,6.459,323,1.094,365,3.02,390,1.294,392,6.853,402,1.433,438,1.396,488,3.776,583,1.998,623,2.415,672,3.513,675,2.332,691,3.804,692,3.607,712,5.286,714,5.698,1245,3.93,2243,5.153,2937,7.801,2962,5.153,2964,4.806,3478,7.478,3479,5.617,3480,6.321,3481,6.321,3482,6.321]],["title/classes/UserRepoOptionsDto.html",[231,0.122,3483,3.161]],["body/classes/UserRepoOptionsDto.html",[7,0.007,28,0.098,29,0.098,30,0.079,37,0.555,41,0.455,42,0.897,46,0.107,230,0.107,231,0.158,235,2.829,239,0.006,240,0.006,247,0.307,258,1.183,278,1.061,438,1.358,463,3.054,508,3.299,579,1.546,583,1.911,585,2.439,586,3.25,587,2.764,588,2.492,590,3.937,591,4.352,592,4.167,594,2.426,595,3.624,597,3.48,598,3.48,602,3.25,603,4.352,604,3.36,605,3.48,606,4.975,607,3.612,608,4.167,609,3.149,610,3.48,611,3.612,612,3.48,613,3.612,614,3.937,615,2.966,616,2.966,617,3.48,618,3.48,619,3.612,624,2.259,625,1.7,1476,4.112,3483,5.142,3484,4.929]],["title/classes/UserRepoOptionsDto-1.html",[231,0.101,508,1.548,3483,2.633]],["body/classes/UserRepoOptionsDto-1.html",[7,0.007,28,0.108,29,0.108,30,0.087,37,0.431,41,0.454,46,0.143,161,4.196,230,0.119,231,0.211,235,2.624,239,0.006,240,0.006,247,0.34,258,0.918,278,1.152,283,6.127,323,1.161,390,1.117,438,1.448,583,2.121,623,2.563,672,3.032,675,2.14,691,3.642,703,3.298,714,5.814,956,3.861,1476,5.481,2962,5.468,2976,5.229,3483,5.481,3484,6.569,3485,5.961,3486,8.637,3487,6.708,3488,6.708]],["title/modules/UserReposModule.html",[0,1.211,23,3.161]],["body/modules/UserReposModule.html",[0,2.084,2,2.53,3,3.197,7,0.007,23,6.384,25,3.273,26,2.711,27,2.53,28,0.107,29,0.107,30,0.086,32,2.776,46,0.158,48,0.87,50,3.074,51,1.898,110,3.449,111,1.436,112,4.504,114,5.438,163,1.973,229,3.435,230,0.118,231,0.173,239,0.006,240,0.006,425,3.614,581,3.449,1476,4.504,3489,5.884,3490,5.884,3491,5.884,3492,6.926,3493,6.622,3494,6.622]],["title/injectables/UserReposService.html",[441,0.835,3492,3.331]],["body/injectables/UserReposService.html",[7,0.007,28,0.078,29,0.078,30,0.063,33,1.362,37,0.532,39,1.593,40,0.877,41,0.417,42,0.764,44,1.653,46,0.158,48,0.634,51,1.383,63,1.167,110,2.514,111,0.867,112,5.806,114,4.441,163,1.438,180,1.467,183,2.121,230,0.086,231,0.126,232,1.312,234,0.988,239,0.005,240,0.005,247,0.245,248,1.983,267,2.609,278,1.098,287,2.922,341,4.289,350,2.229,359,1.716,380,2.041,385,1.535,402,1.141,441,1.173,513,1.804,516,1.691,563,1.622,579,2.028,588,2.003,624,1.804,625,1.357,634,2.316,641,1.976,642,1.727,643,1.844,646,3.889,647,2.595,650,3.406,658,3.001,659,3.001,660,3.4,661,2.683,662,2.683,663,2.683,669,2.241,711,5.145,719,3.133,720,3.935,723,2.778,824,3.493,840,2.182,842,2.438,1021,1.691,1244,2.884,1476,5.806,1643,4.42,1661,2.884,1665,3.299,1689,3.738,1944,4.259,1959,3.299,2006,3.935,2007,4.289,2022,5.626,2031,3.935,3483,5.392,3492,4.679,3495,4.289,3496,7.399,3497,4.827,3498,4.827,3499,6.529,3500,4.827,3501,4.827,3502,4.827,3503,4.827,3504,4.827,3505,4.827,3506,6.529,3507,4.827,3508,4.827,3509,4.827,3510,4.827,3511,4.827]],["title/injectables/UserService.html",[331,2.348,441,0.835]],["body/injectables/UserService.html",[7,0.007,28,0.048,29,0.048,30,0.039,33,0.96,37,0.541,39,1.666,40,0.963,41,0.436,42,0.799,44,1.729,46,0.145,48,0.392,51,0.855,63,0.721,81,3.016,111,1.66,161,3.293,163,0.889,172,3.639,179,2.056,183,2.377,230,0.053,231,0.078,232,0.925,234,0.611,239,0.003,240,0.003,247,0.151,248,2.06,267,2.558,275,1.854,278,1.18,280,4.531,283,2.268,285,2.935,287,1.515,290,2.431,293,4.531,294,4.531,296,4.433,303,4.531,305,3.299,331,2.326,338,2.65,339,2.65,340,2.65,342,2.65,350,2.002,351,4.247,353,3.753,355,1.067,356,1.251,357,2.65,359,1.94,360,3.753,364,4.496,368,2.268,369,3.753,371,2.268,372,2.268,373,2.268,374,2.268,375,2.268,376,1.553,377,2.268,378,2.268,380,2.352,382,4.496,383,5.723,385,1.544,392,3.501,402,1.23,441,0.827,443,2.137,474,1.782,506,1.002,513,2.698,515,2.862,516,1.97,563,1.002,594,0.777,595,1.251,634,1.847,641,1.221,650,2.716,765,1.115,824,2.785,840,2.542,842,2.841,892,1.658,916,1.193,980,1.854,1021,1.045,1244,4.314,1324,2.862,1384,1.936,1389,2.268,1468,3.825,1471,2.431,1472,2.65,1643,3.359,1661,1.782,1665,2.841,1686,2.431,1689,4.252,1852,1.603,1916,4.029,1944,3.236,1959,2.326,2215,2.65,2956,2.65,2957,2.65,3512,2.65,3513,5.623,3514,5.623,3515,5.623,3516,5.623,3517,5.623,3518,5.623,3519,5.623,3520,5.623,3521,5.623,3522,2.983,3523,2.983,3524,4.604,3525,2.983,3526,2.983,3527,2.983,3528,2.983,3529,2.983,3530,6.322,3531,2.983,3532,2.983,3533,2.983,3534,2.983,3535,2.983,3536,2.983,3537,2.983,3538,2.983,3539,2.983,3540,2.983,3541,2.983,3542,2.983,3543,2.983,3544,2.983,3545,2.983,3546,2.983,3547,2.983,3548,2.983,3549,2.983,3550,2.983,3551,2.983,3552,2.983,3553,2.983,3554,2.983,3555,2.983,3556,2.983,3557,4.604,3558,2.983,3559,2.983,3560,2.983,3561,2.983,3562,2.983,3563,2.983,3564,2.983,3565,7.221,3566,4.604,3567,2.983,3568,2.983,3569,2.983,3570,2.983,3571,2.983,3572,2.65,3573,2.983,3574,2.983,3575,7.221,3576,2.983,3577,2.983,3578,2.983,3579,2.983,3580,2.983,3581,2.983,3582,2.983,3583,2.983,3584,4.604,3585,2.983,3586,2.983,3587,6.322,3588,4.604,3589,2.983,3590,2.983,3591,2.983,3592,2.983]],["title/modules/VoteModule.html",[0,1.211,24,3.331]],["body/modules/VoteModule.html",[0,2.023,2,2.411,3,3.104,7,0.007,16,5.097,24,6.778,25,3.178,26,2.583,27,2.411,28,0.102,29,0.102,30,0.082,32,3.255,46,0.165,48,0.829,50,2.929,51,1.809,77,4.095,79,3.104,80,3.188,85,4.638,86,4.798,163,1.88,229,3.336,230,0.112,231,0.165,239,0.006,240,0.006,243,2.183,425,3.509,579,1.614,581,3.286,2572,6.394,2598,6.535,2599,5.607,3593,5.607,3594,5.607,3595,6.31,3596,5.607,3597,6.31,3598,6.31]],["title/injectables/VoteService.html",[441,0.835,2598,3.161]],["body/injectables/VoteService.html",[7,0.007,28,0.083,29,0.083,30,0.067,33,1.425,37,0.523,39,1.538,40,0.847,41,0.403,42,0.738,44,1.596,46,0.145,48,0.678,51,1.48,63,1.249,85,3.086,86,3.927,163,1.539,183,2.194,230,0.092,231,0.135,232,1.373,234,1.057,239,0.005,240,0.005,247,0.262,248,1.919,267,2.681,278,1.202,287,3.056,350,2.127,380,2.247,385,1.577,441,1.227,513,2.861,563,1.735,579,1.747,634,2.38,638,6.536,641,2.114,650,3.5,669,2.397,824,3.589,840,3.088,842,3.451,1021,1.809,1299,3.927,1665,2.609,1959,3.451,2469,3.672,2470,3.513,2590,5.569,2598,4.647,2624,3.211,2627,3.513,2632,4.434,2635,3.701,3599,4.589,3600,7.655,3601,7.655,3602,5.165,3603,5.165,3604,6.832,3605,5.165,3606,5.165,3607,5.165,3608,5.165,3609,5.165,3610,5.165,3611,5.165,3612,6.832,3613,6.832,3614,6.832,3615,8.704,3616,6.832,3617,5.165,3618,5.165,3619,5.165]],["title/changelog.html",[3620,2.944,3621,3.156,3622,3.44]],["body/changelog.html",[3,1.954,7,0.007,27,0.242,30,0.038,39,0.24,40,0.498,41,0.112,42,0.115,61,1.061,63,0.78,79,0.477,81,0.57,83,0.713,85,1.276,87,1.276,89,1.276,91,1.276,111,1.537,118,0.742,127,3.457,144,1.582,147,1.792,150,2.59,159,1.061,172,0.973,176,4.052,180,1.538,182,0.812,183,1.347,208,1.286,210,1.276,222,0.742,223,1.741,224,0.812,227,2.202,228,0.483,234,0.593,239,0.001,240,0.001,241,0.944,246,3.369,258,0.163,262,2.639,263,3.669,271,1.061,275,0.395,283,2.202,284,1.88,285,3.591,290,0.973,296,1.187,297,1.897,305,1.53,309,2.873,326,3.627,345,1.514,351,0.742,355,1.036,359,0.627,363,1.061,365,0.393,366,3.524,367,2.361,368,0.908,376,0.33,385,0.413,390,0.356,436,0.775,438,0.992,442,0.856,447,3.862,455,1.53,461,0.856,474,1.276,476,2.067,478,2.067,482,2.397,490,1.452,498,2.112,501,5.113,506,1.942,508,0.254,510,2.332,515,1.576,526,0.713,532,0.973,548,1.212,560,3.869,579,1.88,585,1.137,590,1.32,592,0.603,594,0.311,595,0.709,614,2.11,626,0.713,627,1.97,629,0.812,634,0.942,703,3.21,704,0.622,705,2.895,706,0.908,721,0.412,723,1.229,724,1.089,728,0.856,754,1.286,759,0.856,761,2.202,765,1.082,766,5.617,767,4.299,768,1.593,778,0.973,786,0.517,864,1.245,869,0.467,875,1.061,887,1.534,892,0.353,896,1.229,905,1.443,907,1.624,908,1.089,911,1.186,916,0.676,922,1.624,923,0.908,932,3.786,933,3.291,934,2.178,953,1.624,957,2.067,976,0.973,977,1.97,978,1.624,1010,1.624,1012,2.68,1021,0.418,1028,0.856,1041,2.629,1043,0.812,1049,2.664,1058,0.775,1070,4.396,1084,0.742,1106,0.973,1142,0.564,1158,0.856,1189,1.061,1225,2.574,1240,1.061,1247,0.973,1265,0.908,1280,1.061,1281,0.517,1299,2.202,1321,3.848,1324,2.005,1334,0.483,1354,1.061,1370,3.376,1389,1.624,1450,0.973,1455,0.973,1457,0.775,1461,1.061,1463,0.564,1475,1.061,1513,1.386,1521,0.965,1577,0.365,1593,1.187,1604,0.517,1606,0.856,1644,4.102,1691,0.908,1692,1.061,1705,0.564,1710,1.97,1751,0.973,1757,2.253,1774,7.627,1776,1.061,1782,0.564,1802,5.244,1831,0.908,1873,4.197,1880,0.973,1905,0.908,1988,1.624,2076,2.904,2101,1.061,2106,2.574,2133,1.897,2141,0.856,2153,1.624,2154,1.328,2313,1.212,2359,1.897,2381,0.483,2384,0.483,2425,0.973,2477,0.973,2529,0.483,2554,1.061,2564,0.973,2590,0.973,2681,5.244,2752,1.061,2787,0.517,2838,1.53,2864,0.517,2877,0.564,2911,0.812,2921,1.897,2943,1.503,2976,6.099,2980,1.061,3073,1.061,3130,1.503,3324,2.574,3428,1.897,3572,1.897,3620,0.483,3622,1.503,3623,1.061,3624,1.691,3625,3.799,3626,1.691,3627,1.061,3628,5.024,3629,7.014,3630,3.225,3631,8.694,3632,0.635,3633,0.635,3634,0.635,3635,0.635,3636,7.135,3637,2.253,3638,8.612,3639,0.635,3640,3.225,3641,0.635,3642,0.635,3643,0.635,3644,1.691,3645,3.525,3646,7.578,3647,1.194,3648,1.194,3649,1.194,3650,2.135,3651,1.194,3652,1.194,3653,2.574,3654,1.194,3655,3.525,3656,1.194,3657,1.194,3658,1.691,3659,4.285,3660,1.194,3661,1.194,3662,1.194,3663,1.194,3664,2.535,3665,1.194,3666,1.194,3667,1.194,3668,4.052,3669,1.194,3670,1.194,3671,1.194,3672,1.194,3673,1.194,3674,1.194,3675,4.701,3676,2.535,3677,4.285,3678,2.135,3679,5.061,3680,5.061,3681,2.574,3682,2.135,3683,2.135,3684,2.135,3685,2.135,3686,2.135,3687,2.135,3688,6.874,3689,2.896,3690,2.896,3691,3.999,3692,2.896,3693,2.896,3694,2.896,3695,3.225,3696,2.896,3697,2.896,3698,1.691,3699,2.896,3700,2.135,3701,6.664,3702,6.883,3703,1.897,3704,1.194,3705,1.194,3706,1.194,3707,1.194,3708,1.194,3709,1.061,3710,1.194,3711,1.194,3712,9.035,3713,2.896,3714,2.135,3715,7.135,3716,2.135,3717,1.194,3718,1.194,3719,1.194,3720,2.135,3721,1.194,3722,1.194,3723,2.135,3724,2.135,3725,2.896,3726,2.135,3727,2.896,3728,2.135,3729,2.535,3730,2.535,3731,2.574,3732,2.896,3733,6.813,3734,1.194,3735,1.741,3736,2.135,3737,3.999,3738,2.896,3739,3.525,3740,2.896,3741,2.896,3742,2.896,3743,2.896,3744,2.135,3745,2.135,3746,1.194,3747,1.194,3748,2.135,3749,1.194,3750,2.866,3751,2.896,3752,2.896,3753,1.194,3754,1.194,3755,1.194,3756,5.061,3757,3.525,3758,2.135,3759,2.896,3760,2.135,3761,1.691,3762,1.691,3763,1.691,3764,1.691,3765,1.691,3766,1.194,3767,2.896,3768,1.194,3769,2.135,3770,4.052,3771,1.194,3772,1.194,3773,0.856,3774,1.194,3775,1.194,3776,1.194,3777,1.194,3778,1.194,3779,1.194,3780,1.194,3781,1.194,3782,1.194,3783,2.135,3784,2.535,3785,3.799,3786,2.135,3787,2.535,3788,6.74,3789,3.225,3790,1.691,3791,3.799,3792,5.376,3793,1.691,3794,5.781,3795,1.194,3796,1.061,3797,1.194,3798,1.194,3799,1.194,3800,1.194,3801,1.691,3802,0.635,3803,4.177,3804,1.194,3805,1.194,3806,2.135,3807,1.194,3808,1.194,3809,0.635,3810,2.535,3811,1.194,3812,1.194,3813,1.897,3814,1.194,3815,1.194,3816,1.194,3817,1.194,3818,1.194,3819,1.194,3820,1.194,3821,2.135,3822,0.635,3823,0.635,3824,0.635,3825,1.194,3826,0.635,3827,0.635,3828,0.635,3829,1.194,3830,1.194,3831,1.194,3832,0.635,3833,4.497,3834,1.691,3835,0.635,3836,0.635,3837,2.135,3838,0.635,3839,0.635,3840,1.194,3841,1.194,3842,1.194,3843,1.194,3844,1.194,3845,1.194,3846,0.635,3847,0.635,3848,0.635,3849,0.635,3850,2.135,3851,3.6,3852,3.225,3853,2.535,3854,2.535,3855,2.535,3856,2.535,3857,5.52,3858,2.535,3859,2.535,3860,2.535,3861,2.253,3862,2.574,3863,2.535,3864,2.535,3865,2.535,3866,3.225,3867,4.701,3868,2.535,3869,3.225,3870,2.535,3871,2.135,3872,2.135,3873,2.135,3874,2.135,3875,2.135,3876,2.135,3877,2.135,3878,2.135,3879,2.135,3880,1.691,3881,1.691,3882,2.135,3883,2.135,3884,3.132,3885,2.135,3886,2.135,3887,2.135,3888,2.135,3889,2.135,3890,2.135,3891,4.701,3892,4.701,3893,2.535,3894,2.535,3895,1.194,3896,1.194,3897,2.135,3898,2.135,3899,1.194,3900,1.194,3901,2.135,3902,2.135,3903,2.135,3904,2.135,3905,3.132,3906,2.535,3907,4.343,3908,2.535,3909,2.135,3910,1.194,3911,1.194,3912,1.194,3913,1.691,3914,1.503,3915,1.194,3916,1.194,3917,4.701,3918,0.635,3919,5.061,3920,4.052,3921,0.635,3922,0.635,3923,7.192,3924,0.635,3925,0.635,3926,1.194,3927,1.194,3928,1.194,3929,4.887,3930,2.135,3931,2.535,3932,2.135,3933,4.501,3934,3.525,3935,2.135,3936,2.896,3937,4.501,3938,2.135,3939,2.135,3940,2.135,3941,4.701,3942,2.574,3943,2.135,3944,2.135,3945,2.135,3946,1.194,3947,1.194,3948,4.299,3949,1.194,3950,0.635,3951,1.194,3952,1.691,3953,0.635,3954,0.635,3955,1.691,3956,2.896,3957,1.194,3958,1.194,3959,1.194,3960,1.194,3961,0.635,3962,1.194,3963,1.194,3964,1.194,3965,1.194,3966,1.194,3967,2.535,3968,1.194,3969,1.194,3970,1.194,3971,4.052,3972,1.194,3973,1.194,3974,1.194,3975,1.194,3976,1.194,3977,1.194,3978,1.061,3979,1.194,3980,1.691,3981,1.691,3982,1.194,3983,1.194,3984,1.194,3985,1.194,3986,1.194,3987,1.194,3988,2.135,3989,1.194,3990,1.194,3991,1.194,3992,1.194,3993,1.194,3994,1.194,3995,1.194,3996,1.194,3997,1.194,3998,2.135,3999,1.194,4000,1.194,4001,1.194,4002,1.194,4003,0.635,4004,1.691,4005,4.887,4006,2.135,4007,1.194,4008,1.194,4009,1.194,4010,1.194,4011,1.194,4012,1.194,4013,3.525,4014,1.194,4015,1.194,4016,1.194,4017,1.194,4018,1.194,4019,1.194,4020,3.376,4021,1.194,4022,1.194,4023,1.061,4024,1.194,4025,1.194,4026,1.194,4027,1.194,4028,1.691,4029,4.299,4030,1.897,4031,1.194,4032,1.194,4033,1.194,4034,1.194,4035,1.194,4036,1.194,4037,0.635,4038,2.135,4039,1.194,4040,1.194,4041,1.194,4042,1.194,4043,1.194,4044,1.194,4045,1.194,4046,1.194,4047,1.194,4048,2.535,4049,1.194,4050,1.194,4051,3.6,4052,1.194,4053,1.194,4054,1.194,4055,2.135,4056,1.194,4057,1.194,4058,1.194,4059,1.194,4060,1.194,4061,1.194,4062,1.194,4063,1.691,4064,2.535,4065,1.194,4066,1.503,4067,1.194,4068,3.525,4069,1.194,4070,0.635,4071,1.061,4072,1.194,4073,1.194,4074,2.135,4075,1.194,4076,1.194,4077,2.896,4078,1.194,4079,1.061,4080,1.194,4081,1.194,4082,1.194,4083,1.194,4084,1.194,4085,1.194,4086,1.194,4087,1.061,4088,2.135,4089,1.194,4090,1.503,4091,2.135,4092,1.194,4093,1.194,4094,1.194,4095,1.194,4096,1.194,4097,1.194,4098,1.194,4099,5.781,4100,2.535,4101,3.225,4102,2.535,4103,1.194,4104,1.194,4105,0.973,4106,1.194,4107,1.194,4108,1.194,4109,1.194,4110,1.194,4111,1.194,4112,1.194,4113,1.194,4114,1.194,4115,1.194,4116,1.194,4117,1.194,4118,1.194,4119,1.194,4120,1.194,4121,1.194,4122,1.194,4123,1.194,4124,1.194,4125,1.194,4126,2.896,4127,1.194,4128,1.194,4129,1.194,4130,1.194,4131,1.194,4132,1.194,4133,1.061,4134,2.135,4135,1.194,4136,1.691,4137,1.691,4138,1.194,4139,1.061,4140,1.194,4141,1.194,4142,1.194,4143,1.194,4144,2.135,4145,1.194,4146,1.194,4147,1.194,4148,1.194,4149,1.194,4150,1.194,4151,1.194,4152,1.691,4153,1.194,4154,1.194,4155,1.194,4156,1.194,4157,1.194,4158,5.224,4159,1.194,4160,1.194,4161,1.194,4162,1.194,4163,1.194,4164,1.194,4165,1.194,4166,1.194,4167,1.194,4168,1.194,4169,1.194,4170,1.194,4171,1.194,4172,1.194,4173,2.896,4174,0.973,4175,1.194,4176,1.194,4177,1.897,4178,1.194,4179,1.194,4180,1.897,4181,1.194,4182,1.194,4183,1.194,4184,1.194,4185,1.194,4186,1.194,4187,1.194,4188,2.535,4189,1.194,4190,1.194,4191,1.194,4192,1.194,4193,1.194,4194,1.194,4195,1.194,4196,1.691,4197,2.135,4198,1.194,4199,0.635,4200,0.635,4201,0.635,4202,0.635,4203,0.635,4204,0.635,4205,0.635,4206,0.635,4207,0.635,4208,0.635,4209,0.635,4210,0.635,4211,0.635,4212,0.635,4213,2.896,4214,1.897,4215,2.135,4216,1.194,4217,1.194,4218,1.194,4219,1.194,4220,1.194,4221,1.194,4222,1.194,4223,2.896,4224,1.194,4225,1.194,4226,0.635,4227,0.635,4228,0.635,4229,3.807,4230,0.635,4231,0.635,4232,0.635,4233,0.635,4234,0.635,4235,0.635,4236,2.866,4237,0.635,4238,0.635,4239,0.635,4240,0.635,4241,0.973,4242,0.635,4243,0.635,4244,0.635,4245,0.635,4246,0.635,4247,0.635,4248,0.635,4249,0.635,4250,0.564,4251,1.061,4252,0.635,4253,0.635,4254,0.635,4255,0.635,4256,3.376,4257,0.635,4258,0.635,4259,0.635,4260,0.564,4261,0.635,4262,0.635,4263,0.564,4264,0.564,4265,0.635,4266,0.635,4267,0.635,4268,0.635,4269,0.635,4270,0.635,4271,0.635,4272,3.132,4273,0.635,4274,0.635,4275,0.635,4276,0.635,4277,1.194,4278,0.635,4279,0.635,4280,0.635,4281,0.635,4282,0.635,4283,0.635,4284,0.635,4285,1.194,4286,0.517,4287,0.635,4288,0.635,4289,0.635,4290,0.635,4291,0.635,4292,0.635,4293,0.635,4294,0.635,4295,0.635,4296,0.635,4297,0.635,4298,0.635,4299,0.635,4300,0.635,4301,0.635,4302,0.635,4303,0.635,4304,0.635,4305,0.635,4306,0.635,4307,0.635,4308,0.635,4309,1.503,4310,0.635,4311,0.635,4312,0.635,4313,0.635,4314,0.635,4315,0.635,4316,0.635,4317,0.635,4318,0.635,4319,0.635,4320,0.635,4321,0.635,4322,0.635,4323,0.635,4324,1.691,4325,0.635,4326,0.635,4327,0.635,4328,0.635,4329,0.635,4330,0.635,4331,0.635,4332,0.635,4333,0.635,4334,0.517,4335,0.635,4336,0.635,4337,0.635,4338,0.635,4339,0.635,4340,0.635,4341,0.635,4342,0.635,4343,0.635,4344,1.194,4345,0.635,4346,1.061,4347,0.635,4348,0.635,4349,0.635,4350,1.194,4351,1.194,4352,0.635,4353,1.691,4354,0.635,4355,0.635,4356,1.194,4357,0.635,4358,0.635,4359,0.635,4360,0.635,4361,0.635,4362,0.635,4363,0.635,4364,0.635,4365,0.635,4366,0.635,4367,0.635,4368,0.635,4369,1.194,4370,0.635,4371,0.635,4372,0.635,4373,0.635,4374,0.564,4375,0.635,4376,0.635,4377,0.635,4378,0.635,4379,0.635,4380,0.635,4381,0.635,4382,0.635,4383,0.635,4384,0.635,4385,0.635,4386,0.635,4387,0.635,4388,0.635,4389,0.635,4390,0.635,4391,0.635,4392,0.635,4393,0.635,4394,0.564,4395,0.635,4396,0.635,4397,0.635,4398,0.635,4399,0.635,4400,0.635,4401,0.635,4402,0.635,4403,0.635,4404,0.635,4405,0.635]],["title/coverage.html",[4406,5.188]],["body/coverage.html",[7,0.007,30,0.034,41,0.136,70,2.103,71,2.103,72,2.103,73,2.103,74,2.103,75,2.103,79,1.032,81,1.231,83,1.542,85,1.542,87,1.542,89,1.542,91,1.542,100,1.962,103,1.962,106,1.485,108,1.675,111,1.22,112,2.795,114,1.755,115,1.755,123,1.755,125,1.755,127,1.231,128,3.775,130,1.604,131,2.945,133,1.434,137,1.675,139,1.675,141,1.604,143,1.485,144,2.016,146,1.675,147,2.444,149,1.849,150,1.485,151,1.675,153,1.675,156,1.542,183,0.74,231,0.243,239,0.003,240,0.003,241,2.096,242,1.962,244,2.293,246,1.849,280,1.849,287,0.849,293,1.849,294,1.849,296,1.434,303,1.849,324,1.109,328,1.962,331,1.304,333,1.675,335,1.675,367,2.103,423,1.849,431,3.059,432,2.667,434,3.877,435,3.894,436,3.79,437,3.35,441,1.652,445,1.755,447,1.434,451,1.675,520,3.35,521,1.755,523,1.675,540,1.962,541,2.293,574,1.755,576,1.962,579,0.66,582,1.849,584,2.103,585,1.884,586,4.2,588,0.698,631,2.293,642,0.923,646,1.266,664,1.755,665,2.293,666,3.35,699,1.849,700,3.35,701,3.35,705,2.513,711,1.675,726,1.962,727,3.35,734,1.962,735,2.293,736,2.293,741,1.962,742,3.35,743,3.35,757,1.849,758,2.293,781,1.849,782,2.293,783,2.293,792,1.755,822,2.293,845,2.293,846,3.35,887,2.217,888,2.293,892,5.482,918,1.032,962,2.293,970,2.293,1000,2.293,1018,2.293,1051,3.35,1052,2.293,1081,4.185,1094,2.293,1103,2.293,1134,2.293,1246,2.293,1264,2.293,1279,2.293,1298,2.293,1313,3.125,1314,2.293,1358,4.257,1359,2.293,1388,2.293,1421,2.293,1445,1.849,1446,2.293,1448,2.293,1468,1.755,1476,3.972,1483,2.293,1508,1.962,1509,2.293,1519,1.198,1521,1.166,1523,1.755,1534,2.293,1544,1.962,1545,2.293,1594,1.604,1599,1.849,1639,2.293,1691,1.962,1693,2.293,1694,2.293,1708,1.755,1709,2.293,1724,3.35,1725,2.293,1755,2.293,1780,1.962,1781,2.293,1829,1.962,1830,2.293,1840,1.755,1853,1.604,1870,2.293,1872,2.293,1881,2.103,1896,1.962,1897,2.293,1911,1.849,1919,1.542,1928,1.675,1929,3.35,1930,2.293,1977,2.103,1978,3.125,1992,1.755,1993,1.755,1994,2.293,2014,1.962,2015,1.962,2020,2.293,2062,2.293,2075,2.293,2076,1.849,2090,3.894,2091,2.293,2096,1.962,2118,2.293,2134,1.962,2135,2.293,2150,1.849,2157,1.675,2160,1.755,2172,1.962,2173,2.293,2184,2.293,2188,1.542,2229,2.103,2245,2.293,2271,2.293,2272,2.293,2284,1.344,2295,1.962,2296,2.293,2299,1.485,2303,1.849,2313,1.849,2321,2.103,2323,2.293,2357,3.67,2358,2.293,2389,2.293,2455,1.962,2456,2.293,2457,2.293,2488,1.755,2498,1.962,2499,2.293,2500,2.293,2525,1.755,2536,1.962,2537,2.293,2538,2.293,2562,1.755,2572,1.962,2573,2.293,2574,2.293,2598,1.755,2613,2.293,2643,2.293,2668,2.293,2700,1.755,2704,2.293,2718,1.849,2719,3.894,2722,3.35,2723,3.35,2734,2.103,2736,2.103,2809,2.293,2830,2.293,2831,2.293,2872,2.293,2875,2.293,2900,2.103,2901,2.293,2904,3.35,2908,1.962,2914,1.962,2915,4.185,2920,2.293,2955,2.293,2961,2.293,2965,1.962,2966,4.388,2967,2.293,2990,1.755,3011,2.293,3034,1.962,3035,2.293,3068,1.962,3069,2.293,3084,1.755,3085,2.293,3090,1.604,3118,1.962,3119,2.293,3145,1.962,3146,2.293,3219,2.293,3310,3.35,3311,2.293,3369,2.293,3419,1.962,3424,2.293,3433,2.293,3478,2.293,3479,2.293,3483,2.795,3484,3.35,3485,2.293,3492,1.849,3495,2.293,3512,2.293,3599,2.293,3978,2.293,4029,1.962,4071,2.293,4251,7.421,4406,2.103,4407,2.58,4408,6.793,4409,2.58,4410,8.351,4411,9.419,4412,8.351,4413,3.35,4414,2.293,4415,2.293,4416,6.377,4417,8.448,4418,2.58,4419,5.121,4420,2.293,4421,2.293,4422,2.293,4423,3.652,4424,2.293,4425,2.293,4426,3.652,4427,2.293,4428,2.293,4429,2.293,4430,7.977,4431,8.119,4432,4.109,4433,5.121,4434,2.293,4435,2.293,4436,2.58,4437,2.293,4438,2.103,4439,2.58,4440,2.58,4441,2.58,4442,2.58]],["title/miscellaneous/enumerations.html",[4443,2.407,4444,4.972]],["body/miscellaneous/enumerations.html",[7,0.007,40,0.763,147,2.643,150,3.966,239,0.005,240,0.005,247,0.265,355,3.126,356,3.663,434,2.429,584,4.265,585,2.915,586,4.962,593,5.617,595,4.128,599,4.938,608,3.481,627,4.687,628,5.617,629,4.687,703,2.821,724,2.961,988,4.265,998,4.472,1141,5.617,1150,5.617,1234,5.617,1245,4.283,1347,4.938,1358,3.126,1468,4.687,1474,6.123,1485,4.938,1543,5.617,1670,4.687,1713,4.283,1978,3.978,1984,6.675,1985,5.617,1986,5.617,1987,5.239,1988,5.239,1989,5.617,1990,5.617,1991,5.617,2229,4.265,2232,6.123,2238,6.123,2357,3.749,2375,6.123,2376,6.123,2377,5.239,2378,6.123,2379,6.123,2380,5.617,2381,5.239,2382,5.617,2383,5.617,2384,5.239,4438,5.617,4443,3.253,4444,4.649,4445,5.232,4446,5.232,4447,5.232,4448,6.89,4449,6.89,4450,6.89,4451,4.649,4452,5.232,4453,4.649]],["title/miscellaneous/functions.html",[4443,2.407,4454,4.972]],["body/miscellaneous/functions.html",[7,0.006,239,0.006,240,0.006,247,0.382,4434,6.694,4435,8.053,4443,4.683,4454,6.694,4455,7.533]],["title/index.html",[247,0.196,3620,2.944,3621,3.156]],["body/index.html",[7,0.007,27,1.794,29,0.076,30,0.083,127,3.057,147,2.198,170,3.828,176,3.365,227,3.57,228,5.959,239,0.005,240,0.005,345,1.754,366,3.688,447,4.054,462,3.365,471,3.365,484,2.919,579,1.639,594,1.67,595,1.969,634,1.872,721,3.047,724,3.723,754,5.959,778,4.511,907,3.57,923,3.57,977,3.194,978,5.547,1043,3.194,1049,2.919,1084,2.919,1158,4.592,1171,3.828,1873,5.547,2078,3.194,2120,4.172,2690,4.172,2838,4.592,2964,3.57,2976,4.158,3109,6.237,3623,4.172,3681,4.172,3688,6.964,3703,4.172,3731,5.694,3735,3.828,3737,6.482,3750,7.949,3773,3.365,3796,4.172,3813,4.172,3833,6.964,3851,4.172,3861,4.172,3862,4.172,3905,4.172,3914,4.172,3948,3.57,4020,4.172,4023,5.694,4029,3.57,4030,5.694,4051,4.172,4066,4.172,4079,4.172,4087,4.172,4090,4.172,4105,6.389,4174,3.828,4177,4.172,4180,6.964,4214,5.694,4229,4.172,4236,6.964,4256,7.289,4263,4.172,4264,8.363,4272,5.694,4286,3.828,4309,5.694,4334,5.947,4374,4.172,4394,4.172,4406,3.828,4456,4.695,4457,4.695,4458,5.694,4459,4.695,4460,4.695,4461,6.408,4462,4.172,4463,4.695,4464,4.695,4465,4.695,4466,4.695,4467,4.695,4468,4.695,4469,4.695,4470,4.695,4471,4.695,4472,4.695,4473,4.695,4474,4.695,4475,4.695,4476,4.695,4477,4.172,4478,4.172,4479,6.408,4480,4.695,4481,4.695,4482,4.172,4483,4.172,4484,4.695,4485,4.695,4486,8.203,4487,4.695,4488,4.695,4489,6.408,4490,4.695,4491,4.695,4492,4.695,4493,4.695,4494,4.695,4495,4.695,4496,4.695,4497,4.695,4498,6.408,4499,4.695,4500,4.695,4501,6.408,4502,4.695,4503,4.695,4504,4.695,4505,4.695,4506,4.695,4507,4.695,4508,4.695,4509,6.408,4510,4.695,4511,6.408,4512,6.408,4513,4.695,4514,4.695,4515,4.695,4516,4.695,4517,4.695,4518,4.695,4519,4.695,4520,4.695,4521,4.695,4522,4.695,4523,4.695,4524,4.695,4525,6.408,4526,6.408,4527,4.695,4528,4.695,4529,4.695,4530,4.695,4531,4.695,4532,6.408,4533,4.695,4534,4.695,4535,4.695,4536,4.695,4537,4.695,4538,4.695,4539,4.695,4540,4.695,4541,4.695,4542,4.695,4543,4.695,4544,4.695,4545,4.695,4546,4.695,4547,6.408,4548,4.695,4549,4.695,4550,4.695,4551,4.695,4552,3.828]],["title/license.html",[3620,2.944,3621,3.156,3773,2.775]],["body/license.html",[7,0.006,27,2.445,239,0.006,240,0.006,549,4.586,724,2.75,766,4.153,778,3.683,911,3.464,922,4.866,1171,5.217,1401,5.217,1496,5.217,1873,5.954,1880,5.217,2787,5.217,3109,4.866,3709,5.686,3735,6.384,3773,4.586,4029,4.866,4286,6.384,4462,8.424,4552,5.217,4553,8.462,4554,6.399,4555,7.831,4556,6.399,4557,6.399,4558,6.399,4559,6.399,4560,6.399,4561,6.399,4562,6.399,4563,6.399,4564,6.399,4565,6.399,4566,6.399,4567,6.399,4568,6.399,4569,6.399,4570,6.399,4571,6.399,4572,6.399,4573,7.831,4574,6.399,4575,6.399,4576,6.399,4577,6.399,4578,6.399,4579,6.399,4580,7.831,4581,7.831,4582,6.399,4583,6.399,4584,6.399,4585,6.399,4586,6.399,4587,6.399,4588,6.399,4589,6.399,4590,6.399,4591,6.399,4592,6.399,4593,6.399,4594,6.399,4595,6.399,4596,6.399,4597,6.399,4598,6.399,4599,6.399,4600,6.399,4601,6.399,4602,6.399,4603,6.399,4604,6.399,4605,6.399]],["title/modules.html",[2,2.431]],["body/modules.html",[1,4.724,2,2.373,6,4.225,7,0.006,8,4.452,9,4.032,10,4.452,11,4.452,12,4.452,13,4.452,14,4.452,15,4.225,16,3.452,17,4.452,18,4.452,19,4.225,20,4.452,21,4.452,22,3.576,23,4.225,24,4.452,239,0.006,240,0.006,422,4.225,2054,4.724,2223,4.225,3884,8.705,4606,9.796,4607,9.796,4608,9.809,4609,5.52,4610,6.212]],["title/overview.html",[4611,5.655]],["body/overview.html",[1,7.285,2,1.281,3,2.013,4,2.98,5,2.98,6,6.172,7,0.007,8,5.778,9,5.233,10,5.157,11,6.02,12,4.33,13,5.157,14,6.261,15,6.051,16,4.903,17,5.778,18,5.778,19,5.332,20,6.192,21,5.778,22,5.473,23,5.332,24,5.778,25,2.061,26,1.373,27,1.281,180,1.019,239,0.004,240,0.004,243,0.943,324,3.368,331,3.96,333,5.087,335,5.087,418,2.98,419,2.98,420,2.98,421,2.98,422,5.332,423,5.617,433,2.55,451,3.922,508,1.341,523,3.922,563,1.127,570,2.98,571,2.98,572,2.98,574,5.332,583,1.06,614,1.746,781,5.617,792,4.11,816,2.98,817,2.98,818,2.98,1523,4.11,1530,2.98,1531,2.98,1594,5.222,1633,2.98,1634,2.98,1635,2.98,1691,2.55,1853,4.873,1919,4.683,1928,3.922,1993,5.332,2009,2.98,2010,2.98,2011,2.98,2054,5.96,2055,2.98,2056,2.98,2057,2.98,2157,5.087,2160,4.11,2188,4.817,2219,2.98,2220,2.98,2221,2.98,2222,2.98,2223,5.332,2284,4.375,2318,2.98,2319,2.98,2320,2.98,2365,2.98,2367,2.98,2368,2.98,2488,5.332,2525,5.332,2562,5.332,2598,5.332,2607,2.98,2609,2.98,2610,2.98,2637,2.98,2639,2.98,2640,2.98,2663,2.98,2664,2.98,2665,2.98,2697,2.98,2698,2.98,2699,2.98,2700,5.332,2715,2.98,2716,2.98,2718,4.813,2803,2.98,2804,2.98,2806,2.98,2990,4.11,3084,5.332,3090,3.757,3414,2.98,3416,2.98,3417,2.98,3489,2.98,3490,2.98,3491,2.98,3492,5.617,3593,2.98,3594,2.98,3596,2.98,3637,4.473,3653,2.98,4611,2.98,4612,3.354,4613,3.354]],["title/properties.html",[438,1.005,3691,3.44]],["body/properties.html",[7,0.007,60,5.297,239,0.006,240,0.006,326,4.992,390,1.16,438,1.252,634,2.036,686,6.718,724,3.541,778,4.744,959,5.679,1166,6.19,1644,4.521,3627,6.19,3628,6.19,3773,4.992,3948,5.297,4139,6.19,4250,6.19,4346,6.19,4552,5.679,4609,6.19,4614,6.967,4615,6.967,4616,6.967,4617,6.967,4618,6.967,4619,6.967,4620,6.967,4621,6.967,4622,6.967,4623,6.967,4624,6.967,4625,6.967,4626,6.967,4627,6.967,4628,6.967,4629,6.967]],["title/miscellaneous/typealiases.html",[4443,2.407,4630,5.596]],["body/miscellaneous/typealiases.html",[7,0.006,41,0.396,239,0.006,240,0.006,247,0.382,4413,6.141,4443,4.683,4631,7.533,4632,8.625,4633,6.694]],["title/miscellaneous/variables.html",[4241,4.562,4443,2.407]],["body/miscellaneous/variables.html",[7,0.007,28,0.064,41,0.207,70,4.618,71,4.618,72,4.618,73,4.618,74,4.618,75,4.618,111,1.018,147,1.943,168,5.408,170,5.408,172,3.261,174,5.034,176,4.059,183,1.901,189,5.034,222,3.522,239,0.004,240,0.004,247,0.2,278,0.729,287,1.865,320,1.575,350,1.821,385,1.285,390,0.656,402,1.023,438,0.708,471,2.822,477,3.045,498,2.374,506,2.689,510,2.267,516,1.984,594,2.365,595,3.805,712,2.679,767,2.994,786,3.21,998,2.556,1214,5.034,1358,2.353,1468,3.853,1485,2.822,1496,4.618,1519,2.629,1521,2.561,1581,3.21,1698,5.034,1881,4.618,1884,3.499,2078,3.853,2100,3.499,2719,4.307,2722,3.21,2723,4.618,2734,4.618,2736,4.618,2737,3.21,2738,3.499,2739,3.499,2740,3.499,2741,3.499,2785,3.499,2838,2.822,2911,2.679,3803,3.499,3907,5.034,3942,3.499,3948,4.307,4105,3.21,4133,3.499,4174,3.21,4241,3.21,4260,3.499,4334,3.21,4413,3.21,4414,3.499,4415,5.034,4420,3.499,4421,5.034,4422,3.499,4423,5.034,4424,5.034,4425,5.034,4426,3.499,4427,5.895,4428,3.499,4429,3.499,4437,3.499,4438,4.618,4443,2.448,4451,3.499,4453,3.499,4458,3.499,4477,3.499,4478,5.034,4482,3.499,4483,3.499,4633,5.034,4634,3.938,4635,3.938,4636,3.938,4637,5.665,4638,5.665,4639,3.938,4640,3.938,4641,3.938,4642,3.938,4643,3.938,4644,3.938,4645,3.938,4646,3.938,4647,3.938,4648,3.938,4649,3.938,4650,3.938,4651,3.938,4652,3.938,4653,3.938,4654,8.247,4655,3.938,4656,3.938,4657,3.938,4658,3.938,4659,3.938,4660,3.938,4661,3.938,4662,3.938,4663,3.938,4664,3.938,4665,3.938,4666,3.938,4667,3.938,4668,3.938,4669,3.938,4670,3.938,4671,3.938,4672,3.938,4673,3.938,4674,5.665,4675,3.938,4676,5.665,4677,3.938,4678,3.938,4679,5.665,4680,3.938,4681,5.665,4682,3.938,4683,5.665,4684,3.938,4685,5.665,4686,5.665,4687,3.938,4688,3.938,4689,5.665,4690,3.938,4691,3.938,4692,3.938,4693,3.938,4694,3.938,4695,3.938,4696,3.938,4697,3.938,4698,3.938,4699,3.938,4700,3.938,4701,3.938,4702,3.938,4703,3.938,4704,3.938,4705,3.938,4706,5.665,4707,3.938,4708,3.938,4709,3.938,4710,3.938,4711,5.665,4712,3.938,4713,3.938,4714,3.938,4715,3.938,4716,3.938,4717,3.938,4718,3.938,4719,3.938,4720,3.938,4721,3.938,4722,3.938,4723,3.938,4724,3.938,4725,3.938,4726,3.938,4727,3.938,4728,3.938,4729,3.938,4730,3.938,4731,3.938,4732,3.938,4733,3.938,4734,3.938,4735,3.938,4736,3.938,4737,5.665,4738,5.665,4739,5.665,4740,3.938,4741,3.938]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":892,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":4477,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["0.7",{"_index":4660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":4411,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":4419,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":4433,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":4441,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":4439,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4431,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":4409,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":4410,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":4412,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4417,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4430,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":4432,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":4408,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4416,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":4073,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":767,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01301c9",{"_index":3719,"title":{},"body":{"changelog.html":{}}}],["01t00:30:00z",{"_index":4735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":3794,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":3788,"title":{},"body":{"changelog.html":{}}}],["03600f8",{"_index":3662,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":4085,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1070,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["04082d7",{"_index":4170,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":3629,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":3917,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3923,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":933,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["0848443",{"_index":4322,"title":{},"body":{"changelog.html":{}}}],["08f1679",{"_index":3720,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":3919,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":4129,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":3935,"title":{},"body":{"changelog.html":{}}}],["0e8a16",{"_index":1196,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["0eb10bb",{"_index":3959,"title":{},"body":{"changelog.html":{}}}],["0fe8b4d",{"_index":3649,"title":{},"body":{"changelog.html":{}}}],["0})@column({type",{"_index":1127,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{}}}],["1",{"_index":508,"title":{"interfaces/ChatResponse-1.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["1.0.0",{"_index":4390,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":4387,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":4385,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":4381,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":4070,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":4063,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":4055,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":4037,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":4028,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":4004,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":4003,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":3997,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":3988,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":3986,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":3980,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":3975,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":3970,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":4378,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":3966,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":3962,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":3961,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":3955,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":3951,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":3929,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":3920,"title":{},"body":{"changelog.html":{}}}],["1.26.0",{"_index":3918,"title":{},"body":{"changelog.html":{}}}],["1.27.0",{"_index":3909,"title":{},"body":{"changelog.html":{}}}],["1.28.0",{"_index":3850,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":3791,"title":{},"body":{"changelog.html":{}}}],["1.29.1",{"_index":3829,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":4372,"title":{},"body":{"changelog.html":{}}}],["1.30.0",{"_index":3825,"title":{},"body":{"changelog.html":{}}}],["1.30.1",{"_index":3810,"title":{},"body":{"changelog.html":{}}}],["1.30.2",{"_index":3809,"title":{},"body":{"changelog.html":{}}}],["1.31.0",{"_index":3793,"title":{},"body":{"changelog.html":{}}}],["1.31.1",{"_index":3802,"title":{},"body":{"changelog.html":{}}}],["1.32.0",{"_index":3790,"title":{},"body":{"changelog.html":{}}}],["1.33.0",{"_index":3675,"title":{},"body":{"changelog.html":{}}}],["1.33.1",{"_index":3667,"title":{},"body":{"changelog.html":{}}}],["1.34.0",{"_index":3658,"title":{},"body":{"changelog.html":{}}}],["1.35.0",{"_index":3654,"title":{},"body":{"changelog.html":{}}}],["1.36.0",{"_index":3644,"title":{},"body":{"changelog.html":{}}}],["1.37.0",{"_index":3627,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.4.0",{"_index":4368,"title":{},"body":{"changelog.html":{}}}],["1.5.0",{"_index":4365,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":4363,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":4340,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":4336,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":4308,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":4304,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":4301,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":4298,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":4293,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":4291,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":4284,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":4282,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":4333,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":4331,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":4328,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":4326,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":4323,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":4319,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":4316,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":4313,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":4279,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":4275,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":4232,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":4228,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":4226,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":4259,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":4255,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":4253,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":4249,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":4246,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":4243,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":4240,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":4235,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":4213,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":4211,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":4209,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":4099,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":506,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":998,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":985,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":604,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["10000",{"_index":4689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":4654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":3903,"title":{},"body":{"changelog.html":{}}}],["1045024650",{"_index":1230,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1045024650})@primarycolumn('integer",{"_index":1186,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@column({type",{"_index":1159,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":605,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":2681,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["113e98b",{"_index":3666,"title":{},"body":{"changelog.html":{}}}],["115",{"_index":3911,"title":{},"body":{"changelog.html":{}}}],["116",{"_index":3887,"title":{},"body":{"changelog.html":{}}}],["117",{"_index":3889,"title":{},"body":{"changelog.html":{}}}],["118",{"_index":3885,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":3668,"title":{},"body":{"changelog.html":{}}}],["120",{"_index":3915,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":954,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":919,"title":{},"body":{"entities/DbContribution.html":{}}}],["1225197",{"_index":3755,"title":{},"body":{"changelog.html":{}}}],["124",{"_index":3895,"title":{},"body":{"changelog.html":{}}}],["125",{"_index":3899,"title":{},"body":{"changelog.html":{}}}],["127.0.0.1",{"_index":4476,"title":{},"body":{"index.html":{}}}],["128",{"_index":3848,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":3956,"title":{},"body":{"changelog.html":{}}}],["130",{"_index":3846,"title":{},"body":{"changelog.html":{}}}],["131",{"_index":3844,"title":{},"body":{"changelog.html":{}}}],["133",{"_index":1475,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["133'})@column({type",{"_index":1460,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["135",{"_index":3827,"title":{},"body":{"changelog.html":{}}}],["136",{"_index":3823,"title":{},"body":{"changelog.html":{}}}],["138",{"_index":3634,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":780,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":924,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":910,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1024,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1044,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":769,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["14",{"_index":3821,"title":{},"body":{"changelog.html":{}}}],["141",{"_index":3819,"title":{},"body":{"changelog.html":{}}}],["143",{"_index":3804,"title":{},"body":{"changelog.html":{}}}],["144",{"_index":3807,"title":{},"body":{"changelog.html":{}}}],["147",{"_index":3716,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":4148,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":957,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["150",{"_index":3797,"title":{},"body":{"changelog.html":{}}}],["151",{"_index":3799,"title":{},"body":{"changelog.html":{}}}],["154",{"_index":3765,"title":{},"body":{"changelog.html":{}}}],["155",{"_index":3718,"title":{},"body":{"changelog.html":{}}}],["155e99e",{"_index":4095,"title":{},"body":{"changelog.html":{}}}],["157",{"_index":3775,"title":{},"body":{"changelog.html":{}}}],["158",{"_index":3721,"title":{},"body":{"changelog.html":{}}}],["159",{"_index":3777,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":901,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":3659,"title":{},"body":{"changelog.html":{}}}],["161",{"_index":3673,"title":{},"body":{"changelog.html":{}}}],["164",{"_index":3661,"title":{},"body":{"changelog.html":{}}}],["165",{"_index":3665,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":4360,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":4125,"title":{},"body":{"changelog.html":{}}}],["168",{"_index":3656,"title":{},"body":{"changelog.html":{}}}],["1680fb3",{"_index":3871,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3981,"title":{},"body":{"changelog.html":{}}}],["170",{"_index":3651,"title":{},"body":{"changelog.html":{}}}],["171",{"_index":3648,"title":{},"body":{"changelog.html":{}}}],["173",{"_index":3642,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":4219,"title":{},"body":{"changelog.html":{}}}],["17d7725",{"_index":3726,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3655,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":768,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["196",{"_index":1261,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["196})@primarygeneratedcolumn",{"_index":1250,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["1bbeaf6",{"_index":4184,"title":{},"body":{"changelog.html":{}}}],["1c3378e",{"_index":3722,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":4098,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":3983,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":979,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":612,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":2143,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["2/3",{"_index":4418,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1012,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{}}}],["200",{"_index":4653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2016",{"_index":909,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":932,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["2023",{"_index":766,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"license.html":{}}}],["20491d8",{"_index":3738,"title":{},"body":{"changelog.html":{}}}],["2073883",{"_index":4083,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":4245,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":4254,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":3792,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":3653,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["22:04:29.000000",{"_index":958,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1176,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1179,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":935,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:39.000000",{"_index":1132,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22:04:39.000000'})@column({type",{"_index":1118,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22d3cc1",{"_index":4337,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":3645,"title":{},"body":{"changelog.html":{}}}],["234343",{"_index":2364,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":2362,"title":{},"body":{"classes/RepoInfo.html":{}}}],["237133",{"_index":968,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":1064,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["237133})@column('bigint",{"_index":1415,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@column({type",{"_index":1002,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["237133})@primarycolumn('bigint",{"_index":963,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":1026,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["23b2a83",{"_index":3760,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":3637,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["247e0ba",{"_index":4147,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":1041,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["250",{"_index":1748,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":4679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1729,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":897,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{}}}],["26",{"_index":3801,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":4064,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":4405,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":4384,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":934,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["286e864",{"_index":3894,"title":{},"body":{"changelog.html":{}}}],["287",{"_index":1133,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["287})@column({type",{"_index":1110,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["28a3b76",{"_index":3652,"title":{},"body":{"changelog.html":{}}}],["28f6699",{"_index":3820,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":3971,"title":{},"body":{"changelog.html":{}}}],["293c4d3",{"_index":3836,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":4119,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":4145,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":4397,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":4297,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":3969,"title":{},"body":{"changelog.html":{}}}],["2d6609a",{"_index":3845,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":3985,"title":{},"body":{"changelog.html":{}}}],["2ee076b",{"_index":3734,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":4138,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":4613,"title":{},"body":{"overview.html":{}}}],["3.5",{"_index":4716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30",{"_index":614,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"overview.html":{}}}],["3000",{"_index":4657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":4483,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["30})@type(undefined)@isin(['7",{"_index":617,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["31",{"_index":3630,"title":{},"body":{"changelog.html":{}}}],["31333",{"_index":1017,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31333})@column({type",{"_index":1005,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31e4d60",{"_index":4239,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":1461,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["3282435",{"_index":4153,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":4612,"title":{},"body":{"overview.html":{}}}],["334268d",{"_index":4121,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":4332,"title":{},"body":{"changelog.html":{}}}],["34d521d",{"_index":4386,"title":{},"body":{"changelog.html":{}}}],["3549897",{"_index":3657,"title":{},"body":{"changelog.html":{}}}],["35a08da",{"_index":3881,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":4047,"title":{},"body":{"changelog.html":{}}}],["37",{"_index":4010,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":4159,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":4011,"title":{},"body":{"changelog.html":{}}}],["38f1dc9",{"_index":3811,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":4354,"title":{},"body":{"changelog.html":{}}}],["39bdd16",{"_index":3908,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":4009,"title":{},"body":{"changelog.html":{}}}],["3d2b7eb",{"_index":3697,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":1892,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":4033,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":4031,"title":{},"body":{"changelog.html":{}}}],["42211",{"_index":694,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":1352,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":676,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":3488,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["43",{"_index":4036,"title":{},"body":{"changelog.html":{}}}],["43311",{"_index":1473,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["43311})@column({type",{"_index":1453,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["436f2db",{"_index":3745,"title":{},"body":{"changelog.html":{}}}],["4456742596",{"_index":1192,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["4552c66",{"_index":4222,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":4075,"title":{},"body":{"changelog.html":{}}}],["475e5dd",{"_index":3853,"title":{},"body":{"changelog.html":{}}}],["47dc78b",{"_index":3700,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":969,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":965,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["4b264d5",{"_index":4078,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":4084,"title":{},"body":{"changelog.html":{}}}],["4deaadd",{"_index":3800,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1245,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":3481,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":2938,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":602,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1010,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5238f58",{"_index":3724,"title":{},"body":{"changelog.html":{}}}],["5385049",{"_index":4016,"title":{},"body":{"changelog.html":{}}}],["544673a",{"_index":3805,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":4001,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":4065,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":3993,"title":{},"body":{"changelog.html":{}}}],["5736810",{"_index":695,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":679,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["58",{"_index":3995,"title":{},"body":{"changelog.html":{}}}],["58540e7",{"_index":3873,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":4398,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":4143,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":4115,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":3950,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":3954,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":4393,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":4265,"title":{},"body":{"changelog.html":{}}}],["5ee770b",{"_index":3842,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":4351,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":3943,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":1173,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["607cf5d",{"_index":4367,"title":{},"body":{"changelog.html":{}}}],["60].map(async",{"_index":2170,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["611b923",{"_index":3816,"title":{},"body":{"changelog.html":{}}}],["612",{"_index":1232,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["612})@column('integer",{"_index":1207,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["618225f",{"_index":4151,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":4169,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":4362,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":4225,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":3982,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":4375,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":4046,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":4269,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":3984,"title":{},"body":{"changelog.html":{}}}],["648dbeb",{"_index":3996,"title":{},"body":{"changelog.html":{}}}],["64d869f",{"_index":3707,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":3978,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["66fb61e",{"_index":3879,"title":{},"body":{"changelog.html":{}}}],["672ea80",{"_index":3752,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":4234,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":3973,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":4191,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":4198,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":4054,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":3947,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":4242,"title":{},"body":{"changelog.html":{}}}],["6df9486",{"_index":3860,"title":{},"body":{"changelog.html":{}}}],["6fa4a7d",{"_index":3687,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1751,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["70a6e7b",{"_index":3730,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":956,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["71359796})@column",{"_index":1254,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["71359796})@column({type",{"_index":930,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlightReaction.html":{}}}],["71359796})@primarycolumn({type",{"_index":1120,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["71a164d",{"_index":3635,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":3968,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":4179,"title":{},"body":{"changelog.html":{}}}],["7338f09",{"_index":3714,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":4389,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":3964,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":4050,"title":{},"body":{"changelog.html":{}}}],["762c1cb",{"_index":3798,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":3957,"title":{},"body":{"changelog.html":{}}}],["7728bc8",{"_index":3847,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":4312,"title":{},"body":{"changelog.html":{}}}],["78133",{"_index":696,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@column({type",{"_index":1007,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":681,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":722,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["79bf61d",{"_index":4262,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":4248,"title":{},"body":{"changelog.html":{}}}],["7c846ec",{"_index":3711,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":3991,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":4401,"title":{},"body":{"changelog.html":{}}}],["7e2756b",{"_index":3826,"title":{},"body":{"changelog.html":{}}}],["7e29c6e",{"_index":3728,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":4303,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":4339,"title":{},"body":{"changelog.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1743,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["8080:3001",{"_index":4512,"title":{},"body":{"index.html":{}}}],["80a866f",{"_index":3761,"title":{},"body":{"changelog.html":{}}}],["81",{"_index":3953,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":4349,"title":{},"body":{"changelog.html":{}}}],["828b7d2",{"_index":3808,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":3938,"title":{},"body":{"changelog.html":{}}}],["83fe57d",{"_index":3772,"title":{},"body":{"changelog.html":{}}}],["85a7549",{"_index":3900,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":4181,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":4163,"title":{},"body":{"changelog.html":{}}}],["86e013f",{"_index":3888,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":3933,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":3934,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":4089,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":4278,"title":{},"body":{"changelog.html":{}}}],["88e08d2",{"_index":3683,"title":{},"body":{"changelog.html":{}}}],["88e0adc",{"_index":3778,"title":{},"body":{"changelog.html":{}}}],["89",{"_index":3893,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":4187,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":3987,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":4335,"title":{},"body":{"changelog.html":{}}}],["8bfda45",{"_index":3896,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":3944,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":2133,"title":{},"body":{"classes/PageOptionsDto.html":{},"changelog.html":{}}}],["90'])@isint()@isoptional",{"_index":618,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["911df68",{"_index":4310,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":3939,"title":{},"body":{"changelog.html":{}}}],["94331ba",{"_index":3824,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":4167,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":4315,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":4104,"title":{},"body":{"changelog.html":{}}}],["971adeb",{"_index":3758,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":4012,"title":{},"body":{"changelog.html":{}}}],["98980b0",{"_index":3870,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":4019,"title":{},"body":{"changelog.html":{}}}],["9b12042",{"_index":3828,"title":{},"body":{"changelog.html":{}}}],["9bee970",{"_index":3736,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":3945,"title":{},"body":{"changelog.html":{}}}],["9fc3be7",{"_index":3776,"title":{},"body":{"changelog.html":{}}}],["_data",{"_index":4738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_stripe",{"_index":2669,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":1559,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["a057e0e",{"_index":3768,"title":{},"body":{"changelog.html":{}}}],["a08abfd",{"_index":4146,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":4355,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":4032,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":4261,"title":{},"body":{"changelog.html":{}}}],["a398b89",{"_index":3643,"title":{},"body":{"changelog.html":{}}}],["a5a4789",{"_index":3876,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":4227,"title":{},"body":{"changelog.html":{}}}],["abb24de",{"_index":3698,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":4038,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":4579,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":4373,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":4371,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":2918,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":2916,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":1364,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1109,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1104,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":3363,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1053,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["accessing",{"_index":4311,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":2119,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{}}}],["accessroles",{"_index":1947,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["action",{"_index":3709,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["actions",{"_index":3705,"title":{},"body":{"changelog.html":{}}}],["active",{"_index":1347,"title":{},"body":{"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":1346,"title":{},"body":{"entities/DbSubscription.html":{}}}],["adapter",{"_index":4022,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":2976,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"index.html":{}}}],["addcustomer",{"_index":823,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":2672,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":830,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1158,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["addgroupby(\"emoji_id",{"_index":3302,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addhighlightforuser",{"_index":3165,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":3148,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":3157,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":2021,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":2028,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":3149,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":3164,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":3371,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":1931,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":3315,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":1940,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":1995,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2000,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":3952,"title":{},"body":{"changelog.html":{}}}],["additions",{"_index":1135,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addmemberforinsight",{"_index":3317,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":655,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":657,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":2260,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":2449,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":2454,"title":{},"body":{"injectables/RepoService.html":{}}}],["adds",{"_index":2481,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect",{"_index":1686,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["addselect(\"count(emoji_id",{"_index":3299,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":1971,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":3612,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":2266,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":2268,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":3110,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"users.login",{"_index":3257,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"users.name",{"_index":1969,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect(`${interval}::integer",{"_index":2211,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addselect(qb",{"_index":2422,"title":{},"body":{"injectables/RepoService.html":{}}}],["addusercollaboration",{"_index":2969,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":2973,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":3016,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":3086,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":3093,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":3434,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":3441,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":3220,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":3231,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":3435,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(userid",{"_index":3443,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":3221,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":3233,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addusernotification",{"_index":3436,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":3445,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":3496,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":3500,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":4066,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":4357,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":2911,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":2947,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":4521,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":4154,"title":{},"body":{"changelog.html":{}}}],["ae44652",{"_index":3764,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":4057,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":4224,"title":{},"body":{"changelog.html":{}}}],["afde490",{"_index":3856,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":4296,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":2404,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":4631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":2408,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":2410,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":2409,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":2411,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_prs",{"_index":1105,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allof",{"_index":4669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":3669,"title":{},"body":{"changelog.html":{}}}],["along",{"_index":4106,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":3872,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":3789,"title":{},"body":{"changelog.html":{}}}],["alpha.10",{"_index":3921,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":3787,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":3786,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":3928,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":3927,"title":{},"body":{"changelog.html":{}}}],["alpha.6",{"_index":3926,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":3925,"title":{},"body":{"changelog.html":{}}}],["alpha.8",{"_index":3924,"title":{},"body":{"changelog.html":{}}}],["alpha.9",{"_index":3922,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":2469,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":4571,"title":{},"body":{"license.html":{}}}],["ands",{"_index":1563,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere(\"insight_members.access",{"_index":1968,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":1967,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":2657,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":2629,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":2823,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":3614,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":3107,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":3106,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":3303,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":3301,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlights.user_id",{"_index":3260,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_notifications.read_at",{"_index":3459,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":3458,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(`now",{"_index":2265,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repos\".\"topics",{"_index":2340,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":2353,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":465,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["api",{"_index":3948,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":4424,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":4458,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":4513,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["api_host",{"_index":4474,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":555,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apibody",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":2487,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidocs",{"_index":4216,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":4667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":948,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1210,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":915,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":926,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":987,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":4711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":949,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":890,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional",{"_index":950,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":904,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apipaginatedresponse",{"_index":1519,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":2289,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":1528,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":1609,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":3380,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":3340,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":2163,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":2315,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":2995,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":1859,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":1862,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apiproperty",{"_index":691,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({description",{"_index":672,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["apiproperty({type",{"_index":2084,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":620,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":1719,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":615,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":597,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":603,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":1716,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apitags",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apitags(\"authentication",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"emojis",{"_index":1527,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":1602,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":1798,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":1857,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":1922,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"pull",{"_index":559,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":2287,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":2742,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":2994,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apitoken",{"_index":1700,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":1914,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":3336,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":2680,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":4482,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["appearing",{"_index":4172,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":4480,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":496,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["applies",{"_index":2328,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["apply(httploggermiddleware",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["applydecorators",{"_index":4666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applyquerybuilderfilters",{"_index":2324,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":2326,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1285,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":4108,"title":{},"body":{"changelog.html":{}}}],["apt",{"_index":525,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1224,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":4604,"title":{},"body":{"license.html":{}}}],["array",{"_index":712,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":3383,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":4324,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":1543,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":4528,"title":{},"body":{"index.html":{}}}],["assign",{"_index":4317,"title":{},"body":{"changelog.html":{}}}],["assignee",{"_index":1161,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1136,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1137,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":4562,"title":{},"body":{"license.html":{}}}],["associating",{"_index":3992,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":4379,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":4100,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":429,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/dtos/user",{"_index":3547,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":556,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["auth/supabase.user.decorator",{"_index":1915,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["authcontroller",{"_index":242,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":2876,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":2879,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["authguard",{"_index":2873,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":2874,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1166,"title":{},"body":{"entities/DbPullRequest.html":{},"properties.html":{}}}],["author_avatar",{"_index":1138,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_login",{"_index":1139,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["authorization",{"_index":493,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["authorized",{"_index":1904,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":4595,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":2445,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":2446,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":4610,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1162,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["await",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["aws:main",{"_index":1239,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1221,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["b0169e7",{"_index":4117,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":4035,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":4258,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":4292,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":4093,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":4156,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":4377,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":4252,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":4361,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":4325,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":4160,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":4007,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":3965,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":4109,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":4283,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":1124,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":4616,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":3713,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":4140,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":4218,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":554,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bag",{"_index":3723,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":548,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["baseentity",{"_index":941,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":2390,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(range",{"_index":2395,"title":{},"body":{"injectables/RepoService.html":{}}}],["baseline",{"_index":4352,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":824,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":4273,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":4382,"title":{},"body":{"changelog.html":{}}}],["bb26d27",{"_index":3749,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":4281,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":3979,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":4343,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":3958,"title":{},"body":{"changelog.html":{}}}],["bdougie",{"_index":753,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column({type",{"_index":1398,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["bdougie'})@isstring",{"_index":750,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2230,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["be5fae7",{"_index":3904,"title":{},"body":{"changelog.html":{}}}],["bearer",{"_index":494,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["beautiful",{"_index":4017,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":3796,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":4489,"title":{},"body":{"index.html":{}}}],["below",{"_index":462,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["beneficial",{"_index":4491,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":3636,"title":{},"body":{"changelog.html":{}}}],["beta.10",{"_index":4208,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":4207,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":4206,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":4205,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":4204,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":4203,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":4202,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":4201,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":4200,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":4199,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":3628,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.3",{"_index":3785,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":3784,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":3783,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":3782,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":3781,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":3780,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":3779,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":4459,"title":{},"body":{"index.html":{}}}],["better",{"_index":4048,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":4040,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":902,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":2686,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":4463,"title":{},"body":{"index.html":{}}}],["bio",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["blocking",{"_index":3838,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["body.interests",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":704,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":4435,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["boxes",{"_index":1779,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":923,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":4519,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":4113,"title":{},"body":{"changelog.html":{}}}],["brian",{"_index":1073,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":4608,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4606,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1774,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["bugs",{"_index":4625,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3688,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":1959,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["building",{"_index":3663,"title":{},"body":{"changelog.html":{}}}],["builds",{"_index":4509,"title":{},"body":{"index.html":{}}}],["business",{"_index":4497,"title":{},"body":{"index.html":{}}}],["c",{"_index":4554,"title":{},"body":{"license.html":{}}}],["c000984",{"_index":3916,"title":{},"body":{"changelog.html":{}}}],["c013b70",{"_index":4290,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":4294,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":4347,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":4002,"title":{},"body":{"changelog.html":{}}}],["c54dcd9",{"_index":3839,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":3940,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":4157,"title":{},"body":{"changelog.html":{}}}],["c8dab92",{"_index":3865,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca9a69c",{"_index":3890,"title":{},"body":{"changelog.html":{}}}],["cae5dbd",{"_index":3831,"title":{},"body":{"changelog.html":{}}}],["canaccess",{"_index":3342,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":1695,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":1697,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":1327,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":1315,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":1316,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":2693,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":1331,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":1317,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":3347,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":1932,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":1945,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["capabilities",{"_index":4008,"title":{},"body":{"changelog.html":{}}}],["capturing",{"_index":3901,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":2685,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":3875,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":4490,"title":{},"body":{"index.html":{}}}],["catch",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":4358,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":4391,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":4300,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":4327,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":4231,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":3994,"title":{},"body":{"changelog.html":{}}}],["certificate",{"_index":4686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cfe2a69",{"_index":3886,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":4197,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":1172,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":1140,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changelog",{"_index":3622,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":3625,"title":{},"body":{"changelog.html":{}}}],["channel",{"_index":4546,"title":{},"body":{"index.html":{}}}],["character",{"_index":894,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":464,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":4559,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":432,"title":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["check",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":3513,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":3526,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkout",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":2738,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":2797,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":2802,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":2799,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":2800,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":1948,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":3130,"title":{},"body":{"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["chinese",{"_index":1740,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":439,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["chore",{"_index":1772,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ci",{"_index":3640,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":4481,"title":{},"body":{"index.html":{}}}],["claim",{"_index":4598,"title":{},"body":{"license.html":{}}}],["class",{"_index":231,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["classes",{"_index":583,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"overview.html":{}}}],["clc",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":1894,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":882,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":1891,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":4672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":4152,"title":{},"body":{"changelog.html":{}}}],["cli_split_kwargs",{"_index":1241,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1219,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":4529,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":1881,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":4618,"title":{},"body":{"properties.html":{}}}],["close",{"_index":1175,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1234,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1217,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":1141,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closes",{"_index":3715,"title":{},"body":{"changelog.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":570,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":571,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":573,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":572,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_customermodule",{"_index":816,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":817,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":818,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":1530,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":1531,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":1633,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":1635,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":1636,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":1634,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":1866,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":1867,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":2009,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":2010,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":2012,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":2011,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":2055,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":2056,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":2057,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":2219,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":2222,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":2221,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":2220,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":2318,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":2320,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":2319,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":2365,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":2367,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":2366,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":2368,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":2637,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":2640,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":2638,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":2639,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":2607,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":2609,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":2608,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":2610,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":2663,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":2665,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":2664,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":2697,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":2698,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":2699,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2715,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":2716,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2717,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":2803,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":2806,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":2805,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":2804,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":3414,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":3416,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":3415,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":3417,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":3489,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":3490,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_providers",{"_index":3491,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":3593,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":3596,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":3595,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":3594,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":2434,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(count(\"user_notifications\".\"id",{"_index":3550,"title":{},"body":{"injectables/UserService.html":{}}}],["code",{"_index":447,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":550,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["code'})@column({type",{"_index":1040,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":475,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["codename",{"_index":4644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":540,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["coderefactorsuggestionservice",{"_index":451,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["collaborate",{"_index":746,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":1371,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":744,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":2977,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":2988,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":3423,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":2967,"title":{},"body":{"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["collaboration.controller.ts:116",{"_index":2985,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:44",{"_index":2982,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:62",{"_index":2978,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:89",{"_index":2989,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":2992,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":743,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"coverage.html":{}}}],["collaboration.dto.ts:11",{"_index":751,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":2917,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":749,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":1359,"title":{},"body":{"entities/DbUserCollaboration.html":{},"coverage.html":{}}}],["collaboration.entity.ts:108",{"_index":1367,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:118",{"_index":1374,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:128",{"_index":1365,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:26",{"_index":1368,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:33",{"_index":1383,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:40",{"_index":1377,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:48",{"_index":1381,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:56",{"_index":1376,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:67",{"_index":1373,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:78",{"_index":1378,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:88",{"_index":1366,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:98",{"_index":1379,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":2991,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":3011,"title":{},"body":{"injectables/UserCollaborationService.html":{},"coverage.html":{}}}],["collaboration.service.ts:12",{"_index":3014,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:18",{"_index":3018,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:24",{"_index":3020,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:38",{"_index":3017,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:42",{"_index":3023,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:46",{"_index":3022,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:50",{"_index":3019,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":3004,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":1360,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":2980,"title":{},"body":{"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["collection",{"_index":2101,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["color",{"_index":1195,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorize",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":940,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":1418,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1236,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1233,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1235,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1200,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["columns",{"_index":1441,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":745,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":4486,"title":{},"body":{"index.html":{}}}],["comment",{"_index":683,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["comments",{"_index":1142,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["commit",{"_index":1757,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["commitmessages",{"_index":1756,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["committing",{"_index":4522,"title":{},"body":{"index.html":{}}}],["common",{"_index":3882,"title":{},"body":{"changelog.html":{}}}],["common/constants/order",{"_index":644,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":1520,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/filter",{"_index":2161,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":624,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["common/dtos/page.dto",{"_index":643,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["common/filters/repo",{"_index":2198,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["community",{"_index":4539,"title":{},"body":{"index.html":{}}}],["company",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":4527,"title":{},"body":{"index.html":{}}}],["completely",{"_index":3858,"title":{},"body":{"changelog.html":{}}}],["completing",{"_index":4094,"title":{},"body":{"changelog.html":{}}}],["completionsurl",{"_index":4718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":4619,"title":{},"body":{"properties.html":{}}}],["component",{"_index":4374,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["computed",{"_index":1114,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["concurrency",{"_index":4266,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":4578,"title":{},"body":{"license.html":{}}}],["config",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":4353,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":2835,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["conflict",{"_index":3744,"title":{},"body":{"changelog.html":{}}}],["conflictexception",{"_index":2624,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":3349,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":2632,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connected_at",{"_index":3572,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["connection",{"_index":1496,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["connections",{"_index":3906,"title":{},"body":{"changelog.html":{}}}],["connector",{"_index":3859,"title":{},"body":{"changelog.html":{}}}],["console.error(\"openai",{"_index":518,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.log",{"_index":4155,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":4026,"title":{},"body":{"changelog.html":{}}}],["consolelogger",{"_index":784,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":791,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":2128,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(configservice",{"_index":564,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":790,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":633,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":827,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":2077,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":1535,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":1645,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":1936,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":1997,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":2025,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":2064,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":855,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(prinsightrepository",{"_index":2187,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(pullrequestrepository",{"_index":2248,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(reporepository",{"_index":2392,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":2646,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":2616,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":2812,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":3602,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":2706,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":2095,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":3013,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":3089,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":3227,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(usernotificationrepository",{"_index":3438,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userreporepository",{"_index":3497,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":3522,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["contact",{"_index":4470,"title":{},"body":{"index.html":{}}}],["contain",{"_index":2941,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":4229,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["content",{"_index":450,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["contents",{"_index":4287,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":222,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":4739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":3701,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":4601,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":4534,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":900,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":4532,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":907,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":577,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":578,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":8,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":593,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":596,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":582,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":636,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":953,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":580,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":2272,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:31",{"_index":2283,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:48",{"_index":2280,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":2421,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":2380,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":574,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":629,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.tolowercase",{"_index":2264,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributors",{"_index":1988,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":241,"title":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"emojis",{"_index":1526,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":1601,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":1797,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":1856,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":1921,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"prs",{"_index":558,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":2286,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":2743,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":2993,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":3079,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":3196,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":3338,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":3431,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"users",{"_index":3060,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllers",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CodeRefactorSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":4541,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":3840,"title":{},"body":{"changelog.html":{}}}],["cool",{"_index":747,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":4573,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4286,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":4553,"title":{},"body":{"license.html":{}}}],["corners",{"_index":1778,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["correct",{"_index":3712,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":4087,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["count",{"_index":627,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":4176,"title":{},"body":{"changelog.html":{}}}],["countqueryresult",{"_index":3282,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["couple",{"_index":4524,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":4406,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":3406,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["create(createendorsementdto",{"_index":1649,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createcheckoutsession",{"_index":2670,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":2674,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":3073,"title":{},"body":{"controllers/UserEndorsementController.html":{},"changelog.html":{}}}],["created_at",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":946,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":1546,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":1554,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":664,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["createhighlightdto",{"_index":3168,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":699,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":3386,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":3382,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":3387,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":2906,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":2905,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":2907,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":726,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":3356,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createlog",{"_index":2063,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":2067,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":734,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":4737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"repos",{"_index":2433,"title":{},"body":{"injectables/RepoService.html":{}}}],["creates",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":741,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["createusercollaborationdto.message",{"_index":3001,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["createuserhighlightdto",{"_index":757,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":3967,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":908,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["creator",{"_index":674,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":667,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["ctx",{"_index":1702,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":1704,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1334,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["current_period_end_at",{"_index":1318,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":1319,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentrepoids",{"_index":3404,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find(id",{"_index":3409,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":3392,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter(repo",{"_index":3396,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map(cr",{"_index":3405,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":2060,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":820,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":821,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":2739,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":2741,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":2740,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":2745,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":9,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":829,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":967,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":335,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":781,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":4506,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":4150,"title":{},"body":{"changelog.html":{}}}],["d08173f",{"_index":3898,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":4165,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":4271,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":4096,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":4194,"title":{},"body":{"changelog.html":{}}}],["d3afb4b",{"_index":3694,"title":{},"body":{"changelog.html":{}}}],["d3cb75a",{"_index":3849,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":3949,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":4217,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":4599,"title":{},"body":{"license.html":{}}}],["data",{"_index":510,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["data.choices[0]?.message.content",{"_index":512,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["database",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":103,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":765,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":4734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(confirmed_at",{"_index":3573,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.created_at",{"_index":3569,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.updated_at",{"_index":3570,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":3293,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":3203,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":1885,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["day",{"_index":1106,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{},"changelog.html":{}}}],["days",{"_index":616,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPRInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["db",{"_index":1463,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["dbapiconfig",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbc66f3",{"_index":4149,"title":{},"body":{"changelog.html":{}}}],["dbcontribution",{"_index":83,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":2279,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":115,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":141,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":1516,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":156,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbendorsement})@apibody({type",{"_index":1557,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":1590,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbinsight",{"_index":106,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":139,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":3319,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":108,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":1902,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":125,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":146,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":130,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":3052,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":91,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":2509,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":87,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":2467,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":89,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":2547,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":85,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":2583,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":2305,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbsubscription",{"_index":123,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbuser",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbusercollaboration",{"_index":153,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":2975,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":133,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":3284,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":143,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":1847,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":1445,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":3182,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":3043,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbusernotification",{"_index":151,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbusernotification})@apinotfoundresponse({description",{"_index":3429,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["dbuserrepo",{"_index":114,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":149,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":137,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":3136,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd",{"_index":2210,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["dd5e668",{"_index":4212,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":4043,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":4000,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":4563,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":4605,"title":{},"body":{"license.html":{}}}],["debug",{"_index":786,"title":{},"body":{"injectables/CustomLogger.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":794,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo",{"_index":2337,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":3269,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorator",{"_index":4370,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{}}}],["default",{"_index":594,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":2750,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":4685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["delete",{"_index":1593,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":1925,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":3213,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":2495,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":2532,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":2569,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":2604,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":2497,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":2535,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":2571,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":2606,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":3143,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id",{"_index":1631,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":3367,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":1908,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3173,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2464,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2507,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2545,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2581,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2473,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2513,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2550,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2586,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3133,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":1561,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":3329,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["deleted",{"_index":1181,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":889,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["deletedatecolumn",{"_index":945,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":1547,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":1560,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":3150,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":3169,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":3151,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":3172,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":1564,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":3222,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":3237,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":3223,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":3239,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":1023,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["deletions",{"_index":1143,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["demo",{"_index":4267,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":3834,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":3770,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":4214,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deprecated",{"_index":3704,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":3699,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":1670,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":2227,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":2173,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"coverage.html":{}}}],["description.controller.ts:24",{"_index":2177,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":522,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":1755,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["description.dto.ts:13",{"_index":1760,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":1764,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":1770,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":1763,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":1762,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:62",{"_index":1759,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":2178,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":520,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["description.service.ts:10",{"_index":2181,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:13",{"_index":2183,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:26",{"_index":2182,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":1726,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":4617,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":3999,"title":{},"body":{"changelog.html":{}}}],["developer",{"_index":4276,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":4105,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["df56c4f",{"_index":3974,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":3851,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagrams",{"_index":3867,"title":{},"body":{"changelog.html":{}}}],["diff",{"_index":534,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":529,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["digital",{"_index":3679,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":645,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":4448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":532,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["disable",{"_index":483,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{}}}],["discord.find",{"_index":4542,"title":{},"body":{"index.html":{}}}],["disk",{"_index":1800,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":4658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":4661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":1796,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":977,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":2956,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":971,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct(true",{"_index":3272,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["distribute",{"_index":4569,"title":{},"body":{"license.html":{}}}],["dit",{"_index":4514,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":4681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":698,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["doc'})@column({type",{"_index":1014,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":689,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":4256,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":4468,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":3739,"title":{},"body":{"changelog.html":{}}}],["docr",{"_index":4102,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":3942,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":4220,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":4029,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":3626,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":4260,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["dot",{"_index":4614,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1080,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1074,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["down",{"_index":4123,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":2614,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":2620,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":2644,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":2650,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":2501,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":2506,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":2502,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":2512,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":2458,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":2463,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":2459,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":2472,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":2810,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":2816,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":2539,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":2544,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":2540,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":2549,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":3600,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":3606,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":2575,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":2580,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":2576,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":2585,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1144,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["dry",{"_index":4263,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dto/create",{"_index":1596,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos",{"_index":4183,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":648,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":446,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/filter",{"_index":2332,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["dtos/highlight",{"_index":1851,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2038,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/pull",{"_index":2159,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":2312,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/update",{"_index":1916,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["duration",{"_index":1883,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":4421,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":4518,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1738,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e043912",{"_index":3878,"title":{},"body":{"changelog.html":{}}}],["e0d38ca",{"_index":4135,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":4330,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":4274,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":3960,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":4127,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":4027,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":4186,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":4086,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":4380,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":2087,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":4221,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":4247,"title":{},"body":{"changelog.html":{}}}],["ed28e07",{"_index":3912,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":4132,"title":{},"body":{"changelog.html":{}}}],["edit",{"_index":2910,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":3592,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":976,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"changelog.html":{}}}],["emoji.controller",{"_index":1533,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":1524,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":1422,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":1508,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":3158,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":10,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":1537,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":996,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":1523,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["encounter",{"_index":4488,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":4533,"title":{},"body":{"index.html":{}}}],["end",{"_index":472,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbSubscription.html":{}}}],["ended_at",{"_index":1320,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":673,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":1638,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":3069,"title":{},"body":{"controllers/UserEndorsementController.html":{},"coverage.html":{}}}],["endorsement.controller.ts:25",{"_index":3074,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:41",{"_index":3077,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":1597,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":666,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["endorsement.dto.ts:11",{"_index":677,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":680,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:26",{"_index":682,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:34",{"_index":685,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:41",{"_index":688,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:48",{"_index":690,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":1595,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":3078,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":1544,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"coverage.html":{}}}],["endorsementmodule",{"_index":11,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":1647,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1016,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":1676,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":1674,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":1684,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":1594,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":4663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":1599,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["endpoint",{"_index":3646,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":1802,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":1786,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":4399,"title":{},"body":{"changelog.html":{}}}],["english",{"_index":1731,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1732,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["entire",{"_index":530,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"changelog.html":{},"overview.html":{}}}],["entities.map(notification",{"_index":3460,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["entities/emoji.entity",{"_index":1525,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":1598,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/insight",{"_index":1957,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":1918,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":2156,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":2311,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/user",{"_index":1852,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":887,"title":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":626,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":4444,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":598,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":4030,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":3905,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":4457,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":4733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1226,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["error",{"_index":515,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error(message",{"_index":796,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":514,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["error).tostring",{"_index":2778,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":519,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":3737,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["escape",{"_index":3266,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":482,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["etl",{"_index":3891,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":2787,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":2792,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":2796,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everywhere",{"_index":4018,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":675,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["exception/responses",{"_index":4061,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["executioncontext",{"_index":1698,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":3208,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":3160,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":2465,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["existinguser",{"_index":3350,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":3355,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":3354,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":2749,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["experiment",{"_index":3689,"title":{},"body":{"changelog.html":{}}}],["experimental",{"_index":3729,"title":{},"body":{"changelog.html":{}}}],["explain",{"_index":4402,"title":{},"body":{"changelog.html":{}}}],["explore",{"_index":4703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["exports",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":4299,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":1880,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":4270,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":587,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":3936,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":2885,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2897,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":2896,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":4025,"title":{},"body":{"changelog.html":{}}}],["f0304d4",{"_index":4210,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":4161,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":4189,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":4060,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":4175,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":4307,"title":{},"body":{"changelog.html":{}}}],["f57c5b6",{"_index":3868,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":4042,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":4069,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":4120,"title":{},"body":{"changelog.html":{}}}],["f73f891",{"_index":3743,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":4076,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":4128,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":4122,"title":{},"body":{"changelog.html":{}}}],["fad79b1",{"_index":4110,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{}}}],["false})@column('boolean",{"_index":1183,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":1031,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["false})@column({type",{"_index":1402,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":707,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":2926,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":3998,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":1030,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":4024,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":4062,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":4366,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":4112,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":4318,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":3932,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":4126,"title":{},"body":{"changelog.html":{}}}],["features",{"_index":3638,"title":{},"body":{"changelog.html":{}}}],["fed79a1",{"_index":3771,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":4059,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":442,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["fetcher",{"_index":486,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":491,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["fetches",{"_index":3180,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["fetching",{"_index":3717,"title":{},"body":{"changelog.html":{}}}],["ff434b5",{"_index":3674,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":3732,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":3937,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1171,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":1710,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["filter.module",{"_index":2225,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":2322,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":2199,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":2323,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":2330,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:79",{"_index":2327,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":2331,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtering",{"_index":3883,"title":{},"body":{"changelog.html":{}}}],["filteroptionsdto",{"_index":1708,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":2154,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["filters.foreach(([sql",{"_index":2354,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":2345,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([\"repos.stars",{"_index":2343,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`:topic",{"_index":2339,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=lower(:repo",{"_index":2336,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`now",{"_index":2206,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`regexp_replace(regexp_replace(user_highlights.url",{"_index":3267,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["filters.push([`repos.id",{"_index":2334,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`user_highlights.user_id",{"_index":3263,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["filterservice",{"_index":2249,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":2141,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["findall",{"_index":632,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(pageoptionsdto",{"_index":637,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbycontributor",{"_index":2246,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":2254,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":1640,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":1652,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":2273,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":2275,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrecipientuserid",{"_index":1641,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":1654,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":2274,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":2281,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoowneroruser",{"_index":1642,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":1656,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":1548,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":1567,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":2022,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":2031,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":3449,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["findallemojis",{"_index":1510,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":1511,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":1549,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":1573,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":1550,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":1575,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":1619,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":1659,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallhighlightreactions",{"_index":3224,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":3243,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":1832,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":1835,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":1833,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":1839,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":3036,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":3040,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":1933,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":1950,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":3313,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":3322,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallreposwithfilters",{"_index":2297,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":2302,"title":{},"body":{"controllers/RepoController.html":{}}}],["findalltopreposbyusername",{"_index":3037,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":3045,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":2970,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":2979,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercreatedendorsements",{"_index":1551,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":3071,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(username",{"_index":1579,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":1552,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":3075,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(username",{"_index":1583,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":2503,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":2515,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":2460,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":2475,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":2541,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":2552,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":2577,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":2588,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":2247,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":2256,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbycustomerid",{"_index":825,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":834,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":826,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":836,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcontributorpullrequests",{"_index":3038,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":3049,"title":{},"body":{"controllers/UserController.html":{}}}],["findendorsementbyid",{"_index":1553,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":1586,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findinsightpagebyid",{"_index":1898,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":1900,"title":{},"body":{"controllers/InsightController.html":{}}}],["findonebyemail",{"_index":3514,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":3528,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1643,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1661,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":2298,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(owner",{"_index":2307,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyusername",{"_index":3515,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":3532,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":3039,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":3054,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":3056,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":3225,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":3248,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["finds",{"_index":1562,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["finduserfollowerbyid",{"_index":3087,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":3097,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["first",{"_index":761,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["fitness",{"_index":4591,"title":{},"body":{"license.html":{}}}],["fix",{"_index":3703,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fix(cli",{"_index":1223,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixed",{"_index":1773,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fixes",{"_index":3631,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":1028,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":4329,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":4500,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1485,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":3421,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":3119,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:33",{"_index":3131,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:51",{"_index":3127,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:73",{"_index":3137,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":3138,"title":{},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":3085,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":3091,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":3096,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:25",{"_index":3099,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:41",{"_index":3095,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:70",{"_index":3101,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":1457,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["followeduserid",{"_index":3094,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":1488,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followeruserid",{"_index":3098,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":3108,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":3112,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":3109,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":1484,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["follows",{"_index":2529,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3181,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":2520,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":1483,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:18",{"_index":1490,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:25",{"_index":1492,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:32",{"_index":1489,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:42",{"_index":1486,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:52",{"_index":1491,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:59",{"_index":1487,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":3469,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":3472,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":3125,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":3120,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":3123,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":3245,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["force",{"_index":3832,"title":{},"body":{"changelog.html":{}}}],["formal",{"_index":1769,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1765,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1117,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":4520,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":3880,"title":{},"body":{"changelog.html":{}}}],["forroutes(`v1",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":1517,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":2468,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":1903,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":2857,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":4558,"title":{},"body":{"license.html":{}}}],["french",{"_index":1734,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["from(`(${querybuilder.getquery",{"_index":3278,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["from(dbendorsement",{"_index":1683,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(entity",{"_index":2413,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user_id",{"_index":1449,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1084,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":723,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"changelog.html":{}}}],["fullname",{"_index":2359,"title":{},"body":{"classes/RepoInfo.html":{},"changelog.html":{}}}],["function",{"_index":4071,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":4124,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":4454,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":4576,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":4052,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":455,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["generatecoderefactor",{"_index":546,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":445,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["generated",{"_index":4090,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generatedescription",{"_index":480,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":566,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprdescription",{"_index":543,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":544,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":2174,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":452,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":568,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":521,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"interfaces/ChatResponse-1.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["generates",{"_index":547,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generation",{"_index":3852,"title":{},"body":{"changelog.html":{}}}],["generator",{"_index":3854,"title":{},"body":{"changelog.html":{}}}],["german",{"_index":1735,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["get(\"/:id",{"_index":1923,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/contributions",{"_index":2288,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/reactions",{"_index":1864,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:owner/:repo",{"_index":2314,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":2293,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:username",{"_index":3061,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":3139,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":3064,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":3062,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":3066,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/created",{"_index":3080,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/following",{"_index":3217,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":3218,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":2167,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":1858,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":2527,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":2491,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":2565,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":2600,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/received",{"_index":3082,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":1614,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":1618,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":1611,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":1861,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/search",{"_index":2165,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/service",{"_index":1801,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/user/:username/created",{"_index":1625,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":1629,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":1814,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":1622,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":3339,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1512,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":1901,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":2282,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":1845,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":2308,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":2276,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":3055,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3129,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":3041,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":3050,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":3046,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3072,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":3185,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":3179,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":2140,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":1841,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2516,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2476,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2553,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2589,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3076,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":1576,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":1568,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":1836,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":2151,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":1784,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":1580,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":1584,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":1788,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":1587,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":3323,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["getallhighlightreactions",{"_index":1834,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":1844,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":3152,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":3176,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getdomain",{"_index":4427,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":4705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":4700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":4702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":4704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":4701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfollowinghighlightrepos",{"_index":3153,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":3178,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":3154,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":3184,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowstatusbyusername",{"_index":3121,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":3128,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":2185,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":2192,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getpullrequestinsights",{"_index":2136,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":2139,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":2325,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":2329,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getschemapath(model",{"_index":4671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":4670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2125,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getstripe",{"_index":2676,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":3620,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["getuserhighlight",{"_index":3155,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":3187,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getusernotifications",{"_index":3426,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":3427,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["ghcr.io/open",{"_index":4515,"title":{},"body":{"index.html":{}}}],["git",{"_index":3708,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/open",{"_index":4627,"title":{},"body":{"properties.html":{}}}],["github",{"_index":474,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":3563,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com",{"_index":3275,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["github.com/open",{"_index":773,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":3571,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["given",{"_index":457,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["globals",{"_index":3682,"title":{},"body":{"changelog.html":{}}}],["goes",{"_index":1123,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["gpt",{"_index":4715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":4557,"title":{},"body":{"license.html":{}}}],["graph",{"_index":4609,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"users.login",{"_index":1687,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":1620,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":1691,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":2490,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":1692,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["guide",{"_index":4536,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":4537,"title":{},"body":{"index.html":{}}}],["hack",{"_index":3693,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":3557,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":4130,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":2724,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":2726,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hasnextpage",{"_index":2092,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":2093,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":4111,"title":{},"body":{"changelog.html":{}}}],["headers",{"_index":492,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["headers(\"x",{"_index":1605,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":1782,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":1828,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1794,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1791,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1780,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":12,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":1785,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":1789,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":733,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1067,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":730,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":4556,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1369,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["hidden",{"_index":4074,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":4088,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":3166,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":1846,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":1869,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":3146,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:116",{"_index":3177,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:134",{"_index":3162,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:157",{"_index":3175,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:175",{"_index":3186,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:191",{"_index":3183,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:44",{"_index":3167,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:59",{"_index":3188,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:76",{"_index":3191,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:97",{"_index":3171,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":3204,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":3193,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":758,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":775,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":772,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":763,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":770,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1388,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:104",{"_index":1407,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:115",{"_index":1393,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:126",{"_index":1400,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:137",{"_index":1399,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:145",{"_index":1414,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:153",{"_index":1406,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:29",{"_index":1397,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:36",{"_index":1416,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:43",{"_index":1412,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:50",{"_index":1409,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:60",{"_index":1396,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:70",{"_index":1403,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:80",{"_index":1391,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:90",{"_index":1410,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:97",{"_index":1392,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":3290,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":3292,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":3291,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":3289,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":3212,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":3194,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight/entities/user",{"_index":3195,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/highlight.module",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_id",{"_index":1405,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":4453,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":1829,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightid",{"_index":3163,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":13,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":1840,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":988,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":989,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":1420,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":1404,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":1831,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["highlights.service",{"_index":1855,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":3219,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:132",{"_index":3242,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:15",{"_index":3229,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:154",{"_index":3232,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:166",{"_index":3251,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:170",{"_index":3238,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:174",{"_index":3244,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:195",{"_index":3249,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:212",{"_index":3235,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:24",{"_index":3236,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:243",{"_index":3240,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:30",{"_index":3247,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:52",{"_index":3241,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:96",{"_index":3246,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":3234,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":4596,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":4623,"title":{},"body":{"properties.html":{}}}],["host",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1703,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":4133,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":3268,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":1792,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":100,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1193,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1243,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1167,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://github.com/open",{"_index":686,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":2843,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":999,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":992,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":2869,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":2949,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":2854,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":2931,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpstatus",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1115,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1768,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":1565,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":1589,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":918,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":3560,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter(identity",{"_index":3561,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":3562,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":3486,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["ignore",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":4530,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":4341,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":4005,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":847,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":4587,"title":{},"body":{"license.html":{}}}],["import",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["imports",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["improve",{"_index":4013,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":3677,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":4582,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":3530,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":3735,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["inclusion",{"_index":3855,"title":{},"body":{"changelog.html":{}}}],["increase",{"_index":4034,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":247,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":3759,"title":{},"body":{"changelog.html":{}}}],["indexes",{"_index":3757,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":2847,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1029,"title":{},"body":{"entities/DbInsight.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":3910,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":720,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":2358,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":2363,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":2361,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":2176,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3332,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1767,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["inherited",{"_index":606,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":4392,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":441,"title":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":563,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":641,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":649,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":838,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":1540,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":1666,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":2039,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":1958,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":2004,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":2070,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":2200,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":2258,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbrepo",{"_index":2407,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":2654,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":2625,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":2820,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":3610,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":2712,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":3548,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":3024,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":3252,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":3253,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbusernotification",{"_index":3454,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":3505,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":3103,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin(\"insights",{"_index":1973,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":1673,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["innerjoin(\"users",{"_index":3255,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["innerjoin(`repo.repotouser${relation",{"_index":2444,"title":{},"body":{"injectables/RepoService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":3031,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":3030,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":2042,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1075,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["inserting/updating",{"_index":2777,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":705,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":1910,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3318,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight.controller",{"_index":2016,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":3369,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:100",{"_index":3377,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:49",{"_index":3374,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:67",{"_index":3372,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":1917,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":701,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":710,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":708,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":716,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1103,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:18",{"_index":1121,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:30",{"_index":1128,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:41",{"_index":1119,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:52",{"_index":1112,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:63",{"_index":1111,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:74",{"_index":1130,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":3344,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1093,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1088,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter(insightrepo",{"_index":3393,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":1722,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1054,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1079,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":1974,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":1975,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":1972,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":1970,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1092,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":1896,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":1713,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":1714,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":2350,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":2342,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":2344,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":1946,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":1942,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":3360,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":1939,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":1928,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":1977,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":1992,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":1036,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":3394,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1037,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":1999,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":1993,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":2027,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1049,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["insights.id",{"_index":2050,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":2044,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":1920,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":2184,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:10",{"_index":2189,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:17",{"_index":2191,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:21",{"_index":2195,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:39",{"_index":2193,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":1937,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":14,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":3379,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":1919,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":4295,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":4479,"title":{},"body":{"index.html":{}}}],["installed",{"_index":4464,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":517,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["instead",{"_index":3914,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["instructions",{"_index":469,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["integer",{"_index":980,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserService.html":{}}}],["integration",{"_index":3702,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":4621,"title":{},"body":{"properties.html":{}}}],["interests",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":2961,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":2963,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interface",{"_index":431,"title":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"interfaces/PageMetaParameters.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["interfaces",{"_index":433,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"interfaces/PageMetaParameters.html":{},"overview.html":{}}}],["internal",{"_index":1202,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":1107,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["invalid",{"_index":551,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["invitation",{"_index":1066,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1055,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1056,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":729,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["invites",{"_index":3815,"title":{},"body":{"changelog.html":{}}}],["is_accepted",{"_index":1280,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":1019,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":3568,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":702,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":714,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["isarray()@apiproperty({isarray",{"_index":2080,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":718,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["iscreatinglogs",{"_index":2074,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":776,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":732,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":621,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":630,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":1723,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":2131,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":2242,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":2244,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":2385,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1745,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":2919,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1754,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1771,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"view",{"_index":2913,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([7",{"_index":2132,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint",{"_index":2127,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ismember",{"_index":3348,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":693,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{}}}],["isoptional",{"_index":622,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring",{"_index":737,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":692,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":684,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issues",{"_index":2376,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["isurl",{"_index":2951,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":1707,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["italian",{"_index":1736,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":1689,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":2292,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":660,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["items",{"_index":2100,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2243,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":2241,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":1981,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":1982,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["job",{"_index":4237,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":4348,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":3813,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["join(\"\\n",{"_index":479,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":944,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["js",{"_index":3546,"title":{},"body":{"injectables/UserService.html":{}}}],["js/dist/module/lib/types",{"_index":444,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["json",{"_index":3692,"title":{},"body":{"changelog.html":{}}}],["json.stringify",{"_index":497,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["json.stringify(parameters",{"_index":886,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":2755,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":2887,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key's",{"_index":4475,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":4622,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":4586,"title":{},"body":{"license.html":{}}}],["kindly",{"_index":4469,"title":{},"body":{"index.html":{}}}],["korean",{"_index":1741,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1198,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1188,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1145,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1146,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":4699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":453,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":921,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_merged_at",{"_index":628,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1147,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["latest",{"_index":2752,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["left",{"_index":3812,"title":{},"body":{"changelog.html":{}}}],["leftjoin(\"users",{"_index":1675,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":2420,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":2418,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":2043,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":2419,"title":{},"body":{"injectables/RepoService.html":{}}}],["lenght",{"_index":3877,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":896,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["letters",{"_index":2942,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":212,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":4504,"title":{},"body":{"index.html":{}}}],["liability",{"_index":4600,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4597,"title":{},"body":{"license.html":{}}}],["lib",{"_index":4499,"title":{},"body":{"index.html":{}}}],["library",{"_index":3741,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":3773,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":590,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(1",{"_index":2212,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":659,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["limitation",{"_index":4565,"title":{},"body":{"license.html":{}}}],["limited",{"_index":4588,"title":{},"body":{"license.html":{}}}],["limits",{"_index":4045,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":485,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{}}}],["line_items",{"_index":2688,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1157,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["link",{"_index":4142,"title":{},"body":{"changelog.html":{}}}],["linkedin",{"_index":2853,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":4215,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":4077,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":4023,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":4517,"title":{},"body":{"index.html":{}}}],["list",{"_index":3803,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["listallpullrequests",{"_index":2137,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":2146,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listing",{"_index":1513,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{}}}],["literal",{"_index":440,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{}}}],["live",{"_index":4456,"title":{},"body":{"index.html":{}}}],["load",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":3989,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":2427,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":2430,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":2431,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":2429,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":2428,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":2838,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":4478,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["location",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":787,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":857,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":799,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":2069,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":736,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:11",{"_index":740,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:15",{"_index":739,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:7",{"_index":738,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":2059,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":807,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":1877,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":2744,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":846,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":1876,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":863,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":866,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":868,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:36",{"_index":861,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:40",{"_index":871,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:44",{"_index":859,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:59",{"_index":873,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":856,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":1878,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":806,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":783,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:27",{"_index":800,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:37",{"_index":798,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:47",{"_index":804,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:57",{"_index":795,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:67",{"_index":802,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":793,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":3907,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":4425,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":4498,"title":{},"body":{"index.html":{}}}],["login",{"_index":1389,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["loglevels",{"_index":809,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":849,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":860,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":2054,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":850,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":862,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":851,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":865,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":852,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":867,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1101,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":853,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":870,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":792,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":2066,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":785,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":2436,"title":{},"body":{"injectables/RepoService.html":{}}}],["lowercase",{"_index":3795,"title":{},"body":{"changelog.html":{}}}],["machines",{"_index":4465,"title":{},"body":{"index.html":{}}}],["made",{"_index":1394,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":1240,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["main'})@column('text",{"_index":1212,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":2921,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["maker",{"_index":2953,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":2935,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["managed",{"_index":4116,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":2725,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":2731,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":3650,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":4081,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":4177,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":943,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["marknotificationsasread",{"_index":3437,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":3451,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":2952,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":2954,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":2115,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1746,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{}}}],["max(10",{"_index":1753,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(10000",{"_index":2130,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(500",{"_index":1750,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":463,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxlength",{"_index":454,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":756,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1125,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["mechanics",{"_index":4053,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":728,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":3320,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":3334,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":2018,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":3311,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:118",{"_index":3335,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:155",{"_index":3330,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:50",{"_index":3326,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:76",{"_index":3321,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":3337,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":727,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":731,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":2912,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1052,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:105",{"_index":1068,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:22",{"_index":1063,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:29",{"_index":1065,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:36",{"_index":1078,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:47",{"_index":1076,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:58",{"_index":1059,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:68",{"_index":1060,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:78",{"_index":1077,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:85",{"_index":1061,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:95",{"_index":1071,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":2019,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":1930,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":1938,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:20",{"_index":1943,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:26",{"_index":1952,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:40",{"_index":1941,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:44",{"_index":1956,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:48",{"_index":1954,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:52",{"_index":1949,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:75",{"_index":1951,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":3328,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":3324,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["memory",{"_index":1799,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":4651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":4655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":1795,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":461,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["merchantability",{"_index":4590,"title":{},"body":{"license.html":{}}}],["merge",{"_index":922,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"license.html":{}}}],["mergeable",{"_index":1148,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":1149,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged_at",{"_index":1150,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["message",{"_index":449,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":500,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":2076,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":647,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["meta.dto.ts",{"_index":2091,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":2104,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":2102,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":2107,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":2099,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":2097,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":2105,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":1450,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["metadata",{"_index":1321,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["methods",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":4021,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":3756,"title":{},"body":{"changelog.html":{}}}],["migrations",{"_index":3733,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":1747,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{}}}],["min(0",{"_index":1752,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2129,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(100",{"_index":1749,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimal",{"_index":4006,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":1987,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":1986,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":752,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["minlength(20",{"_index":755,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":779,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minor",{"_index":4356,"title":{},"body":{"changelog.html":{}}}],["misaligned",{"_index":3746,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":4443,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3731,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mit",{"_index":4552,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mkdocs",{"_index":4277,"title":{},"body":{"changelog.html":{}}}],["mm",{"_index":2209,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":4508,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2690,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":498,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":4713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":4567,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":2168,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["months'})@apiokresponse({type",{"_index":2144,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":4192,"title":{},"body":{"changelog.html":{}}}],["mostactive",{"_index":1989,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":1990,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mount",{"_index":4320,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":4288,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":3861,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mrpizza",{"_index":2859,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["much",{"_index":4080,"title":{},"body":{"changelog.html":{}}}],["n",{"_index":507,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["name",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["names",{"_index":1189,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["naming",{"_index":4072,"title":{},"body":{"changelog.html":{}}}],["ncommit",{"_index":537,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":4461,"title":{},"body":{"index.html":{}}}],["needs",{"_index":4503,"title":{},"body":{"index.html":{}}}],["nest",{"_index":4344,"title":{},"body":{"changelog.html":{}}}],["nestjs",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":805,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":951,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":874,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":877,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":1879,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":2880,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["newinsight",{"_index":3384,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":3352,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newlog",{"_index":2071,"title":{},"body":{"injectables/LogService.html":{}}}],["newuser",{"_index":3566,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":3574,"title":{},"body":{"injectables/UserService.html":{}}}],["newusercollaboration",{"_index":2998,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["newuserhighlight",{"_index":3287,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":3508,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":484,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["nextfunction",{"_index":1875,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":4395,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":4466,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1197,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["non",{"_index":476,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"changelog.html":{}}}],["noninfringement",{"_index":4594,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":3766,"title":{},"body":{"changelog.html":{}}}],["notable",{"_index":3624,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":4472,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1665,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":3587,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":2635,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":4580,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":3102,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":3433,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":3439,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":3448,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":3450,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:46",{"_index":3446,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:57",{"_index":3442,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:69",{"_index":3444,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:81",{"_index":3452,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":1455,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["notification.constants",{"_index":1471,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["notification.constants.ts",{"_index":4438,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":3422,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":3424,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:27",{"_index":3430,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":1448,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:18",{"_index":1456,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:25",{"_index":1470,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:32",{"_index":1454,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:43",{"_index":1469,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:53",{"_index":1459,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:63",{"_index":1464,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:73",{"_index":1466,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:83",{"_index":1462,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":3461,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":3453,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":3475,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":3428,"title":{},"body":{"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["notified_at",{"_index":1451,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":913,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{}}}],["npm",{"_index":3750,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":4467,"title":{},"body":{"index.html":{}}}],["null",{"_index":1244,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":3210,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":1926,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":4659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":4662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":4652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":4656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":4688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":4697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":2943,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["numerical",{"_index":1122,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":4615,"title":{},"body":{"properties.html":{}}}],["object",{"_index":2333,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":2197,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":713,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtaining",{"_index":4561,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":3680,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":4550,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":658,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["old",{"_index":3672,"title":{},"body":{"changelog.html":{}}}],["onboarded",{"_index":2848,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["onboarding.dto",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":3479,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":3480,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":3482,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding/insight",{"_index":3902,"title":{},"body":{"changelog.html":{}}}],["onetomany",{"_index":994,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":724,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_pull_requests",{"_index":2435,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":2437,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["openapi",{"_index":4173,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":4523,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1606,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":2924,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":4709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":3977,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["optional",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["options.code}\\n",{"_index":481,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["options.commitmessages",{"_index":536,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":538,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.descriptionlength",{"_index":503,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":533,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":535,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":625,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":586,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:12",{"_index":1871,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":1715,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:16",{"_index":2123,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":2386,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":601,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":1721,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":1979,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":2235,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":2121,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1718,"title":{},"body":{"classes/FilterOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":2387,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":2122,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":1983,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":1720,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":2374,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":1980,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":2124,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":2126,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":2236,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":2237,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":2240,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":2231,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":2341,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["options.repo",{"_index":2335,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":2216,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":2217,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.temperature",{"_index":505,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":539,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":2338,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["order",{"_index":978,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["orderby",{"_index":589,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["orderby(\"endorsements.created_at",{"_index":1669,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":2051,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":3033,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":3262,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"users.name",{"_index":1976,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":2447,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":591,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":608,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":2448,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":609,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":652,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1569,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["origin",{"_index":937,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":1887,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere(\"lower(users.login",{"_index":1680,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orwhere(`:userid",{"_index":2049,"title":{},"body":{"injectables/InsightsService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":4603,"title":{},"body":{"license.html":{}}}],["out",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":4306,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":4238,"title":{},"body":{"changelog.html":{}}}],["outside",{"_index":478,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"changelog.html":{}}}],["over",{"_index":2142,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["overview",{"_index":4611,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":4544,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1577,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["owneroruser",{"_index":1678,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":2442,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":1681,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":4511,"title":{},"body":{"index.html":{}}}],["package",{"_index":3691,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["package.json",{"_index":4525,"title":{},"body":{"index.html":{}}}],["packages",{"_index":3946,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":585,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["pagecount",{"_index":2094,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":642,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":663,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["pagemetadto",{"_index":646,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":2085,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":2096,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":588,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":2112,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":653,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":656,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":2110,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":2261,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.repo",{"_index":2452,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":2451,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto:16",{"_index":613,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:28",{"_index":607,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:33",{"_index":611,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:43",{"_index":619,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pages",{"_index":2106,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":3042,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":1521,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":1514,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":2277,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":4369,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":1592,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"emojiid",{"_index":3209,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":1623,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"memberid",{"_index":3358,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":1615,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1616,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":1612,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"username",{"_index":1626,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":2108,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":2118,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":2453,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":2747,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":3564,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":4741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":1850,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":2902,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":2903,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":4592,"title":{},"body":{"license.html":{}}}],["passed",{"_index":531,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":2886,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":426,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2884,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":3199,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id",{"_index":3002,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(\":id/members/:memberid",{"_index":3357,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":3190,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":2987,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":3331,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["path",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["paths",{"_index":3740,"title":{},"body":{"changelog.html":{}}}],["pattern",{"_index":3633,"title":{},"body":{"changelog.html":{}}}],["payment_method_types",{"_index":2684,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1058,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["pending'})@column({type",{"_index":1057,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":2103,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":3676,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":1335,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":4555,"title":{},"body":{"license.html":{}}}],["permit",{"_index":4574,"title":{},"body":{"license.html":{}}}],["person",{"_index":4560,"title":{},"body":{"license.html":{}}}],["persons",{"_index":4575,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1766,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["pgmigrate",{"_index":3864,"title":{},"body":{"changelog.html":{}}}],["pid,hostname,context",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1390,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe",{"_index":3763,"title":{},"body":{"changelog.html":{}}}],["pipelines",{"_index":4404,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":2934,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":2922,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizzas",{"_index":4067,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":4535,"title":{},"body":{"index.html":{}}}],["port",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":4584,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1737,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":3207,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":2179,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/onboarding",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":561,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":2780,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":3346,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":2974,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":1555,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3159,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":2175,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":545,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":2728,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":3316,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["postcreatecheckoutsession",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":4676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postonboarding",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":4139,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":526,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["pr!'})@column('text",{"_index":1408,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":771,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":2204,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["preferences",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["prefs.dto",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":2955,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":2958,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":2960,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prepare",{"_index":3863,"title":{},"body":{"changelog.html":{}}}],["prerequisites",{"_index":4460,"title":{},"body":{"index.html":{}}}],["present",{"_index":527,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["prettier",{"_index":4359,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":4510,"title":{},"body":{"index.html":{}}}],["previous",{"_index":2098,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["price",{"_index":1342,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":1357,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":1343,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":1322,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":942,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":955,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1231,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["primarycolumn(\"text",{"_index":1356,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":995,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1102,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1097,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":2190,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["print",{"_index":4244,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["proceed",{"_index":4538,"title":{},"body":{"index.html":{}}}],["process",{"_index":4305,"title":{},"body":{"changelog.html":{}}}],["process.env.ci",{"_index":4650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":4708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":4646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":4724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":2892,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":2895,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":2890,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":4334,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":754,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{},"index.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":748,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project?'})@column({type",{"_index":1372,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["promise",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all([30",{"_index":2169,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all(repostoremoverequests",{"_index":3403,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":3413,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":3477,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["proper",{"_index":4223,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":4285,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":438,"title":{"properties.html":{}},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":952,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":4250,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["provided",{"_index":549,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"license.html":{}}}],["providers",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["prquery",{"_index":2202,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":542,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["public",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"changelog.html":{}}}],["public.users",{"_index":4097,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":4568,"title":{},"body":{"license.html":{}}}],["published",{"_index":3690,"title":{},"body":{"changelog.html":{}}}],["pull",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse-1.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["pull_requests",{"_index":1131,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":2262,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_full_name",{"_index":2267,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":2269,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":2439,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequestcontroller",{"_index":2134,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptioncontroller",{"_index":2172,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptionservice",{"_index":523,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"interfaces/ChatResponse-1.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":2160,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":15,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":2232,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":2233,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":2150,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":2251,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestservice",{"_index":2157,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":2162,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":2238,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":2239,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":4593,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4268,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":4101,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":2486,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":2492,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":2528,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":2566,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":2601,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":2494,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":2531,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":2568,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":2603,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":3141,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2480,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2519,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2557,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2593,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2484,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2523,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2560,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2596,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3124,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":2196,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["qb.andwhere(sql",{"_index":2356,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":2355,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":4516,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1323,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["queries",{"_index":3767,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":864,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":650,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":3555,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.andwhere(`user_highlights.user_id",{"_index":3276,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(sql",{"_index":3271,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":661,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getmany",{"_index":662,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["querybuilder.getone",{"_index":842,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":3117,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":3285,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getrawone",{"_index":2218,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":1542,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.setparameters",{"_index":2215,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.where(\"id",{"_index":3507,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":1961,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"lower(login",{"_index":3558,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":3026,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(`users.email",{"_index":3591,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(sql",{"_index":3270,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":858,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":878,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":4540,"title":{},"body":{"index.html":{}}}],["range",{"_index":592,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["rate",{"_index":4044,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":2727,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":3695,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":2964,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":3474,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":973,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":3174,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":1444,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":1426,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["reaction.entity.ts",{"_index":1421,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:106",{"_index":1427,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:18",{"_index":1433,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:28",{"_index":1432,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:38",{"_index":1438,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:48",{"_index":1429,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:59",{"_index":1424,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:70",{"_index":1435,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:74",{"_index":1425,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:82",{"_index":1434,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:90",{"_index":1431,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:98",{"_index":1437,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":1442,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":1430,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":1443,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":1436,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":1423,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":3304,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":3305,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":972,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":1848,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["read",{"_index":1465,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["read_at",{"_index":1452,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1116,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readme",{"_index":4068,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["real",{"_index":3747,"title":{},"body":{"changelog.html":{}}}],["rebaseable",{"_index":1151,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receipient",{"_index":1382,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive_collaboration",{"_index":2957,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":1581,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":1984,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":2959,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":678,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{}}}],["recipient_user_id",{"_index":668,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["record",{"_index":1604,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["record'})@apiokresponse({type",{"_index":1556,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":2783,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1214,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":436,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{}}}],["refactoring",{"_index":3857,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":4141,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":928,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["references",{"_index":3874,"title":{},"body":{"changelog.html":{}}}],["regex",{"_index":3632,"title":{},"body":{"changelog.html":{}}}],["registeras(\"api",{"_index":4643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":4674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":4698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":4710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":4720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":2834,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":4230,"title":{},"body":{"changelog.html":{}}}],["rejectunauthorized",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":4171,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":4376,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":4188,"title":{},"body":{"changelog.html":{}}}],["relationships",{"_index":3822,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":3833,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["releasing",{"_index":3751,"title":{},"body":{"changelog.html":{}}}],["relevantevents",{"_index":2736,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":2789,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":4182,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":1644,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["remove(id",{"_index":1663,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removed",{"_index":2470,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removeinsight",{"_index":2023,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":2034,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":1899,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":1907,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":1934,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":1953,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":3314,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":3327,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":1996,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2002,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":1909,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":3012,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":3021,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":2971,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":2983,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":3088,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":3100,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removing",{"_index":3671,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":4158,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":579,"title":{},"body":{"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":2309,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":961,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":927,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":2370,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1081,"title":{},"body":{"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:18",{"_index":1479,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:22",{"_index":1497,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:25",{"_index":1481,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":1087,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:29",{"_index":1504,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:32",{"_index":1480,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":1090,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:36",{"_index":1500,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:39",{"_index":1478,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:40",{"_index":1091,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:46",{"_index":1494,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:47",{"_index":1086,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:49",{"_index":1477,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:56",{"_index":1501,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:57",{"_index":1082,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:63",{"_index":1495,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:67",{"_index":1083,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:71",{"_index":1503,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:75",{"_index":1089,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:79",{"_index":1499,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:8",{"_index":1447,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.fullname",{"_index":2007,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":2006,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":3399,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouserstargazers",{"_index":1263,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1252,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1278,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1269,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":1297,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1288,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":1507,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":1498,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":1312,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":1303,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":2017,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":1994,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:15",{"_index":2001,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:19",{"_index":2003,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:9",{"_index":1998,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":719,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":3484,"title":{},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["repo/repo.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":2285,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["repo/user",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":669,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":576,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":2295,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":2375,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":2223,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":2188,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":638,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":1711,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":711,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":3398,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":16,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":599,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":2372,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":1572,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":1679,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":2299,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":2388,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":2394,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":4494,"title":{},"body":{"index.html":{}}}],["repos",{"_index":703,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":2438,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":3047,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":3376,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto.ts",{"_index":3485,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"coverage.html":{}}}],["repos.dto.ts:12",{"_index":3487,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.id",{"_index":2346,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":3493,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":3494,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":3495,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":3498,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:19",{"_index":3502,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:25",{"_index":3504,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:39",{"_index":3501,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:49",{"_index":3503,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos_id",{"_index":3830,"title":{},"body":{"changelog.html":{}}}],["reposearchoptionsdto",{"_index":2303,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":2284,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":3727,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":634,"title":{},"body":{"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":2455,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":2498,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":2648,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":2618,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":3407,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":3411,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":3395,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":3401,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":3400,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":2536,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":2814,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":3410,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":4162,"title":{},"body":{"changelog.html":{}}}],["repotouserstars",{"_index":4164,"title":{},"body":{"changelog.html":{}}}],["repotousersubmissions",{"_index":4166,"title":{},"body":{"changelog.html":{}}}],["repotouservotes",{"_index":4168,"title":{},"body":{"changelog.html":{}}}],["repovotecontroller",{"_index":2572,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":3604,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":4549,"title":{},"body":{"index.html":{}}}],["representing",{"_index":906,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":2730,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{}}}],["req.headers",{"_index":2782,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":2984,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":552,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":3161,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":3333,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":2226,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":2135,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:29",{"_index":2148,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:42",{"_index":2155,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:54",{"_index":2145,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["request.entity.ts",{"_index":1134,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:101",{"_index":1213,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:108",{"_index":1220,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:128",{"_index":1201,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:138",{"_index":1191,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:145",{"_index":1170,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:152",{"_index":1168,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:162",{"_index":1165,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:172",{"_index":1164,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:18",{"_index":1187,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:182",{"_index":1180,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:192",{"_index":1177,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:202",{"_index":1206,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:212",{"_index":1229,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:222",{"_index":1203,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:229",{"_index":1178,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:236",{"_index":1160,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:243",{"_index":1182,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:25",{"_index":1211,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:250",{"_index":1174,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:261",{"_index":1185,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:32",{"_index":1208,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:39",{"_index":1218,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:46",{"_index":1184,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:53",{"_index":1205,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:60",{"_index":1204,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:67",{"_index":1209,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:74",{"_index":1228,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:84",{"_index":1216,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:94",{"_index":1222,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":1706,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":2224,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":2158,"title":{},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":2245,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:15",{"_index":2250,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:22",{"_index":2252,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:28",{"_index":2253,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:46",{"_index":2255,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:71",{"_index":2257,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":4740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":1361,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":1362,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":1363,"title":{},"body":{"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{}}}],["requesting",{"_index":3817,"title":{},"body":{"changelog.html":{}}}],["requestmethod",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":560,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserController.html":{},"changelog.html":{}}}],["requests/code",{"_index":435,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"coverage.html":{}}}],["requests/dtos/create",{"_index":1724,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["requests/dtos/pull",{"_index":2229,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requests/pull",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse-1.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["require(\"node",{"_index":489,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["required",{"_index":2687,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":4400,"title":{},"body":{"changelog.html":{}}}],["reserved",{"_index":2945,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["response",{"_index":490,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["response.decorator",{"_index":1522,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":4415,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":2831,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":2858,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":2839,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:116",{"_index":2855,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:122",{"_index":2844,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:128",{"_index":2862,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":2871,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":2863,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":2841,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":2836,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":2852,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":2837,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":2867,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":2849,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":2851,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":2846,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":2832,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":2845,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":2860,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":2870,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":2866,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":2833,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":511,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["response.ok",{"_index":509,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["response.on(\"finish",{"_index":1886,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":4564,"title":{},"body":{"license.html":{}}}],["results",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":3806,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":4056,"title":{},"body":{"changelog.html":{}}}],["retrieves",{"_index":1588,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["retrieving",{"_index":3660,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":3931,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":3930,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":4058,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":4566,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":4196,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["rounded",{"_index":1777,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":3725,"title":{},"body":{"changelog.html":{}}}],["rule",{"_index":4496,"title":{},"body":{"index.html":{}}}],["rules",{"_index":4134,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":4264,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":4314,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":4309,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["russian",{"_index":1739,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["san",{"_index":2856,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":778,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":762,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":2929,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/api.opensauced.pizza",{"_index":3623,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":4624,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":4628,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":4626,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":960,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":938,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":725,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1085,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":2360,"title":{},"body":{"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":1717,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights/pull/1",{"_index":777,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1411,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":774,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1395,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":697,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":687,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/open",{"_index":3639,"title":{},"body":{"changelog.html":{}}}],["sauced/triage",{"_index":4471,"title":{},"body":{"index.html":{}}}],["saucedopen",{"_index":2865,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":2940,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":3976,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":3990,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":4174,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":4193,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":4342,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":4350,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":4394,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["search",{"_index":2313,"title":{},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["searchallpullrequests",{"_index":2138,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":2149,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":2152,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["secretkey",{"_index":4721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":4731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["see",{"_index":4531,"title":{},"body":{"index.html":{}}}],["select",{"_index":916,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["select(\"count(distinct",{"_index":2412,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"count(full_name",{"_index":3281,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"emoji_id",{"_index":3298,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"users.login",{"_index":1685,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["select(['repo.id",{"_index":2417,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":2203,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`regexp_replace(regexp_replace(user_highlights.url",{"_index":3273,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(`to_char(now",{"_index":2207,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1113,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":1944,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["sell",{"_index":4572,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1069,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":3753,"title":{},"body":{"changelog.html":{}}}],["servers",{"_index":4041,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":4185,"title":{},"body":{"changelog.html":{}}}],["session",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":2696,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":2695,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":2737,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"miscellaneous/variables.html":{}}}],["setparameters(querybuilder.getparameters",{"_index":3280,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["shall",{"_index":4581,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":764,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":759,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["short",{"_index":1039,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1020,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":3814,"title":{},"body":{"changelog.html":{}}}],["showcase",{"_index":1194,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1190,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["sig",{"_index":2781,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1237,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1227,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":2784,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["simple",{"_index":4136,"title":{},"body":{"changelog.html":{}}}],["simplify",{"_index":3678,"title":{},"body":{"changelog.html":{}}}],["singleline",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2120,"title":{},"body":{"classes/PageOptionsDto.html":{},"index.html":{}}}],["skip(pageoptionsdto.skip",{"_index":2052,"title":{},"body":{"injectables/InsightsService.html":{}}}],["slow",{"_index":4014,"title":{},"body":{"changelog.html":{}}}],["small",{"_index":3696,"title":{},"body":{"changelog.html":{}}}],["snippet",{"_index":458,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["soft",{"_index":4144,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":4462,"title":{},"body":{"index.html":{},"license.html":{}}}],["sort",{"_index":3843,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"index.html":{}}}],["source_branch",{"_index":1152,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":670,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":671,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1153,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1129,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach(type",{"_index":2213,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1108,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":2352,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests.repo_id",{"_index":2351,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":1991,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1733,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["spec",{"_index":4302,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":3818,"title":{},"body":{"changelog.html":{}}}],["specifications",{"_index":460,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["split",{"_index":3869,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":2842,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":875,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"changelog.html":{}}}],["src/.../api",{"_index":4635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":4634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":4636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":4445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../db",{"_index":4637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":4638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":4446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":4455,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../openai.config.ts",{"_index":4639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":4447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pull",{"_index":4449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":4450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":4640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":4641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":4633,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":4451,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":4642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:197",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:109",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:139",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:156",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:175",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:73",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:94",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":2830,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":3478,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":2872,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":2875,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:10",{"_index":2878,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:21",{"_index":2883,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:25",{"_index":2881,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":4413,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":4452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":4414,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":1709,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":2090,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":2075,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":2083,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":2079,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":2321,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":845,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":1872,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/util/cli",{"_index":4420,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":4422,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":4423,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":4426,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":4428,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":4429,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":888,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:106",{"_index":929,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:24",{"_index":920,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:34",{"_index":931,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:44",{"_index":903,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:51",{"_index":925,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:61",{"_index":914,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:71",{"_index":936,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:78",{"_index":917,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:88",{"_index":898,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:98",{"_index":939,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":575,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":631,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":635,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":639,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":584,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":2271,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts",{"_index":962,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:17",{"_index":964,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:27",{"_index":966,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":819,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":822,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":833,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":837,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:27",{"_index":835,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:36",{"_index":832,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":828,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":1509,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:25",{"_index":1518,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":1532,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":1534,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":1536,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":1538,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":1539,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":970,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:17",{"_index":984,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:24",{"_index":986,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:31",{"_index":993,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:38",{"_index":981,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:48",{"_index":974,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:58",{"_index":991,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:65",{"_index":975,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:69",{"_index":990,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":665,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/dto/update",{"_index":2901,"title":{},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/endorsement",{"_index":1693,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":1545,"title":{},"body":{"controllers/EndorsementController.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts:101",{"_index":1591,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:112",{"_index":1582,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:128",{"_index":1585,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:143",{"_index":1566,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:29",{"_index":1558,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:43",{"_index":1574,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:56",{"_index":1571,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:70",{"_index":1578,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":1637,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":1639,"title":{},"body":{"injectables/EndorsementService.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.service.ts:105",{"_index":1658,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:125",{"_index":1660,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:13",{"_index":1646,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:150",{"_index":1662,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:165",{"_index":1664,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:19",{"_index":1648,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:23",{"_index":1650,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:27",{"_index":1651,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:45",{"_index":1653,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:64",{"_index":1655,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:83",{"_index":1657,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1000,"title":{},"body":{"entities/DbEndorsement.html":{},"coverage.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:11",{"_index":1004,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:18",{"_index":1003,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:25",{"_index":1006,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:32",{"_index":1008,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:39",{"_index":1011,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:46",{"_index":1013,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:56",{"_index":1015,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:66",{"_index":1001,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/health/health.controller.ts",{"_index":1781,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":1787,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:55",{"_index":1790,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1827,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":1870,"title":{},"body":{"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":1446,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":1830,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:28",{"_index":1843,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:41",{"_index":1838,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:55",{"_index":1849,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":1868,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":700,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":1978,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":2904,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":1051,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1018,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:101",{"_index":1025,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:109",{"_index":1047,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:113",{"_index":1038,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:27",{"_index":1027,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:37",{"_index":1048,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:47",{"_index":1035,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:54",{"_index":1033,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:61",{"_index":1032,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:71",{"_index":1042,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:81",{"_index":1022,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:91",{"_index":1045,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":1929,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":1897,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:25",{"_index":1906,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:42",{"_index":1912,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":2013,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":2020,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":2026,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":2030,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":2033,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:41",{"_index":2029,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:45",{"_index":2037,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:49",{"_index":2035,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:53",{"_index":2032,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":3310,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":782,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":735,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":1094,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":1100,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1099,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1096,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1098,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1095,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":2058,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":2062,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":2068,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":2065,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":4434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pull",{"_index":434,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":2357,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":4436,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1246,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:22",{"_index":1251,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:29",{"_index":1259,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:36",{"_index":1255,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:46",{"_index":1248,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:56",{"_index":1256,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:63",{"_index":1249,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:71",{"_index":1258,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:79",{"_index":1253,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1264,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:22",{"_index":1268,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:29",{"_index":1275,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:36",{"_index":1271,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:46",{"_index":1266,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:56",{"_index":1272,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:63",{"_index":1267,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:71",{"_index":1274,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:79",{"_index":1270,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1279,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:22",{"_index":1284,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:29",{"_index":1294,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:36",{"_index":1290,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:43",{"_index":1287,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:53",{"_index":1282,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:63",{"_index":1291,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:70",{"_index":1283,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:78",{"_index":1293,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:86",{"_index":1289,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":1298,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:22",{"_index":1302,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:29",{"_index":1309,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:36",{"_index":1305,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:46",{"_index":1300,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:56",{"_index":1306,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:63",{"_index":1301,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:71",{"_index":1308,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:79",{"_index":1304,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":2296,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:22",{"_index":2306,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:35",{"_index":2310,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:49",{"_index":2301,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:62",{"_index":2304,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":2369,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":2389,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:140",{"_index":2401,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:15",{"_index":2393,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:155",{"_index":2402,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:170",{"_index":2399,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:199",{"_index":2400,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:22",{"_index":2405,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:32",{"_index":2397,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:56",{"_index":2396,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":2456,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":2611,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":2613,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":2619,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:20",{"_index":2623,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:45",{"_index":2621,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":2617,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":2499,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":2641,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":2643,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":2649,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:20",{"_index":2653,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:45",{"_index":2651,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":2647,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":2719,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":2666,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":2668,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":2677,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":2673,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":2675,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":2671,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":2537,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":2807,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":2809,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":2815,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:20",{"_index":2819,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:45",{"_index":2817,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":2813,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":1313,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1476,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":742,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":2915,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1358,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/user",{"_index":2966,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":3035,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:33",{"_index":3058,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:47",{"_index":3053,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":3044,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:79",{"_index":3048,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":4440,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":3418,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":3512,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:107",{"_index":3543,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:131",{"_index":3539,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":3523,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:146",{"_index":3545,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:156",{"_index":3541,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:166",{"_index":3537,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:170",{"_index":3535,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:177",{"_index":3529,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":3525,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":3531,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:63",{"_index":3533,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":3527,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":2573,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":3597,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":3599,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":3605,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:20",{"_index":3609,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:46",{"_index":3607,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":3603,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["stable",{"_index":4345,"title":{},"body":{"changelog.html":{}}}],["stack",{"_index":797,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1286,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":1265,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":2466,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":2612,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":2457,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:103",{"_index":2471,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:125",{"_index":2474,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:38",{"_index":2478,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:58",{"_index":2482,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:80",{"_index":2485,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":2489,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":2615,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":2622,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":2630,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":2631,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1247,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":2642,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":2500,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:103",{"_index":2511,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:125",{"_index":2514,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:38",{"_index":2517,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:58",{"_index":2521,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:80",{"_index":2524,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":2526,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":2645,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":2652,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":4118,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":2658,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":2659,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":18,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":2504,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":2518,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":2505,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":2522,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":2426,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":2383,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":2525,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":17,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":2461,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":2479,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":2462,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":2483,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":2477,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":2377,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":2384,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":2488,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":471,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"entities/DbSubscription.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":4484,"title":{},"body":{"index.html":{}}}],["started",{"_index":3621,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":1884,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":4673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stash",{"_index":3684,"title":{},"body":{"changelog.html":{}}}],["state",{"_index":1154,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["statements",{"_index":4407,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":3681,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":1324,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":1888,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":1889,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["strategy",{"_index":4137,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":3866,"title":{},"body":{"changelog.html":{}}}],["stress",{"_index":3685,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(process.env.api_codename",{"_index":4645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":4649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":4647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":4648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":4664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":4712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":4719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":4714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":4730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":4728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":4722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":4726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":4723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":4675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":4690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":4684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":4695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":4677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":4691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":4682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":4694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":4678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":4692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":4687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":4696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":4680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":4693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":854,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":872,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1727,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":1761,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":2679,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":2798,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":2667,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":2793,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":430,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":831,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":422,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":333,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":19,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":2700,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":2718,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":20,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":3862,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":4620,"title":{},"body":{"properties.html":{}}}],["stuff",{"_index":4082,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":1776,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["styles",{"_index":4020,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":1355,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":1339,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":4706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":2790,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":2791,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subject",{"_index":4577,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":4570,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1281,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":2546,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":2425,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":2382,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":2564,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":2808,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":2538,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:103",{"_index":2548,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:125",{"_index":2551,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:38",{"_index":2555,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:58",{"_index":2558,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:80",{"_index":2561,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":2563,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":2811,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":2818,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":2826,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":2824,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":2825,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":21,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":2542,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":2556,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":2543,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":2559,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":2562,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":2554,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":2406,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["subquery.getrawone",{"_index":3283,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquery_for_count",{"_index":3279,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["subquerycount",{"_index":2391,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":2403,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":2186,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":2194,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":2379,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":1329,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":2760,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":2759,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":2762,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":2795,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":1314,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":1338,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":1328,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":1332,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":1351,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":1350,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":1340,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":1353,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":1348,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":1341,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":1344,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":1345,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":1330,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":1333,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":1337,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":1336,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":2767,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":2754,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":2758,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":2757,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":2701,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":2702,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":2704,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":2709,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":2711,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":2707,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":2756,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":2771,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":2769,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":2753,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":2733,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":4725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":2708,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":1354,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["subscriptionsessioncancelurl",{"_index":4729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":4727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":4583,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":2691,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":4103,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":4668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":467,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":470,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion",{"_index":456,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.controller",{"_index":2228,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":541,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"coverage.html":{}}}],["suggestion.controller.ts:25",{"_index":553,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":448,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":1725,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["suggestion.dto.ts:13",{"_index":1730,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:24",{"_index":1744,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:34",{"_index":1742,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:41",{"_index":1728,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":557,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":437,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"coverage.html":{}}}],["suggestion.service.ts:10",{"_index":565,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion.service.ts:14",{"_index":569,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestion.service.ts:25",{"_index":567,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{}}}],["suggestions",{"_index":3647,"title":{},"body":{"changelog.html":{}}}],["suite",{"_index":4485,"title":{},"body":{"index.html":{}}}],["summary",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["supabase",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"changelog.html":{},"properties.html":{}}}],["supabase.guard",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":428,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":443,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/UserService.html":{}}}],["supabaseauthdto",{"_index":328,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":4632,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":2888,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{}}}],["supabaseguard",{"_index":324,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":2894,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":2891,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":2893,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":423,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":2889,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":808,"title":{},"body":{"injectables/CustomLogger.html":{},"injectables/SupabaseStrategy.html":{}}}],["super.authenticate(req",{"_index":2899,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":815,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":813,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":811,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":2898,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":814,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":3884,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supporting",{"_index":3892,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":4607,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3941,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":4039,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":501,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["t",{"_index":2078,"title":{},"body":{"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":4736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{}}}],["tables",{"_index":4178,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4442,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":4257,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":4233,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1225,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["take",{"_index":3913,"title":{},"body":{"changelog.html":{}}}],["take(pageoptionsdto.limit",{"_index":2053,"title":{},"body":{"injectables/InsightsService.html":{}}}],["target",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["target_branch",{"_index":1155,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1156,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["targets",{"_index":4049,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":2415,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":721,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{},"index.html":{}}}],["team'})@column({type",{"_index":1034,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":709,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":4280,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":4629,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":504,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["temporary",{"_index":4091,"title":{},"body":{"changelog.html":{}}}],["tense",{"_index":528,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":4272,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test:coveragefor",{"_index":4495,"title":{},"body":{"index.html":{}}}],["tester",{"_index":3686,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":4236,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":4493,"title":{},"body":{"index.html":{}}}],["text",{"_index":477,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1242,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss'})@column('text",{"_index":1169,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1238,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1215,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":3373,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":3325,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":2278,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":1515,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":1570,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":2147,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":2300,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":1842,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":1837,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":2678,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":3470,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.basefilterquerybuilder(range",{"_index":2450,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":840,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":562,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":1701,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":1811,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":1813,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":1826,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":1818,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":1822,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":1824,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":1820,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":1816,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":1806,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":1808,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":495,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":499,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":2689,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":2694,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":2692,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":2786,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":651,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":2291,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":839,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":844,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":2746,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":2088,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":1804,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":1812,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":1809,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":1541,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":1529,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":1667,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":1682,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":1668,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":1690,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":1608,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":1610,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":1628,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":3081,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":1630,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":3083,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":1613,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":1617,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":1621,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":1624,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":1632,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":2270,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findonebyid(id",{"_index":3565,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generateprompt(options.language",{"_index":502,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.hasnextpage",{"_index":2117,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":2116,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":1803,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":1825,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":1817,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":1821,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":1823,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":1819,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":1815,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":1960,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":1962,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":1964,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":1963,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":3353,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":3343,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":3345,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":3359,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":3368,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":3366,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":2005,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":2008,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":2040,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":2045,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":2047,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":2046,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":1965,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":3412,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":3388,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":3402,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":3385,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":3381,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":1924,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":3341,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":1927,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":3389,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.itemcount",{"_index":2113,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2111,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.logger",{"_index":876,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":885,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`${query",{"_index":881,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(`error",{"_index":2776,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":1890,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":879,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":2779,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":1895,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":884,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":1893,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":883,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":2072,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":2073,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":810,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":812,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":2794,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":2801,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":3462,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":1805,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":1807,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":2089,"title":{},"body":{"classes/PageDto.html":{}}}],["this.page",{"_index":2109,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":2114,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":2201,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":2180,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":2259,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":2164,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":3063,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":2166,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":2171,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":2205,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":2432,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":2416,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":2316,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":2317,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":2290,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":2294,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes",{"_index":2655,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":2660,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":2661,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":2662,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars",{"_index":2626,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":2633,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":2634,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":2636,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits",{"_index":2821,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":2827,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":2828,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":2829,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes",{"_index":3611,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":3617,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":3618,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":3619,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":2534,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":2530,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":2496,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":2493,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":880,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":2683,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":2682,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":2748,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":2788,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":2773,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":2570,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":2567,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":2423,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":2214,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":2713,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":2714,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":3025,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":3027,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":3029,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":3028,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.addusercollaboration",{"_index":2999,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":2996,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":3003,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":3010,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":3007,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows",{"_index":3104,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":3113,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":3115,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":3116,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":3142,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":3140,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":3144,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":3297,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":3306,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":3308,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":3309,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":3288,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":3254,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.manager.createquerybuilder",{"_index":3277,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":3294,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":3296,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":3295,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":3197,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":3211,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":3206,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":3216,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":1860,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":3065,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":1865,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":1863,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":3205,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":3200,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":3198,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction(highlightid",{"_index":3215,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":3201,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":3455,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":3463,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":3476,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":3114,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(userid",{"_index":3307,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":3432,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userreporepository.create",{"_index":3509,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":3506,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":3510,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.create",{"_index":3567,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":3549,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":3575,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":3351,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserNotificationService.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":2997,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":1627,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":2775,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":2605,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":2602,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":1810,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":513,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":869,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":4015,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":905,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":760,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{}}}],["tld",{"_index":4383,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":4665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todatetime",{"_index":2734,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":2761,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":2763,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":2766,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":2765,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":2764,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":2768,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":2772,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":2770,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1126,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["token",{"_index":1705,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["token\")_token",{"_index":1607,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["token.guard",{"_index":1600,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":1694,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":1696,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":1699,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":524,"title":{},"body":{"interfaces/ChatResponse-1.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":4505,"title":{},"body":{"index.html":{}}}],["top",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":1985,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":2348,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":2347,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":2349,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":1712,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["topics",{"_index":3897,"title":{},"body":{"changelog.html":{}}}],["toprepos",{"_index":3067,"title":{},"body":{"controllers/UserController.html":{}}}],["tort",{"_index":4602,"title":{},"body":{"license.html":{}}}],["total",{"_index":899,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["transformer",{"_index":717,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{}}}],["translatetime",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":468,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":1349,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":1325,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":1326,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":3769,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":2082,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":2081,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["turbo",{"_index":4717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":2864,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["twitter_username",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4630,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":487,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["typeorm",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeormhealthindicator",{"_index":1793,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":848,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":581,"title":{},"body":{"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/PullRequestModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":2061,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":2371,"title":{},"body":{"modules/RepoModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":2703,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forrootasync",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":4180,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":4526,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":3837,"title":{},"body":{"changelog.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":4683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":1775,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["unable",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":1913,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":4403,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":488,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["undefined})@column({type",{"_index":1163,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":2962,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":600,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":610,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":2234,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":2373,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isoptional",{"_index":1758,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":715,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":2944,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["undo",{"_index":4195,"title":{},"body":{"changelog.html":{}}}],["unfollowed",{"_index":2510,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":2533,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":2508,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":3122,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":3132,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":3134,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":891,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":4502,"title":{},"body":{"index.html":{}}}],["unix",{"_index":4732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":516,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unnecessary",{"_index":466,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unprocessableentityexception",{"_index":3378,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":2861,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":1370,"title":{},"body":{"entities/DbUserCollaboration.html":{},"changelog.html":{}}}],["update",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":3972,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":1043,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["updated_at",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":947,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":3361,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":3365,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":3364,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":3005,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferences",{"_index":3516,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":3534,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":2900,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["updatehighlightdto",{"_index":3192,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":3202,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":3156,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":3189,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":2024,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":2036,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":1911,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":3391,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":3390,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter(repoinfo",{"_index":3408,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find(repoinfo",{"_index":3397,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":3370,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":3375,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":1935,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":1955,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":2908,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":3362,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":3517,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":3536,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":3518,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":3538,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":3519,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":3540,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{}}}],["updateuser",{"_index":3520,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":3542,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusercollaboration",{"_index":2972,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":2986,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":2914,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["updateusercollaborationdto.status",{"_index":3006,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":293,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":294,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":3226,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":3250,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":303,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":3521,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":3544,"title":{},"body":{"injectables/UserService.html":{}}}],["upgrades",{"_index":3835,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":2751,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":2705,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":2710,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["url'})@column({type",{"_index":1009,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":4707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":3664,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":3742,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":1873,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":1874,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["usefactory",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":1603,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["useless",{"_index":3265,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1072,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3170,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":2981,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apiokresponse({type",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":3578,"title":{},"body":{"injectables/UserService.html":{}}}],["user.collaborations",{"_index":1386,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.collaborations)@joincolumn({name",{"_index":1380,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.company",{"_index":3581,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":3420,"title":{},"body":{"modules/UserModule.html":{}}}],["user.display_email",{"_index":3589,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":3583,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":2920,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":2936,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":2928,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":2923,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2950,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2948,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:56",{"_index":2925,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:65",{"_index":2933,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:74",{"_index":2927,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:83",{"_index":2939,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:91",{"_index":2932,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:99",{"_index":2930,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":3577,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1384,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.github_sponsors_url",{"_index":3585,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":1419,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":1413,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":3000,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1050,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":1046,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":3588,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":3586,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":3582,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":3576,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":3590,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1262,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1257,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1277,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1273,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1296,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1292,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":1311,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":1307,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":1387,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.request_collaborations)@joincolumn({name",{"_index":1375,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.service",{"_index":3059,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{}}}],["user.timezone",{"_index":3584,"title":{},"body":{"injectables/UserService.html":{}}}],["user.toprepos",{"_index":1506,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":1502,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.twitter_username",{"_index":3580,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":3579,"title":{},"body":{"injectables/UserService.html":{}}}],["user/collaborations",{"_index":2968,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/update",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":3070,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{}}}],["user/highlights",{"_index":3147,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":3312,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":3425,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/user",{"_index":1854,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user/user.service",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user_collaborations",{"_index":1385,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows_deleted_at",{"_index":3111,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":1439,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["user_highlights",{"_index":1417,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user_highlights.user_id=users.id",{"_index":3256,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":3258,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":3261,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":1021,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["user_id=:userid",{"_index":3264,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_metadata",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_notifications",{"_index":1472,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserService.html":{}}}],["user_notifications.read_at",{"_index":3552,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.type",{"_index":3551,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.user_id=users.id",{"_index":3456,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_repos",{"_index":1482,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":1505,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":3008,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":3009,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":2965,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercollaborationrepository",{"_index":3015,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":2990,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":3034,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["userendorsementcontroller",{"_index":3068,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowrepository",{"_index":3092,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":3118,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":3084,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":3214,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":3228,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightrepository",{"_index":3230,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":3145,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":1853,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":2015,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":2014,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["usermodule",{"_index":22,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"controllers/EndorsementController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":3126,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":3135,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":3057,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3051,"title":{},"body":{"controllers/UserController.html":{}}}],["username.tolowercase",{"_index":3559,"title":{},"body":{"injectables/UserService.html":{}}}],["usernames",{"_index":2946,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":3447,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":3467,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":3466,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":3468,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":3464,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":3465,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":3419,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":3440,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":3090,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":1468,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":3471,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":3473,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":280,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrelations",{"_index":2398,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map(relation",{"_index":2443,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":3483,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["userreporepository",{"_index":3499,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":3524,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":23,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":3492,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":2774,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{},"index.html":{}}}],["users_email",{"_index":3556,"title":{},"body":{"injectables/UserService.html":{}}}],["users_notification_count",{"_index":3553,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1260,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1276,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1295,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":1310,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":1493,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{}}}],["userservice",{"_index":331,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":2153,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["utc",{"_index":2937,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":1882,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":2735,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":982,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":997,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["v4'})@column({type",{"_index":1428,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1062,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":983,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":473,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeRefactorSuggestionService.html":{}}}],["validate",{"_index":2877,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"changelog.html":{}}}],["validate(user",{"_index":2882,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":2086,"title":{},"body":{"classes/PageDto.html":{}}}],["validation",{"_index":3762,"title":{},"body":{"changelog.html":{}}}],["validator",{"_index":623,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["value",{"_index":595,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":3748,"title":{},"body":{"changelog.html":{}}}],["variable",{"_index":4251,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":4241,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":895,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["velocity",{"_index":3841,"title":{},"body":{"changelog.html":{}}}],["verbose",{"_index":788,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":801,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verify",{"_index":4388,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":4346,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":4396,"title":{},"body":{"changelog.html":{}}}],["versioning",{"_index":3754,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":4114,"title":{},"body":{"changelog.html":{}}}],["videos",{"_index":4543,"title":{},"body":{"index.html":{}}}],["view",{"_index":1905,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["view'})@isstring()@isin(['view",{"_index":2909,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":1440,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":706,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visual",{"_index":4548,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":4092,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":4547,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":4551,"title":{},"body":{"index.html":{}}}],["vite",{"_index":4107,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":4507,"title":{},"body":{"index.html":{}}}],["void",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":4289,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":4321,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":959,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":893,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex/api.opensauced.pizza",{"_index":4364,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":2840,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":1299,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":2582,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":3598,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":2574,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:103",{"_index":2584,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:125",{"_index":2587,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:38",{"_index":2591,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:58",{"_index":2594,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:80",{"_index":2597,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":2599,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":3601,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":3608,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":2590,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["voteexists",{"_index":3615,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":3616,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":24,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":2578,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":2592,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":2579,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":2595,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":2424,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":2381,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":2598,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":3670,"title":{},"body":{"changelog.html":{}}}],["waitlist",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":2850,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":789,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":803,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warnings",{"_index":3706,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":4589,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4585,"title":{},"body":{"license.html":{}}}],["watch",{"_index":4487,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":2378,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":4492,"title":{},"body":{"index.html":{}}}],["web",{"_index":1783,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":3963,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":2721,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":2723,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":2732,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:78",{"_index":2729,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":2722,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":4437,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":2720,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":2785,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":2868,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":1474,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":1467,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"contribution.repo_id",{"_index":654,"title":{},"body":{"injectables/ContributionService.html":{}}}],["where(\"customer.id=:id",{"_index":841,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"customer.stripe_customer_id=:id",{"_index":843,"title":{},"body":{"injectables/CustomerService.html":{}}}],["where(\"endorsements.creator_user_id",{"_index":1671,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"endorsements.id",{"_index":1688,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":1672,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"id",{"_index":3554,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":1966,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":2041,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":2048,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(repos.full_name",{"_index":1677,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":2656,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2stars.repo_id",{"_index":2628,"title":{},"body":{"injectables/StarService.html":{}}}],["where(\"r2submits.repo_id",{"_index":2822,"title":{},"body":{"injectables/SubmitService.html":{}}}],["where(\"r2votes.repo_id",{"_index":3613,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"repo.full_name",{"_index":2441,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"repo.id",{"_index":2440,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":3032,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.user_id",{"_index":3105,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":3300,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":3259,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.user_id",{"_index":3286,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":3457,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["where(\"user_repos.user_id",{"_index":3511,"title":{},"body":{"injectables/UserReposService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":2414,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":2263,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`user_highlights.url",{"_index":3274,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["whether",{"_index":1401,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["windows",{"_index":4473,"title":{},"body":{"index.html":{}}}],["withdeleted",{"_index":2627,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["without",{"_index":911,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"license.html":{}}}],["work",{"_index":4190,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":4051,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["workflows",{"_index":3710,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":4131,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":4501,"title":{},"body":{"index.html":{}}}],["writing",{"_index":4079,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["written",{"_index":459,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/ChatResponse-1.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["xa",{"_index":1199,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":4338,"title":{},"body":{"changelog.html":{}}}],["year",{"_index":3774,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":640,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{}}}],["yml",{"_index":3641,"title":{},"body":{"changelog.html":{}}}],["you'})@column({type",{"_index":1458,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["youtube",{"_index":4545,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":2208,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["zone",{"_index":912,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { ApiConfig, DbApiConfig, DbLoggingConfig, EndpointConfig, StripeConfig, OpenAIConfig } from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [\n        ApiConfig,\n        DbApiConfig,\n        DbLoggingConfig,\n        EndpointConfig,\n        StripeConfig,\n        OpenAIConfig,\n      ],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) => ({\n        parseInt8: true,\n        type: configService.get(\"db-api.connection\"),\n        host: configService.get(\"db-api.host\"),\n        port: configService.get(\"db-api.port\"),\n        username: configService.get(\"db-api.username\"),\n        password: configService.get(\"db-api.password\"),\n        database: configService.get(\"db-api.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbUser,\n          DbUserRepo,\n          DbUserHighlight,\n          DbUserHighlightReaction,\n          DbUserNotification,\n          DbUserCollaboration,\n          DbRepo,\n          DbContribution,\n          DbRepoToUserVotes,\n          DbRepoToUserStars,\n          DbRepoToUserSubmissions,\n          DbRepoToUserStargazers,\n          DbInsight,\n          DbInsightMember,\n          DbInsightRepo,\n          DbCustomer,\n          DbSubscription,\n          DbPullRequest,\n          DbPRInsight,\n          DbUserToUserFollows,\n          DbEmoji,\n          DbUserTopRepo,\n          DbEndorsement,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"OS\"),\n        ssl: {\n          ca: configService.get(\"db-api.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) => ({\n        parseInt8: true,\n        type: configService.get(\"db-logging.connection\"),\n        host: configService.get(\"db-logging.host\"),\n        port: configService.get(\"db-logging.port\"),\n        username: configService.get(\"db-logging.username\"),\n        password: configService.get(\"db-logging.password\"),\n        database: configService.get(\"db-logging.database\"),\n        autoLoadEntities: false,\n        entities: [\n          DbLog,\n        ],\n        synchronize: false,\n        logger: new DatabaseLoggerMiddleware(\"LG\"),\n        ssl: {\n          ca: configService.get(\"db-logging.certificate\"),\n          rejectUnauthorized: false,\n        },\n        maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n      }) as TypeOrmModuleOptions,\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor (\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource,\n  ) {}\n\n  configure (consumer: MiddlewareConsumer) {\n    consumer\n      .apply(HttpLoggerMiddleware)\n      .forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor (\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService,\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { role, email: session_email, confirmed_at, last_sign_in_at, created_at, updated_at, user_metadata: { sub: id, user_name } } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const { is_onboarded, is_waitlisted, role: insights_role, name, bio, location, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url, notification_count } = await this.userService.checkAddUser(user);\n\n      userProfile = { is_onboarded, insights_role, is_waitlisted, name, location, bio, twitter_username, company, display_local_time, url, email, github_sponsors_url, linkedin_url, notification_count };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding (\n    @UserId() userId: number,\n      @Body() body: UserOnboardingDto,\n  ): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist (\n    @UserId() userId: number,\n  ): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession (\n    @User() user: SupabaseAuthUser,\n  ): Promise {\n    const { email, user_metadata: { sub } } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserProfileInterestsDto,\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile (\n    @UserId() userId: number,\n      @Body() updateUserDto: UpdateUserEmailPreferencesDto,\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor (private configService: ConfigService) {}\n\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n  ) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \\\"```suggestion\\\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse-1.html":{"url":"interfaces/ChatResponse-1.html","title":"interface - ChatResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor (private configService: ConfigService) {}\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n    tone: string,\n  ) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"}`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength, options.tone),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor (private codeRefactorSuggestionService: CodeRefactorSuggestionService) {\n\n  }\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription (\n  @Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto,\n  ) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw (new BadRequestException);\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor (private configService: ConfigService) {}\n\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n  ) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \\\"```suggestion\\\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_ContributionModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbContribution,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor (\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository,\n  ) {}\n\n  async findAll (\n    pageOptionsDto: ContributionPageOptionsDto,\n    repoId?: number,\n  ): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder\n        .where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: Number, example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: Number, example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: Number,\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: Number,\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n    name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n    is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n    repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n    email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n    username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n    message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsDateString, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor (\n    context: string,\n    options: ConsoleLoggerOptions,\n    configService: ConfigService,\n    logsService: LogService,\n  ) {\n    super(\n      context,\n      {\n        ...options,\n        logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n      },\n    );\n\n    this.logsService = logsService;\n  }\n\n  async log (message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error (message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn (message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose (message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbCustomer,\n    ], \"ApiConnection\"),\n  ],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor (\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById (id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer (userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor (name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery (query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError (error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow (time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`);\n  }\n\n  logMigration (message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild (message: string) {\n    this.logger.warn(message);\n  }\n\n  log (level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters (parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:56\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn, ManyToOne, JoinColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbInsightRepo } from \"./insight-repo.entity\";\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, insightRepo => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, insight => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:74\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  PrimaryColumn, Column,\n} from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:236\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:152\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:250\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:192\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:229\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:182\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:243\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:261\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:222\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:212\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations)@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.collaborations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.request_collaborations)\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n    \n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, highlightReaction => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n    highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n    user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, reaction => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n    emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n} from \"typeorm\";\n\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn, DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\nimport { ApiModelProperty, ApiModelPropertyOptional } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, user => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, repo => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor (\n    private emojiService: EmojiService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis (\n  @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbEmoji,\n    ], \"ApiConnection\"),\n  ],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor (\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor (\n    private readonly endorsementService: EndorsementService,\n    private readonly userService: UserService,\n  ) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement (\n  @Headers(\"X-OpenSauced-token\")_token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto,\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements (\n  @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername (\n  @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo (\n  @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById (@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements (\n  @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements (\n  @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById (@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbEndorsement,\n    ], \"ApiConnection\"),\n    UserModule,\n    AuthModule,\n  ],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor (\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create (createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll (pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByCreatorUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.creator_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByRecipientUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByRepoOwnerOrUser (repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllEndorsementsByRepo (owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllEndorsementsByRepoByUser (owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findOneById (id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async remove (id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor (private configService: ConfigService) {}\n\n  canActivate (host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n    descriptionLength: number;\n\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n    temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n    language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n    code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n    descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n    temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n    tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n    language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n    diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\n      \"chore: fixed a bug with the UI\",\n      \"style: added some rounded corners to some boxes\",\n    ],\n  })\n  @IsOptional()\n    commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor (\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService,\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service () {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () => this.disk.checkStorage(\"disk.usage\", {\n        thresholdPercent: this.configService.get(\"disk_percentage\")!,\n        path: \"/\",\n      }),\n      async () => this.disk.checkStorage(\"disk.storage\", {\n        thresholdPercent: this.configService.get(\"disk_size\")!,\n        path: \"/\",\n      }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web () {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags, ApiBadRequestResponse, ApiNotFoundResponse } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\nimport { DbUserHighlightReaction } from \"../user/entities/user-highlight-reaction.entity\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightReactions (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { HighlightController } from \"./highlight.controller\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserHighlight,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use (request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags, ApiUnauthorizedResponse, ApiBadRequestResponse, ApiBearerAuth, ApiBody } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor (\n    private readonly insightsService: InsightsService,\n  ) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { InsightsService } from \"./insights.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor (\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById (id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsightMember (insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember (id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember (id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight (userId: number, insightId: number, accessRoles: string[], checkOwner = true): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers (\n    pageOptionsDto: PageOptionsDto,\n    insightId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor (\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository,\n  ) {}\n\n  async addInsightRepo (insightId: number, repo: RepoInfo) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo (id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([\n      DbInsight,\n      DbInsightRepo,\n      DbInsightMember,\n    ], \"ApiConnection\"),\n    UserModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor (\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addInsight (insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight (id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight (id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: InsightPageOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(`:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `, { userId })\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor (\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository,\n  ) {}\n\n  async createLog (log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor (data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor ({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  get skip (): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor (\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService,\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests (\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests (\n    @Query() pageOptionsDto: PullRequestPageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights (\n    @Query() pageOptionsDto: FilterOptionsDto,\n  ): Promise {\n    return Promise.all([30, 60].map(async interval => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor (private pullRequestDescriptionService: PullRequestDescriptionService) {\n\n  }\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription (\n  @Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto,\n  ) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw (new BadRequestException);\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\n\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\n\ninterface ChatResponse { choices: { message: { content: string } }[] }\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor (private configService: ConfigService) {}\n\n  private generatePrompt (\n    language: string,\n    maxLength: number,\n    tone: string,\n  ) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription (options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"}`;\n\n    try {\n      // eslint-disable-next-line\n      const fetcher: Fetch = typeof fetch !== 'undefined' ? fetch : require(\"node-fetch\") as Fetch;\n      const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n          \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(\n          {\n            model: this.configService.get(\"openai.modelName\"),\n            messages: [\n              {\n                role: \"system\",\n                content: this.generatePrompt(options.language, options.descriptionLength, options.tone),\n              },\n              {\n                role: \"user\",\n                content,\n              },\n            ],\n            temperature: options.temperature / 10,\n            n: 1,\n          },\n        ),\n      });\n\n      if (response.ok) {\n        const data = await response.json() as ChatResponse;\n\n        return data.choices[0]?.message.content;\n      }\n\n      throw new Error(response.statusText);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor (\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  subQueryCountPrs (qb: SelectQueryBuilder, type = \"all\", interval = 0, options: FilterOptionsDto) {\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, interval);\n\n    filters.push([`now() - INTERVAL '${interval} days'  {\n    const queryBuilder = this.baseQueryBuilder()\n      .select(`TO_CHAR(now() - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n      .addSelect(`${interval}::INTEGER`, \"interval\")\n      .limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach(type => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbPullRequest,\n      DbPRInsight,\n    ], \"ApiConnection\"),\n    RepoFilterModule,\n  ],\n  controllers: [PullRequestController, PullRequestDescriptionController, CodeRefactorSuggestionController],\n  providers: [PullRequestService, PullRequestInsightsService, PullRequestDescriptionService, CodeRefactorSuggestionService],\n  exports: [PullRequestService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\"\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor (\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  async findAll (\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor (\n    contributor: string,\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport {\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly contributionService: ContributionService,\n  ) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @Query() pageOptionsDto: ContributionPageOptionsDto,\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor (private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n  ): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters (\n    @Query() pageOptionsDto: RepoSearchOptionsDto,\n  ): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters (options: FilterOptionsDto, range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=LOWER(:repo)`, { repo: decodeURIComponent(options.repo) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([`\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `, {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([`\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND now() - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters (qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: Number, example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: Number,\n    example: 234343,\n  })\n  @IsNumber()\n    id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n    fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_imports\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\"\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor (\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService,\n  ) {}\n\n  subQueryCount (subQuery: SelectQueryBuilder, entity: string, alias: string, target = \"repo\") {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder () {\n    const builder = this.repoRepository.createQueryBuilder(\"repo\")\n\n    /*\n     * .select(['repo.id'])\n     * .leftJoinAndSelect(\"repo.user\", \"user\")\n     * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n     * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n     */\n\n      .addSelect(qb => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect(qb => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder (range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND now() - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND now() - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo (owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[],\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map(relation =>\n        queryBuilder\n          .innerJoin(`repo.repoToUser${relation}`, `authUser${relation}`, `authUser${relation}.user_id = :userId`, { userId }));\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters (pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const range = pageOptionsDto.range!;\n    const queryBuilder = this.baseFilterQueryBuilder(range);\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly starService: StarService,\n  ) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly stargazeService: StargazeService,\n  ) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly submitService: SubmitService,\n  ) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor (\n    private readonly repoService: RepoService,\n    private readonly voteService: VoteService,\n  ) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted (\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo (\n    @Param(\"owner\") owner: string,\n      @Param(\"repo\") repo: string,\n      @UserId() userId: number,\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStars,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor (\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stars.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_imports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserStargazers,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor (\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_exports\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor (private configService: ConfigService) {}\n\n  get stripe () {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer (id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession (customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\"),\n  ],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor (\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription (subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [\n    StripeSubscriptionModule,\n    CustomerModule,\n    StripeModule,\n    UserModule,\n  ],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { toDateTime } from \"./utils\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/user.service\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor (\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService,\n  ) {}\n\n  private async manageSubscriptionStatusChange (subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw (new BadRequestException);\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, { expand: [\"default_payment_method\"] });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(`Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`);\n      throw (new BadRequestException);\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook (@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw (new BadRequestException);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserSubmissions,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor (\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2submits.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n  })\n  readonly notification_count?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(\n  SupabaseAuthStrategy,\n  \"supabase\",\n) {\n  public constructor () {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate (user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate (req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n    access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n    status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, { message: \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\" })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { UserService } from \"../user/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor (\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations (\n    @Query() pageOptionsDto: PageOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration (\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n\n    const newUserCollaboration = await this.userCollaborationService.addUserCollaboration({\n      user_id: user.id,\n      request_user_id: userId,\n      message: createUserCollaborationDto.message,\n      status: \"pending\",\n    });\n\n    return newUserCollaboration;\n  }\n\n  @Patch(\":id\")\n  @ApiOperation({\n    operationId: \"updateUserCollaboration\",\n    summary: \"Updates a user collaboration\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to find user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateUserCollaborationDto })\n  async updateUserCollaboration (\n    @Param(\"id\") id: string,\n      @UserId() userId: number,\n      @Body() updateUserCollaborationDto: UpdateUserCollaborationDto,\n  ): Promise {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw (new UnauthorizedException);\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById (\n    @Param(\"id\") id: string,\n      @UserId() userId: number,\n  ): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor (\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById (id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration (userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration (id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration (id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor (\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService,\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById (\n    @Param(\"username\") username: string,\n  ): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername (\n    @Param(\"username\") username: string,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor (private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements (\n  @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements (\n  @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto,\n  ) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor (\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async findUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId (userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById (userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor (\n    private readonly userService: UserService,\n    private readonly userFollowService: UserFollowService,\n  ) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId (\n    @Param(\"username\") username: string,\n      @UserId() userId: number,\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiConflictResponse } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor (\n    private readonly userHighlightsService: UserHighlightsService,\n  ) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser (\n    @Body() createHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getUserHighlight (\n    @Param(\"id\", ParseIntPipe) id: number,\n  ): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser (\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n      @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, { ...updateHighlightDto, shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser (\n    @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightUserReactions (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @UserId() userId: number,\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  async addHighlightReactionForUser (\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightReactionForUser (\n    @UserId() userId: number,\n      @Param(\"id\", ParseIntPipe) highlightId: number,\n      @Param(\"emojiId\") emojiId: string,\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(highlightId, userId, emojiId);\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos (\n    @Query() pageOptionsDto: HighlightOptionsDto,\n      @UserId() userId: number,\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor (\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findAll (pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([`user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`, { userId: followerUserId }]);\n    }\n\n    if (pageOptionsDto.repo) {\n      // eslint-disable-next-line no-useless-escape\n      filters.push([`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`, { repo: decodeURIComponent(pageOptionsDto.repo) }]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllHighlightRepos (pageOptionsDto: PageOptionsDto, follwerUserId?: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .distinct(true)\n\n      // eslint-disable-next-line no-useless-escape\n      .select(`REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')`, \"full_name\")\n      .where(`user_highlights.url LIKE '%github.com%'`);\n\n    if (follwerUserId) {\n      queryBuilder.andWhere(`user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`, { userId: follwerUserId });\n    }\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const subQuery = this.userHighlightRepository.manager.createQueryBuilder()\n      .from(`(${queryBuilder.getQuery()})`, \"subquery_for_count\")\n      .setParameters(queryBuilder.getParameters())\n      .select(\"count(full_name)\");\n\n    const countQueryResult = await subQuery.getRawOne();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: PageOptionsDto,\n    userId: number,\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_highlights.user_id = :userId\", { userId })\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserHighlight (userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : (new Date),\n    });\n\n    return this.userHighlightRepository.save(newUserHighlight);\n  }\n\n  async updateUserHighlight (highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight (highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions (highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId });\n\n    if (userId) {\n      queryBuilder\n        .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder\n      .addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReaction[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction (highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction (userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction (id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService,\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @Param(\"id\", ParseIntPipe) insightId: number,\n      @UserId() userId: number,\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"]);\n\n    if (!canAccess) {\n      throw new (UnauthorizedException);\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  async addInsightMember (\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n      @Param(\"id\", ParseIntPipe) insightId: number,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\", \"view\"], false);\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  async updateInsightMember (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n      @Body() updateInsightMemberDto: UpdateInsightMemberDto,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new (UnauthorizedException);\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeInsightMemberById (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Param(\"memberId\") memberId: string,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiBearerAuth, ApiTags, ApiBadRequestResponse, ApiBody, ApiUnprocessableEntityResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor (\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId (\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n      @UserId() userId: string,\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser (\n    @Body() createInsightDto: CreateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw (new BadRequestException);\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async repo => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser (\n    @Param(\"id\", ParseIntPipe) id: number,\n      @Body() updateInsightDto: UpdateInsightDto,\n      @UserId() userId: number,\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new (UnauthorizedException);\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter(insightRepo => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(repo => !updateInsightDto.repos.find(repoInfo => `${repoInfo.id}` === `${repo.repo_id}`));\n\n      const reposToRemoveRequests = reposToRemove.map(async insightRepo => this.insightsRepoService.removeInsightRepo(insightRepo.id));\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map(cr => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(repoInfo => !currentRepoIds.find(id => `${id}` === `${repoInfo.id}`));\n\n      const repoToAddRequests = reposToAdd.map(async repo => this.insightsRepoService.addInsightRepo(insight.id, repo));\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new (UnprocessableEntityException);\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUser,\n      DbUserHighlight,\n      DbUserHighlightReaction,\n      DbUserToUserFollows,\n      DbUserTopRepo,\n      DbUserNotification,\n      DbUserCollaboration,\n      DbRepo,\n      DbEndorsement,\n    ], \"ApiConnection\"),\n    PullRequestModule,\n    RepoModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n  ],\n  exports: [UserService, UserHighlightsService, UserFollowService, RepoService, EndorsementService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserNotification})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor (\n    private userNotificationService: UserNotificationService,\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserNotification })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications (\n    @UserId() userId: number,\n      @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor (\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId (userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .andWhere(\"user_notifications.read_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n    const notificationIds = entities.map(notification => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification (userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: (new Date),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification (userId: number, followedUserId: number ) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightNotification (userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead (notificationIds: number[]) {\n    const updates = notificationIds.map(async id => this.userNotificationRepository.update(id, { read_at: (new Date) }));\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\n\nUserReposService \n\nUserReposService \n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbUserRepo,\n    ], \"ApiConnection\"),\n  ],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class UserReposService {\n  constructor (\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById (id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async addUserRepo (userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId (\n    pageOptionsDto: UserRepoOptionsDto,\n    userId: string,\n  ): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder\n      .where(\"user_repos.user_id = :userId\", { userId });\n\n    queryBuilder\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UpdateUserDto } from \"./dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"./dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"./dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../auth/dtos/user-onboarding.dto\";\nimport { userNotificationTypes } from \"./entities/user-notification.constants\";\n\n@Injectable()\nexport class UserService {\n  constructor (\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n  ) {}\n\n  baseQueryBuilder (): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  async findOneById (id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"user_notifications\".\"id\"), 0)\n          FROM user_notifications\n          WHERE user_id = :userId\n          AND user_notifications.type IN (:...userNotificationTypes)\n          AND user_notifications.read_at IS NULL\n        )::INTEGER`,\n        \"users_notification_count\",\n      )\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      queryBuilder.setParameters({ userId: id, userNotificationTypes });\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async findOneByUsername (username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"LOWER(login) = :username\", { username: username.toLowerCase() });\n\n    const item: DbUser | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw (new NotFoundException);\n    }\n\n    return item;\n  }\n\n  async checkAddUser (user: User): Promise {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n      confirmed_at,\n    } = user;\n    const github = identities!.filter(identity => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      return await this.findOneById(id, true);\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: new Date(github.created_at),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n        connected_at: confirmed_at ? new Date(confirmed_at) : (new Date),\n      });\n\n      await newUser.save();\n\n      return newUser;\n    }\n  }\n\n  async updateUser (id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding (id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus (id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole (id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests (id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences (id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async findOneByEmail (email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_providers\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DbRepo,\n      DbRepoToUserVotes,\n    ], \"ApiConnection\"),\n    RepoModule,\n  ],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor (\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository,\n  ) {}\n\n  baseQueryBuilder () {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\")\n      .withDeleted();\n\n    return builder;\n  }\n\n  async voteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId (repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    const voteExists = await queryBuilder.getOne();\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.37.0-beta.2 (2023-05-31)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n1.37.0-beta.1 (2023-05-24)\n🍕 Features\n\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.36.0 (2023-05-23)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.36.0-beta.2 (2023-05-22)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\n\n1.36.0-beta.1 (2023-05-22)\n🍕 Features\n\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.35.0 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.35.0-beta.1 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.34.0 (2023-05-16)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.2 (2023-05-16)\n🍕 Features\n\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.1 (2023-05-15)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\n\n1.33.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.1-beta.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.0 (2023-05-11)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd endpoint for fetching user notifications (#155) (01301c9)\nadd first commit and pull request date (08f1679)\nadd user notification count to session data (#158) (1c3378e)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect misaligned migrations to real values (bb26d27)\ncorrect npm package not releasing (672ea80)\ncorrect server versioning (1225197)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\nnormalize pull requests status for queries (a057e0e)\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.9 (2023-05-11)\n🐛 Bug Fixes\n\nnormalize pull requests status for queries (a057e0e)\n\n1.33.0-beta.8 (2023-05-11)\n🐛 Bug Fixes\n\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.7 (2023-05-11)\n🍕 Features\n\nadd user notification count to session data (#158) (1c3378e)\n\n1.33.0-beta.6 (2023-05-11)\n🍕 Features\n\nadd endpoint for fetching user notifications (#155) (01301c9)\n\n🐛 Bug Fixes\n\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\n\n1.33.0-beta.5 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect server versioning (1225197)\n\n1.33.0-beta.4 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect misaligned migrations to real values (bb26d27)\n\n1.33.0-beta.3 (2023-05-05)\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\n\n1.33.0-beta.2 (2023-05-04)\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n1.33.0-beta.1 (2023-05-04)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n1.33.0-alpha.3 (2023-05-04)\n🤖 Build System\n\nupdate dependencies (abb24de)\n\n1.33.0-alpha.2 (2023-05-03)\n🐛 Bug Fixes\n\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n1.33.0-alpha.1 (2023-05-03)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\n\n1.32.0-alpha.1 (2023-04-28)\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\n\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n1.29.0-alpha.3 (2023-03-21)\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n🍕 Features\n\nexperimental build improvements (70a6e7b)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\n\n1.32.0 (2023-05-02)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.32.0-beta.1 (2023-04-26)\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.31.1-beta.1 (2023-04-26)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.31.0-beta.1 (2023-04-25)\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.30.2-beta.1 (2023-04-24)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n1.30.1 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\nleft join users for insight members to show pending invites (611b923)\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.3 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\n\n1.30.1-beta.2 (2023-04-20)\n🐛 Bug Fixes\n\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.1 (2023-04-18)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\n\n1.30.1-beta.1 (2023-04-14)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.2 (2023-04-04)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n\nadd user name to insight members list (7e2756b)\n\n1.30.0-beta.1 (2023-04-04)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\n\n1.29.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.1-beta.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\nremove day conversion from pr velocity (5ee770b)\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.4 (2023-03-28)\n🐛 Bug Fixes\n\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.3 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\n\n1.29.0-beta.2 (2023-03-21)\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\n\n1.29.0-beta.1 (2023-03-21)\n🍕 Features\n\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n1.28.0 (2023-03-16)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo full_name to pull request endpoints (#124) (8bfda45)\nadd repo topics (d08173f)\nadd search endpoint for repos with filters (#125) (85a7549)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n1.28.0-beta.3 (2023-03-15)\n🍕 Features\n\nadd search endpoint for repos with filters (#125) (85a7549)\n\n1.28.0-beta.2 (2023-03-15)\n🍕 Features\n\nadd repo full_name to pull request endpoints (#124) (8bfda45)\n\n1.28.0-beta.1 (2023-03-15)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.27.0 (2023-03-10)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.2 (2023-03-10)\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.1 (2023-03-06)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n1.26.0 (2023-02-28)\n1.27.0-alpha.1 (2023-03-09)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.25.0-alpha.10 (2023-03-08)\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\n\n1.25.0-alpha.9 (2023-03-07)\n🍕 Features\n\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\n\n1.25.0-alpha.8 (2023-03-07)\n🍕 Features\n\nadd endpoint for pull requests (#116) (86e013f)\n\n1.25.0-alpha.7 (2023-03-07)\n🐛 Bug Fixes\n\ncorrect user entity name length (66fb61e)\n\n1.25.0-alpha.6 (2023-02-23)\n🐛 Bug Fixes\n\ncorrect references cascade options (a5a4789)\n\n1.25.0-alpha.5 (2023-02-16)\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\n\n1.25.0-alpha.4 (2023-02-16)\n🍕 Features\n\nadd repo topics (d08173f)\n\n1.25.0-alpha.3 (2023-02-14)\n🐛 Bug Fixes\n\ncorrect user entity lenght (e043912)\n\n1.25.0-alpha.2 (2023-02-10)\n🍕 Features\n\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\n\n1.25.0-alpha.1 (2023-02-02)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\nupdate environment and database connections to new logging model (39bdd16)\n\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\ncorrect missing alpha interests migrations (58540e7)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n1.24.0-alpha.6 (2023-02-01)\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\n\n1.24.0-alpha.5 (2023-02-01)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\n\n1.24.0-alpha.4 (2023-02-01)\n🧑‍💻 Code Refactoring\n\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\n\n1.24.0-alpha.3 (2023-01-31)\n🧑‍💻 Code Refactoring\n\nremove supabase, code split migrations and diagrams (98980b0)\n\n🤖 Build System\n\ncorrect diagram database generator inclusion (afde490)\n\n1.24.0-alpha.2 (2023-01-31)\n🍕 Features\n\nupdate environment and database connections to new logging model (39bdd16)\n\n1.24.0-alpha.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/openai.config.ts\n            \n            variable\n            OpenAIConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/dto/create-endorsement.dto.ts\n            \n            class\n            CreateEndorsementDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/endorsement/dto/update-endorsement.dto.ts\n            \n            class\n            UpdateEndorsementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement-token.guard.ts\n            \n            guard\n            EndorsementTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.controller.ts\n            \n            controller\n            EndorsementController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.service.ts\n            \n            injectable\n            EndorsementService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/endorsement/entities/endorsement.entity.ts\n            \n            entity\n            DbEndorsement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.controller.ts\n            \n            controller\n            CodeRefactorSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            injectable\n            CodeRefactorSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n            \n            class\n            GenerateCodeRefactorSuggestionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-pull-request-description.dto.ts\n            \n            class\n            GeneratePullRequestDescriptionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.controller.ts\n            \n            controller\n            PullRequestDescriptionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            injectable\n            PullRequestDescriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-collaboration.dto.ts\n            \n            class\n            CreateUserCollaborationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-collaboration.dto.ts\n            \n            class\n            UpdateUserCollaborationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/entities/user-collaboration.entity.ts\n            \n            entity\n            DbUserCollaboration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.controller.ts\n            \n            controller\n            UserCollaborationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.service.ts\n            \n            injectable\n            UserCollaborationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-endorsement.controller.ts\n            \n            controller\n            UserEndorsementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\nYou also need the .env environment file added to your repo for the project to run. To get it, kindly contact @open-sauced/triage team.\n\nNote: For Windows users, the API_HOST key's value in the .env file should be 127.0.0.1, instead of 0.0.0.0, so that the project can run correctly on localhost.\n\n🖥️ Local development\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-check In order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        22 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    24 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    24 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    30 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    33 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.37.0-beta.2\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) => applyDecorators(\n  ApiExtraModels(PageDto, model),\n  ApiOkResponse({\n    description: \"Successfully received model list\",\n    schema: {\n      allOf: [\n        { $ref: getSchemaPath(PageDto) },\n        {\n          properties: {\n            data: {\n              type: \"array\",\n              items: { $ref: getSchemaPath(model) },\n            },\n          },\n        },\n      ],\n    },\n  }),\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data: unknown, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n\n    return parseInt(request.user?.user_metadata.sub as string, 10);\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
