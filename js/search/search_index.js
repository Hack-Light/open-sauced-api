var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApiServicesModule.html",[0,1.195,1,3.016]],["body/modules/ApiServicesModule.html",[0,2.101,1,6.147,2,2.645,3,3.282,4,6.273,5,6.273,6,6.273,7,5.498,8,0.006,9,3.351,10,2.81,11,2.645,12,0.087,13,0.096,14,0.077,15,7.034,16,7.034,17,3.573,18,3.738,19,0.126,20,0.89,21,7.034,22,0.106,23,0.213,24,0.005,25,0.005]],["title/modules/AppModule.html",[0,1.195,26,3.659]],["body/modules/AppModule.html",[0,1.156,2,1.115,3,1.806,8,0.006,9,1.843,10,1.185,11,1.115,12,0.037,13,0.041,14,0.033,17,1.264,19,0.149,20,0.375,22,0.045,23,0.09,24,0.003,25,0.003,26,7.536,27,2.645,28,2.645,29,5.05,30,5.31,31,5.31,32,4.828,33,5.31,34,5.31,35,5.31,36,5.31,37,5.31,38,5.05,39,4.828,40,4.164,41,5.31,42,5.31,43,5.05,44,5.31,45,5.31,46,4.306,47,5.05,48,5.31,49,2.966,50,2.885,51,0.592,52,2.966,53,4.614,54,6.388,55,0.178,56,2.966,57,0.573,58,0.723,59,0.285,60,0.275,61,2.966,62,0.592,63,2.149,64,2.966,65,2.966,66,1.387,67,0.894,68,5.697,69,5.138,70,1.806,71,4.614,72,2.966,73,4.114,74,2.433,75,2.966,76,2.149,77,4.114,78,5.662,79,0.756,80,5.662,81,2.966,82,2.966,83,2.433,84,2.433,85,2.433,86,3.785,87,3.785,88,3.785,89,3.785,90,3.785,91,3.785,92,4.614,93,1.954,94,2.966,95,1.923,96,1.54,97,2.269,98,1.954,99,2.809,100,2.966,101,2.622,102,2.044,103,2.809,104,2.275,105,2.809,106,2.275,107,2.809,108,2.275,109,2.645,110,2.966,111,2.966,112,2.966,113,2.966,114,2.966,115,2.044,116,2.275,117,2.966,118,4.614,119,2.275,120,2.966,121,2.966,122,2.711,123,2.966,124,3.04,125,4.614,126,3.026,127,0.906,128,3.18,129,2.645,130,3.18,131,3.18,132,2.966,133,2.433,134,1.876,135,2.966,136,2.966,137,3.539,138,2.645,139,3.18,140,2.433,141,3.18,142,2.966,143,2.584,144,1.585,145,2.433,146,2.809,147,3.18,148,2.044,149,2.622,150,5.05,151,1.876,152,2.966,153,3.04,154,2.275,155,3.04,156,2.275,157,2.918,158,2.645,159,2.541,160,1.422,161,1.806,162,3.04,163,0.96,164,2.149,165,3.343,166,1.686,167,3.04,168,2.275,169,3.04,170,2.275,171,2.966,172,2.809,173,2.433,174,2.966,175,1.093,176,1.743,177,2.645,178,2.966,179,2.645,180,2.966,181,3.604,182,4.614,183,1.441,184,5.662,185,4.614,186,8.978,187,2.966,188,3.785,189,2.966,190,3.785,191,2.966,192,2.622,193,2.966,194,4.114,195,2.966,196,3.343,197,2.966,198,4.614,199,2.755,200,1.52,201,4.614,202,3.18,203,1.321,204,2.966,205,4.114,206,4.114,207,2.966,208,4.614,209,4.114,210,2.966,211,5.662,212,3.785,213,2.966,214,2.966,215,2.966,216,2.966,217,2.966,218,2.966,219,2.966,220,2.966,221,2.966,222,2.966,223,2.966,224,2.966,225,2.149,226,2.966,227,2.966,228,2.275,229,2.966,230,1.806,231,2.966,232,2.966,233,2.966,234,2.966,235,2.966,236,2.966,237,2.966,238,2.966,239,2.645,240,2.966,241,2.966,242,1.876,243,2.433,244,2.149,245,2.275,246,2.966,247,2.275,248,2.275,249,0.849,250,2.966,251,1.215,252,1.299,253,2.966,254,2.966]],["title/controllers/AuthController.html",[255,1.032,256,3.659]],["body/controllers/AuthController.html",[8,0.006,12,0.035,13,0.039,14,0.032,19,0.131,20,0.363,22,0.043,23,0.087,24,0.003,25,0.003,51,0.898,55,0.454,57,1.461,58,0.91,59,0.453,60,0.7,62,1.509,76,2.081,97,3.087,98,1.893,127,1.875,203,1.288,249,0.822,251,1.461,255,0.622,256,3.452,257,0.782,258,2.561,259,1.059,260,3.823,261,0.14,262,1.935,263,4.499,264,6.278,265,6.278,266,6.278,267,6.817,268,6.817,269,6.278,270,2.872,271,6.201,272,0.973,273,2.872,274,4.499,275,3.289,276,3.952,277,5.932,278,2.872,279,2.872,280,2.872,281,2.935,282,2.872,283,2.872,284,4.012,285,5.598,286,5.547,287,5.547,288,5.39,289,2.739,290,2.872,291,2.872,292,1.149,293,4.308,294,4.549,295,2.872,296,5.672,297,4.549,298,5.3,299,3.848,300,2.872,301,2.9,302,2.872,303,2.872,304,5.151,305,2.872,306,2.872,307,6.568,308,5.239,309,2.872,310,4.767,311,5.598,312,4.499,313,4.947,314,5.547,315,2.872,316,2.872,317,5.239,318,2.872,319,4.492,320,2.872,321,2.872,322,2.872,323,6.419,324,1.98,325,2.872,326,2.872,327,2.872,328,2.081,329,1.491,330,1.28,331,3.571,332,3.568,333,3.534,334,3.062,335,2.942,336,1.059,337,0.463,338,1.172,339,2.561,340,1.893,341,2.872,342,5.23,343,2.872,344,2.872,345,2.728,346,2.081,347,3.655,348,2.561,349,3.655,350,2.561,351,5.547,352,2.561,353,2.561,354,2.561,355,2.561,356,2.561,357,2.872,358,2.872,359,1.019,360,2.872,361,3.45,362,2.842,363,2.872,364,2.872,365,1.897,366,3.823,367,4.499,368,3.691,369,4.012,370,1.692,371,1.876,372,4.012,373,5.547,374,1.323,375,3.691,376,5.547,377,1.749,378,2.561,379,1.749,380,0.964,381,1.632,382,2.356,383,3.452,384,3.691,385,4.012,386,3.452,387,3.452,388,3.452,389,3.452,390,3.452,391,2.336,392,3.452,393,3.452,394,3.452,395,4.012,396,1.968,397,2.872,398,1.749,399,2.203,400,2.872,401,1.391,402,2.872,403,2.872,404,2.872,405,2.872,406,1.226,407,2.872,408,4.499,409,2.203,410,2.872,411,2.872,412,2.872,413,2.872,414,2.872,415,2.872,416,2.872,417,2.872,418,3.691,419,2.872,420,4.947,421,0.448,422,2.872,423,2.872,424,2.872,425,2.872,426,2.872,427,2.872,428,2.872,429,2.872,430,2.872,431,2.872,432,2.872,433,2.872,434,2.872,435,3.452,436,2.872,437,2.872]],["title/modules/AuthModule.html",[0,1.195,29,3.287]],["body/modules/AuthModule.html",[0,1.895,2,2.236,3,2.96,8,0.006,9,3.022,10,2.377,11,2.236,12,0.073,13,0.081,14,0.065,17,3.222,18,3.371,19,0.144,20,0.752,22,0.089,23,0.18,24,0.005,25,0.005,29,6.87,32,6.084,46,5.426,47,6.364,50,3.153,115,4.1,127,1.168,128,4.1,129,5.304,133,4.88,256,6.379,257,2.059,338,3.988,339,5.304,438,5.304,439,5.304,440,5.304,441,5.304,442,6.364,443,7.082,444,5.948,445,7.563,446,4.88,447,5.948,448,5.948,449,5.304]],["title/interfaces/ChatResponse.html",[450,2.904,451,3.659]],["body/interfaces/ChatResponse.html",[8,0.006,12,0.074,13,0.082,14,0.066,19,0.125,20,0.755,22,0.09,23,0.181,24,0.005,25,0.005,59,0.441,69,5.267,70,3.633,127,1.172,176,3.507,203,1.709,245,4.578,261,0.291,262,1.251,292,0.769,293,3.286,329,3.099,365,2.02,366,5.224,396,2.063,401,1.098,421,1.299,450,3.633,451,6.389,452,4.578,453,4.578,454,4.896,455,1.35,456,7.813,457,7.579,458,1.35,459,7.582,460,4.896,461,5.322,462,3.286,463,6.039,464,3.507,465,2.2,466,5.322,467,6.758,468,5.74,469,4.578,470,4.896,471,4.113,472,4.896,473,5.322,474,5.322,475,3.932,476,5.322,477,4.325,478,5.322,479,4.578,480,5.322,481,5.322,482,5.322,483,5.322,484,5.322,485,2.244,486,5.322,487,4.578,488,4.896,489,5.322,490,2.078,491,5.322,492,2.435,493,5.322,494,3.392,495,5.322,496,5.322,497,2.336,498,5.322]],["title/controllers/CodeExplanationController.html",[255,1.032,499,3.659]],["body/controllers/CodeExplanationController.html",[8,0.006,12,0.075,13,0.083,14,0.067,19,0.136,20,0.765,22,0.091,23,0.183,24,0.005,25,0.005,51,1.526,55,0.364,57,1.169,58,0.685,59,0.385,60,0.561,62,1.208,163,1.957,203,1.732,255,1.309,257,1.647,259,2.23,261,0.295,262,1.756,272,0.779,275,2.874,293,3.331,329,3.141,330,2.697,331,3.489,332,4.344,335,2.874,336,2.23,337,0.975,338,2.468,359,2.146,361,2.761,362,2.274,365,1.467,396,1.647,401,1.113,406,1.025,465,2.23,497,2.368,499,5.864,500,3.119,501,5.037,502,5.395,503,4.384,504,5.864,505,6.049,506,6.904,507,6.049,508,7.644,509,5.539,510,6.272,511,4.834,512,4.963,513,4.492,514,3.683,515,6.049,516,1.957,517,5.269,518,4.492,519,2.829,520,3.141,521,4.233,522,5.395,523,5.776,524,5.395,525,4.384,526,4.384,527,3.331,528,6.049,529,4.641,530,5.522,531,6.049]],["title/injectables/CodeExplanationService.html",[458,0.849,523,3.287]],["body/injectables/CodeExplanationService.html",[8,0.006,12,0.072,13,0.079,14,0.064,19,0.124,20,0.735,22,0.087,23,0.176,24,0.005,25,0.005,51,1.487,55,0.495,57,1.589,58,0.931,59,0.414,60,0.762,62,1.487,175,2.142,176,3.415,230,3.538,249,1.664,251,2.166,261,0.283,262,1.724,292,1.059,365,1.807,379,3.538,396,1.582,398,3.538,401,1.371,421,1.282,458,1.327,463,5.136,464,5.393,465,2.142,500,3.54,501,5.716,506,6.287,510,6.113,516,2.411,520,3.017,521,4.154,522,5.182,523,5.136,532,1.914,533,5.182,534,7.451,535,5.716,536,4.458,537,5.811,538,7.451,539,5.811,540,6.113,541,5.979,542,5.811,543,5.136,544,4.211,545,4.005,546,4.211,547,4.768,548,4.768,549,4.458,550,4.211,551,4.211,552,2.786,553,4.458,554,4.458,555,4.768,556,5.716,557,4.458,558,4.768,559,4.768,560,4.458,561,5.282,562,4.458,563,4.458,564,4.458]],["title/controllers/CodeRefactorSuggestionController.html",[255,1.032,565,3.659]],["body/controllers/CodeRefactorSuggestionController.html",[8,0.006,12,0.074,13,0.082,14,0.066,19,0.136,20,0.755,22,0.09,23,0.181,24,0.005,25,0.005,51,1.513,55,0.359,57,1.153,58,0.675,59,0.381,60,0.553,62,1.191,163,1.931,203,1.709,255,1.292,257,1.625,259,2.2,261,0.291,262,1.745,272,0.769,275,2.849,293,3.286,329,3.099,330,2.661,331,3.459,332,4.307,335,2.849,336,2.2,337,0.962,338,2.435,359,2.117,361,2.724,362,2.244,365,1.447,396,1.625,401,1.098,406,1.012,465,2.2,497,2.336,500,3.092,501,4.994,503,4.325,504,5.814,509,5.492,511,4.793,512,4.896,513,4.453,514,3.633,516,1.931,517,5.224,518,4.453,519,2.79,520,3.099,521,4.206,525,4.325,526,4.325,527,3.286,529,4.578,530,5.959,565,5.814,566,6.37,567,5.322,568,5.968,569,6.886,570,5.968,571,7.579,572,5.224,573,5.968,574,4.578,575,5.74,576,4.896,577,5.968,578,5.968]],["title/injectables/CodeRefactorSuggestionService.html",[458,0.849,575,3.287]],["body/injectables/CodeRefactorSuggestionService.html",[8,0.006,12,0.068,13,0.076,14,0.061,19,0.121,20,0.698,22,0.083,23,0.167,24,0.005,25,0.005,51,1.439,55,0.483,57,1.551,58,0.908,59,0.404,60,0.744,62,1.439,175,2.036,176,3.244,230,3.362,244,4.001,249,1.581,251,2.113,261,0.269,262,1.682,289,3.362,292,1.034,365,1.748,379,3.362,396,1.503,398,3.362,401,1.327,406,0.936,421,1.251,458,1.284,463,4.969,464,5.319,465,2.036,500,3.472,501,5.606,516,2.332,520,2.867,521,4.657,530,5.289,532,1.819,535,5.53,536,4.236,540,5.914,541,5.865,543,4.969,544,4.001,545,3.806,546,4.001,547,6.585,548,4.53,549,4.236,550,4.001,551,4.001,552,2.647,553,4.236,554,4.236,555,4.53,556,5.53,557,4.236,558,4.53,559,4.53,560,4.236,561,5.18,562,4.236,563,4.236,564,4.236,566,6.24,569,6.166,574,4.236,575,4.969,579,4.53,580,6.428,581,4.924,582,6.428,583,4.924,584,4.924,585,4.53,586,4.53,587,4.53,588,4.53,589,4.924,590,4.924,591,3.806,592,4.53,593,4.924,594,3.492,595,6.428,596,4.53,597,3.04,598,4.53]],["title/controllers/CodeTestSuggestionController.html",[255,1.032,599,3.659]],["body/controllers/CodeTestSuggestionController.html",[8,0.006,12,0.074,13,0.082,14,0.066,19,0.136,20,0.762,22,0.091,23,0.183,24,0.005,25,0.005,51,1.523,55,0.363,57,1.165,58,0.682,59,0.384,60,0.559,62,1.203,163,1.951,203,1.726,255,1.305,257,1.641,259,2.223,261,0.294,262,1.753,272,0.776,275,2.868,293,3.32,329,3.13,330,2.688,331,3.481,332,4.335,335,2.868,336,2.223,337,0.972,338,2.46,359,2.139,361,2.752,362,2.267,365,1.462,396,1.641,401,1.11,406,1.022,465,2.223,497,2.36,500,3.112,501,5.026,503,4.369,504,5.852,509,5.527,511,4.824,512,4.946,513,4.482,514,3.67,516,1.951,517,5.257,518,4.482,519,2.819,520,3.13,521,4.226,525,4.369,526,4.369,527,3.32,529,4.625,530,5.513,574,4.625,576,4.946,599,5.852,600,5.376,601,6.029,602,6.9,603,6.029,604,7.628,605,5.794,606,6.029,607,5.767,608,6.029,609,6.029]],["title/injectables/CodeTestSuggestionService.html",[458,0.849,607,3.287]],["body/injectables/CodeTestSuggestionService.html",[8,0.006,12,0.069,13,0.077,14,0.062,19,0.122,20,0.712,22,0.085,23,0.17,24,0.005,25,0.005,51,1.457,55,0.487,57,1.565,58,0.916,59,0.407,60,0.751,62,1.457,175,2.074,176,3.306,230,3.426,244,4.077,249,1.611,251,2.133,261,0.274,262,1.697,289,3.426,292,1.043,365,1.77,379,3.426,398,3.426,401,1.343,406,0.954,458,1.3,463,5.03,464,5.347,465,2.074,500,3.497,501,5.647,516,2.361,520,2.921,521,4.596,530,4.809,532,1.854,535,5.599,536,4.317,541,5.03,544,4.077,545,3.878,546,4.077,547,6.645,549,4.317,550,4.077,551,4.077,552,2.697,553,4.317,554,4.317,555,4.616,556,5.599,557,4.317,560,4.317,561,5.218,562,4.317,563,4.317,564,4.317,574,4.317,579,4.616,581,5.018,583,5.018,584,5.018,585,4.616,586,4.616,587,4.616,588,4.616,589,5.018,590,5.018,591,3.878,592,4.616,593,5.018,594,3.558,595,6.508,596,4.616,597,3.098,598,4.616,602,6.211,605,5.996,607,5.03,610,7.298,611,7.298,612,7.298,613,5.627]],["title/modules/ContributionModule.html",[0,1.195,30,3.456]],["body/modules/ContributionModule.html",[0,2,2,2.437,3,3.123,8,0.006,9,3.188,10,2.589,11,2.437,12,0.08,13,0.089,14,0.071,17,3.4,18,3.557,19,0.144,20,0.82,22,0.097,23,0.196,24,0.005,25,0.005,30,7.051,40,5.362,50,3.327,66,3.03,67,1.954,93,4.27,95,2.702,96,3.365,99,4.858,183,2.024,257,2.172,614,5.779,615,6.481,616,5.779,617,5.779,618,6.813,619,6.481,620,6.633,621,5.317,622,5.779,623,1.651,624,6.481,625,4.467]],["title/classes/ContributionPageOptionsDto.html",[23,0.144,626,3.456]],["body/classes/ContributionPageOptionsDto.html",[8,0.006,12,0.068,13,0.075,14,0.06,19,0.12,22,0.108,23,0.217,24,0.005,25,0.005,55,0.529,59,0.443,60,0.883,252,2.703,261,0.267,272,1.134,292,1.03,337,0.883,370,2.697,371,2.99,455,1.277,492,3.263,552,2.626,626,5.197,627,1.569,628,5.884,629,2.745,630,2.845,631,2.594,632,2.345,633,6.134,634,3.438,635,3.949,636,3.833,637,7.224,638,2.528,639,3.671,640,7.13,641,3.949,642,4.403,643,5.197,644,5.479,645,4.886,646,2.767,647,3.832,648,2.845,649,2.928,650,4.671,651,3.219,652,3.933,653,2.767,654,3.017,655,3.114,656,2.928,657,3.114,658,3.438,659,2.626,660,2.443,661,3.017,662,3.017,663,3.114,664,3.438,665,3.465,666,3.273,667,1.907,668,2.02,669,1.467,670,4.214,671,4.943,672,5.884,673,3.949,674,5.479]],["title/injectables/ContributionService.html",[458,0.849,618,3.287]],["body/injectables/ContributionService.html",[8,0.006,12,0.072,13,0.08,14,0.064,19,0.142,20,0.736,22,0.087,23,0.176,24,0.005,25,0.005,51,1.489,55,0.449,57,1.441,58,0.844,59,0.375,60,0.691,62,1.162,67,1.755,79,1.483,99,3.544,183,1.818,200,1.918,203,2.136,249,2.136,251,1.533,261,0.284,262,1.725,281,2.502,292,1.06,365,2.176,396,2.031,401,1.071,458,1.328,532,1.918,618,5.141,621,4.776,626,6.29,629,1.883,632,1.9,637,4.776,640,5.191,652,2.863,653,2.94,668,2.146,669,1.558,675,5.191,676,4.915,677,5.821,678,2.71,679,5.821,680,7.459,681,4.915,682,6.329,683,5.821,684,4.012,685,2.48,686,2.027,687,2.233,688,4.776,689,4.466,690,4.507,691,3.308,692,5.191,693,5.821,694,3.178,695,5.821,696,5.191,697,5.191,698,5.821,699,5.191,700,5.191,701,5.821,702,4.776,703,4.776,704,4.107,705,4.012,706,3.681,707,3.42]],["title/controllers/ContributorController.html",[255,1.032,708,3.659]],["body/controllers/ContributorController.html",[8,0.006,12,0.075,13,0.083,14,0.067,19,0.142,20,0.768,22,0.091,23,0.184,24,0.005,25,0.005,51,1.529,55,0.365,57,1.173,58,0.687,59,0.385,60,0.562,62,1.212,143,4.149,144,3.244,163,2.479,252,1.709,255,1.314,257,1.652,259,2.238,261,0.296,262,1.759,272,0.782,275,2.88,281,2.57,334,2.998,335,2.88,336,2.238,337,0.979,359,2.154,362,2.282,401,1.117,465,2.238,527,4.218,632,1.951,669,1.625,673,3.343,686,2.113,687,2.328,708,5.877,709,5.413,710,5.785,711,9.09,712,6.07,713,6.076,714,4.98,715,6.831,716,5.28,717,4.664,718,4.354,719,6.07,720,5.785,721,6.07,722,3.264,723,2.77,724,2.91,725,2.706,726,2.91,727,5.11,728,4.399,729,4.845,730,4.98,731,6.07,732,5.413,733,4.98,734,5.413,735,6.07]],["title/controllers/ContributorInsightsController.html",[255,1.032,736,3.659]],["body/controllers/ContributorInsightsController.html",[8,0.006,12,0.066,13,0.073,14,0.059,19,0.14,20,0.678,22,0.081,23,0.162,24,0.004,25,0.004,51,1.412,55,0.425,57,1.367,58,0.8,59,0.423,60,0.655,62,1.412,143,3.84,144,2.866,163,2.56,203,2.025,252,1.51,255,1.161,257,1.46,259,1.977,261,0.261,262,1.882,272,0.911,275,3.163,281,2.822,334,3.097,335,2.975,336,1.977,337,0.865,359,1.903,362,2.659,401,1.301,465,1.977,546,5.125,572,4.874,623,2.143,632,2.143,636,3.39,658,3.39,660,3.153,669,1.436,673,3.894,686,1.867,687,2.057,710,5.798,713,5.798,720,6.027,722,3.371,723,2.448,724,2.571,725,2.391,726,2.571,727,4.817,728,3.886,729,5.004,730,4.4,732,4.782,734,6.306,736,5.426,737,7.056,738,4.782,739,5.363,740,8.744,741,8.744,742,5.363,743,6.096,744,5.363,745,8.413,746,5.125,747,3.39,748,7.072,749,5.363,750,5.363,751,5.363,752,2.659,753,5.363,754,4.782,755,5.363,756,5.363,757,5.802,758,5.363,759,5.363,760,5.363]],["title/modules/ContributorModule.html",[0,1.195,31,3.456]],["body/modules/ContributorModule.html",[0,2.05,2,2.539,3,3.203,8,0.006,9,3.269,10,2.698,11,2.539,12,0.083,13,0.092,14,0.074,19,0.143,20,0.854,22,0.101,23,0.205,24,0.005,25,0.005,31,6.904,39,6.278,50,3.411,66,3.157,67,2.036,143,3.735,144,3.608,145,5.54,146,4.111,147,4.654,148,4.654,183,2.108,257,2.228,673,3.718,708,6.754,736,6.754,761,6.753,762,6.753,763,6.753,764,6.753,765,6.753,766,6.022]],["title/classes/CreateEndorsementDto.html",[23,0.144,767,3.287]],["body/classes/CreateEndorsementDto.html",[8,0.006,12,0.065,13,0.119,14,0.058,19,0.105,22,0.079,23,0.211,24,0.004,25,0.004,55,0.537,59,0.49,60,0.646,127,1.638,242,4.406,261,0.255,272,1.149,292,1.218,337,0.846,374,2.129,380,3.303,391,4.329,406,1.513,421,1.391,455,1.241,627,1.502,638,1.835,659,2.514,664,3.34,666,3.18,667,1.826,678,2.176,767,4.802,768,8.12,769,4.302,770,6.978,771,6.978,772,3.659,773,6.978,774,6.978,775,3.782,776,7.253,777,6.213,778,2.408,779,5.244,780,5.244,781,5.049,782,5.244,783,5.244,784,5.244,785,5.244,786,6.213,787,4.302,788,5.244,789,5.717,790,5.244,791,5.244,792,5.244,793,5.244,794,3.888,795,3.553,796,5.747,797,4.676,798,5.244,799,4.676,800,5.244,801,4.676]],["title/classes/CreateInsightDto.html",[23,0.144,802,3.456]],["body/classes/CreateInsightDto.html",[8,0.006,12,0.073,13,0.081,14,0.065,19,0.131,22,0.089,23,0.251,24,0.005,25,0.005,55,0.499,58,1.021,59,0.489,175,2.185,181,3.711,199,2.229,261,0.289,272,1.069,298,4.972,337,0.956,374,1.414,406,1.407,421,1.363,455,1.344,627,1.698,629,2.828,667,2.064,678,2.356,775,3.617,778,2.35,794,3.808,795,3.215,802,5.469,803,7.17,804,4.864,805,6.369,806,3.387,807,4.414,808,4.414,809,5.789,810,4.864,811,5.928,812,5.286,813,5.928,814,5.834,815,5.201,816,6.73,817,5.527,818,5.286,819,5.928,820,4.296,821,5.469,822,3.906,823,4.864,824,4.086,825,5.928,826,3.609,827,3.264]],["title/classes/CreateInsightMemberDto.html",[23,0.144,828,3.659]],["body/classes/CreateInsightMemberDto.html",[8,0.006,12,0.085,13,0.095,14,0.076,19,0.125,22,0.104,23,0.251,24,0.005,25,0.005,55,0.416,59,0.447,261,0.337,272,0.89,310,5.361,337,1.114,406,1.171,421,1.438,455,1.478,627,1.979,667,2.406,775,3.011,778,2.114,794,3.615,803,6.808,808,4.658,824,5.719,828,6.366,829,5.67,830,6.013,831,7.399,832,6.163,833,6.911,834,7.399,835,5.67]],["title/classes/CreateLogDto.html",[23,0.144,836,3.659]],["body/classes/CreateLogDto.html",[8,0.006,12,0.082,13,0.091,14,0.073,19,0.1,22,0.1,23,0.246,24,0.005,25,0.005,55,0.526,59,0.44,60,0.88,225,6.343,242,5.535,252,2.752,261,0.325,272,1.127,421,1.481,455,1.446,462,4.82,627,1.908,666,4.158,667,2.32,795,3.882,836,6.227,837,8.124,838,5.942,839,8.753,840,6.664,841,6.664,842,6.664]],["title/classes/CreateUserCollaborationDto.html",[23,0.144,843,3.659]],["body/classes/CreateUserCollaborationDto.html",[8,0.006,12,0.079,13,0.088,14,0.071,19,0.119,22,0.097,23,0.241,24,0.005,25,0.005,55,0.478,59,0.474,127,1.693,163,2.57,192,5.255,261,0.313,272,1.023,337,1.037,406,1.347,421,1.503,455,1.415,462,5.091,541,4.434,627,1.842,667,2.24,775,3.461,778,2.293,781,5.757,794,3.755,795,3.672,843,6.094,844,7.071,845,5.279,846,6.203,847,7.944,848,7.944,849,7.084,850,6.434,851,6.434,852,6.434,853,6.434,854,5.737,855,4.662,856,4.936,857,6.434,858,5.737]],["title/classes/CreateUserHighlightDto.html",[23,0.144,859,3.456]],["body/classes/CreateUserHighlightDto.html",[8,0.006,12,0.068,13,0.076,14,0.061,19,0.109,22,0.083,23,0.219,24,0.005,25,0.005,55,0.512,59,0.487,60,0.789,127,1.735,160,4.535,175,2.663,261,0.27,272,1.097,337,0.893,380,3.246,391,4.588,406,1.444,421,1.535,455,1.287,541,3.818,597,3.978,627,1.586,659,3.462,664,3.853,666,3.669,667,1.928,752,2.716,775,3.147,778,2.384,794,3.502,795,3.63,844,7.249,854,4.939,858,4.939,859,5.234,860,4.939,861,5.825,862,6.403,863,6.535,864,5.379,865,5.539,866,5.539,867,6.441,868,4.76,869,5.542,870,3.147,871,5.539,872,5.539,873,5.539,874,5.539,875,6.441,876,5.539,877,5.539,878,7.223,879,4.939,880,3.255,881,5.539,882,2.469]],["title/injectables/CustomLogger.html",[458,0.849,883,3.456]],["body/injectables/CustomLogger.html",[8,0.006,12,0.057,13,0.063,14,0.05,19,0.119,20,0.58,22,0.069,23,0.139,24,0.004,25,0.004,51,1.27,55,0.529,57,1.657,58,0.97,59,0.442,60,0.795,62,1.654,69,5.561,70,2.792,225,6.005,230,4.803,242,6.26,249,1.313,251,1.923,252,2.056,261,0.223,262,2.006,401,1.525,421,1.564,455,1.133,458,1.133,462,5.272,516,2.681,532,1.511,561,5.353,631,2.3,638,1.207,684,5.91,883,5.293,884,7.994,885,4.089,886,7.304,887,8.793,888,5.992,889,6.472,890,7.304,891,6.513,892,6.361,893,7.888,894,5.91,895,6.361,896,6.361,897,4.586,898,6.361,899,7.888,900,4.586,901,6.361,902,4.586,903,6.361,904,4.586,905,6.361,906,4.586,907,4.586,908,4.586,909,4.089,910,4.586,911,4.586,912,4.586,913,4.586,914,8.286,915,4.586,916,4.586,917,6.361]],["title/modules/CustomerModule.html",[0,1.195,32,3.143]],["body/modules/CustomerModule.html",[0,2.072,2,2.583,3,3.236,8,0.006,9,3.304,10,2.745,11,2.583,12,0.085,13,0.094,14,0.076,17,3.523,18,3.686,19,0.138,20,0.869,22,0.103,23,0.208,24,0.005,25,0.005,32,6.375,50,2.864,66,3.212,67,2.071,131,4.735,183,2.145,349,6.561,918,6.127,919,6.127,920,6.127,921,6.87,922,6.127,923,6.87,924,6.87]],["title/injectables/CustomerService.html",[349,3.143,458,0.849]],["body/injectables/CustomerService.html",[8,0.006,12,0.071,13,0.078,14,0.063,19,0.13,20,0.725,22,0.086,23,0.174,24,0.005,25,0.005,51,1.475,55,0.537,57,1.668,58,0.977,59,0.434,60,0.8,62,1.723,67,1.729,79,1.461,131,3.954,183,1.791,249,2.116,251,1.51,261,0.279,262,1.996,292,1.178,301,2.479,349,4.869,365,1.792,374,2.131,401,1.589,421,1.426,458,1.316,516,2.645,532,1.89,678,2.696,685,2.444,694,3.148,922,5.115,925,5.115,926,6.589,927,3.94,928,7.389,929,7.389,930,5.736,931,5.736,932,7.389,933,7.389,934,7.698,935,5.736,936,5.736,937,7.389,938,5.736,939,7.389,940,5.736,941,5.736,942,5.736,943,3.455,944,5.736,945,3.836,946,5.736,947,5.736]],["title/classes/DatabaseLoggerMiddleware.html",[23,0.144,119,3.659]],["body/classes/DatabaseLoggerMiddleware.html",[8,0.006,12,0.1,13,0.06,14,0.048,19,0.107,20,0.552,22,0.092,23,0.132,24,0.004,25,0.004,51,1.227,55,0.541,57,1.883,58,1.019,59,0.446,60,0.821,62,1.731,63,5.897,79,1.112,83,3.581,84,3.581,85,3.581,119,5.457,202,5.609,203,1.25,225,5.155,249,1.25,251,2.223,252,2.003,261,0.213,292,0.916,379,2.658,398,2.658,401,1.657,421,1.527,455,1.095,462,4.481,516,2.498,561,3.742,627,1.25,638,1.149,684,6.103,722,3.773,889,6.926,891,6.343,948,8.136,949,3.581,950,5.042,951,7.113,952,6.146,953,6.146,954,6.146,955,6.146,956,6.146,957,6.146,958,6.146,959,6.146,960,6.146,961,9.838,962,4.365,963,6.146,964,4.365,965,6.146,966,4.365,967,6.146,968,4.365,969,6.146,970,4.365,971,1.781,972,6.146,973,4.365,974,6.146,975,4.365,976,4.365,977,3.893,978,4.365,979,4.365,980,7.721,981,4.365,982,7.113,983,4.365,984,3.893,985,4.365,986,7.113,987,4.365,988,4.365,989,4.365]],["title/entities/DbContribution.html",[99,2.904,990,1.256]],["body/entities/DbContribution.html",[8,0.006,12,0.047,13,0.052,14,0.042,19,0.109,22,0.058,23,0.116,24,0.004,25,0.004,55,0.533,58,0.823,59,0.477,60,0.748,79,0.975,95,3.03,96,1.987,99,3.405,127,1.099,143,2.553,199,2.733,200,1.261,261,0.186,272,1.141,292,1.101,299,2.615,337,0.617,370,2.485,371,2.755,374,1.845,380,3.295,391,4.015,406,1.449,421,1.133,455,0.996,485,1.439,490,2.531,527,3.08,594,3.537,623,1.97,631,1.384,638,2.251,671,4.555,672,5.422,673,4.258,678,1.746,747,3.485,752,3.215,772,3.616,778,2.389,789,4.589,870,3.167,882,2.493,971,3.489,990,1.473,991,3.413,992,3.25,993,3.295,994,4.988,995,4.003,996,3.828,997,4.79,998,4.79,999,4.003,1000,6.482,1001,3.828,1002,4.988,1003,5.593,1004,3.828,1005,5.01,1006,3.828,1007,2.553,1008,3.856,1009,3.519,1010,6.8,1011,2.493,1012,4.131,1013,1.79,1014,3.643,1015,3.812,1016,2.905,1017,3.828,1018,2.33,1019,3.03,1020,3.828,1021,3.03,1022,3.828,1023,3.828,1024,4.291,1025,4.291,1026,2.638,1027,3.828,1028,2.175,1029,3.828,1030,3.179,1031,3.828,1032,3.413,1033,3.828,1034,2.437,1035,2.989,1036,2.989,1037,2.33,1038,3.828,1039,5.593,1040,3.828,1041,3.828,1042,3.441,1043,2.989,1044,2.108,1045,3.179,1046,3.179,1047,2.904,1048,2.493,1049,2.989,1050,3.338,1051,3.403,1052,3.016,1053,1.562,1054,1.562,1055,2.937,1056,3.828,1057,2.774,1058,2.175,1059,3.14,1060,2.175,1061,3.14,1062,3.828,1063,3.413]],["title/entities/DbCustomer.html",[131,3.287,990,1.256]],["body/entities/DbCustomer.html",[8,0.006,12,0.079,13,0.088,14,0.071,19,0.119,22,0.097,23,0.195,24,0.005,25,0.005,55,0.478,58,0.728,59,0.434,79,1.639,127,1.56,131,5.475,134,5.024,200,2.12,261,0.313,272,1.023,292,1.023,374,2.206,380,3.16,406,1.347,418,6.518,421,1.239,455,1.415,485,2.419,631,2.327,646,4.012,778,2.293,934,7.685,990,2.092,993,3.241,997,5.234,998,5.234,999,4.374,1021,3.312,1042,3.385,1043,4.245,1044,3.543,1051,3.517,1053,2.625,1054,2.625,1057,4.662,1064,5.737,1065,4.936,1066,6.434,1067,5.737,1068,6.434,1069,6.434,1070,3.084,1071,5.737]],["title/entities/DbEmoji.html",[157,3.016,990,1.256]],["body/entities/DbEmoji.html",[8,0.006,12,0.055,13,0.061,14,0.049,19,0.117,22,0.067,23,0.134,24,0.004,25,0.004,55,0.534,58,0.959,59,0.476,60,0.786,79,1.127,150,3.05,157,3.924,159,4.277,160,3.921,161,2.694,199,2.333,200,1.458,261,0.216,272,1.144,292,0.799,299,2.901,337,0.714,370,2.694,371,2.987,374,1.71,380,3.298,391,4.247,406,1.437,421,1.322,455,1.105,485,1.664,490,2.16,492,1.806,597,4.277,638,2.045,747,2.974,752,3.188,778,2.378,870,2.704,882,1.973,971,3.46,990,1.634,992,3.524,993,3.169,1007,2.832,1008,3.814,1009,3.384,1011,2.766,1012,3.527,1013,2.069,1014,3.613,1015,3.78,1016,3.103,1018,2.694,1019,2.587,1021,2.587,1034,2.704,1035,3.316,1036,3.316,1037,2.694,1042,3.31,1047,3.222,1048,2.766,1049,3.316,1050,3.619,1051,3.337,1052,3.271,1053,1.806,1054,1.806,1060,2.515,1072,3.946,1073,7.166,1074,5.193,1075,5.959,1076,4.425,1077,4.425,1078,7.29,1079,4.277,1080,4.76,1081,3.946,1082,3.924,1083,4.425,1084,4.277,1085,3.631,1086,4.425,1087,4.425,1088,4.425,1089,3.631,1090,5.091,1091,6.205,1092,4.425,1093,4.425,1094,4.425,1095,4.425,1096,5.091,1097,3.222,1098,3.946,1099,3.207,1100,2.916,1101,4.425]],["title/entities/DbEndorsement.html",[172,2.904,990,1.256]],["body/entities/DbEndorsement.html",[8,0.006,12,0.055,13,0.113,14,0.049,19,0.094,22,0.068,23,0.136,24,0.004,25,0.004,55,0.536,58,0.509,59,0.49,60,0.827,79,1.146,127,1.537,172,3.821,200,1.482,242,3.969,261,0.219,272,1.149,292,1.098,370,2.718,374,2.162,380,3.303,391,3.259,406,1.512,421,1.391,455,1.118,485,1.691,490,2.185,638,1.653,678,1.96,752,2.36,770,6.447,771,6.447,772,3.38,773,6.447,774,6.447,776,7.283,777,5.597,778,2.385,781,4.548,786,5.597,799,4.011,801,4.011,870,2.735,882,2.005,971,2.561,990,1.653,993,3.569,997,5.616,998,5.616,999,4.693,1007,2.053,1008,3.261,1009,2.735,1011,2.798,1013,2.103,1014,2.674,1015,2.798,1016,2.508,1021,2.617,1034,2.735,1042,3.727,1048,2.798,1051,3.641,1052,2.865,1053,1.835,1054,1.835,1070,2.156,1082,5.39,1084,4.326,1085,3.691,1097,3.259,1099,3.26,1102,4.011,1103,4.498,1104,3.26,1105,4.498,1106,4.498,1107,4.011,1108,4.498,1109,4.498,1110,4.498,1111,6.277,1112,4.815,1113,4.498,1114,6.002,1115,4.498,1116,4.498,1117,4.498,1118,3.26,1119,4.011]],["title/entities/DbInsight.html",[122,2.803,990,1.256]],["body/entities/DbInsight.html",[8,0.006,12,0.046,13,0.051,14,0.041,19,0.115,22,0.056,23,0.112,24,0.003,25,0.003,55,0.536,58,0.934,59,0.472,60,0.739,79,0.943,97,3.517,98,2.438,122,3.206,124,4.713,126,1.977,127,1.621,175,2.011,199,3.184,200,1.219,261,0.18,272,1.148,292,0.921,337,0.597,370,2.436,371,2.701,374,1.969,380,3.302,406,1.466,421,1.115,455,0.972,485,1.391,490,2.778,521,1.869,629,2.314,631,1.338,638,2.23,747,2.615,752,3,778,2.403,805,4.971,806,2.644,807,3.612,808,4.739,809,4.185,824,2.55,862,3.953,870,3.477,880,3.206,882,2.889,971,3.256,990,1.436,992,3.187,993,3.256,997,4.713,998,4.713,999,3.938,1000,4.865,1005,3.76,1007,2.958,1008,3.761,1009,3.477,1011,2.432,1013,1.73,1014,3.4,1015,3.557,1016,3.188,1019,2.274,1021,2.274,1028,2.103,1030,3.1,1034,3.477,1042,3.4,1043,2.915,1044,3.004,1045,3.1,1046,3.1,1047,2.832,1048,2.432,1049,2.915,1050,3.273,1051,3.367,1052,3.264,1053,1.51,1054,1.51,1070,2.615,1089,3.035,1096,4.476,1097,2.832,1104,2.681,1120,3.299,1121,6.48,1122,6.48,1123,2.867,1124,3.7,1125,3.953,1126,2.681,1127,3.7,1128,3.299,1129,3.7,1130,5.183,1131,6.378,1132,5.455,1133,4.865,1134,3.7,1135,3.7,1136,3.7,1137,3.7,1138,4.865,1139,5.455,1140,3.7,1141,5.455,1142,3.7,1143,4.185,1144,3.7,1145,3.76,1146,2.838,1147,3.7,1148,3.7,1149,3.7,1150,3.7,1151,2.34,1152,3.7]],["title/entities/DbInsightMember.html",[155,3.143,990,1.256]],["body/entities/DbInsightMember.html",[8,0.006,12,0.046,13,0.051,14,0.041,19,0.082,22,0.056,23,0.113,24,0.003,25,0.003,55,0.53,58,0.905,59,0.475,60,0.853,79,0.948,127,1.076,155,3.611,199,3.19,200,1.227,261,0.181,272,1.134,292,0.924,310,4.077,370,2.445,371,2.711,374,1.973,380,3.287,406,1.493,421,1.323,455,0.976,485,1.4,490,2.954,597,3.95,631,1.346,638,2.106,747,2.627,752,3.311,778,2.427,808,4.039,824,6.069,830,6.67,835,3.055,868,3.611,870,3.485,882,3.198,971,3.462,990,1.443,992,3.199,993,3.263,997,3.611,998,3.611,999,3.018,1007,3.274,1008,3.892,1009,3.697,1011,2.443,1013,1.741,1014,3.615,1015,3.782,1016,2.866,1019,3.334,1021,2.285,1026,2.566,1034,3.485,1042,3.523,1043,2.929,1044,3.018,1047,2.846,1048,2.443,1049,2.929,1051,3.374,1052,3.49,1053,1.519,1054,1.519,1070,2.627,1082,3.466,1084,3.777,1097,2.846,1099,2.698,1104,2.698,1114,4.205,1123,2.445,1125,3.972,1126,2.698,1145,3.777,1146,2.856,1153,7.326,1154,3.32,1155,5.866,1156,4.713,1157,5.8,1158,6.504,1159,3.32,1160,4.483,1161,3.723,1162,3.723,1163,3.723,1164,3.32,1165,3.723,1166,2.354,1167,3.723,1168,6.397,1169,3.723,1170,3.723,1171,4.887,1172,4.205,1173,3.723,1174,4.887,1175,4.887,1176,3.32,1177,4.205,1178,3.723,1179,3.723,1180,3.723,1181,3.32,1182,3.32]],["title/entities/DbInsightRepo.html",[124,3.143,990,1.256]],["body/entities/DbInsightRepo.html",[8,0.006,12,0.056,13,0.062,14,0.05,19,0.118,22,0.068,23,0.138,24,0.004,25,0.004,55,0.528,58,0.89,59,0.463,60,0.729,79,1.161,122,4.622,124,4.173,164,3.302,175,2.335,200,1.501,261,0.222,272,1.13,292,1.102,337,0.735,370,2.737,374,2.169,380,3.283,406,1.451,421,0.987,455,1.128,485,1.713,490,2.739,597,3.487,623,2.28,631,1.648,638,2.071,752,2.958,772,3.403,778,2.39,808,4.773,826,4.431,827,2.509,870,3.428,882,2.823,971,3.21,990,1.667,992,3.58,993,3.21,1007,2.89,1008,3.731,1009,3.428,1011,2.823,1013,2.13,1014,3.352,1015,3.507,1016,3.143,1021,2.64,1028,2.589,1030,3.599,1034,3.428,1042,3.352,1043,3.384,1044,3.487,1045,3.599,1046,3.599,1047,3.288,1048,2.823,1050,3.198,1051,3.373,1052,3.322,1053,1.859,1054,1.859,1070,3.489,1097,3.288,1125,4.589,1126,3.302,1128,4.063,1153,7.343,1156,5.991,1166,4.005,1183,3.302,1184,4.063,1185,4.556,1186,4.005,1187,3.495,1188,4.063,1189,4.063,1190,4.556,1191,4.556,1192,4.063,1193,4.556,1194,4.063,1195,4.556]],["title/entities/DbLog.html",[141,3.287,990,1.256]],["body/entities/DbLog.html",[8,0.006,12,0.078,13,0.087,14,0.07,19,0.095,22,0.095,23,0.192,24,0.005,25,0.005,55,0.554,58,0.718,59,0.463,79,1.616,141,5.427,200,2.089,225,6.205,242,5.415,261,0.309,272,1.186,370,3.219,374,2.043,380,3.341,421,1.499,455,1.402,462,4.715,631,2.293,752,2.96,990,2.073,1042,4.054,1043,4.207,1048,3.817,1097,3.293,1196,5.655,1197,6.342,1198,6.342,1199,6.342,1200,6.342,1201,6.342,1202,6.342,1203,6.342,1204,6.342]],["title/entities/DbPRInsight.html",[162,3.143,990,1.256]],["body/entities/DbPRInsight.html",[8,0.006,12,0.055,13,0.061,14,0.049,19,0.093,22,0.067,23,0.135,24,0.004,25,0.004,55,0.51,58,0.503,59,0.486,79,1.132,147,6.007,162,4.099,163,2.82,199,3.512,200,1.463,261,0.216,272,1.093,292,1.22,374,1.713,380,3.242,406,1.439,455,1.108,485,1.67,492,2.539,500,3.556,527,4.674,631,1.606,638,2.459,660,2.774,671,5.851,678,1.943,752,2.339,778,2.379,864,5.168,971,2.539,990,1.638,993,3.464,995,5.097,1005,4.288,1008,2.594,1014,2.651,1015,2.774,1016,2.486,1019,3.894,1021,2.594,1034,2.711,1035,3.324,1036,3.324,1042,3.617,1043,3.324,1044,3.426,1051,3.556,1053,1.812,1054,1.812,1058,2.524,1082,5.625,1205,3.961,1206,7.181,1207,7.181,1208,5.891,1209,5.743,1210,7.181,1211,5.548,1212,7.181,1213,4.442,1214,4.442,1215,7.78,1216,6.222,1217,6.222,1218,6.222,1219,6.222,1220,4.442,1221,4.442,1222,4.442,1223,4.442,1224,6.222,1225,6.222,1226,6.222,1227,6.222,1228,6.222,1229,3.961,1230,4.442,1231,5.548,1232,4.442,1233,3.062,1234,4.442,1235,7.181]],["title/entities/DbPullRequest.html",[146,2.904,990,1.256]],["body/entities/DbPullRequest.html",[8,0.006,12,0.026,13,0.079,14,0.023,19,0.067,22,0.031,23,0.063,24,0.002,25,0.002,55,0.548,58,0.652,59,0.48,60,0.866,79,0.528,143,4.286,146,2.105,147,6.312,163,3.038,175,1.274,192,2.948,199,3.121,200,0.683,228,3.979,261,0.101,272,1.175,292,1.104,299,2.425,337,0.334,370,1.671,371,1.853,374,1.375,380,3.329,391,1.795,406,1.552,421,1.402,455,0.616,485,0.78,490,0.722,500,3.737,597,4.444,623,0.881,631,0.75,638,2.277,639,1.441,678,1.079,747,2.486,752,3.121,772,2.078,778,2.468,807,3.494,826,2.706,827,1.142,862,4.176,864,4.914,971,3.024,990,0.91,993,3.688,995,1.142,1005,4.768,1007,0.946,1008,3.605,1009,3.229,1011,1.541,1014,3.158,1015,3.304,1016,2.961,1019,2.884,1021,1.441,1024,2.652,1025,3.979,1034,3.229,1035,3.96,1036,3.96,1042,3.58,1043,1.847,1044,1.142,1048,1.541,1050,1.746,1051,3.706,1052,1.578,1053,0.846,1054,0.846,1060,3.275,1082,2.186,1177,2.652,1186,2.186,1187,1.591,1229,1.849,1233,1.429,1236,1.849,1237,4.445,1238,4.445,1239,4.445,1240,4.445,1241,3.647,1242,4.445,1243,3.647,1244,5.139,1245,4.445,1246,5.763,1247,4.445,1248,5.763,1249,4.445,1250,5.763,1251,5.139,1252,3.647,1253,5.763,1254,4.445,1255,4.445,1256,5.763,1257,4.445,1258,4.445,1259,5.187,1260,2.505,1261,2.074,1262,2.074,1263,5.187,1264,5.187,1265,3.457,1266,2.074,1267,2.074,1268,4.255,1269,2.074,1270,2.074,1271,2.074,1272,2.074,1273,2.836,1274,3.457,1275,3.457,1276,2.074,1277,3.457,1278,5.187,1279,2.074,1280,2.074,1281,2.074,1282,2.074,1283,3.083,1284,2.074,1285,5.187,1286,2.074,1287,2.074,1288,2.074,1289,2.074,1290,3.457,1291,3.083,1292,2.074,1293,2.074,1294,3.457,1295,3.457,1296,4.445,1297,3.457,1298,3.457,1299,3.457,1300,3.457,1301,3.457,1302,1.849,1303,2.074,1304,3.457,1305,2.074,1306,2.074,1307,2.074,1308,2.074,1309,2.074,1310,2.074,1311,2.074,1312,1.849,1313,2.074,1314,2.074,1315,2.074,1316,4.625,1317,2.074,1318,2.074,1319,2.074,1320,2.074,1321,2.074,1322,2.074,1323,2.074,1324,2.074,1325,3.457,1326,3.457,1327,3.083,1328,3.457,1329,2.074,1330,2.074,1331,2.074,1332,2.074,1333,2.074,1334,2.074,1335,2.074,1336,1.701,1337,5.551,1338,5.187,1339,1.849,1340,2.074,1341,2.074,1342,1.849,1343,2.074,1344,1.849,1345,2.074,1346,1.904,1347,2.186]],["title/classes/DbPullRequestContributor.html",[23,0.144,720,3.287]],["body/classes/DbPullRequestContributor.html",[8,0.006,12,0.08,13,0.088,14,0.071,19,0.097,22,0.097,23,0.195,24,0.005,25,0.005,55,0.478,59,0.4,60,0.737,143,3.63,163,2.993,192,4.52,261,0.314,272,1.024,299,3.719,371,3.596,380,3.161,406,1.348,421,1.24,455,1.416,485,2.423,500,3.519,627,1.846,720,5.481,729,5.455,747,3.812,752,2.99,778,2.294,864,4.842,993,3.245,1008,3.315,1009,3.465,1034,3.465,1035,4.25,1036,4.25,1051,3.519,1053,2.63,1054,2.63,1060,4.52,1241,7.077,1268,6.525,1344,7.092,1348,5.748,1349,6.446,1350,6.446]],["title/entities/DbRepoToUserStargazers.html",[107,2.904,990,1.256]],["body/entities/DbRepoToUserStargazers.html",[8,0.006,12,0.055,13,0.061,14,0.049,19,0.123,22,0.067,23,0.134,24,0.004,25,0.004,55,0.534,58,0.811,59,0.465,60,0.786,79,1.127,95,3.238,97,3.82,98,2.916,107,3.778,126,2.365,127,1.71,199,2.333,200,1.458,261,0.216,272,1.144,292,1.092,299,2.901,337,0.714,370,2.694,371,2.987,374,2.077,380,3.298,406,1.386,455,1.105,485,1.664,490,2.16,623,2.084,638,2.045,678,1.938,747,2.974,752,3.188,772,3.824,778,2.331,870,2.704,882,1.973,971,3.46,990,1.634,992,3.524,993,2.924,1007,2.832,1008,3.814,1009,3.384,1011,2.766,1012,3.527,1013,2.069,1014,3.613,1015,3.78,1016,3.103,1018,2.694,1019,2.587,1021,3.535,1028,3.527,1030,4.414,1034,2.704,1035,3.316,1036,3.316,1037,2.694,1042,3.053,1045,4.073,1046,4.073,1047,3.222,1048,2.766,1049,3.316,1050,3.923,1051,3.169,1052,3.271,1053,1.806,1054,1.806,1058,2.515,1060,2.515,1070,2.121,1097,3.222,1123,3.075,1166,2.798,1351,3.946,1352,6.956,1353,4.425,1354,4.425,1355,3.05,1356,4.425,1357,4.425,1358,4.425,1359,3.05,1360,4.425,1361,4.425,1362,4.425,1363,4.425,1364,4.425,1365,4.425,1366,3.05,1367,4.425,1368,3.946]],["title/entities/DbRepoToUserStars.html",[103,2.904,990,1.256]],["body/entities/DbRepoToUserStars.html",[8,0.006,12,0.055,13,0.061,14,0.049,19,0.123,22,0.067,23,0.134,24,0.004,25,0.004,55,0.534,58,0.811,59,0.465,60,0.786,79,1.127,95,3.238,97,3.82,98,2.916,103,3.778,126,2.365,127,1.71,199,2.333,200,1.458,261,0.216,272,1.144,292,1.092,299,2.901,337,0.714,370,2.694,371,2.987,374,2.077,380,3.298,406,1.386,455,1.105,485,1.664,490,2.16,623,2.084,638,2.045,678,1.938,747,2.974,752,3.188,772,3.824,778,2.331,870,2.704,882,1.973,971,3.46,990,1.634,992,3.524,993,2.924,1007,2.832,1008,3.814,1009,3.384,1011,2.766,1012,3.527,1013,2.069,1014,3.613,1015,3.78,1016,3.103,1018,2.694,1019,2.587,1021,3.535,1028,3.527,1030,4.414,1034,2.704,1035,3.316,1036,3.316,1037,2.694,1042,3.053,1045,4.073,1046,4.073,1047,3.222,1048,2.766,1049,3.316,1050,3.923,1051,3.169,1052,3.271,1053,1.806,1054,1.806,1058,2.515,1060,2.515,1070,2.121,1097,3.222,1123,3.075,1166,2.798,1355,3.05,1359,3.05,1366,3.05,1369,3.946,1370,6.505,1371,4.425,1372,4.425,1373,4.425,1374,4.425,1375,4.425,1376,4.425,1377,4.425,1378,4.425,1379,4.425,1380,4.425,1381,4.425,1382,4.425,1383,3.946]],["title/entities/DbRepoToUserSubmissions.html",[105,2.904,990,1.256]],["body/entities/DbRepoToUserSubmissions.html",[8,0.006,12,0.052,13,0.057,14,0.046,19,0.121,22,0.063,23,0.127,24,0.004,25,0.004,55,0.536,58,0.788,59,0.465,60,0.812,79,1.07,95,3.163,97,3.732,98,2.767,105,3.641,126,2.244,127,1.685,175,2.205,199,3.015,200,1.384,261,0.205,272,1.149,292,1.073,299,2.796,337,0.677,370,2.618,371,2.903,374,2.046,380,3.303,406,1.413,455,1.065,485,1.579,490,2.082,623,2.043,638,2.112,678,1.867,747,2.866,752,3.134,772,3.75,778,2.355,807,3.02,870,2.606,880,3.514,882,1.872,971,3.401,990,1.575,992,3.425,993,3.096,1007,2.729,1008,3.772,1009,3.632,1011,2.666,1012,3.399,1013,1.964,1014,3.552,1015,3.716,1016,3.032,1018,2.557,1019,2.493,1021,3.475,1028,3.399,1030,4.313,1034,2.606,1035,3.195,1036,3.195,1037,2.557,1042,3.233,1045,3.958,1046,3.958,1047,3.105,1048,2.666,1049,3.195,1050,3.833,1051,3.272,1052,3.178,1053,1.714,1054,1.714,1058,2.387,1060,2.387,1070,2.013,1097,3.105,1123,3.015,1130,4.333,1133,3.745,1166,2.656,1355,2.895,1359,2.895,1366,2.895,1384,3.745,1385,6.21,1386,7.193,1387,4.2,1388,4.2,1389,4.2,1390,5.98,1391,5.98,1392,4.2,1393,4.2,1394,4.2,1395,4.2,1396,4.2,1397,4.2,1398,4.2,1399,4.2,1400,4.2,1401,4.2,1402,3.745]],["title/entities/DbRepoToUserVotes.html",[101,2.711,990,1.256]],["body/entities/DbRepoToUserVotes.html",[8,0.006,12,0.055,13,0.061,14,0.049,19,0.123,22,0.067,23,0.134,24,0.004,25,0.004,55,0.534,58,0.811,59,0.465,60,0.786,79,1.127,95,3.238,97,3.82,98,2.916,101,3.527,126,2.365,127,1.71,199,2.333,200,1.458,261,0.216,272,1.144,292,1.092,299,2.901,337,0.714,370,2.694,371,2.987,374,2.077,380,3.298,406,1.386,455,1.105,485,1.664,490,2.16,623,2.084,638,2.045,678,1.938,747,2.974,752,3.188,772,3.824,778,2.331,870,2.704,882,1.973,971,3.46,990,1.634,992,3.524,993,2.924,1007,2.832,1008,3.814,1009,3.384,1011,2.766,1012,3.527,1013,2.069,1014,3.613,1015,3.78,1016,3.103,1018,2.694,1019,2.587,1021,3.535,1028,3.527,1030,4.414,1034,2.704,1035,3.316,1036,3.316,1037,2.694,1042,3.053,1045,4.073,1046,4.073,1047,3.222,1048,2.766,1049,3.316,1050,3.923,1051,3.169,1052,3.271,1053,1.806,1054,1.806,1058,2.515,1060,2.515,1070,2.121,1097,3.222,1123,3.075,1166,2.798,1355,3.05,1359,3.05,1366,3.05,1403,3.946,1404,6.505,1405,4.425,1406,4.425,1407,4.425,1408,4.425,1409,4.425,1410,4.425,1411,4.425,1412,4.425,1413,4.425,1414,4.425,1415,4.425,1416,4.425,1417,3.946]],["title/entities/DbSubscription.html",[139,3.287,990,1.256]],["body/entities/DbSubscription.html",[8,0.006,12,0.037,13,0.041,14,0.033,19,0.085,22,0.045,23,0.09,24,0.003,25,0.003,55,0.535,58,0.336,59,0.481,60,0.832,79,0.756,127,0.906,139,3.18,199,1.735,200,0.977,261,0.144,272,1.146,292,0.823,337,0.478,370,2.129,374,1.651,380,3.299,406,1.493,421,1.233,455,0.822,485,1.115,490,3.173,492,1.21,591,4.403,592,6.012,597,4.035,631,1.073,638,2.4,752,3.603,778,2.428,797,2.645,807,3.226,870,3.971,882,3.622,971,3.663,990,1.215,993,2.824,1005,4.403,1007,3.708,1008,4.031,1009,3.971,1011,2.848,1012,5.18,1013,1.387,1014,3.825,1015,4.002,1016,3.587,1019,1.923,1021,2.663,1026,5.451,1042,3.753,1043,2.465,1044,1.633,1048,2.057,1050,2.33,1051,2.99,1052,3.79,1053,1.21,1054,1.21,1081,2.645,1123,2.129,1312,2.645,1418,6.888,1419,2.645,1420,5.049,1421,5.049,1422,5.049,1423,5.049,1424,5.049,1425,5.049,1426,4.344,1427,5.049,1428,5.678,1429,4.376,1430,5.049,1431,5.049,1432,4.614,1433,2.966,1434,6.068,1435,2.966,1436,4.614,1437,2.966,1438,2.966,1439,4.629,1440,6.388,1441,2.966,1442,2.966,1443,2.966,1444,2.966,1445,2.966,1446,2.966,1447,4.114,1448,2.966,1449,2.966,1450,2.966,1451,2.966,1452,4.103,1453,2.966,1454,6.388,1455,2.966,1456,2.966,1457,2.966,1458,2.966,1459,2.645,1460,2.966,1461,2.966,1462,2.966]],["title/classes/DbTopUser.html",[23,0.144,1463,3.456]],["body/classes/DbTopUser.html",[8,0.006,12,0.087,13,0.096,14,0.078,19,0.106,22,0.106,23,0.214,24,0.005,25,0.005,55,0.424,59,0.355,60,0.778,127,1.649,166,4.771,261,0.343,272,0.908,380,3.008,406,1.195,421,1.309,455,1.495,485,2.65,627,2.018,778,2.139,855,6.084,993,2.876,1051,3.426,1053,2.876,1054,2.876,1463,6.084,1464,7.487,1465,6.285,1466,6.872,1467,7.048]],["title/entities/DbUserCollaboration.html",[169,3.143,990,1.256]],["body/entities/DbUserCollaboration.html",[8,0.006,12,0.041,13,0.045,14,0.036,19,0.102,22,0.05,23,0.1,24,0.003,25,0.003,55,0.53,58,0.685,59,0.474,60,0.834,79,0.841,97,3.908,127,1.832,163,2.474,169,3.3,199,2.875,200,1.087,261,0.161,272,1.134,292,0.87,310,3.84,337,0.532,370,2.276,371,2.523,374,2.072,380,3.287,406,1.449,421,1.192,455,0.892,462,4,485,1.241,490,2.976,631,1.193,638,2.155,747,2.401,752,3.384,778,2.388,846,6.462,849,4.466,856,2.532,868,4.452,870,3.332,882,3.238,971,3.487,990,1.319,992,2.977,993,2.964,997,4.452,998,4.452,999,3.721,1007,3.315,1008,3.908,1009,3.724,1011,2.233,1013,1.543,1014,3.642,1015,3.81,1016,2.7,1019,3.188,1021,2.088,1026,3.452,1028,2.846,1030,3.84,1034,3.332,1042,3.385,1043,2.676,1044,2.758,1045,3.44,1046,3.44,1047,2.6,1048,2.233,1049,2.676,1050,3.057,1051,3.12,1052,3.49,1053,1.347,1054,1.347,1070,1.582,1082,4.273,1084,3.452,1097,2.6,1099,2.391,1104,2.391,1107,2.943,1112,3.842,1114,3.842,1119,2.943,1123,2.731,1125,3.629,1126,2.391,1145,3.452,1146,2.532,1159,2.943,1160,4.171,1164,2.943,1171,6.025,1172,5.183,1429,4.594,1468,5.425,1469,2.943,1470,6.052,1471,6.052,1472,5.397,1473,7.264,1474,5.008,1475,3.3,1476,3.3,1477,3.3,1478,3.3,1479,5.008,1480,4.109,1481,5.008,1482,3.3,1483,3.3,1484,3.3,1485,3.3,1486,3.3,1487,3.3,1488,3.3,1489,3.3,1490,3.3,1491,3.3,1492,5.008,1493,3.3,1494,2.175,1495,3.3,1496,3.3,1497,3.3]],["title/entities/DbUserHighlight.html",[149,2.711,990,1.256]],["body/entities/DbUserHighlight.html",[8,0.006,12,0.037,13,0.077,14,0.033,19,0.104,22,0.045,23,0.09,24,0.003,25,0.003,55,0.54,58,0.94,59,0.475,60,0.864,79,0.756,97,3.142,127,1.73,143,2.916,149,2.622,159,3.518,160,4.593,161,1.806,163,2.067,166,2.622,175,2.355,199,3.427,200,0.977,261,0.144,272,1.156,292,0.823,337,0.478,370,2.129,371,2.36,374,1.825,380,3.31,391,3.593,406,1.493,421,1.339,455,0.822,485,1.115,597,4.355,623,1.175,631,1.073,638,2.083,752,3.376,778,2.428,807,3.995,826,3.447,827,1.633,855,2.149,861,4.103,862,5.015,863,4.901,864,1.806,867,4.114,868,5.211,869,6.068,870,3.446,875,5.697,879,4.114,882,2.848,971,3.227,990,1.215,992,2.785,993,3.389,1007,2.916,1008,3.743,1009,3.446,1011,2.057,1013,1.387,1014,3.37,1015,3.526,1016,2.552,1019,3.055,1021,2.663,1026,2.044,1028,1.686,1030,3.631,1042,3.259,1043,2.465,1044,1.633,1045,2.622,1046,3.218,1047,2.395,1048,2.057,1049,2.465,1050,2.86,1051,3.451,1052,3.159,1053,1.21,1054,1.21,1057,2.149,1065,2.275,1070,2.212,1074,4.103,1089,2.433,1090,3.785,1096,3.785,1123,2.602,1125,3.343,1126,2.149,1145,3.18,1146,2.275,1175,4.114,1176,2.645,1177,5.622,1182,2.645,1186,4.04,1187,2.275,1337,5.049,1466,5.015,1468,5.51,1494,1.954,1498,2.645,1499,5.678,1500,6.921,1501,2.966,1502,2.966,1503,5.241,1504,4.614,1505,2.966,1506,2.966,1507,4.614,1508,2.966,1509,2.966,1510,2.966,1511,2.966,1512,2.966,1513,2.966,1514,2.966,1515,2.966,1516,3.785,1517,2.966,1518,2.966,1519,2.966,1520,2.966,1521,2.966,1522,2.966,1523,2.966,1524,2.966,1525,2.966,1526,2.645,1527,2.966,1528,2.645,1529,2.645,1530,2.966,1531,2.966]],["title/entities/DbUserHighlightReaction.html",[159,2.626,990,1.256]],["body/entities/DbUserHighlightReaction.html",[8,0.006,12,0.046,13,0.051,14,0.041,19,0.12,22,0.056,23,0.112,24,0.003,25,0.003,55,0.536,58,0.809,59,0.475,60,0.852,79,0.943,97,3.187,127,1.567,149,3.683,151,2.34,157,4.098,158,3.299,159,4.2,160,4.582,199,3.457,200,1.219,261,0.18,272,1.148,292,1.028,299,2.551,337,0.597,370,2.436,371,2.701,374,2.063,380,3.239,406,1.353,421,1.115,455,0.972,485,1.391,490,1.899,597,3.004,638,1.883,747,2.615,752,3,778,2.299,870,2.377,882,1.649,971,3.256,990,1.436,992,3.187,993,2.918,1007,2.49,1008,3.665,1009,3.116,1011,2.432,1012,3.1,1013,1.73,1014,3.4,1015,3.557,1016,2.858,1018,2.253,1019,3.761,1021,3.53,1028,3.683,1030,4.535,1032,3.299,1034,2.377,1035,2.915,1036,2.915,1037,2.253,1042,3.249,1045,4.065,1046,4.065,1047,2.832,1048,2.432,1049,2.915,1050,3.852,1051,3.112,1052,2.958,1053,1.51,1054,1.51,1058,2.103,1060,2.103,1070,1.773,1075,6.922,1078,6.257,1082,5.046,1084,4.929,1085,3.035,1097,2.832,1099,3.953,1104,2.681,1123,2.867,1177,4.185,1302,3.299,1468,5.493,1494,2.438,1516,6.257,1532,3.299,1533,5.851,1534,4.971,1535,3.7,1536,3.7,1537,3.7,1538,3.7,1539,3.7,1540,3.7,1541,3.7,1542,3.7,1543,3.7,1544,3.7,1545,3.7,1546,3.7,1547,3.7,1548,3.7,1549,3.7,1550,3.7,1551,3.7,1552,3.7,1553,3.7,1554,3.7,1555,3.7]],["title/classes/DbUserHighlightReactionResponse.html",[23,0.144,1556,3.143]],["body/classes/DbUserHighlightReactionResponse.html",[8,0.006,12,0.085,13,0.094,14,0.076,19,0.139,22,0.125,23,0.269,24,0.005,25,0.005,150,4.754,159,3.798,160,3.973,161,4.199,175,2.543,252,1.942,337,1.112,406,1.169,421,1.075,623,2.111,627,1.975,630,3.581,631,2.997,632,2.111,664,3.973,666,3.783,667,2.401,668,2.543,669,1.847,778,1.757,795,3.531,827,3.798,1533,5.291,1534,5.291,1556,5.461,1557,5.659,1558,6.151,1559,4.545,1560,4.362,1561,6.151]],["title/classes/DbUserHighlightRepo.html",[23,0.144,1562,3.456]],["body/classes/DbUserHighlightRepo.html",[8,0.006,12,0.086,13,0.095,14,0.077,19,0.105,22,0.105,23,0.211,24,0.005,25,0.005,55,0.419,58,0.943,59,0.35,60,0.772,160,4.432,175,3.073,261,0.339,272,0.897,380,2.993,406,1.181,421,1.3,455,1.485,485,2.619,623,2.124,627,1.995,778,2.124,826,5.432,827,4.591,993,2.842,1051,3.402,1053,2.842,1054,2.842,1183,5.047,1186,5.272,1562,6.041,1563,7.434,1564,6.965]],["title/entities/DbUserNotification.html",[167,3.143,990,1.256]],["body/entities/DbUserNotification.html",[8,0.006,12,0.052,13,0.095,14,0.046,19,0.105,22,0.063,23,0.127,24,0.004,25,0.004,55,0.527,58,0.475,59,0.486,60,0.838,79,1.069,127,1.856,160,2.864,167,3.937,199,2.247,200,1.382,261,0.204,272,1.129,292,1.073,374,2.128,380,3.281,406,1.486,421,1.299,455,1.064,462,4.414,485,1.577,490,2.08,631,1.517,638,1.573,670,3.511,752,3.133,778,2.421,831,5.328,855,4.33,868,3.937,870,3.305,882,2.664,971,3.095,990,1.573,993,3.4,997,5.49,998,5.49,999,4.588,1005,5.228,1007,2.727,1008,3.654,1009,3.305,1011,2.664,1013,1.961,1014,3.232,1015,3.381,1016,2.387,1019,2.491,1021,2.491,1026,2.891,1034,2.603,1042,3.653,1043,3.193,1044,2.31,1048,2.664,1051,3.499,1052,3.176,1053,1.712,1054,1.712,1057,3.04,1065,3.218,1067,3.741,1070,2.011,1071,3.741,1100,3.937,1123,2.617,1143,4.584,1172,4.584,1468,5.43,1565,3.741,1566,6.206,1567,5.71,1568,6.206,1569,6.206,1570,4.195,1571,4.195,1572,7.585,1573,4.195,1574,3.937,1575,4.195,1576,4.195,1577,4.195,1578,5.328,1579,4.195,1580,5.328,1581,4.195,1582,5.975,1583,4.195,1584,4.195,1585,4.797,1586,4.195,1587,4.195,1588,3.442,1589,3.741,1590,4.195,1591,3.741,1592,3.741]],["title/entities/DbUserRepo.html",[130,3.287,990,1.256]],["body/entities/DbUserRepo.html",[8,0.006,12,0.065,13,0.072,14,0.058,19,0.105,22,0.079,23,0.159,24,0.004,25,0.004,55,0.522,58,0.887,59,0.458,60,0.647,79,1.34,127,1.754,128,6.156,130,4.812,175,2.574,200,1.733,261,0.256,272,1.119,292,1.15,370,2.947,374,1.87,380,3.27,406,1.473,421,1.089,455,1.243,485,1.977,490,2.431,597,3.844,623,2.275,631,1.902,638,1.838,752,2.625,772,3.664,778,2.41,826,4.771,827,2.896,870,3.042,882,2.345,971,2.849,990,1.838,993,3.406,1007,2.4,1008,3.48,1009,3.042,1011,3.112,1013,2.459,1014,2.975,1015,3.112,1016,2.789,1021,3.723,1034,3.042,1042,2.975,1043,3.731,1044,2.896,1048,3.112,1051,3.545,1052,3.186,1053,2.146,1054,2.146,1057,3.811,1065,4.035,1070,3.757,1123,2.947,1183,3.811,1186,4.415,1187,4.035,1189,4.69,1192,4.69,1526,6.226,1529,6.226,1593,5.885,1594,5.259,1595,5.259,1596,5.259,1597,5.259]],["title/entities/DbUserToUserFollows.html",[153,3.143,990,1.256]],["body/entities/DbUserToUserFollows.html",[8,0.006,12,0.059,13,0.066,14,0.053,19,0.113,22,0.072,23,0.146,24,0.004,25,0.004,55,0.523,58,0.545,59,0.463,60,0.807,79,1.227,127,1.828,153,4.335,199,2.474,200,1.587,261,0.235,272,1.121,292,1.121,299,3.076,337,0.777,370,2.818,371,3.124,374,1.788,380,3.273,406,1.429,455,1.172,485,1.811,490,2.291,638,2.121,747,3.154,752,3.273,778,2.37,870,2.867,882,2.147,971,3.552,990,1.732,992,3.686,993,3.058,1007,3.003,1008,3.879,1009,3.509,1011,2.933,1012,3.739,1013,2.252,1014,3.709,1015,3.881,1016,3.218,1018,2.932,1019,2.743,1021,3.629,1034,2.867,1035,3.516,1036,3.516,1037,2.932,1042,3.193,1047,3.416,1048,2.933,1049,3.516,1050,3.323,1051,3.286,1052,3.42,1053,1.965,1054,1.965,1058,2.737,1060,2.737,1070,2.309,1097,3.416,1123,2.818,1166,3.046,1355,3.319,1359,3.319,1366,3.319,1468,5.425,1598,4.295,1599,5.749,1600,5.999,1601,4.816,1602,4.816,1603,6.58,1604,4.816,1605,4.816,1606,4.816,1607,4.816,1608,3.951]],["title/entities/DbUserTopRepo.html",[165,3.456,990,1.256]],["body/entities/DbUserTopRepo.html",[8,0.006,12,0.053,13,0.058,14,0.047,19,0.121,22,0.064,23,0.13,24,0.004,25,0.004,55,0.53,58,0.796,59,0.462,60,0.777,79,1.089,95,3.189,96,2.22,97,3.762,127,1.693,165,4.389,166,5.387,199,2.277,200,1.409,261,0.343,272,1.134,292,1.08,299,2.832,337,0.689,370,2.644,371,2.932,374,2.057,380,3.287,406,1.369,455,1.079,485,1.608,490,2.109,623,2.341,638,2.014,678,1.891,747,2.903,752,3.153,772,3.775,778,2.314,863,4.647,870,2.639,882,1.906,971,3.421,990,1.595,992,3.459,993,2.87,1007,2.764,1008,3.787,1009,3.333,1012,3.442,1013,1.999,1014,3.573,1015,3.738,1016,3.057,1018,2.603,1019,2.525,1021,3.496,1028,3.442,1030,4.348,1034,2.639,1035,3.236,1036,3.236,1037,2.603,1042,2.997,1045,3.997,1046,3.997,1047,3.145,1048,2.7,1049,3.236,1050,3.864,1051,3.121,1052,3.21,1053,1.745,1054,1.745,1058,2.43,1060,2.43,1070,2.05,1097,3.145,1123,3.036,1166,2.704,1183,3.098,1184,3.813,1188,3.813,1355,2.947,1359,2.947,1366,2.947,1468,5.455,1494,2.817,1609,4.276,1610,4.969,1611,4.276,1612,4.276,1613,4.276,1614,4.276,1615,4.276,1616,4.276,1617,4.276,1618,4.276,1619,4.276,1620,4.276]],["title/controllers/EmojiController.html",[255,1.032,1621,3.659]],["body/controllers/EmojiController.html",[8,0.006,12,0.077,13,0.086,14,0.069,19,0.141,20,0.792,22,0.094,23,0.19,24,0.005,25,0.005,51,1.56,55,0.377,57,1.21,58,0.709,59,0.393,60,0.58,62,1.25,157,4.941,255,1.356,257,1.705,259,2.309,261,0.305,262,1.784,272,0.807,275,2.937,333,3.653,334,3.058,335,2.937,336,2.309,337,1.01,359,2.222,362,2.355,401,1.153,406,1.062,465,2.309,516,2.026,632,2.383,668,2.309,669,1.677,718,4.44,722,2.669,723,2.859,724,3.002,725,2.792,726,3.002,1098,8.181,1621,5.994,1622,5.585,1623,8.915,1624,6.263,1625,4.539,1626,4.941,1627,6.263,1628,6.263,1629,4.175,1630,6.263,1631,5.869,1632,5.585,1633,5.139,1634,6.263,1635,6.263,1636,6.263,1637,6.263,1638,6.263]],["title/modules/EmojiModule.html",[0,1.195,33,3.456]],["body/modules/EmojiModule.html",[0,2.077,2,2.593,3,3.244,8,0.006,9,3.311,10,2.756,11,2.593,12,0.085,13,0.094,14,0.076,17,3.531,19,0.142,20,0.872,22,0.104,23,0.209,24,0.005,25,0.005,33,6.938,50,2.875,66,3.225,67,2.08,157,4.362,183,2.154,257,2.256,1621,6.816,1631,6.599,1632,6.151,1633,5.659,1639,6.151,1640,6.151,1641,6.897,1642,6.897,1643,6.897]],["title/injectables/EmojiService.html",[458,0.849,1631,3.287]],["body/injectables/EmojiService.html",[8,0.006,12,0.075,13,0.083,14,0.067,19,0.142,20,0.766,22,0.091,23,0.184,24,0.005,25,0.005,51,1.528,55,0.504,57,1.479,58,0.866,59,0.385,60,0.709,62,1.528,67,1.827,79,1.544,157,3.832,183,1.892,200,1.996,203,2.191,249,2.191,251,1.596,261,0.295,262,1.758,365,2.137,396,2.083,401,1.408,458,1.363,516,1.961,532,1.996,632,2.364,668,2.821,669,1.622,676,5.042,678,2.751,681,5.042,685,2.582,686,2.11,687,2.324,690,4.574,691,3.444,694,2.582,704,4.214,705,4.177,706,3.832,707,3.561,927,4.021,943,2.833,1631,5.274,1633,4.972,1644,5.404,1645,6.06,1646,6.06,1647,7.652,1648,6.06,1649,6.06,1650,6.06,1651,6.06,1652,6.06,1653,4.972]],["title/controllers/EndorsementController.html",[255,1.032,1654,3.659]],["body/controllers/EndorsementController.html",[8,0.006,12,0.04,13,0.044,14,0.036,19,0.125,20,0.411,22,0.049,23,0.099,24,0.003,25,0.003,51,0.989,55,0.49,57,1.575,58,0.922,59,0.463,60,0.755,62,1.626,127,1.553,172,5.464,192,4.631,203,1.418,251,0.856,252,1.394,255,0.704,257,0.885,259,1.199,261,0.158,262,2,272,1.049,275,3.457,284,4.416,293,2.727,329,2.571,330,1.45,332,2.814,333,2.804,334,3.267,335,3.201,336,1.199,337,0.524,345,2.95,346,2.356,359,1.154,362,3.138,365,1.201,374,1.814,396,1.348,401,1.536,406,0.839,421,1.493,465,1.199,479,2.495,516,2.636,572,3.413,623,2.205,632,2.496,668,1.199,669,0.871,718,4.839,722,3.239,723,1.484,724,1.559,725,1.45,726,1.559,767,5.753,776,6.64,1118,6.36,1625,2.356,1629,3.583,1654,3.799,1655,2.9,1656,7.216,1657,6.705,1658,7.216,1659,6.705,1660,6.435,1661,4.416,1662,6.78,1663,6.705,1664,3.252,1665,3.252,1666,3.252,1667,3.252,1668,3.252,1669,4.952,1670,3.252,1671,2.9,1672,4.891,1673,4.952,1674,4.416,1675,3.252,1676,3.252,1677,3.252,1678,3.252,1679,4.952,1680,6.435,1681,3.252,1682,4.416,1683,3.252,1684,3.252,1685,2.9,1686,3.252,1687,4.467,1688,3.252,1689,3.252,1690,3.252,1691,5.501,1692,3.252,1693,3.252,1694,3.252,1695,3.252,1696,3.252,1697,3.252,1698,3.799,1699,2.668,1700,3.252,1701,3.252,1702,1.599,1703,1.791,1704,3.793,1705,2.9,1706,2.9,1707,2.668,1708,2.668,1709,2.356,1710,2.9,1711,3.252,1712,2.9,1713,3.252,1714,2.495,1715,3.252,1716,2.356,1717,2.668,1718,3.252,1719,6.435,1720,3.252,1721,3.252,1722,3.252,1723,3.252,1724,3.252,1725,3.252,1726,3.413,1727,3.263,1728,3.252,1729,3.252,1730,4.416,1731,3.252,1732,3.252,1733,3.252,1734,3.252,1735,3.252,1736,3.252,1737,3.252,1738,4.063,1739,3.252,1740,3.252,1741,3.252,1742,3.252,1743,2.9,1744,3.252,1745,3.252]],["title/modules/EndorsementModule.html",[0,1.195,34,3.456]],["body/modules/EndorsementModule.html",[0,1.941,1,5.896,2,2.322,3,3.031,8,0.006,9,3.094,10,2.468,11,2.322,12,0.076,13,0.084,14,0.068,17,3.3,18,3.453,19,0.145,20,0.781,22,0.093,23,0.187,24,0.005,25,0.005,29,6.426,34,7.148,46,5.478,50,3.228,66,2.888,67,1.862,109,5.507,115,4.257,172,3.76,183,1.928,257,2.108,776,4.738,1654,6.491,1704,6.212,1705,5.507,1708,5.067,1709,5.612,1710,5.507,1746,5.507,1747,5.507,1748,6.176,1749,5.507,1750,6.176,1751,5.507,1752,4.738,1753,4.738,1754,6.176]],["title/injectables/EndorsementService.html",[458,0.849,1704,3.016]],["body/injectables/EndorsementService.html",[7,4.562,8,0.006,12,0.046,13,0.051,14,0.041,19,0.125,20,0.474,22,0.056,23,0.113,24,0.003,25,0.003,51,1.099,55,0.538,57,1.704,58,0.998,59,0.444,60,0.817,62,1.761,67,1.13,79,0.954,127,1.081,172,2.281,183,1.17,203,1.073,249,1.577,251,1.45,261,0.183,262,2.041,289,3.352,292,1.032,301,2.689,365,2.061,374,1.717,381,3.129,396,1.499,401,1.596,421,1.493,458,0.981,497,1.467,516,2.75,532,1.234,623,2.247,632,2.535,668,1.381,669,1.003,676,3.628,678,2.247,681,3.628,685,1.596,694,4.006,767,5.284,806,2.664,927,3.284,943,3.748,945,1.945,1118,3.99,1660,4.91,1682,3.341,1685,4.91,1687,3.235,1704,3.482,1706,3.341,1707,3.074,1708,3.074,1730,4.91,1755,3.341,1756,5.506,1757,5.506,1758,5.506,1759,3.352,1760,3.482,1761,3.747,1762,3.747,1763,5.506,1764,3.747,1765,5.506,1766,3.747,1767,3.747,1768,5.506,1769,3.747,1770,5.506,1771,3.747,1772,5.506,1773,3.747,1774,3.747,1775,5.506,1776,3.747,1777,3.352,1778,3.747,1779,5.506,1780,3.747,1781,2.859,1782,2.582,1783,3.747,1784,3.747,1785,3.747,1786,3.747,1787,5.281,1788,5.808,1789,3.747,1790,7.666,1791,3.747,1792,5.356,1793,6.528,1794,4.91,1795,3.747,1796,6.528,1797,5.506,1798,5.506,1799,3.747,1800,5.506,1801,3.747,1802,3.747,1803,3.747,1804,3.341,1805,3.074,1806,3.747,1807,3.747,1808,3.389,1809,3.747]],["title/guards/EndorsementTokenGuard.html",[1709,3.456,1810,3.659]],["body/guards/EndorsementTokenGuard.html",[8,0.006,12,0.078,13,0.087,14,0.07,19,0.118,20,0.803,22,0.095,23,0.192,24,0.005,25,0.005,51,1.573,55,0.474,57,1.523,58,0.892,59,0.397,60,0.73,62,1.268,69,5.937,70,3.868,163,2.056,181,3.125,188,5.212,199,2.964,249,1.819,261,0.309,365,2.234,401,1.577,458,1.404,465,2.342,479,4.874,807,3.209,950,5.212,1709,5.712,1714,4.874,1716,4.604,1717,7.031,1811,5.665,1812,7.642,1813,5.665,1814,8.961,1815,5.212,1816,6.353,1817,7.882,1818,7.99,1819,6.353,1820,8.57,1821,6.353,1822,6.353,1823,6.353,1824,6.353,1825,6.353,1826,7.882]],["title/classes/FilterOptionsDto.html",[23,0.144,1827,3.287]],["body/classes/FilterOptionsDto.html",[8,0.006,12,0.062,13,0.069,14,0.055,19,0.123,22,0.076,23,0.206,24,0.004,25,0.004,55,0.551,59,0.472,60,0.902,175,2.502,252,2.776,261,0.246,272,1.181,292,0.988,337,0.813,421,1.464,455,1.209,492,3.131,552,2.417,623,1.955,627,1.444,629,2.483,630,2.618,631,2.454,632,2.297,634,3.254,635,3.738,636,3.678,638,2.472,639,3.422,641,3.738,642,4.225,646,2.547,647,3.627,648,2.618,649,2.694,650,4.52,651,2.963,652,3.774,653,2.547,654,2.777,655,2.866,656,2.694,657,2.866,658,3.254,659,2.417,660,2.248,661,2.777,662,2.777,663,2.866,664,4.106,665,3.189,666,3.91,667,1.755,669,1.817,670,2.963,778,1.729,787,4.137,795,3.497,827,2.777,1560,4.852,1827,4.678,1828,7.639,1829,4.671,1830,5.056,1831,5.372,1832,3.654,1833,4.137,1834,4.919,1835,3.868,1836,4.496,1837,3.475,1838,4.137,1839,4.496,1840,3.322,1841,3.654]],["title/classes/GenerateCodeExplanationDto.html",[23,0.144,506,3.456]],["body/classes/GenerateCodeExplanationDto.html",[8,0.006,12,0.07,13,0.077,14,0.062,19,0.11,22,0.085,23,0.222,24,0.005,25,0.005,55,0.516,59,0.488,261,0.275,272,1.106,292,1.21,337,0.912,406,1.624,421,1.446,455,1.304,468,6.13,500,3.629,506,5.305,521,4.838,543,6.13,627,1.619,638,1.928,667,1.968,775,3.741,778,2.321,794,3.875,795,3.459,796,5.595,999,4.031,1842,6.445,1843,5.042,1844,6.228,1845,4.639,1846,5.654,1847,4.337,1848,5.654,1849,6.66,1850,4.639,1851,6.006,1852,6.006,1853,6.006,1854,6.006,1855,6.006,1856,6.006,1857,6.006,1858,6.006,1859,6.006,1860,5.654,1861,4.337,1862,5.654,1863,3.725,1864,3.725,1865,3.897,1866,4.337,1867,4.337,1868,4.337,1869,4.097,1870,4.337,1871,4.337,1872,4.639]],["title/classes/GenerateCodeRefactorSuggestionDto.html",[23,0.144,569,3.456]],["body/classes/GenerateCodeRefactorSuggestionDto.html",[8,0.006,12,0.069,13,0.077,14,0.062,19,0.109,22,0.084,23,0.221,24,0.005,25,0.005,55,0.515,59,0.488,261,0.273,272,1.102,292,1.208,337,0.904,406,1.541,421,1.443,455,1.297,468,6.114,500,3.62,521,4.832,530,5.64,543,6.114,566,6.114,569,5.277,627,1.606,638,1.918,667,1.953,775,3.73,778,2.316,794,3.865,795,3.446,796,5.574,999,4.01,1842,6.429,1844,6.204,1845,4.602,1847,4.303,1849,6.635,1850,4.602,1851,5.975,1852,5.975,1853,5.975,1854,5.975,1855,5.975,1856,5.975,1857,5.975,1858,5.975,1859,5.975,1861,4.303,1863,3.696,1864,3.696,1865,3.866,1866,4.303,1867,4.303,1868,4.303,1869,4.065,1870,4.303,1871,4.303,1872,4.602,1873,4.602,1874,5.609,1875,5.002,1876,5.609,1877,5.002]],["title/classes/GenerateCodeTestSuggestionDto.html",[23,0.144,602,3.456]],["body/classes/GenerateCodeTestSuggestionDto.html",[8,0.006,12,0.076,13,0.084,14,0.068,19,0.116,22,0.092,23,0.234,24,0.005,25,0.005,55,0.508,59,0.485,261,0.3,272,1.088,292,1.231,337,0.992,406,1.547,421,1.317,455,1.376,468,6.291,500,3.615,521,4.871,530,5.092,602,5.6,605,5.838,627,1.762,667,2.143,775,3.681,778,2.257,794,3.86,795,3.293,796,5.822,999,4.255,1842,6.42,1844,6.48,1845,5.049,1847,4.722,1861,4.722,1863,4.055,1864,4.055,1866,4.722,1867,4.722,1868,4.722,1869,4.46,1870,4.722,1871,4.722,1873,5.049,1875,5.488,1877,5.488,1878,6.155]],["title/classes/GeneratePullRequestDescriptionDto.html",[23,0.144,1879,3.456]],["body/classes/GeneratePullRequestDescriptionDto.html",[8,0.006,12,0.06,13,0.067,14,0.054,19,0.1,22,0.073,23,0.201,24,0.004,25,0.004,55,0.525,59,0.491,60,0.75,143,4.078,163,2.891,181,3.26,261,0.237,272,1.125,292,1.171,337,0.785,406,1.628,421,1.505,455,1.181,468,5.834,487,5.086,500,3.646,543,5.834,627,1.394,638,1.745,659,3.178,664,3.613,666,3.44,667,1.695,775,3.525,778,2.375,794,3.688,795,3.447,796,5.195,817,4.192,864,4.926,999,3.65,1260,3.528,1842,6.475,1844,5.782,1847,3.735,1849,6.184,1850,3.995,1851,5.439,1852,5.439,1853,5.439,1854,5.439,1855,5.439,1856,5.439,1857,5.439,1858,5.439,1859,5.439,1861,3.735,1863,3.208,1864,3.208,1865,3.356,1866,3.735,1867,3.735,1868,3.735,1869,3.528,1870,3.735,1871,3.735,1872,3.995,1879,4.804,1880,4.342,1881,7.537,1882,7.548,1883,7.548,1884,5.911,1885,4.869,1886,4.869,1887,4.869,1888,4.869,1889,4.869,1890,4.869,1891,4.869,1892,4.869,1893,6.629,1894,6.629,1895,6.629,1896,7.537,1897,4.869,1898,4.869,1899,4.869,1900,4.869,1901,4.342,1902,4.869,1903,4.342,1904,4.869,1905,4.869,1906,4.869]],["title/controllers/HealthController.html",[255,1.032,1907,3.659]],["body/controllers/HealthController.html",[8,0.006,12,0.066,13,0.073,14,0.058,19,0.126,20,0.672,22,0.08,23,0.161,24,0.004,25,0.004,51,1.403,55,0.423,62,1.403,69,4.982,70,3.236,74,4.36,175,3.091,196,3.851,243,4.36,247,5.393,248,6.689,249,1.522,251,2.359,252,1.496,255,1.15,257,1.447,259,1.959,261,0.259,262,2.06,272,0.905,275,3.152,334,3.083,335,2.962,336,1.959,337,0.857,359,3.241,362,2.643,401,1.294,516,2.275,880,4.926,1907,5.393,1908,4.739,1909,7.988,1910,8.958,1911,5.315,1912,7.03,1913,7.03,1914,5.315,1915,5.315,1916,7.03,1917,5.315,1918,7.03,1919,7.03,1920,7.03,1921,7.878,1922,7.03,1923,7.03,1924,5.315,1925,5.315,1926,5.315,1927,5.315,1928,5.315,1929,6.269,1930,7.03,1931,5.315,1932,5.315,1933,5.315,1934,5.315,1935,5.315,1936,5.315,1937,7.03,1938,5.315,1939,5.315,1940,5.315,1941,5.315,1942,5.315,1943,5.315,1944,5.315,1945,5.315,1946,5.315,1947,5.315,1948,5.315,1949,5.315,1950,5.315,1951,5.315,1952,5.315,1953,5.315]],["title/modules/HealthModule.html",[0,1.195,35,3.456]],["body/modules/HealthModule.html",[0,2.155,2,2.76,8,0.006,12,0.091,13,0.1,14,0.081,19,0.137,20,0.928,22,0.11,23,0.222,24,0.005,25,0.005,35,6.232,50,3.06,73,7.669,74,6.022,257,2.341,1907,6.998,1954,7.34,1955,7.34]],["title/controllers/HighlightController.html",[255,1.032,1956,3.659]],["body/controllers/HighlightController.html",[8,0.006,12,0.047,13,0.052,14,0.042,19,0.135,20,0.479,22,0.057,23,0.115,24,0.004,25,0.004,51,1.108,55,0.484,57,1.555,58,0.91,59,0.456,60,0.746,62,1.606,126,2.023,127,1.09,149,4.724,150,2.61,151,2.395,160,4.345,163,2.603,252,1.066,255,0.82,257,1.031,259,1.396,261,0.184,262,1.983,272,1.036,275,3.408,281,3.041,288,5.088,292,1.198,301,3.007,329,1.966,330,1.688,331,2.998,333,3.382,334,3.254,335,3.125,336,1.396,337,0.611,338,1.545,359,1.343,361,2.533,362,3.025,374,1.92,401,1.481,406,1.364,465,1.396,513,4.728,518,4.25,519,1.771,632,2.252,668,1.396,669,1.486,686,1.318,687,1.452,718,4.573,722,1.613,723,1.728,724,1.815,725,1.688,726,1.815,806,2.264,1002,4.949,1074,4.76,1499,6.601,1556,3.656,1559,5.477,1562,4.76,1672,4.43,1698,4.257,1702,1.862,1703,2.085,1760,3.509,1956,4.257,1957,3.377,1958,5.907,1959,6.568,1960,7.232,1961,6.449,1962,7.232,1963,7.232,1964,6.568,1965,3.787,1966,3.787,1967,5.549,1968,3.378,1969,5.549,1970,4.553,1971,4.985,1972,4.949,1973,3.787,1974,3.787,1975,3.787,1976,4.949,1977,3.787,1978,3.377,1979,3.787,1980,3.787,1981,3.787,1982,3.787,1983,3.107,1984,3.787,1985,3.787,1986,3.377,1987,3.377,1988,3.377,1989,3.377,1990,3.787,1991,3.787,1992,3.787,1993,5.549,1994,3.787,1995,4.11,1996,1.966,1997,3.787,1998,2.085,1999,4.154,2000,3.787,2001,2.905,2002,3.787,2003,3.787,2004,3.107,2005,4.949,2006,3.787,2007,3.377,2008,3.787,2009,3.787,2010,3.787,2011,3.787,2012,4.257,2013,3.656,2014,3.787,2015,3.787,2016,3.787,2017,3.787,2018,3.787,2019,3.787,2020,3.377,2021,3.377,2022,3.787,2023,3.377]],["title/modules/HighlightModule.html",[0,1.195,36,3.456]],["body/modules/HighlightModule.html",[0,2.077,2,2.593,3,3.244,8,0.006,9,3.311,10,2.756,11,2.593,12,0.085,13,0.094,14,0.076,19,0.142,20,0.872,22,0.104,23,0.209,24,0.005,25,0.005,36,6.938,46,5.626,50,3.455,66,3.225,67,2.08,115,4.754,149,3.92,150,4.754,151,4.362,183,2.154,257,2.256,1956,6.816,2024,6.897,2025,6.897,2026,6.897,2027,6.151,2028,6.897]],["title/classes/HighlightOptionsDto.html",[23,0.144,1559,3.143]],["body/classes/HighlightOptionsDto.html",[8,0.006,12,0.068,13,0.076,14,0.061,19,0.128,22,0.109,23,0.244,24,0.005,25,0.005,55,0.532,59,0.445,60,0.885,150,3.824,159,3.055,160,3.856,161,3.377,175,2.666,252,2.708,261,0.27,272,1.138,292,1.036,337,0.895,406,0.94,421,1.127,455,1.288,492,3.282,552,2.659,623,2.252,627,1.589,629,2.34,630,2.88,631,2.909,632,2.352,634,3.466,635,3.982,636,3.856,638,2.465,639,3.553,641,3.055,642,3.055,646,2.802,647,3.864,648,2.88,649,2.964,650,4.694,651,3.26,652,3.956,653,2.802,654,3.055,655,3.153,656,2.964,657,3.153,658,3.466,659,3.466,660,2.473,661,3.055,662,3.055,663,3.153,664,3.466,666,3.3,667,1.931,668,2.045,669,1.485,778,1.842,795,3.081,827,3.055,1533,4.256,1534,4.256,1556,3.655,1557,5.932,1558,4.947,1559,4.764,1560,4.573,1561,4.947,1835,4.256,2029,5.548]],["title/injectables/HttpLoggerMiddleware.html",[116,3.659,458,0.849]],["body/injectables/HttpLoggerMiddleware.html",[8,0.006,12,0.073,13,0.081,14,0.065,19,0.131,20,0.748,22,0.113,23,0.179,24,0.005,25,0.005,51,1.505,55,0.453,57,1.144,58,0.67,59,0.298,60,0.548,62,1.181,63,4.289,83,4.855,84,4.855,85,4.855,116,6.364,163,2.984,202,6.02,203,2.159,245,5.783,251,2.184,261,0.288,365,2.118,401,1.527,455,1.343,458,1.343,462,4.151,471,6.02,477,6.874,532,1.95,638,1.985,639,2.467,949,4.855,950,4.855,1112,4.54,2030,7.398,2031,5.783,2032,7.538,2033,8.734,2034,5.918,2035,7.538,2036,5.918,2037,7.538,2038,4.855,2039,4.855,2040,5.918,2041,5.918,2042,5.277,2043,5.918,2044,5.918,2045,7.538,2046,8.734,2047,7.538,2048,5.918,2049,5.918,2050,5.918,2051,5.918,2052,5.918,2053,5.918]],["title/controllers/InsightController.html",[255,1.032,2054,3.659]],["body/controllers/InsightController.html",[8,0.006,12,0.063,13,0.07,14,0.056,19,0.136,20,0.649,22,0.077,23,0.155,24,0.004,25,0.004,51,1.371,55,0.413,57,1.327,58,0.777,59,0.433,60,0.636,62,1.371,122,4.548,127,1.52,163,1.66,203,1.469,252,1.444,255,1.11,257,1.397,259,1.891,261,0.25,262,1.858,272,0.884,275,3.108,276,3.468,281,2.773,288,4.342,292,1.2,301,2.975,324,3.536,330,2.287,331,3.134,332,3.902,333,3.619,334,3.029,335,2.91,336,1.891,337,0.827,338,2.093,359,1.82,361,2.341,362,2.582,365,1.244,374,2.056,396,1.869,401,0.944,406,1.401,465,1.891,497,2.008,513,4.035,514,3.123,518,4.035,519,2.399,629,2.869,808,4.756,1151,3.244,1629,2.741,1672,3.781,1699,4.209,1702,2.523,1703,2.825,1760,4.342,1995,4.399,1996,2.663,2054,5.268,2055,4.575,2056,8.266,2057,8.266,2058,5.13,2059,4.209,2060,5.634,2061,5.13,2062,6.867,2063,5.268,2064,5.13,2065,5.13,2066,4.575,2067,4.733,2068,4.575,2069,5.609,2070,5.13,2071,4.976,2072,6.867,2073,3.717,2074,4.209,2075,3.717,2076,4.712,2077,3.38,2078,5.13,2079,4.209,2080,4.209,2081,5.13,2082,5.634,2083,4.575,2084,5.13,2085,4.575,2086,5.13]],["title/injectables/InsightMemberService.html",[458,0.849,2087,3.143]],["body/injectables/InsightMemberService.html",[7,4.702,8,0.006,12,0.051,13,0.057,14,0.046,19,0.131,20,0.523,22,0.062,23,0.125,24,0.004,25,0.004,51,1.181,55,0.525,57,1.65,58,0.966,59,0.43,60,0.791,62,1.705,67,1.247,79,1.054,155,4.55,156,3.173,181,3.706,183,1.291,199,1.555,203,1.184,249,1.694,251,1.818,261,0.201,262,2.007,281,2.782,292,1.145,301,2.675,365,2.071,374,1.902,377,5.049,381,2.351,396,1.88,401,1.636,421,1.438,458,1.054,497,1.619,516,2.234,532,1.363,632,2.113,638,1.089,639,1.724,668,1.525,669,1.107,678,2.353,685,1.762,686,1.44,687,1.586,694,3.534,808,2.089,927,3.44,943,3.229,945,3.071,1151,2.616,1346,3.257,1653,3.393,1759,3.601,1777,3.601,1781,3.071,1782,2.851,1788,2.997,1794,3.688,1808,4.14,2076,4.588,2077,2.725,2085,3.688,2087,3.898,2088,7.293,2089,3.688,2090,5.275,2091,6.905,2092,5.275,2093,5.915,2094,5.275,2095,4.136,2096,6.905,2097,4.136,2098,5.915,2099,5.915,2100,4.136,2101,7.11,2102,4.136,2103,3.802,2104,4.136,2105,7.399,2106,7.973,2107,7.536,2108,4.136,2109,5.915,2110,4.136,2111,4.136,2112,5.915,2113,4.136,2114,5.275,2115,4.136,2116,3.173,2117,4.136,2118,3.071,2119,4.136,2120,4.136,2121,4.136,2122,4.136,2123,4.136,2124,4.136,2125,5.915,2126,4.136,2127,4.136,2128,3.688,2129,4.136,2130,4.136,2131,4.136,2132,4.136,2133,4.136,2134,4.136,2135,4.136]],["title/classes/InsightOptionsDto.html",[23,0.144,2136,3.913]],["body/classes/InsightOptionsDto.html",[8,0.006,12,0.061,13,0.068,14,0.054,19,0.114,22,0.101,23,0.203,24,0.004,25,0.004,55,0.549,59,0.465,60,0.9,166,2.81,252,2.77,261,0.241,272,1.175,292,0.978,337,0.797,421,1.423,455,1.193,492,3.099,552,2.37,623,1.935,627,1.416,629,2.167,630,2.567,631,2.422,632,2.285,634,3.211,635,3.688,636,3.641,638,2.485,639,3.547,641,3.688,642,4.183,645,4.409,646,2.497,647,3.579,648,2.567,649,2.642,650,4.483,651,2.905,652,3.736,653,2.497,654,2.722,655,2.81,656,2.642,657,2.81,658,3.211,659,2.37,660,2.204,661,2.722,662,2.722,663,2.81,664,4.079,665,3.126,666,3.884,667,1.721,668,1.823,669,1.324,670,3.936,710,3.407,746,4.854,795,3.469,806,2.017,1100,3.258,1347,3.126,1452,3.583,1560,4.804,1829,4.625,1830,5.005,1831,5.341,1832,3.583,1834,3.583,1837,4.616,1841,3.583,2136,5.495,2137,6.528,2138,4.944,2139,4.944,2140,7.596,2141,4.944,2142,4.944,2143,4.056,2144,4.056,2145,3.407,2146,4.056,2147,4.056,2148,4.056]],["title/classes/InsightPageOptionsDto.html",[23,0.144,2149,3.287]],["body/classes/InsightPageOptionsDto.html",[8,0.006,12,0.076,13,0.084,14,0.068,19,0.093,22,0.093,23,0.187,24,0.005,25,0.005,55,0.533,59,0.446,60,0.886,252,2.693,261,0.301,272,1.142,292,1.09,455,1.379,492,3.452,552,2.96,627,1.769,629,2.737,630,3.207,631,2.8,632,2.41,634,3.712,635,4.264,636,4.056,638,2.519,639,3.698,641,3.401,642,3.401,646,3.119,647,4.138,648,3.207,649,3.3,650,4.885,651,3.629,652,4.161,653,3.119,654,3.401,655,3.51,656,3.3,657,3.51,658,3.712,659,2.96,660,2.753,661,3.401,662,3.401,663,3.51,668,2.277,669,1.653,2137,4.738,2149,5.338]],["title/injectables/InsightRepoService.html",[458,0.849,2150,3.287]],["body/injectables/InsightRepoService.html",[8,0.006,12,0.076,13,0.084,14,0.067,19,0.137,20,0.774,22,0.092,23,0.185,24,0.005,25,0.005,51,1.538,55,0.507,57,1.629,58,0.954,59,0.424,60,0.781,62,1.538,67,1.846,79,1.56,124,4.034,126,3.272,183,1.912,249,2.206,251,1.612,261,0.298,262,1.949,292,1.198,374,1.461,401,1.417,458,1.372,516,2.492,532,2.017,623,2.147,678,2.761,685,2.609,772,2.863,814,5.592,822,4.034,823,5.023,826,3.728,1156,4.437,2088,7.255,2105,6.319,2116,4.697,2150,5.309,2151,5.46,2152,7.702,2153,7.702,2154,6.123,2155,6.123,2156,7.702,2157,7.702,2158,6.123,2159,7.702,2160,6.123,2161,6.123,2162,6.123,2163,5.023,2164,5.46,2165,6.123]],["title/modules/InsightsModule.html",[0,1.195,37,3.456]],["body/modules/InsightsModule.html",[0,1.842,1,5.772,2,2.139,3,2.877,8,0.006,9,2.937,10,2.273,11,2.139,12,0.07,13,0.078,14,0.063,17,3.132,18,3.277,19,0.147,20,0.72,22,0.086,23,0.172,24,0.005,25,0.005,37,7.154,46,5.363,50,3.064,66,2.66,67,1.716,115,3.922,122,3.343,124,4.844,126,3.04,127,1.444,155,4.844,156,4.365,183,1.777,257,2.001,808,4.113,1752,4.365,1753,4.365,2054,6.247,2075,4.123,2076,5.914,2077,3.749,2087,6.014,2116,5.639,2150,6.695,2166,5.074,2167,5.69,2168,5.074,2169,5.074,2170,5.69,2171,6.247,2172,6.247,2173,7.351,2174,4.365,2175,5.69,2176,4.668,2177,5.69]],["title/injectables/InsightsService.html",[458,0.849,2076,2.904]],["body/injectables/InsightsService.html",[8,0.006,12,0.057,13,0.063,14,0.05,19,0.132,20,0.58,22,0.069,23,0.139,24,0.004,25,0.004,51,1.27,55,0.529,57,1.657,58,0.97,59,0.431,60,0.795,62,1.712,67,1.383,79,1.168,122,3.738,127,0.901,183,1.432,200,1.511,203,2.092,249,1.822,251,1.207,261,0.223,262,2.006,281,2.646,292,1.172,301,3.008,365,2.132,374,1.977,377,5.22,396,1.988,401,1.578,421,1.139,458,1.133,497,1.795,516,2.363,532,1.511,629,1.484,632,1.62,668,1.691,669,1.228,678,2.463,685,1.954,686,1.596,687,1.759,690,4.096,691,2.606,694,3.361,704,3.503,705,3.161,706,2.9,707,2.694,808,4.185,927,3.6,943,2.144,945,2.381,992,2.255,1019,1.912,1123,2.392,1155,3.518,1156,3.323,1160,3.161,1181,4.089,1194,5.673,1346,3.503,1759,3.873,1777,3.873,1781,3.303,1787,3.021,1808,3.792,2075,3.323,2076,3.873,2103,4.022,2118,3.303,2149,5.437,2178,4.089,2179,6.361,2180,4.88,2181,6.361,2182,6.361,2183,4.586,2184,4.586,2185,6.361,2186,6.361,2187,4.586,2188,4.586,2189,5.219,2190,4.586,2191,4.586,2192,6.361,2193,4.586,2194,6.361,2195,4.586,2196,3.762,2197,4.586,2198,6.361,2199,4.586,2200,4.586,2201,6.361,2202,6.361,2203,4.586,2204,4.586,2205,4.586,2206,4.586,2207,4.586,2208,4.586,2209,4.586,2210,4.586]],["title/modules/LogModule.html",[0,1.195,2211,3.659]],["body/modules/LogModule.html",[0,2.029,2,2.496,3,3.17,8,0.006,9,3.236,10,2.653,11,2.496,12,0.082,13,0.091,14,0.073,17,3.451,18,3.61,19,0.143,20,0.84,22,0.1,23,0.201,24,0.005,25,0.005,50,2.767,66,3.104,67,2.002,68,7.222,70,4.042,141,4.576,202,4.576,212,5.447,883,7.185,894,6.54,909,5.92,2211,7.494,2212,5.92,2213,5.92,2214,5.92,2215,6.639,2216,5.92,2217,6.639,2218,6.639]],["title/injectables/LogService.html",[458,0.849,894,3.287]],["body/injectables/LogService.html",[8,0.006,12,0.08,13,0.088,14,0.071,19,0.139,20,0.817,22,0.097,23,0.196,24,0.005,25,0.005,51,1.589,55,0.479,57,1.539,58,0.901,59,0.401,60,0.738,62,1.289,67,1.947,79,1.645,141,4.451,181,3.176,212,5.298,249,2.28,251,1.7,261,0.315,262,1.809,365,1.566,396,1.758,401,1.188,458,1.418,494,3.67,516,2.089,520,3.353,532,2.127,678,2.814,685,2.751,836,6.914,889,5.298,894,5.488,2216,5.758,2219,5.758,2220,7.962,2221,6.457,2222,6.457,2223,7.962,2224,7.962,2225,6.457,2226,6.457,2227,6.457,2228,7.962,2229,6.457,2230,6.457,2231,6.457]],["title/modules/OpenAiModule.html",[0,1.195,38,3.287]],["body/modules/OpenAiModule.html",[0,2.096,2,2.634,3,3.274,8,0.006,9,3.343,10,2.799,11,2.634,12,0.086,13,0.096,14,0.077,17,3.565,18,3.73,19,0.126,20,0.886,22,0.105,23,0.212,24,0.005,25,0.005,38,6.694,175,2.583,176,4.117,453,5.375,464,5.864,544,5.077,2232,6.248,2233,6.248,2234,6.248,2235,7.006]],["title/injectables/OpenAiService.html",[458,0.849,464,2.803]],["body/injectables/OpenAiService.html",[8,0.006,12,0.07,13,0.077,14,0.062,19,0.122,20,0.715,22,0.085,23,0.171,24,0.005,25,0.005,51,1.461,55,0.44,57,1.415,58,0.828,59,0.408,60,0.678,62,1.129,69,5.762,70,3.442,127,1.11,176,4.77,203,1.619,245,4.337,249,1.619,261,0.275,262,1.701,292,1.045,293,3.113,329,2.935,365,1.969,366,5.046,396,1.993,401,1.04,421,1.446,450,3.442,451,5.616,453,6.228,454,4.639,456,5.042,458,1.304,459,7.475,460,4.639,461,5.042,462,3.113,463,5.918,464,4.302,465,2.084,466,6.528,467,7.657,468,6.13,469,4.337,470,4.639,471,3.897,472,4.639,473,5.042,474,5.042,475,3.725,476,5.042,477,4.097,478,5.042,479,4.337,480,5.042,481,5.042,482,5.042,483,5.042,484,5.042,485,2.126,486,5.042,487,4.337,488,4.639,489,6.528,490,1.968,491,5.042,492,2.307,493,5.042,494,3.213,495,5.042,496,5.042,497,2.213,498,5.042,516,1.829,532,1.863,1815,4.639,2236,7.32,2237,5.654,2238,5.654]],["title/classes/PageDto.html",[23,0.144,686,1.661]],["body/classes/PageDto.html",[8,0.006,12,0.076,13,0.085,14,0.068,19,0.133,22,0.093,23,0.256,24,0.005,25,0.005,55,0.509,57,1.196,58,0.7,59,0.476,60,0.573,181,3.813,249,1.772,252,2.626,261,0.301,272,0.998,337,0.998,455,1.381,494,5.195,627,1.772,629,2.002,667,2.154,686,2.699,690,4.969,691,3.516,794,3.689,815,4.264,817,5.355,820,4.483,2239,5.517,2240,6.858,2241,7.753,2242,6.301,2243,7.753,2244,6.187,2245,6.187,2246,6.187,2247,6.187,2248,6.187,2249,6.187,2250,8.467,2251,6.187,2252,6.187,2253,6.187]],["title/classes/PageMetaDto.html",[23,0.144,690,2.476]],["body/classes/PageMetaDto.html",[8,0.006,12,0.063,13,0.069,14,0.056,19,0.102,22,0.076,23,0.154,24,0.004,25,0.004,55,0.543,57,0.981,58,0.575,59,0.454,60,0.471,181,3.354,199,2.564,249,1.953,252,2.762,261,0.247,272,1.139,292,1.244,337,0.819,406,1.499,455,1.215,471,4.701,490,2.99,492,3.359,627,1.454,629,3.09,632,1.294,634,3.691,690,3.541,704,4.729,775,3.853,778,2.433,794,3.936,807,4.158,1100,4.494,1130,5.965,1131,7.341,1439,4.942,2240,3.68,2254,7.044,2255,4.529,2256,7.701,2257,7.701,2258,7.701,2259,5.078,2260,6.315,2261,6.82,2262,6.82,2263,5.078,2264,7.341,2265,7.341,2266,5.078,2267,6.82,2268,5.078,2269,5.078,2270,6.082,2271,5.078,2272,5.078,2273,6.318,2274,5.078,2275,5.596,2276,5.078,2277,5.078,2278,5.078,2279,5.078,2280,5.078,2281,5.078]],["title/interfaces/PageMetaParameters.html",[450,2.904,2260,3.659]],["body/interfaces/PageMetaParameters.html",[8,0.006,12,0.089,13,0.099,14,0.08,19,0.109,22,0.109,24,0.005,25,0.005,59,0.429,261,0.352,292,1.168,450,4.405,452,5.551,455,1.519,629,2.341,632,2.508,669,1.937,704,5.156,2240,5.243,2254,5.551,2260,6.542,2282,6.452]],["title/classes/PageOptionsDto.html",[23,0.144,632,1.215]],["body/classes/PageOptionsDto.html",[8,0.006,12,0.064,13,0.071,14,0.057,19,0.125,22,0.078,23,0.236,24,0.004,25,0.004,55,0.521,59,0.465,60,0.856,252,2.699,261,0.254,272,1.071,292,1.216,337,0.839,401,0.958,406,0.882,455,1.235,490,1.812,492,3.814,552,3.324,627,1.491,629,2.523,630,2.703,632,1.766,634,3.737,635,4.293,636,4.151,638,2.524,639,3.466,641,2.866,642,3.818,646,3.938,647,3.705,648,3.6,649,2.781,652,4.47,653,3.938,654,2.866,656,2.781,658,4.151,659,2.495,660,3.091,661,2.866,662,2.866,664,4.151,665,3.292,666,3.952,667,1.812,670,3.059,689,3.993,820,3.772,1863,3.43,1864,3.43,1865,3.588,2145,4.779,2254,6.832,2273,4.271,2275,4.271,2283,5.689,2284,5.981,2285,5.205,2286,5.205,2287,5.205,2288,4.642,2289,4.642,2290,5.205,2291,6.821,2292,5.205,2293,5.689,2294,4.271,2295,5.205,2296,5.205,2297,4.642]],["title/injectables/PagerService.html",[7,2.626,458,0.849]],["body/injectables/PagerService.html",[7,4.355,8,0.006,12,0.079,13,0.087,14,0.07,19,0.141,20,0.808,22,0.096,23,0.193,24,0.005,25,0.005,51,1.579,55,0.384,57,1.528,58,0.723,59,0.398,60,0.592,62,1.275,79,1.627,200,2.104,203,2.265,261,0.311,262,1.8,365,1.918,396,1.739,401,1.175,450,3.889,458,1.409,516,2.067,532,2.104,632,2.35,669,1.71,686,2.224,690,4.661,691,3.63,694,3.37,704,4.355,706,4.039,707,3.753,990,1.682,2103,4.355,2298,5.24,2299,7.661,2300,6.387,2301,6.887,2302,6.387,2303,5.696,2304,5.696,2305,4.629,2306,7.052,2307,5.696,2308,5.24,2309,5.24]],["title/interfaces/PaginationInput.html",[450,2.904,2301,3.659]],["body/interfaces/PaginationInput.html",[7,3.562,8,0.006,12,0.08,13,0.088,14,0.071,19,0.142,20,0.818,22,0.097,23,0.196,24,0.005,25,0.005,59,0.401,79,1.648,200,2.131,203,2.283,261,0.315,262,1.356,365,1.933,396,1.761,401,1.191,450,3.938,452,4.963,455,1.42,458,1.42,632,2.494,669,1.732,686,2.252,690,4.682,691,3.677,694,3.946,704,4.389,706,4.091,707,3.801,2103,4.966,2298,5.307,2299,5.769,2301,6.628,2303,5.769,2304,5.769,2305,4.688,2306,7.108,2307,5.769,2308,5.307,2309,5.307]],["title/classes/PullRequestContributorInsightsDto.html",[23,0.144,743,3.456]],["body/classes/PullRequestContributorInsightsDto.html",[8,0.006,12,0.068,13,0.076,14,0.061,19,0.128,22,0.083,23,0.244,24,0.005,25,0.005,55,0.532,59,0.464,60,0.885,163,2.34,252,2.665,261,0.27,272,1.138,292,1.138,337,0.895,421,1.127,455,1.288,490,1.931,492,3.478,500,2.95,552,3.466,627,1.589,629,2.34,631,2.615,632,2.352,634,3.856,635,3.982,636,3.856,638,2.492,639,3.553,641,3.055,642,3.055,646,3.652,647,3.864,648,3.754,649,2.964,650,4.694,652,3.956,653,2.802,654,3.055,655,3.153,656,2.964,657,3.153,658,3.466,659,2.659,660,2.473,661,3.055,662,3.055,663,3.153,664,3.856,666,3.672,667,1.931,668,2.045,669,1.485,673,3.982,729,4.573,743,5.24,795,3.081,820,4.02,1829,4.898,1837,3.824,1863,3.655,1864,3.655,2145,3.824,2291,5.932,2293,4.551,2294,4.551,2310,4.947,2311,5.548,2312,5.548]],["title/classes/PullRequestContributorOptionsDto.html",[23,0.144,713,3.287]],["body/classes/PullRequestContributorOptionsDto.html",[8,0.006,12,0.061,13,0.068,14,0.054,19,0.122,22,0.074,23,0.203,24,0.004,25,0.004,55,0.549,59,0.47,60,0.9,163,2.752,175,2.467,252,2.77,261,0.241,272,1.175,292,0.977,337,0.796,421,1.458,455,1.192,492,3.097,500,3.47,552,2.366,623,1.934,627,1.414,629,2.165,630,2.563,631,2.42,632,2.285,634,3.208,635,3.685,636,3.639,638,2.402,639,3.392,641,3.685,642,4.18,646,2.493,647,3.576,648,2.563,649,2.638,650,4.481,651,2.901,652,3.733,653,2.493,654,2.719,655,2.806,656,2.638,657,2.806,658,3.208,659,2.366,660,2.201,661,2.719,662,2.719,663,2.806,664,4.077,665,3.122,666,3.882,667,1.719,668,1.82,669,1.791,670,2.901,673,4.683,713,4.612,729,5.378,778,2.073,795,3.467,827,2.719,1560,4.8,1829,4.621,1830,5.002,1831,5.339,1832,3.578,1833,4.05,1834,4.849,1835,3.787,1836,4.402,1837,3.403,1838,4.05,1839,4.402,1840,3.253,1841,3.578,2313,4.402,2314,3.787]],["title/controllers/PullRequestController.html",[255,1.032,2315,3.659]],["body/controllers/PullRequestController.html",[8,0.006,12,0.059,13,0.066,14,0.053,19,0.141,20,0.609,22,0.072,23,0.146,24,0.004,25,0.004,51,1.313,55,0.451,57,1.448,58,0.848,59,0.438,60,0.694,62,1.496,143,4.14,144,4.304,146,5.134,148,3.319,162,4.335,163,2.728,164,3.49,249,1.379,251,1.732,252,1.852,255,1.042,257,1.311,259,1.776,261,0.235,262,1.928,272,0.965,275,3.273,281,2.92,334,3.152,335,3.028,336,1.776,337,0.777,359,1.709,362,2.818,401,1.379,475,3.173,500,3.286,503,3.49,525,3.49,526,3.49,527,4.643,629,1.558,632,2.393,658,2.309,668,1.776,669,2.006,686,1.677,687,1.847,714,3.951,715,5.867,716,4.535,717,4.006,718,4.577,722,2.052,723,2.198,724,2.309,725,2.147,726,2.309,727,4.563,728,3.49,733,3.951,747,3.154,1151,4.161,1209,3.173,1672,3.623,1827,5.551,1971,4.535,1983,3.951,2004,3.951,2077,3.173,2315,5.048,2316,4.295,2317,8.054,2318,8.054,2319,8.054,2320,4.816,2321,4.816,2322,6.58,2323,5.867,2324,4.816,2325,4.816,2326,4.816,2327,6.58,2328,4.816,2329,4.816,2330,5.836,2331,4.816,2332,5.048,2333,4.295,2334,4.535,2335,4.295,2336,4.816,2337,5.867,2338,4.816,2339,4.816,2340,4.816,2341,4.816,2342,4.816,2343,4.816,2344,4.816,2345,4.816,2346,4.816,2347,4.816]],["title/controllers/PullRequestDescriptionController.html",[255,1.032,2348,3.659]],["body/controllers/PullRequestDescriptionController.html",[8,0.006,12,0.074,13,0.082,14,0.066,19,0.136,20,0.755,22,0.09,23,0.181,24,0.005,25,0.005,51,1.513,55,0.359,57,1.153,58,0.675,59,0.381,60,0.553,62,1.191,143,3.459,144,4.05,163,2.926,203,1.709,255,1.292,257,1.625,259,2.2,261,0.291,262,1.745,272,0.769,275,2.849,293,3.286,298,3.932,329,3.099,330,2.661,331,3.459,332,4.307,335,2.849,336,2.2,337,0.962,338,2.435,359,2.117,361,2.724,362,2.244,365,1.447,396,1.625,401,1.098,406,1.567,465,2.2,497,2.336,500,3.092,503,4.325,504,6.721,509,5.492,511,4.793,513,4.453,514,3.633,516,1.931,517,5.224,518,4.453,519,2.79,520,3.099,525,4.325,526,4.325,527,3.286,529,4.578,572,5.224,864,4.614,1879,6.886,2348,5.814,2349,5.322,2350,5.968,2351,5.968,2352,5.968,2353,5.968,2354,5.322,2355,5.74,2356,5.322,2357,5.968,2358,5.968]],["title/injectables/PullRequestDescriptionService.html",[458,0.849,2355,3.287]],["body/injectables/PullRequestDescriptionService.html",[8,0.006,12,0.067,13,0.074,14,0.06,19,0.119,20,0.684,22,0.081,23,0.164,24,0.004,25,0.004,51,1.42,55,0.478,57,1.536,58,0.899,59,0.4,60,0.736,62,1.42,143,3.247,144,4.511,163,2.913,175,1.995,176,3.18,230,3.295,244,3.922,249,1.55,251,2.093,261,0.264,262,1.666,292,1.024,365,1.725,379,3.295,398,3.295,401,1.309,406,1.431,421,1.404,458,1.267,463,4.904,464,5.29,465,1.995,477,3.922,487,5.458,500,3.445,516,2.302,520,2.81,521,2.733,532,1.783,535,5.458,536,4.152,540,5.837,541,5.819,543,5.478,544,3.922,545,3.73,546,3.922,548,4.44,549,4.152,550,3.922,551,3.922,552,2.594,553,4.152,554,4.152,556,5.458,557,4.152,558,4.44,559,4.44,560,4.152,561,5.14,562,4.152,563,4.152,564,4.152,580,6.344,582,6.344,585,4.44,586,4.44,587,4.44,588,4.44,594,3.422,864,3.295,1879,6.118,1882,4.826,1883,7.821,2354,4.826,2355,4.904,2359,4.826,2360,5.412,2361,5.412,2362,5.412,2363,5.412,2364,5.412,2365,5.412,2366,5.412,2367,5.412,2368,5.412,2369,4.826,2370,5.412,2371,5.412,2372,5.412,2373,5.412,2374,5.412,2375,5.412]],["title/injectables/PullRequestInsightsService.html",[458,0.849,2334,3.287]],["body/injectables/PullRequestInsightsService.html",[8,0.006,12,0.063,13,0.07,14,0.056,19,0.133,20,0.644,22,0.077,23,0.154,24,0.004,25,0.004,51,1.364,55,0.496,57,1.593,58,0.873,59,0.462,60,0.715,62,1.539,67,1.536,79,1.297,144,4.593,162,4.503,163,2.863,164,3.691,183,1.59,203,1.458,230,5.504,249,1.957,251,1.799,261,0.248,262,1.432,281,1.709,292,1.061,365,1.999,396,1.386,401,1.258,421,1.065,458,1.217,475,3.356,497,1.993,500,3.507,532,1.678,638,1.799,639,2.849,660,3.046,669,1.364,678,2.573,685,2.17,694,2.17,717,3.101,806,2.078,927,3.762,943,3.195,995,4.538,1208,4.179,1209,6.25,1211,4.542,1781,3.548,1792,4.179,1808,4.004,1827,6.099,1829,3.101,2103,4.538,2242,3.51,2305,3.691,2332,3.907,2334,4.71,2335,4.542,2376,4.542,2377,6.833,2378,7.712,2379,5.093,2380,5.504,2381,5.093,2382,6.833,2383,5.093,2384,5.093,2385,5.093,2386,5.093,2387,5.093,2388,5.606,2389,3.51,2390,3.691,2391,5.093,2392,5.093,2393,5.093,2394,5.093,2395,5.093,2396,5.093,2397,4.179,2398,5.093,2399,5.093,2400,5.093,2401,5.093,2402,5.093,2403,5.093,2404,5.093,2405,5.093,2406,4.542,2407,4.542,2408,4.542,2409,5.093]],["title/modules/PullRequestModule.html",[0,1.195,39,3.143]],["body/modules/PullRequestModule.html",[0,1.737,2,1.957,3,2.714,8,0.006,9,2.77,10,2.08,11,1.957,12,0.064,13,0.071,14,0.057,17,2.954,18,3.091,19,0.147,20,0.658,22,0.078,23,0.158,24,0.004,25,0.004,38,6.138,39,6.531,50,2.89,66,2.434,67,1.569,143,3.952,144,2.781,146,3.169,148,3.588,162,4.569,163,2.69,164,3.772,175,1.919,176,3.059,177,4.642,183,1.625,257,1.888,499,5.981,500,2.124,521,4.498,523,6.138,524,4.642,565,5.981,566,4.779,575,6.138,576,5.689,599,5.981,605,3.43,607,6.138,727,5.836,728,3.772,766,4.642,2077,3.43,2315,5.981,2332,5.319,2334,6.138,2348,5.981,2355,6.138,2356,4.642,2389,3.588,2410,4.642,2411,4.642,2412,4.642,2413,4.642,2414,6.138,2415,5.205,2416,4.642,2417,5.205,2418,5.205,2419,5.205,2420,5.205,2421,5.205]],["title/classes/PullRequestPageOptionsDto.html",[23,0.144,2330,3.456]],["body/classes/PullRequestPageOptionsDto.html",[8,0.006,12,0.051,13,0.057,14,0.046,19,0.114,22,0.104,23,0.18,24,0.004,25,0.004,55,0.549,59,0.472,60,0.901,163,2.83,175,2.786,252,2.779,261,0.203,272,1.177,292,0.892,337,0.671,370,2.233,371,2.476,421,1.462,455,1.058,492,2.827,500,3.569,552,1.994,623,1.765,627,1.191,629,2.922,630,2.16,631,2.148,632,2.179,633,5.315,634,2.847,635,3.271,636,3.321,638,2.406,639,3.331,641,4.161,642,4.71,646,2.101,647,3.174,648,2.16,649,2.223,650,4.161,651,2.445,652,3.407,653,2.101,654,2.291,655,2.364,656,2.223,657,2.364,658,2.847,659,1.994,660,1.855,661,2.291,662,2.291,663,2.364,664,4.192,665,2.631,666,3.992,667,1.448,668,1.534,669,1.59,670,4.696,673,3.815,729,5.531,778,2.117,795,3.405,827,2.291,855,3.015,1243,4.873,1252,4.873,1336,4.873,1429,4.381,1560,4.381,1829,4.218,1830,4.565,1831,5.059,1832,3.015,1834,5.02,1835,3.192,1837,2.867,1838,3.413,1840,2.741,1841,3.015,2288,3.71,2313,3.71,2314,3.192,2330,4.304,2422,4.16,2423,4.16,2424,7.628,2425,6.928,2426,4.16,2427,3.71,2428,4.16,2429,4.16,2430,7.41,2431,4.16,2432,4.16,2433,4.16,2434,4.16]],["title/injectables/PullRequestService.html",[458,0.849,727,2.904]],["body/injectables/PullRequestService.html",[8,0.006,12,0.042,13,0.046,14,0.037,19,0.136,20,0.429,22,0.051,23,0.103,24,0.003,25,0.003,51,1.021,55,0.508,57,1.595,58,0.934,59,0.415,60,0.765,62,1.648,67,1.023,79,0.864,144,4.599,146,2.065,148,2.338,163,2.217,183,1.059,200,2.027,203,2.213,249,1.464,251,1.936,261,0.165,262,1.913,281,2.834,292,0.995,365,2.339,371,1.414,396,1.865,401,1.353,421,1.205,458,0.911,490,1.181,500,3.512,532,1.117,591,2.338,629,1.097,632,2.397,634,1.626,636,4.489,652,1.668,653,2.582,660,3.277,668,1.885,669,1.834,673,3.773,676,3.369,678,2.139,681,3.369,685,1.445,686,1.181,687,1.301,688,2.783,689,2.602,690,4.469,691,1.928,694,3.889,702,4.195,703,4.195,704,4.416,705,2.338,706,2.145,707,3.616,713,5.326,717,3.113,720,4.241,727,3.113,730,2.783,743,4.459,754,3.025,806,3,927,3.127,943,3.437,995,3.389,1016,2.043,1209,4.844,1233,3.524,1241,2.783,1792,6.031,1829,5.143,1831,2.065,1840,2.235,2118,2.655,2284,2.602,2330,4.459,2332,2.602,2333,6.11,2380,4.171,2388,4.195,2389,2.338,2390,2.458,2397,4.195,2435,3.025,2436,5.113,2437,5.113,2438,5.113,2439,4.559,2440,6.154,2441,5.113,2442,3.392,2443,5.488,2444,3.392,2445,5.113,2446,3.392,2447,3.392,2448,5.113,2449,3.392,2450,3.392,2451,3.392,2452,3.392,2453,3.392,2454,3.025,2455,3.392,2456,3.392,2457,3.392,2458,5.113,2459,3.392,2460,3.392,2461,3.392,2462,3.392,2463,6.555,2464,7.351,2465,3.392,2466,3.392,2467,3.392,2468,3.392,2469,3.392,2470,3.392,2471,3.392,2472,4.559,2473,3.392,2474,5.113,2475,6.851,2476,3.392,2477,3.392,2478,3.392,2479,2.783,2480,3.392,2481,4.195,2482,5.113,2483,3.392,2484,5.113,2485,3.392,2486,3.392,2487,3.392,2488,3.392,2489,5.113,2490,5.113,2491,3.392,2492,3.392,2493,3.392,2494,3.392]],["title/controllers/RepoContributionsController.html",[255,1.032,620,3.659]],["body/controllers/RepoContributionsController.html",[8,0.006,12,0.062,13,0.069,14,0.056,19,0.138,20,0.639,22,0.076,23,0.153,24,0.004,25,0.004,51,1.356,55,0.409,57,1.313,58,0.769,59,0.413,60,0.63,62,1.356,99,4.675,251,1.33,252,1.913,255,1.093,257,1.375,259,1.862,261,0.246,262,1.85,272,0.875,275,3.088,281,2.755,292,0.989,333,3.59,334,3.005,335,2.887,336,1.862,337,0.814,359,2.41,362,2.554,365,1.648,374,1.959,396,1.85,401,1.25,406,1.152,421,1.376,465,1.862,618,5.292,620,5.212,621,4.143,622,4.503,623,2.459,626,6.536,629,1.634,632,2.249,669,1.352,686,1.758,687,1.937,692,4.503,722,3.272,723,2.305,724,2.42,725,2.251,726,2.42,806,2.06,1010,3.874,1055,6.301,1626,5.194,1629,4.388,1672,3.741,1687,4.826,1702,2.483,1726,3.48,1727,3.327,1808,3.527,1971,4.683,1995,3.861,2013,3.327,2495,6.847,2496,4.503,2497,8.571,2498,8.571,2499,5.05,2500,5.05,2501,8.213,2502,6.794,2503,6.794,2504,5.05,2505,5.05,2506,5.05,2507,5.05,2508,3.987,2509,3.193,2510,3.48,2511,3.48,2512,5.05,2513,6.794,2514,3.48,2515,6.794,2516,6.794,2517,5.05,2518,3.48]],["title/controllers/RepoController.html",[255,1.032,2519,3.659]],["body/controllers/RepoController.html",[8,0.006,12,0.058,13,0.064,14,0.052,19,0.135,20,0.594,22,0.071,23,0.142,24,0.004,25,0.004,51,1.291,55,0.479,57,1.54,58,0.902,59,0.454,60,0.738,62,1.591,95,3.689,252,1.322,255,1.016,257,1.278,259,1.731,261,0.229,262,1.976,272,1.026,275,3.39,281,3.025,292,0.952,333,3.458,334,3.271,335,3.142,336,1.731,337,0.757,359,1.666,362,2.996,374,1.764,401,1.466,406,1.096,421,1.347,465,1.731,623,2.331,629,1.519,632,2.03,669,1.731,676,5.25,678,2.488,681,3.094,686,1.635,687,1.801,714,3.852,716,4.456,717,3.936,718,4.529,722,2,723,2.143,724,2.25,725,2.093,726,2.25,733,3.852,806,3.41,1629,4.258,1672,4.965,1687,4.682,1699,3.852,1702,2.309,1727,3.094,1759,4.851,1777,2.858,1983,3.852,1995,3.675,2004,3.852,2059,3.852,2080,3.852,2174,3.602,2508,3.84,2510,3.236,2511,3.236,2514,3.236,2518,3.236,2519,4.96,2520,4.187,2521,7.968,2522,7.106,2523,4.682,2524,4.456,2525,4.695,2526,4.695,2527,5.774,2528,4.695,2529,5.766,2530,4.695,2531,4.187,2532,4.695,2533,4.695,2534,4.695,2535,3.852,2536,5.766,2537,3.402,2538,4.695,2539,4.695,2540,4.695,2541,4.456,2542,4.695,2543,3.236,2544,4.695,2545,4.695]],["title/modules/RepoFilterModule.html",[0,1.195,2414,3.287]],["body/modules/RepoFilterModule.html",[0,2.099,2,2.639,3,3.278,8,0.006,9,3.347,10,2.805,11,2.639,12,0.087,13,0.096,14,0.077,17,3.569,18,3.734,19,0.126,20,0.888,22,0.105,23,0.213,24,0.005,25,0.005,623,1.788,2380,6.077,2390,5.087,2414,6.697,2546,6.26,2547,6.26,2548,6.26,2549,5.76,2550,7.02]],["title/injectables/RepoFilterService.html",[458,0.849,2380,2.904]],["body/injectables/RepoFilterService.html",[8,0.006,12,0.061,13,0.068,14,0.054,19,0.122,20,0.626,22,0.074,23,0.15,24,0.004,25,0.004,51,1.338,55,0.403,57,1.469,58,0.759,59,0.382,60,0.621,62,1.338,63,3.588,79,1.261,230,4.082,261,0.37,292,0.863,365,1.201,401,0.911,421,1.185,458,1.194,494,4.32,511,4.24,532,1.631,572,5.615,623,1.936,634,2.373,636,4.081,638,1.765,639,2.795,648,3.947,660,2.207,669,1.795,694,2.856,716,4.621,717,5.695,722,2.856,806,2.02,995,4.186,1016,1.978,1019,2.795,1080,3.798,1209,3.262,1231,4.415,1233,3.412,1347,3.131,1702,4.316,1787,3.262,1827,5.615,1829,4.082,1830,3.262,1831,3.014,1840,3.262,2103,4.486,2242,3.412,2305,3.588,2380,4.082,2388,5.5,2407,4.415,2408,4.415,2549,6.237,2551,4.415,2552,6.704,2553,6.704,2554,6.704,2555,4.951,2556,8.147,2557,6.704,2558,4.951,2559,6.704,2560,4.951,2561,6.237,2562,4.951,2563,4.951,2564,4.951,2565,4.951,2566,6.704,2567,4.951,2568,4.951,2569,7.602,2570,4.951,2571,4.951,2572,4.951,2573,5.978,2574,6.704,2575,4.951,2576,4.951,2577,6.704,2578,4.951,2579,4.951,2580,4.951,2581,4.951,2582,4.415,2583,4.951,2584,4.951]],["title/classes/RepoInfo.html",[23,0.144,814,3.016]],["body/classes/RepoInfo.html",[8,0.006,12,0.081,13,0.09,14,0.072,19,0.121,22,0.099,23,0.244,24,0.005,25,0.005,55,0.484,58,0.911,59,0.476,175,2.969,261,0.32,272,1.037,292,1.168,337,1.061,374,2.22,406,1.365,421,1.414,455,1.434,623,2.31,627,1.883,667,2.29,775,3.509,778,2.31,794,3.792,795,3.431,796,5.55,814,5.092,827,3.622,1186,5.092,2585,6.307,2586,5.865,2587,7.761,2588,6.577,2589,6.577,2590,6.577,2591,6.577,2592,6.577]],["title/modules/RepoModule.html",[0,1.195,40,2.711]],["body/modules/RepoModule.html",[0,2.013,2,2.464,3,3.145,8,0.006,9,3.21,10,2.618,11,2.464,12,0.081,13,0.09,14,0.072,17,3.423,18,3.582,19,0.142,20,0.829,22,0.098,23,0.198,24,0.005,25,0.005,40,5.54,50,3.349,66,3.064,67,1.976,95,2.732,183,2.046,257,2.187,625,4.516,2174,5.027,2389,4.516,2414,6.52,2416,5.843,2508,5.139,2519,6.666,2535,5.376,2593,5.843,2594,5.843,2595,5.843,2596,6.553,2597,6.553,2598,6.553]],["title/classes/RepoPageOptionsDto.html",[23,0.144,2523,2.803]],["body/classes/RepoPageOptionsDto.html",[8,0.006,12,0.063,13,0.07,14,0.056,19,0.116,22,0.116,23,0.208,24,0.004,25,0.004,55,0.518,58,0.776,59,0.433,60,0.872,166,2.911,252,2.673,261,0.25,272,1.109,292,0.996,337,0.826,370,2.579,371,2.86,455,1.222,492,3.156,552,2.455,627,1.467,629,2.673,630,2.66,631,2.481,632,2.306,633,5.934,634,3.288,635,3.777,636,3.707,638,2.5,639,3.59,641,3.777,642,4.259,643,6.56,646,2.587,647,3.666,648,2.66,649,2.737,650,4.549,651,3.01,652,3.804,653,2.587,654,2.821,655,2.911,656,2.737,657,2.911,658,3.288,659,2.455,660,2.284,661,2.821,662,2.821,663,2.911,664,3.288,665,3.239,666,3.131,667,1.783,668,1.889,669,1.371,670,4.545,710,3.531,746,4.971,806,2.09,1100,3.375,1347,3.239,1452,3.712,2143,4.203,2144,4.203,2145,3.531,2146,4.203,2147,4.203,2148,4.203,2523,4.031,2585,4.971,2599,6.345,2600,4.568,2601,5.123,2602,4.568,2603,6.117,2604,5.263,2605,6.117,2606,6.117,2607,5.628,2608,5.263,2609,5.628,2610,5.628,2611,5.263,2612,5.123]],["title/classes/RepoSearchOptionsDto.html",[23,0.144,2527,3.456]],["body/classes/RepoSearchOptionsDto.html",[8,0.006,12,0.06,13,0.067,14,0.054,19,0.122,22,0.074,23,0.202,24,0.004,25,0.004,55,0.555,59,0.47,60,0.906,252,2.781,261,0.239,272,1.189,292,0.973,337,0.789,421,1.42,455,1.185,492,3.084,552,2.347,623,2.066,627,1.402,629,2.445,630,2.542,631,2.406,632,2.066,633,5.105,634,3.189,635,3.664,636,3.623,638,2.5,639,3.535,641,4.162,642,4.466,643,5.477,646,2.473,647,3.555,648,2.542,649,2.616,650,4.67,651,2.877,652,3.717,653,2.473,654,2.696,655,2.783,656,2.616,657,2.783,658,3.189,659,2.347,660,2.183,661,2.696,662,2.696,663,2.783,664,4.065,665,3.096,666,3.871,667,1.705,669,1.781,670,2.877,787,4.017,795,3.455,1560,4.78,1829,4.602,1830,4.98,1831,5.326,1832,3.548,1833,4.017,1834,3.548,1837,4.586,1840,3.226,1841,3.548,2427,4.366,2523,4.765,2527,4.822,2537,6.145,2585,6.145,2599,4.017,2600,4.366,2613,4.896,2614,4.896,2615,4.896]],["title/injectables/RepoService.html",[458,0.849,2508,2.476]],["body/injectables/RepoService.html",[8,0.006,12,0.04,13,0.045,14,0.036,19,0.13,20,0.412,22,0.049,23,0.099,24,0.003,25,0.003,51,0.989,55,0.502,57,1.614,58,0.964,59,0.42,60,0.755,62,1.627,67,0.981,79,0.829,95,1.357,99,3.017,101,1.85,103,1.981,105,1.981,107,1.981,127,0.639,175,1.2,183,1.016,200,1.633,203,2.178,228,4.604,249,1.419,251,1.901,261,0.159,262,1.881,281,2.801,292,1.018,301,2.552,319,2.145,365,2.29,374,1.601,396,1.965,401,1.5,421,1.459,458,0.883,490,1.133,497,1.94,532,1.072,623,1.839,629,1.053,632,1.839,636,3.646,638,1.305,639,2.066,643,2.358,652,1.601,653,2.503,658,2.877,660,2.991,668,1.2,669,1.607,676,3.954,678,2.095,681,2.145,684,3.416,685,1.387,686,1.133,687,1.248,688,2.67,689,2.497,690,4.105,691,1.85,694,3.473,696,4.419,697,4.419,699,2.902,700,2.902,702,4.066,703,4.066,704,3.694,705,2.243,706,3.134,707,2.912,717,1.981,772,1.522,927,3.062,943,2.806,945,2.573,990,1.58,995,2.729,1016,2.398,1019,2.066,1055,3.802,1063,2.902,1209,4.42,1233,3.416,1368,2.902,1383,2.902,1402,2.902,1417,2.902,1687,1.912,1714,2.497,1759,3.017,1777,1.981,1781,3.116,1805,2.67,1808,3.949,1830,2.145,1831,1.981,1840,2.145,2103,3.694,2118,2.573,2163,4.066,2242,2.243,2305,2.358,2380,4.084,2389,2.243,2390,2.358,2397,2.67,2439,4.419,2443,5.351,2454,4.419,2463,2.902,2472,2.902,2479,2.67,2508,2.573,2522,4.419,2523,3.942,2527,4.861,2531,4.419,2535,2.67,2536,4.419,2537,2.358,2599,2.67,2604,4.604,2607,2.67,2608,2.497,2609,2.67,2610,2.67,2611,2.497,2616,2.902,2617,4.956,2618,4.956,2619,6.001,2620,3.255,2621,3.255,2622,4.956,2623,4.956,2624,3.255,2625,3.255,2626,6.001,2627,3.255,2628,3.255,2629,3.255,2630,3.255,2631,4.956,2632,3.255,2633,3.255,2634,6.001,2635,3.255,2636,6.001,2637,3.255,2638,4.956,2639,3.255,2640,4.956,2641,3.255,2642,3.255,2643,3.255,2644,3.255,2645,3.255,2646,4.956,2647,3.255,2648,3.255,2649,3.255,2650,3.255,2651,3.255,2652,3.255,2653,7.219,2654,7.219,2655,2.902,2656,2.67,2657,2.902,2658,3.255,2659,3.255,2660,3.255,2661,3.255,2662,3.255,2663,3.255,2664,3.255,2665,3.255,2666,3.255,2667,3.255,2668,3.255,2669,3.255,2670,3.255,2671,3.255,2672,3.255,2673,3.255,2674,3.255,2675,3.255,2676,3.255,2677,3.255,2678,3.255,2679,3.255,2680,3.255,2681,3.255,2682,3.255,2683,2.902,2684,3.255,2685,3.255,2686,4.956,2687,3.255,2688,3.255,2689,4.956,2690,3.255,2691,3.255,2692,3.255,2693,3.255,2694,3.255]],["title/controllers/RepoStarController.html",[255,1.032,2695,3.659]],["body/controllers/RepoStarController.html",[8,0.006,12,0.042,13,0.047,14,0.038,19,0.132,20,0.434,22,0.052,23,0.104,24,0.003,25,0.003,51,1.03,55,0.444,57,1.428,58,0.836,59,0.456,60,0.685,62,1.793,95,2.583,96,1.781,103,4.498,104,2.632,127,1.013,251,0.903,252,1.452,255,0.743,257,0.934,259,1.265,261,0.167,262,1.917,272,0.951,275,3.246,276,2.605,281,2.896,292,1.219,301,3.231,330,1.53,331,3.542,333,3.454,334,3.038,335,2.918,336,1.265,337,0.553,338,1.4,359,1.83,361,3.372,362,2.778,365,1.671,374,1.976,396,1.876,401,1.36,406,1.506,421,1.385,465,1.265,519,1.604,623,2.517,629,1.11,632,1.314,669,0.919,686,1.195,687,1.316,718,2.931,722,2.198,723,1.566,724,1.645,725,1.53,726,1.645,806,2.529,822,2.261,1370,7.367,1629,3.682,1672,4.753,1687,4.867,1702,1.687,1703,1.889,1726,3.555,1727,3.398,1808,3.578,1995,3.522,1996,1.781,2067,4.75,2508,3.217,2509,2.17,2510,2.365,2511,2.365,2514,3.555,2518,3.555,2523,4.049,2524,2.365,2541,2.365,2543,2.365,2604,2.632,2695,3.957,2696,6.921,2697,3.06,2698,6.891,2699,7.388,2700,7.388,2701,6.891,2702,7.388,2703,3.431,2704,3.431,2705,5.287,2706,6.891,2707,6.891,2708,4.994,2709,4.561,2710,4.75,2711,3.431,2712,3.431,2713,3.431,2714,3.431,2715,3.431,2716,3.431,2717,6.367,2718,3.431,2719,3.431,2720,3.431,2721,4.541,2722,3.431,2723,3.431,2724,3.431,2725,3.431,2726,2.486,2727,4.868,2728,4.271,2729,3.06,2730,2.632,2731,3.431,2732,3.431,2733,3.431,2734,5.158,2735,3.431,2736,3.431,2737,3.431,2738,5.158,2739,3.431]],["title/controllers/RepoStargazeController.html",[255,1.032,2740,3.659]],["body/controllers/RepoStargazeController.html",[8,0.006,12,0.043,13,0.047,14,0.038,19,0.132,20,0.437,22,0.052,23,0.105,24,0.003,25,0.003,51,1.036,55,0.446,57,1.432,58,0.839,59,0.457,60,0.687,62,1.796,95,2.595,96,1.795,107,4.513,108,2.653,127,1.019,251,0.91,252,1.461,255,0.748,257,0.941,259,1.275,261,0.168,262,1.919,272,0.955,275,3.252,276,2.62,281,2.902,292,1.22,301,3.234,330,1.542,331,3.552,333,3.466,334,3.047,335,2.926,336,1.275,337,0.558,338,1.411,359,1.84,361,3.383,362,2.787,365,1.678,374,1.981,396,1.883,401,1.364,406,1.508,421,1.387,465,1.275,519,1.617,623,2.529,629,1.119,632,1.322,669,0.926,686,1.204,687,1.326,718,2.948,722,2.21,723,1.578,724,1.658,725,1.542,726,1.658,806,2.54,822,2.278,1352,5.108,1574,5.129,1600,6.26,1629,3.697,1672,4.763,1687,4.879,1702,1.701,1703,1.904,1726,3.576,1727,3.418,1808,3.592,1995,3.538,1996,1.795,2013,3.418,2508,3.232,2509,2.187,2510,2.383,2511,2.383,2514,3.576,2518,3.576,2523,4.065,2524,2.383,2541,2.383,2543,2.383,2657,3.084,2708,5.013,2709,4.572,2726,2.506,2727,4.884,2730,2.653,2740,3.98,2741,6.941,2742,3.084,2743,7.413,2744,7.413,2745,7.413,2746,7.413,2747,7.413,2748,3.458,2749,3.458,2750,5.188,2751,6.918,2752,6.169,2753,3.458,2754,3.458,2755,3.458,2756,3.458,2757,3.458,2758,3.458,2759,3.458,2760,3.458,2761,3.458,2762,5.188,2763,3.458,2764,3.458,2765,3.458,2766,3.458,2767,4.291,2768,3.084,2769,3.458,2770,3.458,2771,3.759,2772,5.188,2773,3.458,2774,3.458,2775,4.626,2776,5.188,2777,3.458]],["title/controllers/RepoSubmitController.html",[255,1.032,2778,3.659]],["body/controllers/RepoSubmitController.html",[8,0.006,12,0.042,13,0.047,14,0.038,19,0.132,20,0.432,22,0.051,23,0.104,24,0.003,25,0.003,51,1.027,55,0.443,57,1.425,58,0.835,59,0.456,60,0.683,62,1.791,95,2.577,96,1.775,105,4.49,106,2.622,127,1.01,251,0.9,252,1.448,255,0.74,257,0.93,259,1.26,261,0.167,262,1.915,272,0.95,275,3.242,276,2.597,281,2.893,292,1.219,301,3.23,330,1.524,331,3.537,333,3.449,334,3.033,335,2.914,336,1.26,337,0.551,338,1.395,359,1.824,361,3.366,362,2.773,365,1.668,374,1.974,396,1.872,401,1.357,406,1.504,421,1.384,465,1.26,519,1.598,623,2.516,629,1.106,632,1.31,669,0.915,686,1.19,687,1.311,718,2.923,722,2.191,723,1.56,724,1.638,725,1.524,726,1.638,806,2.523,822,2.252,1386,7.85,1629,3.675,1672,4.749,1687,4.862,1702,1.681,1703,1.882,1726,3.544,1727,3.389,1808,3.571,1995,3.514,1996,1.775,2013,3.389,2067,4.741,2508,3.21,2509,2.161,2510,2.356,2511,2.356,2514,3.544,2518,3.544,2523,4.041,2524,2.356,2541,2.356,2543,2.356,2656,2.804,2705,5.277,2708,4.984,2709,4.556,2710,4.741,2721,4.532,2726,2.477,2727,4.86,2730,2.622,2778,3.945,2779,6.911,2780,3.048,2781,7.376,2782,7.376,2783,7.376,2784,7.376,2785,7.376,2786,3.418,2787,3.418,2788,6.878,2789,6.878,2790,3.418,2791,3.418,2792,3.418,2793,3.418,2794,3.418,2795,3.418,2796,6.911,2797,3.418,2798,3.418,2799,3.418,2800,3.418,2801,3.418,2802,3.418,2803,3.418,2804,4.261,2805,3.048,2806,2.804,2807,3.418,2808,3.418,2809,5.143,2810,3.418,2811,3.418,2812,5.143,2813,3.418]],["title/controllers/RepoVoteController.html",[255,1.032,2814,3.659]],["body/controllers/RepoVoteController.html",[8,0.006,12,0.039,13,0.043,14,0.035,19,0.131,20,0.401,22,0.048,23,0.096,24,0.003,25,0.003,51,0.969,55,0.452,57,1.454,58,0.851,59,0.457,60,0.697,62,1.839,95,2.46,96,1.645,101,4.053,102,2.183,127,1.538,251,0.834,252,1.367,255,0.686,257,0.862,259,1.168,261,0.154,262,1.931,272,0.969,275,3.28,276,3.8,281,2.837,292,1.233,301,3.244,330,1.412,331,3.575,333,3.335,334,3.066,335,2.945,336,1.168,337,0.511,338,1.292,359,1.722,361,3.434,362,2.829,365,1.604,374,1.928,396,1.801,401,1.385,406,1.513,421,1.36,465,1.168,516,1.025,519,1.481,623,2.508,629,1.025,632,1.236,669,0.848,682,4.559,686,1.103,687,1.215,718,2.759,722,2.068,723,1.446,724,1.518,725,1.412,726,1.518,806,2.408,822,2.087,1404,7.299,1629,3.535,1672,4.804,1687,4.748,1702,1.558,1703,1.744,1726,3.345,1727,3.198,1808,3.434,1995,3.759,1996,1.645,2067,4.559,2508,3.064,2509,2.003,2510,2.183,2511,2.183,2514,3.345,2518,3.345,2523,3.887,2524,2.183,2541,2.183,2543,2.183,2655,2.825,2705,5.075,2708,4.793,2709,4.449,2710,4.559,2721,4.359,2726,2.295,2727,4.699,2730,2.43,2814,3.724,2815,6.985,2816,2.825,2817,6.615,2818,7.132,2819,7.132,2820,5.899,2821,6.615,2822,7.132,2823,3.167,2824,3.167,2825,6.615,2826,6.615,2827,3.167,2828,3.167,2829,3.167,2830,3.167,2831,3.167,2832,3.167,2833,6.127,2834,3.167,2835,2.825,2836,3.167,2837,3.167,2838,4.276,2839,3.167,2840,3.167,2841,3.167,2842,3.167,2843,3.167,2844,3.167,2845,3.167,2846,4.067,2847,2.825,2848,2.295,2849,3.167,2850,3.167,2851,3.167,2852,3.167,2853,3.167,2854,3.167,2855,3.167,2856,4.854,2857,3.167,2858,3.167,2859,3.167,2860,4.854,2861,3.167]],["title/modules/StarModule.html",[0,1.195,41,3.456]],["body/modules/StarModule.html",[0,2,2,2.437,3,3.123,8,0.006,9,3.188,10,2.589,11,2.437,12,0.08,13,0.089,14,0.071,17,3.4,18,3.557,19,0.144,20,0.82,22,0.097,23,0.196,24,0.005,25,0.005,40,5.362,41,7.051,50,3.327,66,3.03,67,1.954,93,4.27,95,2.702,96,3.365,103,4.858,104,4.972,183,2.024,257,2.172,623,1.651,625,4.467,2695,6.633,2728,6.813,2729,5.779,2862,5.779,2863,6.481,2864,5.779,2865,5.779,2866,6.481,2867,6.481]],["title/injectables/StarService.html",[458,0.849,2728,3.287]],["body/injectables/StarService.html",[8,0.006,12,0.066,13,0.073,14,0.058,19,0.126,20,0.672,22,0.08,23,0.161,24,0.004,25,0.004,51,1.403,55,0.504,57,1.522,58,0.891,59,0.396,60,0.73,62,1.573,67,1.602,79,1.354,103,3.236,104,4.077,183,1.659,203,2.256,249,2.013,251,1.399,261,0.259,262,1.877,281,2.812,292,1.238,301,3.205,365,2.114,396,2.282,401,1.543,458,1.252,497,3.083,532,1.751,623,1.791,678,2.617,682,6.297,685,2.264,694,2.995,772,2.485,927,3.826,943,3.287,945,3.65,1123,1.998,1370,4.077,1781,2.759,2118,3.65,2709,3.871,2710,3.663,2717,5.768,2728,4.845,2868,4.739,2869,7.03,2870,7.03,2871,5.315,2872,5.315,2873,7.03,2874,5.315,2875,7.03,2876,5.315,2877,7.03,2878,5.315,2879,3.236,2880,5.315,2881,5.315,2882,7.03,2883,7.03,2884,8.958,2885,7.03,2886,4.632,2887,5.315,2888,5.315,2889,3.851,2890,5.315]],["title/modules/StargazeModule.html",[0,1.195,42,3.456]],["body/modules/StargazeModule.html",[0,2,2,2.437,3,3.123,8,0.006,9,3.188,10,2.589,11,2.437,12,0.08,13,0.089,14,0.071,17,3.4,18,3.557,19,0.144,20,0.82,22,0.097,23,0.196,24,0.005,25,0.005,40,5.362,42,7.051,50,3.327,66,3.03,67,1.954,93,4.27,95,2.702,96,3.365,107,4.858,108,4.972,183,2.024,257,2.172,623,1.651,625,4.467,2740,6.633,2767,6.813,2768,5.779,2891,5.779,2892,5.779,2893,5.779,2894,6.481,2895,6.481,2896,6.481]],["title/injectables/StargazeService.html",[458,0.849,2767,3.287]],["body/injectables/StargazeService.html",[8,0.006,12,0.065,13,0.072,14,0.058,19,0.126,20,0.668,22,0.079,23,0.16,24,0.004,25,0.004,51,1.398,55,0.503,57,1.518,58,0.889,59,0.395,60,0.728,62,1.568,67,1.593,79,1.346,107,3.216,108,4.053,183,1.65,203,2.249,249,2.005,251,1.391,261,0.257,262,1.874,281,2.806,292,1.237,301,3.202,365,2.11,396,2.277,401,1.539,458,1.247,497,3.074,532,1.74,623,2.001,678,2.611,682,6.288,685,2.251,694,3.563,772,2.47,927,3.817,943,3.274,945,3.636,1123,1.986,1574,3.481,1781,2.743,2118,3.636,2709,3.856,2752,6.244,2767,4.826,2879,3.216,2886,4.614,2889,3.828,2897,4.711,2898,7.002,2899,7.002,2900,5.283,2901,5.283,2902,7.002,2903,5.283,2904,7.002,2905,5.283,2906,7.002,2907,5.283,2908,5.283,2909,5.283,2910,7.002,2911,7.002,2912,8.942,2913,7.002,2914,5.283,2915,5.283,2916,5.283]],["title/modules/StripeModule.html",[0,1.195,442,3.287]],["body/modules/StripeModule.html",[0,2.099,2,2.639,3,3.278,8,0.006,9,3.347,10,2.805,11,2.639,12,0.087,13,0.096,14,0.077,17,3.569,18,3.734,19,0.126,20,0.888,22,0.105,23,0.213,24,0.005,25,0.005,50,2.926,347,6.578,442,6.697,2917,6.26,2918,6.26,2919,6.26,2920,7.02,2921,7.02]],["title/injectables/StripeService.html",[347,3.143,458,0.849]],["body/injectables/StripeService.html",[8,0.006,12,0.069,13,0.077,14,0.062,19,0.122,20,0.712,22,0.085,23,0.17,24,0.005,25,0.005,51,1.457,55,0.534,57,1.565,58,0.916,59,0.431,60,0.823,62,1.457,69,5.754,70,3.426,134,5.858,181,2.767,203,1.611,249,1.611,251,2.133,261,0.274,262,1.907,277,4.616,292,1.043,301,1.888,310,4.871,347,4.809,365,1.365,374,1.741,396,1.532,401,1.491,418,5.987,421,1.419,455,1.3,458,1.3,465,2.074,492,2.296,516,2.361,532,1.854,684,3.878,926,6.508,1034,2.452,1059,4.616,1426,4.317,1428,4.616,1434,4.317,1447,5.018,1815,4.616,2283,5.987,2922,5.018,2923,8.1,2924,7.298,2925,7.298,2926,7.298,2927,5.627,2928,7.298,2929,5.627,2930,5.627,2931,5.627,2932,8.1,2933,5.627,2934,5.627,2935,5.018,2936,5.627,2937,5.627,2938,5.627,2939,5.627,2940,5.627,2941,5.627,2942,5.627,2943,5.627,2944,5.627,2945,5.018,2946,5.627,2947,5.627,2948,5.627,2949,5.627,2950,5.627,2951,5.627]],["title/modules/StripeSubscriptionModule.html",[0,1.195,43,3.287]],["body/modules/StripeSubscriptionModule.html",[0,2.065,2,2.568,3,3.225,8,0.006,9,3.292,10,2.729,11,2.568,12,0.084,13,0.093,14,0.075,17,3.511,18,3.673,19,0.138,20,0.864,22,0.103,23,0.207,24,0.005,25,0.005,43,6.66,50,2.847,66,3.194,67,2.06,134,4.32,137,5.24,139,4.708,140,5.604,183,2.133,1418,5.24,2952,6.091,2953,6.091,2954,6.091,2955,6.858,2956,6.831,2957,6.091,2958,6.831]],["title/injectables/StripeSubscriptionService.html",[458,0.849,2955,3.287]],["body/injectables/StripeSubscriptionService.html",[8,0.006,12,0.08,13,0.089,14,0.071,19,0.136,20,0.82,22,0.097,23,0.196,24,0.005,25,0.005,51,1.593,55,0.52,57,1.542,58,0.903,59,0.401,60,0.739,62,1.593,67,1.954,79,1.651,134,4.098,139,4.467,140,5.317,183,2.024,249,2.285,251,1.706,261,0.316,262,1.812,377,5.264,401,1.469,458,1.421,516,2.097,532,2.135,678,2.817,685,2.761,927,4.118,1418,6.922,1434,4.972,2955,5.5,2959,5.779,2960,7.98,2961,6.481,2962,6.481,2963,7.98,2964,6.481,2965,7.98,2966,6.481,2967,6.481,2968,6.481,2969,6.481]],["title/modules/StripeWebHookModule.html",[0,1.195,44,3.456]],["body/modules/StripeWebHookModule.html",[0,1.98,2,2.397,3,3.092,8,0.006,9,3.156,10,2.548,11,2.397,12,0.079,13,0.087,14,0.07,17,2.717,18,3.522,19,0.141,20,0.806,22,0.096,23,0.193,24,0.005,25,0.005,32,6.192,43,6.477,44,7.176,46,5.522,50,3.293,115,4.395,133,5.231,134,4.032,137,4.891,138,5.686,257,2.151,442,6.477,449,5.686,2970,5.686,2971,5.686,2972,6.376,2973,7.078,2974,4.891,2975,6.376,2976,6.376]],["title/controllers/StripeWebhookController.html",[255,1.032,2973,3.456]],["body/controllers/StripeWebhookController.html",[8,0.006,12,0.053,13,0.058,14,0.047,19,0.135,20,0.54,22,0.064,23,0.129,24,0.004,25,0.004,51,1.208,55,0.364,57,1.169,58,0.685,59,0.304,60,0.561,62,1.208,69,4.445,70,2.6,127,1.189,134,4.445,137,3.276,202,4.171,203,2.311,249,1.223,251,2.358,255,0.924,257,1.163,259,1.574,261,0.208,262,1.757,272,0.55,301,2.565,329,2.217,334,2.369,336,1.574,337,0.689,345,3.457,346,3.095,347,4.631,348,3.808,349,4.631,350,3.808,359,1.515,365,2.284,370,1.606,374,1.444,379,2.6,396,2.282,398,2.6,399,4.643,401,0.786,420,6.268,421,1.432,475,5.523,490,2.107,497,2.751,516,1.958,517,5.27,561,2.6,646,2.157,984,3.808,1084,2.943,1123,1.606,1420,3.808,1421,3.808,1422,3.808,1423,3.808,1424,3.808,1425,3.808,1426,3.276,1427,3.808,1428,3.504,1429,3.827,1430,3.808,1431,3.808,1434,6.43,1452,3.095,2561,3.504,2955,4.844,2957,3.808,2973,4.385,2974,5.392,2977,5.767,2978,3.504,2979,6.052,2980,6.052,2981,4.271,2982,7.646,2983,4.271,2984,4.271,2985,5.767,2986,6.052,2987,4.271,2988,6.052,2989,3.504,2990,4.271,2991,3.504,2992,3.276,2993,5.396,2994,5.396,2995,5.396,2996,5.396,2997,4.271,2998,4.271,2999,4.271,3000,7.029,3001,4.271,3002,4.271,3003,4.271,3004,4.271,3005,4.271,3006,4.271,3007,3.808,3008,4.271,3009,7.029,3010,4.271,3011,6.052,3012,4.271,3013,4.271,3014,4.271,3015,4.271,3016,4.271,3017,4.271,3018,4.271,3019,4.271,3020,4.271,3021,4.271,3022,4.271,3023,4.271,3024,4.271,3025,4.271,3026,4.271,3027,4.271,3028,4.271,3029,6.052,3030,4.271,3031,4.271,3032,4.271,3033,4.271,3034,4.271,3035,4.271,3036,7.029,3037,4.271,3038,4.271,3039,4.271,3040,6.268,3041,4.271,3042,3.504,3043,4.271,3044,4.271,3045,4.271,3046,4.271,3047,6.052,3048,4.271,3049,4.271,3050,4.271,3051,4.271,3052,4.271,3053,4.271,3054,4.271,3055,4.271,3056,4.271,3057,4.271]],["title/modules/SubmitModule.html",[0,1.195,45,3.456]],["body/modules/SubmitModule.html",[0,2,2,2.437,3,3.123,8,0.006,9,3.188,10,2.589,11,2.437,12,0.08,13,0.089,14,0.071,17,3.4,18,3.557,19,0.144,20,0.82,22,0.097,23,0.196,24,0.005,25,0.005,40,5.362,45,7.051,50,3.327,66,3.03,67,1.954,93,4.27,95,2.702,96,3.365,105,4.858,106,4.972,183,2.024,257,2.172,623,1.651,625,4.467,2778,6.633,2804,6.813,2805,5.779,3058,5.779,3059,5.779,3060,6.481,3061,5.779,3062,6.481,3063,6.481]],["title/injectables/SubmitService.html",[458,0.849,2804,3.287]],["body/injectables/SubmitService.html",[8,0.006,12,0.066,13,0.073,14,0.058,19,0.126,20,0.672,22,0.08,23,0.161,24,0.004,25,0.004,51,1.403,55,0.504,57,1.522,58,0.891,59,0.396,60,0.73,62,1.573,67,1.602,79,1.354,105,3.236,106,4.077,183,1.659,203,2.256,249,2.013,251,1.399,261,0.259,262,1.877,281,2.812,292,1.238,301,3.205,365,2.114,396,2.282,401,1.543,458,1.252,497,3.083,532,1.751,623,1.791,678,2.617,682,6.297,685,2.264,694,2.995,772,2.485,927,3.826,943,3.287,945,3.65,1123,1.998,1781,2.759,2118,3.65,2709,3.871,2710,3.663,2804,4.845,2806,4.36,2879,3.236,2886,4.632,2889,3.851,3064,4.739,3065,7.03,3066,7.03,3067,5.315,3068,5.315,3069,7.03,3070,5.315,3071,7.03,3072,5.315,3073,7.03,3074,5.315,3075,5.315,3076,5.315,3077,7.03,3078,7.03,3079,8.958,3080,7.03,3081,7.03,3082,5.315,3083,5.315,3084,5.315]],["title/classes/SupabaseAuthDto.html",[23,0.144,342,3.659]],["body/classes/SupabaseAuthDto.html",[8,0.006,12,0.035,13,0.039,14,0.031,19,0.043,22,0.043,23,0.086,24,0.003,25,0.003,55,0.557,58,0.851,59,0.466,60,0.904,127,1.905,199,2.702,206,3.967,252,2.809,260,6.411,261,0.138,272,1.192,276,4.29,292,0.802,298,5.596,299,2.08,310,3.847,337,0.456,340,5.863,342,3.413,366,5.181,368,4.509,369,4.9,370,2.066,371,2.291,374,1.311,375,4.509,383,4.216,384,4.509,385,4.9,386,5.194,387,5.194,388,4.216,389,5.194,390,4.216,391,4.158,392,4.216,393,4.216,394,4.216,395,4.9,406,1.569,421,1.501,455,0.792,490,2.853,594,2.813,627,0.811,659,4.415,664,4.438,671,3.066,747,2.985,775,1.233,778,2.493,794,1.938,807,3.63,870,3.392,880,2.614,882,3.471,971,1.815,994,3.967,995,2.45,1008,3.245,1009,3.392,1011,1.983,1012,4.425,1021,1.854,1061,3.65,1070,2.132,1079,3.066,1130,4.513,1151,2.813,1174,3.967,1339,3.967,1347,2.813,1466,3.224,1503,5.11,1572,3.65,1716,4.513,3085,8.295,3086,2.524,3087,2.831,3088,2.831,3089,4.449,3090,4.449,3091,2.831,3092,2.831,3093,3.65,3094,3.967,3095,2.831,3096,3.224,3097,2.831,3098,4.449,3099,2.831,3100,3.967,3101,3.967,3102,2.831,3103,2.831,3104,2.831,3105,6.228,3106,4.449,3107,2.831,3108,4.449,3109,2.831,3110,2.831,3111,3.967,3112,3.967,3113,2.831,3114,4.449,3115,4.449,3116,2.831,3117,4.449,3118,2.831,3119,4.449,3120,2.831,3121,2.831,3122,3.65,3123,3.967,3124,2.831,3125,2.831,3126,4.449,3127,3.967,3128,2.831,3129,2.831]],["title/injectables/SupabaseGuard.html",[338,1.946,458,0.849]],["body/injectables/SupabaseGuard.html",[8,0.006,12,0.092,13,0.103,14,0.082,19,0.131,20,0.948,22,0.113,23,0.227,24,0.005,25,0.005,338,3.552,446,6.149,458,1.55,532,2.469,631,2.71,3130,6.684,3131,7.495,3132,7.495]],["title/injectables/SupabaseStrategy.html",[443,3.456,458,0.849]],["body/injectables/SupabaseStrategy.html",[8,0.006,12,0.078,13,0.087,14,0.07,19,0.135,20,0.802,22,0.095,23,0.192,24,0.005,25,0.005,51,1.572,55,0.515,57,1.522,58,0.891,59,0.396,60,0.73,62,1.572,63,4.596,76,4.596,127,1.246,249,2.452,260,4.371,261,0.309,262,1.794,271,7.347,340,5.188,380,2.641,401,1.167,443,5.705,446,5.203,458,1.402,516,2.052,532,2.089,631,2.293,2985,5.203,3133,5.655,3134,7.873,3135,7.021,3136,6.342,3137,7.873,3138,8.563,3139,6.342,3140,7.873,3141,6.342,3142,6.342,3143,6.342,3144,6.342,3145,6.342,3146,6.342,3147,6.342,3148,6.342,3149,6.342,3150,6.342,3151,6.342,3152,6.342,3153,6.342,3154,6.342,3155,6.342,3156,6.342,3157,6.342,3158,6.342,3159,6.342]],["title/classes/TopUsersDto.html",[23,0.144,3160,3.456]],["body/classes/TopUsersDto.html",[8,0.006,12,0.074,13,0.082,14,0.066,19,0.126,22,0.09,23,0.253,24,0.005,25,0.005,55,0.503,59,0.456,60,0.814,252,2.608,261,0.293,272,0.981,292,1.211,337,0.971,401,1.108,455,1.357,490,2.095,492,3.92,552,3.652,627,1.724,629,2.705,634,4.008,638,2.439,639,3.176,646,4.223,647,4.071,648,3.956,649,3.216,656,3.216,664,4.008,666,3.816,667,2.095,820,4.361,1863,3.966,1864,3.966,2145,5.252,2273,4.938,2275,4.938,2283,6.251,2284,6.414,2289,5.367,2291,6.859,2293,6.251,2294,4.938,3160,5.521,3161,7.837,3162,5.367,3163,6.019,3164,6.019,3165,6.019]],["title/classes/UpdateEndorsementDto.html",[23,0.144,3166,3.913]],["body/classes/UpdateEndorsementDto.html",[8,0.006,12,0.092,13,0.102,14,0.082,19,0.131,22,0.112,23,0.227,24,0.005,25,0.005,289,4.554,337,1.206,627,2.142,631,2.705,767,5.155,769,6.136,1707,6.136,3166,7.133,3167,6.67,3168,7.48,3169,7.48]],["title/classes/UpdateInsightDto.html",[23,0.144,2069,3.456]],["body/classes/UpdateInsightDto.html",[8,0.006,12,0.082,13,0.091,14,0.073,19,0.1,22,0.1,23,0.201,24,0.005,25,0.005,55,0.525,58,0.989,59,0.477,181,3.265,261,0.323,272,1.125,289,4.042,298,4.374,421,1.263,455,1.442,627,1.901,629,2.62,631,2.928,650,4.812,678,2.073,775,3.808,778,2.226,802,6.876,804,5.447,805,6.213,806,3.304,807,4.09,808,4.09,809,5.093,810,5.447,812,5.92,814,5.121,815,4.576,816,5.92,817,4.198,818,5.92,2069,5.868,2074,5.447,3170,5.447,3171,6.639,3172,6.639,3173,6.639]],["title/classes/UpdateInsightMemberDto.html",[23,0.144,3174,3.659]],["body/classes/UpdateInsightMemberDto.html",[8,0.006,12,0.085,13,0.094,14,0.075,19,0.124,22,0.103,23,0.25,24,0.005,25,0.005,55,0.412,59,0.446,261,0.334,272,0.883,337,1.106,406,1.162,421,1.434,455,1.471,627,1.964,667,2.387,775,2.988,778,2.104,794,3.598,795,3.519,808,4.646,829,5.626,830,5.985,1155,7.222,1160,5.692,1865,4.726,2063,5.261,3170,6.776,3174,6.336,3175,6.857,3176,6.776,3177,5.692,3178,6.857,3179,6.857]],["title/classes/UpdateUserCollaborationDto.html",[23,0.144,3180,3.659]],["body/classes/UpdateUserCollaborationDto.html",[8,0.006,12,0.085,13,0.095,14,0.076,19,0.125,22,0.104,23,0.251,24,0.005,25,0.005,55,0.416,59,0.447,127,1.63,163,2.685,239,7.399,261,0.337,272,0.89,337,1.114,406,1.171,421,1.438,455,1.478,627,1.979,667,2.406,775,3.011,778,2.114,794,3.615,795,3.535,845,5.67,846,5.719,1429,5.965,1865,4.763,3180,6.366,3181,6.013,3182,6.911,3183,6.911,3184,6.911,3185,6.911]],["title/classes/UpdateUserDto.html",[23,0.144,307,3.456]],["body/classes/UpdateUserDto.html",[8,0.006,12,0.046,13,0.051,14,0.041,19,0.083,22,0.056,23,0.167,24,0.003,25,0.003,55,0.544,58,0.867,59,0.493,60,0.884,127,1.856,192,4.087,199,1.407,252,2.442,261,0.182,272,1.165,307,3.987,310,4.355,323,7.667,337,0.604,380,3.268,386,5.879,387,5.879,388,5.005,389,5.879,390,5.005,391,4.641,392,5.005,393,5.005,394,5.005,406,1.533,409,5.879,421,1.546,455,0.98,462,3.03,594,3.479,627,1.072,659,4.226,664,4.285,666,4.08,667,1.303,775,2.397,778,2.462,794,2.843,795,3.529,807,3.632,821,3.987,832,3.338,834,4.906,835,3.071,880,2.199,971,2.245,1079,3.792,1347,2.367,1716,3.987,3093,4.514,3094,3.338,3096,3.987,3100,4.906,3101,4.906,3111,4.906,3112,3.338,3122,6.971,3123,3.338,3127,3.338,3177,2.58,3181,6.619,3186,3.338,3187,4.906,3188,3.743,3189,3.743,3190,5.502,3191,3.743,3192,3.743,3193,3.743,3194,3.743,3195,3.743,3196,3.743,3197,3.743,3198,3.743,3199,3.743,3200,3.743,3201,3.743,3202,6.524,3203,3.743,3204,3.743,3205,6.413,3206,3.743,3207,3.743,3208,3.743,3209,7.192,3210,5.502,3211,4.906,3212,5.502,3213,5.502,3214,5.502,3215,3.743,3216,3.743,3217,3.743,3218,3.743,3219,7.663,3220,3.743,3221,3.743,3222,3.743]],["title/classes/UpdateUserEmailPreferencesDto.html",[23,0.144,308,3.456]],["body/classes/UpdateUserEmailPreferencesDto.html",[8,0.006,12,0.079,13,0.088,14,0.07,19,0.119,22,0.096,23,0.24,24,0.005,25,0.005,55,0.476,59,0.473,127,1.872,199,2.977,261,0.312,272,1.02,308,5.737,310,5.247,337,1.032,380,3.231,406,1.342,455,1.41,527,4.36,627,1.832,667,2.228,775,3.45,778,2.288,794,3.746,807,4.865,810,6.496,821,6.23,846,5.457,1079,5.457,3181,6.23,3223,5.706,3224,7.667,3225,7.667,3226,6.399,3227,7.917,3228,6.399]],["title/classes/UpdateUserProfileInterestsDto.html",[23,0.144,317,3.456]],["body/classes/UpdateUserProfileInterestsDto.html",[8,0.006,12,0.085,13,0.094,14,0.076,19,0.124,22,0.103,23,0.251,24,0.005,25,0.005,55,0.414,59,0.447,127,1.626,181,4.071,261,0.335,272,0.886,317,5.999,319,6.209,337,1.11,380,2.978,406,1.167,421,1.384,455,1.474,475,4.536,627,1.971,667,2.397,775,2.999,778,2.109,794,3.607,815,5.706,817,5.825,2314,5.281,3181,5.999,3229,6.139,3230,5.648,3231,6.884,3232,5.281]],["title/controllers/UserCollaborationController.html",[255,1.032,3233,3.659]],["body/controllers/UserCollaborationController.html",[8,0.006,12,0.048,13,0.053,14,0.043,19,0.138,20,0.494,22,0.059,23,0.118,24,0.004,25,0.004,51,1.134,55,0.441,57,1.419,58,0.831,59,0.422,60,0.68,62,1.465,76,2.832,127,1.883,163,2.632,169,4.837,170,2.998,203,2.102,249,1.119,251,1.495,252,1.599,255,0.846,257,1.064,259,1.441,260,2.694,261,0.19,262,1.891,271,6.023,272,0.945,275,3.156,276,2.868,281,2.816,288,4.931,292,1.129,293,3.127,296,2.694,301,3.114,324,2.694,328,2.832,329,2.948,330,1.742,331,3.35,332,3.227,333,3.127,334,2.618,335,2.76,336,1.441,337,0.63,338,1.595,340,2.575,345,3.289,346,2.832,359,1.386,361,3.053,362,2.515,365,1.891,374,1.596,377,2.379,396,2.215,401,1.045,406,1.322,421,1.216,497,2.222,513,4.582,514,2.379,518,3.93,519,1.827,520,2.029,527,2.152,632,2.072,668,1.441,669,1.046,686,1.361,687,1.499,722,2.419,723,1.784,724,1.873,725,1.742,726,1.873,781,2.832,843,6.598,846,6.043,1429,2.471,1625,2.832,1626,3.591,1671,3.485,1702,1.922,1703,2.152,1743,3.485,1760,3.591,1968,3.457,1971,2.694,1996,2.029,1998,2.152,2067,3.914,2071,4.847,2073,2.832,2721,3.741,2727,3.741,2879,2.379,3180,6.241,3233,4.356,3234,4.432,3235,3.485,3236,3.908,3237,6.953,3238,6.953,3239,7.341,3240,5.964,3241,3.908,3242,3.206,3243,5.678,3244,6.688,3245,3.485,3246,5.678,3247,5.064,3248,3.908,3249,3.908,3250,3.485,3251,5.964,3252,3.908,3253,3.908,3254,3.908,3255,3.908,3256,3.908,3257,3.485,3258,3.908,3259,3.908,3260,3.908,3261,4.61,3262,3.485,3263,5.678,3264,3.908,3265,2.694,3266,3.908,3267,3.908,3268,3.908,3269,3.485,3270,3.908,3271,3.908,3272,6.688,3273,3.908,3274,5.678,3275,3.908,3276,3.908,3277,3.908,3278,3.485,3279,3.908,3280,3.908]],["title/injectables/UserCollaborationService.html",[458,0.849,3261,3.287]],["body/injectables/UserCollaborationService.html",[7,4.894,8,0.006,12,0.059,13,0.065,14,0.052,19,0.134,20,0.603,22,0.072,23,0.145,24,0.004,25,0.004,51,1.305,55,0.534,57,1.677,58,0.982,59,0.437,60,0.804,62,1.733,67,1.438,79,1.215,127,0.937,169,4.307,170,3.66,183,1.49,203,1.366,249,1.872,251,1.721,261,0.232,262,2.017,281,2.691,292,0.96,301,2.82,365,1.946,374,2.005,377,5.284,396,1.299,401,1.597,421,1.432,458,1.164,497,1.867,516,2.413,532,1.572,632,2.264,668,1.759,669,1.277,678,2.505,685,2.033,686,1.661,687,1.83,694,3.418,927,3.661,943,3.057,945,2.477,1346,2.627,1472,4.254,1759,3.98,1777,3.98,1781,3.394,1782,3.288,1787,3.144,1788,3.457,1808,3.872,1998,2.627,2103,4.107,2118,3.394,3234,5.144,3237,5.829,3238,6.65,3240,5.829,3250,4.254,3257,5.829,3261,4.506,3278,7.494,3281,4.254,3282,6.537,3283,4.771,3284,4.771,3285,6.537,3286,6.537,3287,4.771,3288,4.771,3289,4.771,3290,4.771,3291,6.537,3292,4.771,3293,4.771,3294,4.771,3295,4.771,3296,4.771,3297,4.771,3298,4.771,3299,4.771,3300,4.771,3301,4.771,3302,4.771,3303,4.771]],["title/controllers/UserController.html",[255,1.032,3304,3.659]],["body/controllers/UserController.html",[8,0.006,12,0.048,13,0.054,14,0.043,19,0.141,20,0.495,22,0.059,23,0.119,24,0.004,25,0.004,51,1.134,55,0.469,57,1.508,58,0.883,59,0.448,60,0.723,62,1.557,95,2.369,96,2.031,97,2.795,127,1.809,143,3.352,144,2.09,146,3.46,147,2.696,148,2.696,149,3.23,151,2.474,166,4.625,192,5.063,249,1.12,251,1.934,255,0.847,257,1.065,259,1.442,261,0.191,262,1.959,272,1.005,275,3.349,281,2.989,313,3.489,333,3.647,334,3.185,335,3.06,336,1.442,337,0.631,345,3.291,359,1.388,362,2.933,365,1.378,381,3.23,396,1.547,401,1.436,406,1.245,421,1.423,527,3.129,632,2.46,668,1.442,669,1.047,686,1.362,687,1.501,722,3.129,723,1.786,724,1.875,725,1.744,726,1.875,727,4.074,728,2.835,806,3.183,1463,4.85,1494,2.578,1626,4.645,1629,4.597,1672,4.044,1702,1.924,1738,5.491,1958,5.635,1970,3.21,1976,3.489,1998,2.154,1999,4.232,2001,3.001,2005,3.489,2012,4.36,2337,3.489,2508,3.475,2509,2.474,2524,2.696,2529,3.489,2541,2.696,2543,2.696,3160,5.322,3265,2.696,3304,4.36,3305,3.489,3306,7.801,3307,7.801,3308,7.801,3309,5.683,3310,5.683,3311,3.912,3312,3.912,3313,6.026,3314,3.912,3315,3.912,3316,3.912,3317,3.912,3318,3.912,3319,3.912,3320,3.912,3321,3.912,3322,3.912,3323,3.912,3324,3.912,3325,3.912,3326,5.683,3327,3.912,3328,3.912,3329,3.912,3330,3.912,3331,5.683,3332,3.912,3333,3.912,3334,2.578,3335,3.489,3336,3.489,3337,3.489,3338,3.489,3339,3.489,3340,3.912,3341,3.912,3342,3.912,3343,5.968,3344,3.912,3345,3.912,3346,3.912,3347,5.068,3348,3.912,3349,3.912,3350,3.912,3351,3.912,3352,3.912]],["title/controllers/UserEndorsementController.html",[255,1.032,3353,3.659]],["body/controllers/UserEndorsementController.html",[8,0.006,12,0.067,13,0.074,14,0.059,19,0.14,20,0.682,22,0.081,23,0.163,24,0.004,25,0.004,51,1.417,55,0.427,57,1.372,58,0.803,59,0.424,60,0.658,62,1.417,127,1.656,172,5.334,173,4.427,252,1.519,255,1.168,257,1.469,259,1.989,261,0.263,262,1.885,272,0.914,275,3.171,276,4.259,292,1.158,301,2.939,330,2.405,331,3.622,334,3.106,335,2.984,336,1.989,337,0.87,338,2.202,359,1.914,361,3.241,362,2.67,401,1.307,465,1.989,516,2.297,519,2.523,632,2.491,668,1.989,669,1.444,718,4.793,722,3.382,723,2.463,724,2.586,725,2.405,726,2.586,1118,6.111,1661,7.52,1662,7.52,1672,4.644,1680,6.332,1691,5.825,1704,5.019,1712,4.811,1719,6.332,1996,2.801,3234,4.51,3353,5.447,3354,4.811,3355,5.395,3356,5.395,3357,5.395,3358,5.825,3359,5.395,3360,5.395,3361,5.395,3362,5.395,3363,4.811,3364,5.395,3365,5.395,3366,5.395,3367,5.395,3368,5.395,3369,5.395,3370,5.395]],["title/injectables/UserFollowService.html",[458,0.849,3371,3.287]],["body/injectables/UserFollowService.html",[8,0.006,12,0.056,13,0.062,14,0.05,19,0.129,20,0.578,22,0.069,23,0.138,24,0.004,25,0.004,51,1.266,55,0.498,57,1.522,58,0.891,59,0.396,60,0.73,62,1.572,67,1.377,79,1.164,127,1.625,153,3.01,154,3.504,183,1.426,203,2.255,249,1.817,251,1.919,261,0.223,262,1.906,281,2.873,292,1.249,301,3.089,345,4.32,365,2.13,396,2.391,401,1.523,458,1.13,497,3.082,532,1.505,678,2.459,685,1.946,694,3.649,927,3.594,943,3.408,945,3.784,1123,1.717,1346,2.515,1574,4.18,1599,3.504,1781,2.372,1998,2.515,2118,3.294,2709,2.515,2879,2.781,2886,4.18,2889,4.597,3234,4.867,3334,3.01,3371,4.373,3372,4.073,3373,6.344,3374,6.344,3375,6.344,3376,4.568,3377,5.555,3378,4.568,3379,6.344,3380,6.344,3381,7.986,3382,4.568,3383,4.568,3384,6.344,3385,8.212,3386,4.568,3387,6.344,3388,4.568,3389,3.504,3390,4.568,3391,4.568,3392,7.289,3393,7.289,3394,4.568,3395,8.956,3396,4.597,3397,6.344,3398,6.344,3399,6.344,3400,4.568,3401,6.344,3402,4.568,3403,4.568,3404,4.568]],["title/controllers/UserFollowsController.html",[255,1.032,3405,3.659]],["body/controllers/UserFollowsController.html",[8,0.006,12,0.057,13,0.063,14,0.051,19,0.132,20,0.581,22,0.069,23,0.139,24,0.004,25,0.004,51,1.272,55,0.44,57,1.413,58,0.828,59,0.417,60,0.678,62,1.656,127,1.929,153,4.199,154,3.527,192,5.176,251,1.211,252,1.794,255,0.995,257,1.252,259,1.695,261,0.224,262,1.909,272,0.942,275,3.226,276,3.219,281,2.879,292,1.173,301,3.175,330,2.05,331,3.604,333,3.692,334,2.494,335,2.969,336,1.695,337,0.741,338,1.876,345,3.597,359,1.631,361,3.338,362,2.75,365,1.774,381,2.613,396,1.991,401,1.346,406,1.455,421,1.42,465,1.695,511,4.03,519,2.15,1016,2.546,1574,4.199,1600,5.443,1629,4.22,1702,2.261,1703,2.532,1738,6.001,1996,2.387,1998,2.532,2708,4.618,2709,3.509,2726,3.332,2727,4.819,2771,5.723,2775,5.683,3234,4.488,3265,3.169,3334,3.029,3339,4.1,3343,6.522,3347,6.522,3371,5.041,3396,4.618,3405,4.889,3406,4.1,3407,7.314,3408,8.294,3409,7.314,3410,4.597,3411,4.597,3412,6.373,3413,6.373,3414,4.597,3415,4.597,3416,4.597,3417,5.683,3418,4.597,3419,4.597,3420,4.597,3421,6.373,3422,4.597,3423,4.597,3424,4.597,3425,4.1,3426,4.597,3427,4.597,3428,4.597,3429,4.597,3430,4.597,3431,4.597]],["title/controllers/UserHighlightsController.html",[255,1.032,3432,3.659]],["body/controllers/UserHighlightsController.html",[8,0.006,12,0.032,13,0.036,14,0.029,19,0.123,20,0.331,22,0.039,23,0.079,24,0.003,25,0.003,51,0.834,55,0.469,57,1.508,58,0.883,59,0.448,60,0.723,62,1.558,126,1.397,127,1.83,149,3.7,151,1.653,159,2.3,160,4.565,161,1.591,163,2.734,203,1.988,252,0.736,255,0.566,257,0.712,259,0.964,261,0.127,262,1.96,272,1.005,275,3.35,276,4.422,281,2.989,288,5.415,292,1.248,293,2.872,296,2.878,299,1.953,301,3.236,324,4.105,328,1.894,329,2.168,330,1.165,331,3.562,332,2.964,333,3.539,334,2.963,335,3.009,336,0.964,337,0.421,338,1.066,359,0.927,361,3.455,362,2.934,365,1.444,374,1.553,381,3.385,396,2.061,401,1.278,406,1.484,421,1.082,465,0.964,497,1.023,513,5.144,514,2.542,518,4.586,519,1.222,520,1.357,632,1.517,669,0.7,686,0.91,687,1.002,722,2.222,806,1.704,859,5.922,861,1.894,1074,3.779,1075,5.591,1556,2.752,1559,4.802,1562,3.026,1674,5.311,1698,4.569,1702,1.285,1703,3.585,1958,4.001,1968,3.626,1970,3.426,1972,5.311,1986,2.331,1987,2.331,1988,2.331,1989,2.331,1995,4.141,1996,1.357,1998,2.3,1999,3.298,2001,2.005,2007,2.331,2013,4.29,2020,2.331,2021,2.331,2023,2.331,2059,2.144,2066,2.331,2080,2.144,2083,2.331,2721,3.924,2727,2.752,2771,3.026,2879,1.591,2886,1.722,3232,2.005,3234,4.548,3242,2.144,3245,2.331,3265,1.801,3432,3.204,3433,2.331,3434,2.614,3435,6.511,3436,4.65,3437,6.511,3438,6.511,3439,6.511,3440,6.511,3441,6.511,3442,5.956,3443,6.511,3444,2.614,3445,6.75,3446,2.614,3447,2.614,3448,2.614,3449,2.614,3450,6.932,3451,2.614,3452,4.176,3453,2.614,3454,2.614,3455,5.215,3456,2.614,3457,4.176,3458,2.614,3459,2.614,3460,2.614,3461,2.614,3462,2.614,3463,2.614,3464,2.614,3465,2.614,3466,2.614,3467,5.956,3468,4.176,3469,2.614,3470,2.614,3471,2.614,3472,2.614,3473,2.614,3474,2.614,3475,2.614,3476,2.614,3477,2.331,3478,2.614,3479,5.215,3480,2.614,3481,2.331,3482,2.331,3483,2.614,3484,2.614,3485,2.614,3486,2.614,3487,2.614,3488,2.614,3489,2.331,3490,5.215,3491,2.614,3492,2.614,3493,2.614,3494,2.614,3495,2.614,3496,2.614,3497,2.614,3498,2.614,3499,4.176,3500,2.614,3501,2.614,3502,2.614,3503,2.614,3504,2.614,3505,2.614,3506,2.614,3507,2.614,3508,2.614]],["title/injectables/UserHighlightsService.html",[458,0.849,1999,3.016]],["body/injectables/UserHighlightsService.html",[7,3.976,8,0.006,12,0.032,13,0.035,14,0.028,19,0.126,20,0.323,22,0.038,23,0.077,24,0.003,25,0.003,51,0.819,55,0.524,57,1.666,58,0.975,59,0.434,60,0.799,62,1.721,67,0.77,79,0.651,127,1.155,143,1.166,149,2.331,151,1.616,159,2.258,160,3.809,161,1.556,183,1.281,200,1.692,203,2.068,249,1.174,251,1.695,261,0.25,262,2.021,281,2.724,292,1.265,301,3.195,345,3.552,365,2.168,374,1.403,377,3.127,381,2.331,391,1.327,396,2.108,401,1.567,421,1.239,435,3.146,458,0.73,469,1.96,470,2.096,471,1.761,472,2.096,490,0.89,494,2.919,497,2.011,516,2.429,520,1.327,532,0.842,623,1.045,632,2.241,668,1.512,669,1.098,676,2.702,678,2.255,681,2.702,684,4.052,685,1.089,686,0.89,687,0.98,690,3.053,691,1.452,694,3.673,704,2.258,707,1.502,717,1.556,752,0.961,859,4.26,861,1.852,862,1.852,927,2.683,943,2.749,945,2.667,992,1.257,995,2.258,1019,1.065,1075,1.96,1123,1.542,1260,1.852,1346,2.829,1516,2.096,1533,3.146,1534,1.96,1556,2.702,1559,3.874,1599,1.96,1608,2.096,1759,2.497,1777,2.497,1781,2.667,1782,1.761,1787,3.385,1788,3.722,1808,3.568,1961,3.657,1978,2.279,1998,2.258,1999,2.593,2071,1.852,2103,2.829,2118,2.129,2128,2.279,2180,3.146,2189,3.365,2479,2.096,2481,3.365,2561,2.096,2573,3.657,2582,2.279,2683,2.279,2709,1.407,2879,1.556,2886,1.684,3234,4.999,3334,1.684,3377,4.567,3385,5.741,3389,1.96,3445,7.241,3450,7.278,3481,2.279,3482,2.279,3509,2.279,3510,4.101,3511,4.101,3512,4.101,3513,4.101,3514,4.101,3515,4.101,3516,4.101,3517,4.101,3518,4.101,3519,4.101,3520,2.555,3521,4.581,3522,2.555,3523,4.101,3524,4.101,3525,2.555,3526,4.101,3527,2.555,3528,4.101,3529,5.741,3530,2.555,3531,2.555,3532,4.101,3533,2.555,3534,4.101,3535,2.555,3536,2.555,3537,2.555,3538,4.101,3539,2.555,3540,4.101,3541,2.555,3542,4.101,3543,2.555,3544,2.555,3545,4.101,3546,2.555,3547,2.555,3548,2.555,3549,4.101,3550,2.555,3551,2.555,3552,2.279,3553,2.555,3554,3.365,3555,4.101,3556,4.101,3557,4.101,3558,2.555,3559,2.555,3560,2.555,3561,4.101,3562,2.555,3563,2.555,3564,2.555,3565,2.555,3566,2.555,3567,2.555,3568,2.555,3569,2.555,3570,2.555,3571,2.555,3572,2.555,3573,4.101,3574,2.555,3575,2.555,3576,2.555,3577,2.555,3578,2.555,3579,2.555,3580,2.555,3581,2.555,3582,2.555,3583,2.555,3584,2.555,3585,2.555,3586,3.657,3587,2.555,3588,2.555,3589,5.137,3590,2.555,3591,2.555,3592,4.101,3593,4.101,3594,2.555,3595,2.555,3596,2.555,3597,5.137,3598,2.555,3599,2.555,3600,4.101,3601,2.555,3602,2.555]],["title/controllers/UserInsightMemberController.html",[255,1.032,2172,3.659]],["body/controllers/UserInsightMemberController.html",[8,0.006,12,0.039,13,0.043,14,0.035,19,0.134,20,0.4,22,0.048,23,0.096,24,0.003,25,0.003,51,0.968,55,0.398,57,1.278,58,0.748,59,0.425,60,0.613,62,1.32,122,3.466,127,0.953,155,3.886,156,2.428,163,2.139,199,1.19,203,2.242,249,0.906,251,1.553,252,1.366,255,0.685,257,0.861,259,1.167,261,0.154,262,1.828,272,0.851,275,3.037,281,2.71,288,5.346,292,1.221,293,3.248,296,3.343,298,2.085,299,1.48,301,3.109,328,2.293,329,1.643,330,1.411,331,3.254,332,3.352,333,3.333,334,2.79,335,2.68,336,1.167,337,0.51,338,1.291,345,2.901,346,2.293,359,1.123,361,3.018,362,2.486,365,2.142,374,1.577,377,1.927,396,2.43,401,1.085,406,1.369,421,1.173,497,2.79,513,4.42,514,1.927,518,3.885,519,1.48,520,1.643,629,1.024,632,1.236,669,0.847,686,1.102,687,1.214,722,2.067,723,1.444,724,1.517,725,1.411,726,1.517,808,4.861,824,2.181,828,6.197,830,6.231,1123,1.824,1155,3.721,1156,2.293,1157,2.822,1160,4.065,1168,2.822,1626,3.067,1629,2.592,1702,1.556,1703,1.743,1760,3.067,1968,2.953,1971,3.343,1995,4.052,1996,1.643,2013,4.356,2060,3.98,2063,4.525,2067,3.343,2071,5.166,2073,2.293,2075,2.293,2076,3.591,2077,2.085,2079,2.596,2082,3.98,2087,3.886,2090,5.259,2092,4.325,2094,6.358,2101,2.822,2105,6.628,2114,2.822,2116,2.428,2149,4.557,2172,3.721,2176,2.596,2196,2.596,2709,1.743,2721,3.196,2879,1.927,3174,6.354,3176,5.849,3177,4.914,3247,2.822,3313,3.98,3603,5.849,3604,2.822,3605,2.822,3606,5.259,3607,7.129,3608,3.165,3609,3.165,3610,4.851,3611,4.851,3612,4.851,3613,5.898,3614,3.165,3615,2.822,3616,3.165,3617,4.325,3618,3.165,3619,3.165,3620,3.165,3621,7.522,3622,3.165,3623,3.165,3624,3.165,3625,3.165,3626,2.822,3627,3.165,3628,3.165,3629,4.325,3630,4.851,3631,2.822,3632,3.165,3633,3.165,3634,4.851,3635,4.851,3636,5.896,3637,6.358,3638,3.165,3639,3.165,3640,6.708,3641,4.851,3642,3.165,3643,3.165,3644,3.165,3645,3.165,3646,4.851,3647,3.165,3648,3.165,3649,3.165,3650,3.165,3651,3.165,3652,4.851,3653,4.851,3654,4.851,3655,4.851,3656,3.165,3657,3.165,3658,3.165,3659,3.165,3660,3.165,3661,3.165]],["title/controllers/UserInsightsController.html",[255,1.032,2171,3.659]],["body/controllers/UserInsightsController.html",[8,0.006,12,0.045,13,0.05,14,0.04,19,0.136,20,0.458,22,0.054,23,0.11,24,0.003,25,0.003,51,1.072,55,0.385,57,1.236,58,0.855,59,0.423,60,0.593,62,1.277,122,4.158,127,1.653,163,1.737,203,2.267,249,1.037,251,1.685,252,1.511,255,0.784,257,0.986,259,1.335,261,0.176,262,1.802,272,0.824,275,2.977,276,3.574,281,2.656,288,5.322,292,1.107,293,2.956,296,3.7,299,2.992,301,3.097,324,3.7,328,2.624,329,2.787,330,1.614,331,3.23,332,3.636,333,3.309,334,2.77,335,2.661,336,1.335,337,0.584,338,1.477,359,1.284,361,2.92,362,2.406,365,2.085,374,1.527,379,2.204,396,2.231,398,2.204,399,2.778,401,1.177,406,1.342,421,0.998,497,2.504,513,4.158,514,2.204,517,3.7,518,3.76,519,1.693,520,1.88,623,1.925,629,2.445,632,1.368,669,0.969,686,1.26,687,1.389,722,2.287,723,1.652,724,1.735,725,1.614,726,1.735,802,6.099,805,4.119,806,2.888,808,4.584,814,2.29,1123,1.361,1138,3.229,1151,4.475,1283,3.229,1439,2.624,1625,2.624,1626,3.395,1629,2.869,1702,1.781,1760,2.29,1968,3.895,1995,3.051,1996,1.88,2013,2.386,2060,5.249,2068,4.787,2069,6.23,2071,3.89,2073,2.624,2074,4.405,2075,2.624,2076,3.895,2077,2.386,2079,2.97,2082,4.405,2087,4.216,2149,4.878,2150,3.7,2171,4.119,2174,2.778,2176,2.97,2196,2.97,2721,3.537,2992,2.778,3176,2.97,3177,2.495,3242,2.97,3313,4.405,3436,6.311,3477,3.229,3489,3.229,3603,5.806,3605,3.229,3606,6.74,3615,3.229,3626,3.229,3629,4.787,3631,3.229,3636,3.229,3637,3.229,3640,4.787,3662,3.229,3663,7.558,3664,3.62,3665,3.62,3666,3.62,3667,3.62,3668,3.62,3669,3.62,3670,3.62,3671,5.369,3672,3.62,3673,3.62,3674,3.62,3675,3.62,3676,5.369,3677,3.62,3678,5.369,3679,3.62,3680,3.62,3681,3.62,3682,3.62,3683,3.62,3684,3.62,3685,3.62,3686,3.62,3687,3.62,3688,3.62,3689,3.62,3690,3.62,3691,3.62,3692,5.369,3693,3.62,3694,3.62,3695,3.62,3696,3.62,3697,3.62,3698,3.62,3699,3.62,3700,3.62,3701,3.62,3702,3.62,3703,3.62,3704,3.62,3705,3.62,3706,3.62,3707,3.62]],["title/modules/UserModule.html",[0,1.195,46,2.803]],["body/modules/UserModule.html",[0,1.539,1,5.336,2,1.639,3,2.403,8,0.006,9,2.454,10,1.742,11,1.639,12,0.054,13,0.06,14,0.048,17,2.616,18,2.738,19,0.149,20,0.551,22,0.066,23,0.132,24,0.004,25,0.004,39,5.56,40,4.796,46,5.84,50,2.56,66,2.039,67,1.315,93,2.873,95,2.56,96,2.264,97,3.02,126,2.33,127,1.791,143,1.99,144,2.33,145,3.577,149,3.49,151,2.757,153,4.046,154,3.345,159,3.381,160,2.09,161,2.654,165,4.45,166,2.478,167,4.046,168,3.345,169,4.046,170,3.345,172,3.739,173,3.577,183,1.361,257,1.672,345,4.578,1494,2.873,1704,5.887,1751,3.888,1752,3.345,1753,3.345,1998,4.647,1999,5.887,2001,3.345,2027,3.888,2380,5.137,2389,3.005,2390,3.159,2508,4.833,2509,2.757,3233,5.453,3261,5.816,3262,3.888,3304,5.92,3334,2.873,3353,5.453,3363,3.888,3371,6.416,3377,5.336,3389,3.345,3405,5.453,3425,3.888,3432,5.92,3708,3.888,3709,3.888,3710,4.36,3711,3.888,3712,4.36,3713,5.453,3714,5.453,3715,4.36,3716,4.36,3717,4.36,3718,4.36,3719,4.36,3720,4.36]],["title/controllers/UserNotificationController.html",[255,1.032,3713,3.659]],["body/controllers/UserNotificationController.html",[8,0.006,12,0.073,13,0.081,14,0.066,19,0.143,20,0.754,22,0.09,23,0.18,24,0.005,25,0.005,51,1.511,55,0.358,57,1.151,58,0.674,59,0.381,60,0.552,62,1.189,127,1.72,167,4.988,168,4.571,255,1.29,257,1.622,259,2.197,261,0.29,262,1.744,272,0.767,275,2.846,276,3.824,281,2.54,288,4.788,292,1.072,301,2.937,324,4.106,330,2.656,331,3.455,333,3.54,334,2.963,335,2.846,336,2.197,337,0.961,338,2.431,359,2.114,361,2.719,362,2.24,401,1.096,406,1.01,465,2.197,519,2.786,632,2.42,668,2.197,669,1.595,686,2.074,687,2.285,722,3.226,1625,4.317,1698,5.808,1996,3.093,1998,3.281,3234,4.303,3265,4.106,3377,5.262,3389,4.571,3713,5.808,3721,5.313,3722,5.958,3723,9.039,3724,5.958,3725,7.808,3726,5.958,3727,5.958,3728,5.958,3729,5.958]],["title/injectables/UserNotificationService.html",[458,0.849,3377,3.016]],["body/injectables/UserNotificationService.html",[8,0.006,12,0.053,13,0.059,14,0.047,19,0.135,20,0.541,22,0.064,23,0.13,24,0.004,25,0.004,51,1.21,55,0.519,57,1.621,58,0.949,59,0.451,60,0.777,62,1.675,67,1.291,79,1.091,160,2.052,167,2.821,168,3.284,183,1.337,200,1.41,203,2.192,249,1.736,251,1.596,261,0.209,262,1.987,292,1.252,296,2.951,301,2.894,345,4.242,365,2.173,374,1.021,377,4.285,381,2.433,396,2.284,401,1.487,435,4.651,458,1.08,462,3.875,516,2.476,532,1.41,632,2.245,668,2.235,669,1.146,678,2.39,685,1.824,686,1.49,687,1.642,690,3.974,691,2.433,694,2.583,704,3.338,705,2.951,706,2.707,707,2.515,752,2.279,927,3.493,943,2.002,1123,2.646,1346,2.357,1566,6.276,1567,5.774,1568,3.817,1569,3.817,1574,2.821,1585,5.276,1588,3.512,1998,3.338,2103,3.875,2118,3.147,2180,4.651,3234,5.008,3334,2.821,3377,3.833,3381,6.826,3450,6.28,3529,6.826,3554,3.512,3730,3.817,3731,6.062,3732,6.062,3733,6.062,3734,6.062,3735,4.281,3736,4.281,3737,6.062,3738,6.062,3739,4.281,3740,6.062,3741,4.281,3742,6.062,3743,4.281,3744,4.281,3745,4.281,3746,6.062,3747,4.281,3748,6.062,3749,4.281,3750,6.062,3751,4.281,3752,4.281,3753,4.281,3754,4.281,3755,4.281,3756,4.281,3757,4.281,3758,4.281,3759,4.281,3760,4.281,3761,4.281,3762,4.281,3763,4.281,3764,4.281,3765,4.281,3766,6.062,3767,6.062,3768,4.281,3769,7.038,3770,4.281,3771,4.281,3772,4.281,3773,4.281,3774,4.281]],["title/classes/UserOnboardingDto.html",[23,0.144,294,3.456]],["body/classes/UserOnboardingDto.html",[8,0.006,12,0.08,13,0.088,14,0.071,19,0.12,22,0.097,23,0.241,24,0.005,25,0.005,55,0.478,59,0.474,127,1.562,181,3.911,261,0.314,272,1.024,294,5.763,319,6.096,337,1.039,380,3.161,406,1.348,409,7.097,421,1.489,455,1.416,475,4.247,627,1.846,667,2.244,775,3.465,778,2.294,794,3.758,795,3.389,815,5.481,817,5.695,1347,4.076,2314,4.945,3205,8.031,3230,5.288,3232,4.945,3775,7.692,3776,5.748,3777,6.446,3778,6.446,3779,6.446]],["title/controllers/UserRecommendationController.html",[255,1.032,3714,3.659]],["body/controllers/UserRecommendationController.html",[8,0.006,12,0.076,13,0.084,14,0.068,19,0.14,20,0.778,22,0.092,23,0.186,24,0.005,25,0.005,51,1.543,55,0.37,57,1.189,58,0.696,59,0.31,60,0.57,62,1.229,127,1.518,251,1.621,252,2.176,255,1.332,257,1.675,259,2.269,261,0.3,262,1.77,272,0.793,275,2.905,276,3.903,292,1.088,301,2.834,319,4.055,330,2.744,331,3.527,334,3.025,335,2.905,336,2.269,337,0.992,338,2.511,345,4.154,359,2.183,361,2.809,362,2.314,365,1.874,396,1.675,401,1.133,435,4.722,465,2.269,516,1.991,519,2.878,806,3.153,1626,4.887,1996,3.195,2508,4.386,2509,3.892,3234,4.392,3265,4.242,3334,4.055,3714,5.928,3780,5.488,3781,6.155,3782,8.86,3783,6.155,3784,6.155,3785,7.728,3786,6.155,3787,6.155,3788,6.155,3789,5.488,3790,6.155,3791,6.155,3792,6.155,3793,6.155]],["title/classes/UserRepoOptionsDto.html",[23,0.144,3794,3.143]],["body/classes/UserRepoOptionsDto.html",[8,0.006,12,0.076,13,0.084,14,0.068,19,0.093,22,0.093,23,0.187,24,0.005,25,0.005,55,0.533,59,0.446,60,0.886,252,2.693,261,0.3,272,1.142,292,1.089,455,1.378,492,3.449,552,2.955,623,1.571,627,1.765,629,2.503,630,3.201,631,2.797,632,2.409,634,3.708,635,4.26,636,4.052,638,2.518,639,3.696,641,3.395,642,3.395,646,3.114,647,4.134,648,3.201,649,3.294,650,4.882,651,3.623,652,4.158,653,3.114,654,3.395,655,3.504,656,3.294,657,3.504,658,3.708,659,2.955,660,2.749,661,3.395,662,3.395,663,3.504,668,2.273,669,1.651,1593,4.062,2848,4.468,3794,5.097]],["title/classes/UserRepoOptionsDto-1.html",[23,0.12,492,1.62,3794,2.616]],["body/classes/UserRepoOptionsDto-1.html",[8,0.006,12,0.08,13,0.089,14,0.071,19,0.13,22,0.12,23,0.262,24,0.005,25,0.005,55,0.39,59,0.454,101,4.535,102,4.467,127,1.273,181,4.252,252,2.434,261,0.316,272,0.835,292,1.162,297,5.783,337,1.045,406,1.353,455,1.421,494,3.683,623,1.651,627,1.856,666,3.642,667,2.256,757,7.094,775,2.824,778,2.203,794,3.767,806,3.256,807,4.03,817,5.706,821,5.783,1058,3.683,1346,3.569,1593,5.258,1968,4.858,2833,5.783,2838,4.696,2848,5.783,3230,5.317,3794,5.258,3795,5.317,3796,6.481,3797,5.779]],["title/modules/UserReposModule.html",[0,1.195,47,3.287]],["body/modules/UserReposModule.html",[0,2.025,1,5.996,2,2.487,3,3.162,8,0.006,9,3.228,10,2.643,11,2.487,12,0.082,13,0.09,14,0.073,17,3.443,18,3.602,19,0.14,20,0.836,22,0.099,23,0.2,24,0.005,25,0.005,47,6.729,50,3.368,66,3.092,67,1.994,126,3.534,127,1.587,128,4.559,130,4.559,183,2.065,1593,4.358,1752,5.074,1753,5.074,3798,5.898,3799,5.898,3800,5.898,3801,6.614,3802,7.181,3803,6.614,3804,6.614,3805,6.614]],["title/injectables/UserReposService.html",[458,0.849,3802,3.456]],["body/injectables/UserReposService.html",[7,4.962,8,0.006,12,0.062,13,0.069,14,0.055,19,0.138,20,0.636,22,0.076,23,0.152,24,0.004,25,0.004,51,1.352,55,0.515,57,1.584,58,0.928,59,0.412,60,0.76,62,1.637,67,1.516,79,1.281,126,2.687,127,0.988,128,6.077,130,4.669,183,1.57,203,1.44,249,1.94,251,1.784,261,0.245,262,1.945,281,2.751,292,1.135,301,3.023,355,4.484,365,2.076,374,1.828,396,1.369,401,1.509,421,1.195,458,1.207,497,1.968,516,1.627,532,1.656,623,2.089,632,1.726,669,1.346,678,2.56,685,2.142,686,1.75,687,1.928,694,3.265,772,2.351,814,5.185,822,3.313,823,4.125,826,3.061,927,3.742,943,2.351,945,2.611,1123,1.89,1346,2.769,1593,5.809,1759,4.124,1777,4.124,1781,3.517,1782,3.466,1788,3.644,1808,3.978,2103,4.219,2118,3.517,2163,4.125,2164,4.484,2180,5.197,2189,5.558,3794,5.402,3802,4.909,3806,4.484,3807,6.775,3808,5.028,3809,5.028,3810,6.775,3811,6.775,3812,5.028,3813,5.028,3814,5.028,3815,5.028,3816,5.028,3817,6.775,3818,5.028,3819,5.028,3820,5.028,3821,5.028,3822,5.028]],["title/injectables/UserService.html",[345,2.346,458,0.849]],["body/injectables/UserService.html",[7,4.008,8,0.006,12,0.032,13,0.036,14,0.029,19,0.131,20,0.33,22,0.039,23,0.079,24,0.003,25,0.003,51,0.832,55,0.515,57,1.607,58,0.99,59,0.418,60,0.77,62,1.685,67,0.786,79,0.664,97,2.56,127,1.836,159,1.435,160,1.249,161,1.587,181,3.198,183,1.301,192,2.368,199,1.957,200,0.859,203,2.418,249,1.193,251,1.37,261,0.127,262,1.99,281,2.616,289,1.587,292,1.189,294,4.309,297,1.888,299,2.78,301,1.398,304,2.138,307,4.309,308,4.309,310,4.297,317,4.309,319,2.745,345,2.049,352,2.324,353,2.324,354,2.324,356,2.324,365,2.048,366,4.481,368,3.418,370,0.98,371,1.086,372,2.324,374,1.984,375,3.418,379,4.431,381,1.481,383,1.999,384,3.418,386,1.999,387,1.999,388,1.999,389,1.999,390,1.999,391,1.353,392,1.999,393,1.999,394,1.999,396,2.33,398,4.431,399,5.584,401,1.471,409,3.196,421,1.216,458,0.742,460,2.138,490,0.907,497,2.545,516,1.684,532,0.859,561,2.536,594,1.648,632,1.061,638,0.686,639,1.086,658,1.249,660,1.162,668,0.961,678,2.273,685,1.11,686,0.907,687,1,690,3.087,691,1.481,694,3.101,704,2.294,707,1.531,752,1.566,927,2.714,943,2.434,945,2.163,995,3.58,1016,1.041,1019,2.71,1082,3.76,1123,1.957,1209,1.717,1233,1.796,1346,4.293,1429,2.635,1463,1.888,1466,3.019,1494,1.717,1528,2.324,1585,3.587,1588,2.138,1589,2.324,1599,1.999,1608,3.418,1759,2.536,1777,2.536,1781,2.163,1782,1.796,1787,1.717,1804,2.324,1805,5.334,1808,4.048,1998,2.294,2073,3.772,2103,3.58,2118,3.087,2308,2.138,2309,2.138,2406,2.324,2481,2.138,3160,4.309,3224,2.324,3225,2.324,3335,2.324,3336,2.324,3337,2.324,3338,2.324,3521,4.641,3552,2.324,3554,2.138,3586,2.324,3823,2.324,3824,4.166,3825,4.166,3826,4.166,3827,4.166,3828,5.946,3829,4.166,3830,4.166,3831,4.166,3832,4.166,3833,4.166,3834,4.166,3835,2.606,3836,2.606,3837,4.166,3838,2.606,3839,2.606,3840,2.606,3841,4.166,3842,2.606,3843,5.946,3844,2.606,3845,4.166,3846,2.606,3847,4.166,3848,2.606,3849,2.606,3850,4.166,3851,2.606,3852,4.166,3853,2.606,3854,4.166,3855,2.606,3856,4.166,3857,2.606,3858,4.166,3859,2.606,3860,4.166,3861,2.606,3862,2.606,3863,2.606,3864,2.606,3865,2.606,3866,2.606,3867,5.946,3868,2.606,3869,2.606,3870,2.606,3871,2.606,3872,2.606,3873,2.606,3874,2.606,3875,2.606,3876,2.606,3877,2.606,3878,2.606,3879,4.166,3880,2.606,3881,2.606,3882,2.606,3883,4.166,3884,4.166,3885,4.166,3886,2.606,3887,2.606,3888,2.606,3889,2.606,3890,2.606,3891,2.606,3892,2.606,3893,2.606,3894,2.606,3895,6.933,3896,2.606,3897,2.606,3898,4.166,3899,3.715,3900,4.166,3901,2.606,3902,2.606,3903,2.606,3904,2.606,3905,2.606,3906,2.606,3907,6.933,3908,2.606,3909,2.606,3910,2.606,3911,2.606,3912,2.606,3913,2.606,3914,2.606,3915,2.606,3916,4.166,3917,2.606,3918,2.606,3919,2.606,3920,5.946,3921,4.166,3922,2.606,3923,2.606,3924,2.606,3925,2.606]],["title/modules/VoteModule.html",[0,1.195,48,3.456]],["body/modules/VoteModule.html",[0,2,2,2.437,3,3.123,8,0.006,9,3.188,10,2.589,11,2.437,12,0.08,13,0.089,14,0.071,17,3.4,18,3.557,19,0.144,20,0.82,22,0.097,23,0.196,24,0.005,25,0.005,40,5.362,48,7.051,50,3.327,66,3.03,67,1.954,93,4.27,95,2.702,96,3.365,101,4.535,102,4.467,183,2.024,257,2.172,623,1.651,625,4.467,2814,6.633,2846,6.813,2847,5.779,3926,5.779,3927,6.481,3928,5.779,3929,5.779,3930,6.481,3931,6.481]],["title/injectables/VoteService.html",[458,0.849,2846,3.287]],["body/injectables/VoteService.html",[8,0.006,12,0.058,13,0.064,14,0.052,19,0.12,20,0.595,22,0.071,23,0.143,24,0.004,25,0.004,51,1.293,55,0.52,57,1.616,58,0.946,59,0.421,60,0.775,62,1.67,67,1.419,79,1.199,101,2.675,102,3.245,181,2.315,183,1.47,199,2.435,203,2.121,249,1.855,251,2.1,261,0.229,262,1.977,281,2.676,292,1.273,301,3.264,365,2.028,396,2.277,401,1.66,458,1.154,494,4.209,497,2.899,516,2.096,532,1.551,623,1.65,678,2.491,682,6.104,685,2.006,694,2.76,772,2.201,927,3.641,943,2.201,945,2.444,1123,1.77,1346,3.567,1404,3.611,1781,2.444,2118,3.363,2709,3.567,2710,3.245,2820,5.776,2833,6.061,2835,5.776,2846,4.465,2879,2.866,2886,4.268,2889,3.411,3932,4.198,3933,6.477,3934,6.477,3935,6.477,3936,4.707,3937,4.707,3938,6.477,3939,4.707,3940,6.477,3941,4.707,3942,4.707,3943,6.477,3944,4.707,3945,6.477,3946,4.707,3947,4.707,3948,4.707,3949,9.155,3950,7.406,3951,7.406,3952,4.707,3953,4.707,3954,4.707,3955,4.707,3956,4.707,3957,4.707]],["title/classes/VotedRepoDto.html",[23,0.144,2838,3.456]],["body/classes/VotedRepoDto.html",[8,0.006,12,0.079,13,0.087,14,0.07,19,0.129,22,0.119,23,0.26,24,0.005,25,0.005,55,0.474,59,0.464,101,4.874,102,4.387,127,1.55,181,3.881,252,1.792,261,0.31,272,1.016,292,1.016,297,4.612,337,1.026,406,1.338,455,1.405,494,4.874,623,2.01,627,1.823,666,3.914,667,2.216,757,5.222,775,2.773,778,2.185,794,3.737,806,2.597,807,4.528,817,5.424,821,5.718,1058,3.617,1346,4.345,1593,5.651,1968,3.875,2833,6.679,2838,5.718,2848,6.215,3794,4.194,3795,5.222,3797,5.676,3958,6.365,3959,6.365,3960,6.365]],["title/changelog.html",[3961,3.046,3962,3.257,3963,3.54]],["body/changelog.html",[0,0.268,3,1.812,8,0.006,11,0.212,12,0.013,14,0.033,24,0.001,25,0.001,50,0.446,57,0.207,58,0.479,59,0.098,60,0.099,77,0.954,79,0.759,95,0.446,97,0.526,99,0.652,101,1.103,103,1.181,105,1.181,107,1.181,127,1.712,134,1.227,143,3.35,160,1.696,163,1.609,166,2.63,175,1.098,179,0.954,192,1.103,196,3.927,200,1.583,202,0.738,203,1.271,228,1.171,230,1.181,242,0.677,243,1.592,244,0.776,247,2.042,248,1.171,251,0.701,255,0.82,260,3.06,272,0.138,276,2.512,277,3.476,285,1.73,289,0.343,297,1.929,298,1.754,299,3.654,304,0.878,310,1.103,311,1.73,319,1.279,323,3.108,340,3.167,359,1.642,366,0.738,370,1.001,374,0.78,378,0.954,380,0.359,381,3.588,382,2.184,383,0.821,391,0.793,401,0.357,406,0.329,455,0.94,459,0.878,469,2.907,477,1.929,485,2.134,488,5.842,490,2.018,492,0.23,494,2.153,510,0.878,521,3.707,527,3.618,545,1.835,550,0.776,561,1.411,566,0.738,572,1.597,594,1.227,596,1.901,598,1.901,605,2.496,623,1.919,629,1.058,634,1.696,636,0.513,638,0.282,639,0.636,658,1.927,670,0.629,671,1.835,673,0.589,678,0.93,710,2.053,716,1.337,717,1.621,722,1.805,725,0.865,746,1.106,752,1.001,781,0.776,806,3.174,807,0.541,808,2.867,809,0.821,824,0.389,826,1.181,830,0.776,846,0.738,856,1.489,861,0.776,863,2.042,864,1.181,868,5.974,869,4.259,870,1.542,880,1.14,888,0.463,971,0.437,977,0.954,990,1.585,995,0.311,999,1.068,1008,1.363,1010,1.489,1011,1.033,1014,1.134,1019,0.636,1024,1.489,1025,0.821,1034,3.869,1035,3.158,1036,2.149,1055,1.489,1059,1.901,1074,0.776,1078,0.878,1079,1.835,1080,1.489,1112,1.489,1114,2.715,1118,0.776,1123,0.402,1130,0.776,1143,2.285,1145,0.738,1151,2.543,1160,0.738,1172,4.259,1186,0.677,1208,0.878,1244,0.503,1251,0.954,1260,0.776,1291,0.954,1327,2.374,1342,0.954,1352,0.878,1370,0.821,1385,0.954,1386,0.463,1404,2.042,1426,3.687,1429,1.883,1439,0.409,1459,0.954,1466,1.406,1480,2.904,1499,0.878,1560,1.683,1567,0.878,1572,0.878,1574,0.705,1578,0.954,1580,0.503,1592,0.954,1626,1.227,1687,0.332,1703,1.068,1714,0.433,1716,0.776,1717,0.463,1760,4.155,1810,0.821,1811,0.954,1869,0.776,1884,2.066,1901,7.849,1903,0.954,1909,0.503,1929,5.458,1958,2.042,1968,5.874,1971,0.738,2012,3.406,2031,4.05,2038,0.878,2063,0.821,2240,2.745,2265,0.954,2270,2.374,2297,1.73,2369,0.954,2537,1.106,2587,1.73,2608,0.433,2611,0.433,2656,0.878,2705,0.821,2717,0.878,2771,0.409,2796,0.954,2806,0.878,2833,1.406,2935,5.169,3007,0.954,3042,0.463,3093,0.878,3096,1.929,3122,0.878,3135,0.954,3177,0.738,3187,1.73,3211,1.361,3251,0.954,3269,0.954,3358,0.878,3396,0.776,3417,2.066,3617,2.374,3725,1.73,3789,0.954,3899,1.73,3961,0.433,3963,1.73,3964,0.564,3965,1.94,3966,3.789,3967,1.94,3968,0.503,3969,6.676,3970,7.851,3971,3.539,3972,8.881,3973,7.92,3974,0.564,3975,0.564,3976,1.07,3977,2.374,3978,5.91,3979,2.662,3980,1.73,3981,3.586,3982,1.07,3983,1.07,3984,1.07,3985,1.94,3986,1.07,3987,1.07,3988,0.564,3989,3.539,3990,3.789,3991,2.662,3992,6.649,3993,6.867,3994,6.969,3995,3.778,3996,3.789,3997,1.07,3998,1.07,3999,8.905,4000,2.916,4001,4.355,4002,1.07,4003,5.13,4004,3.379,4005,1.07,4006,1.07,4007,1.07,4008,1.07,4009,1.07,4010,1.07,4011,1.07,4012,1.07,4013,1.07,4014,1.07,4015,1.07,4016,1.07,4017,1.07,4018,1.07,4019,1.07,4020,1.07,4021,4.973,4022,3.27,4023,0.954,4024,1.07,4025,1.94,4026,1.592,4027,3.586,4028,0.954,4029,1.07,4030,1.07,4031,1.527,4032,1.527,4033,1.527,4034,2.662,4035,1.527,4036,2.662,4037,4.629,4038,3.27,4039,4.237,4040,5.677,4041,6.313,4042,2.662,4043,7.061,4044,1.07,4045,1.07,4046,2.662,4047,1.07,4048,1.07,4049,1.07,4050,1.07,4051,1.07,4052,1.07,4053,1.07,4054,1.94,4055,1.07,4056,1.07,4057,1.07,4058,1.07,4059,1.07,4060,1.07,4061,1.07,4062,6.649,4063,3.778,4064,0.564,4065,0.954,4066,1.07,4067,5.419,4068,3.27,4069,1.07,4070,1.07,4071,1.07,4072,4.439,4073,1.07,4074,1.07,4075,1.07,4076,1.07,4077,1.07,4078,2.978,4079,1.07,4080,1.07,4081,2.317,4082,1.07,4083,1.07,4084,1.07,4085,1.07,4086,1.94,4087,1.07,4088,1.07,4089,2.662,4090,1.07,4091,1.07,4092,1.07,4093,1.07,4094,1.07,4095,1.07,4096,1.527,4097,3.27,4098,1.07,4099,1.07,4100,1.07,4101,1.07,4102,1.07,4103,2.662,4104,1.07,4105,1.07,4106,1.07,4107,1.527,4108,1.07,4109,1.07,4110,1.07,4111,1.07,4112,2.317,4113,1.07,4114,1.07,4115,1.07,4116,1.07,4117,1.07,4118,1.07,4119,1.07,4120,1.07,4121,1.07,4122,4.439,4123,2.317,4124,4.021,4125,1.94,4126,4.806,4127,4.806,4128,2.374,4129,1.94,4130,1.94,4131,1.94,4132,1.94,4133,1.94,4134,1.94,4135,2.662,4136,2.662,4137,3.778,4138,2.662,4139,2.662,4140,2.662,4141,2.978,4142,2.662,4143,2.662,4144,1.527,4145,2.662,4146,1.94,4147,1.73,4148,1.07,4149,1.07,4150,1.07,4151,1.07,4152,1.07,4153,0.954,4154,1.07,4155,1.07,4156,9.139,4157,2.662,4158,1.94,4159,6.998,4160,1.94,4161,1.07,4162,1.07,4163,1.94,4164,1.07,4165,1.07,4166,1.94,4167,1.94,4168,2.662,4169,1.94,4170,1.94,4171,2.317,4172,2.317,4173,2.662,4174,6.649,4175,1.07,4176,1.592,4177,1.94,4178,3.778,4179,2.662,4180,2.916,4181,2.662,4182,2.662,4183,2.662,4184,2.662,4185,1.94,4186,1.94,4187,1.07,4188,1.07,4189,1.73,4190,1.07,4191,2.656,4192,2.662,4193,2.662,4194,1.07,4195,1.07,4196,1.07,4197,4.806,4198,3.27,4199,1.94,4200,2.662,4201,1.94,4202,1.527,4203,1.527,4204,1.527,4205,1.527,4206,1.527,4207,1.07,4208,2.662,4209,1.07,4210,1.94,4211,3.789,4212,1.07,4213,1.07,4214,0.776,4215,1.07,4216,1.07,4217,1.07,4218,1.07,4219,1.07,4220,1.94,4221,2.317,4222,2.978,4223,1.527,4224,3.539,4225,1.527,4226,5.551,4227,1.07,4228,0.954,4229,1.07,4230,1.07,4231,1.07,4232,1.07,4233,1.527,4234,0.564,4235,1.07,4236,1.07,4237,1.94,4238,1.07,4239,1.07,4240,0.564,4241,2.317,4242,1.07,4243,1.07,4244,1.73,4245,1.07,4246,1.07,4247,1.07,4248,1.07,4249,1.07,4250,1.07,4251,1.07,4252,0.564,4253,0.564,4254,0.564,4255,1.07,4256,0.564,4257,0.564,4258,0.564,4259,1.07,4260,1.07,4261,1.07,4262,0.564,4263,4.286,4264,1.527,4265,0.564,4266,0.564,4267,1.94,4268,0.564,4269,0.564,4270,1.07,4271,1.07,4272,1.07,4273,1.07,4274,1.07,4275,0.564,4276,0.564,4277,0.564,4278,0.564,4279,1.94,4280,3.379,4281,2.978,4282,2.317,4283,2.317,4284,2.317,4285,2.317,4286,2.317,4287,2.317,4288,2.317,4289,2.066,4290,2.374,4291,2.317,4292,2.317,4293,2.317,4294,2.978,4295,4.439,4296,2.317,4297,2.978,4298,2.317,4299,1.94,4300,1.94,4301,1.94,4302,1.94,4303,1.94,4304,1.94,4305,1.94,4306,1.94,4307,1.94,4308,1.527,4309,1.527,4310,1.94,4311,1.94,4312,2.916,4313,1.94,4314,1.94,4315,1.94,4316,1.94,4317,1.94,4318,1.94,4319,4.439,4320,4.439,4321,2.317,4322,2.317,4323,1.07,4324,1.07,4325,1.94,4326,1.94,4327,1.07,4328,1.07,4329,1.94,4330,1.94,4331,1.94,4332,1.94,4333,2.916,4334,2.317,4335,4.127,4336,2.317,4337,1.94,4338,1.07,4339,1.07,4340,1.07,4341,1.527,4342,1.527,4343,1.07,4344,1.07,4345,0.564,4346,4.806,4347,3.789,4348,0.564,4349,0.564,4350,0.564,4351,0.564,4352,1.07,4353,1.07,4354,1.07,4355,4.629,4356,1.94,4357,2.317,4358,1.94,4359,4.237,4360,3.27,4361,1.94,4362,2.662,4363,4.237,4364,1.94,4365,1.94,4366,1.94,4367,1.94,4368,1.94,4369,1.94,4370,1.07,4371,1.07,4372,1.07,4373,0.564,4374,1.07,4375,1.527,4376,0.564,4377,0.564,4378,1.527,4379,1.07,4380,1.07,4381,1.07,4382,1.07,4383,0.564,4384,1.07,4385,1.07,4386,1.07,4387,1.07,4388,1.07,4389,2.317,4390,1.07,4391,1.07,4392,1.07,4393,1.07,4394,1.07,4395,1.07,4396,1.07,4397,1.07,4398,1.07,4399,0.954,4400,1.07,4401,1.527,4402,1.07,4403,1.07,4404,1.07,4405,1.07,4406,1.07,4407,1.07,4408,1.94,4409,1.07,4410,1.07,4411,1.07,4412,1.07,4413,1.07,4414,1.07,4415,1.07,4416,1.07,4417,1.07,4418,1.94,4419,0.954,4420,1.07,4421,1.07,4422,1.07,4423,0.564,4424,1.527,4425,1.94,4426,1.07,4427,1.07,4428,1.07,4429,1.07,4430,1.07,4431,1.07,4432,3.27,4433,1.07,4434,1.07,4435,1.07,4436,1.07,4437,1.07,4438,1.07,4439,3.156,4440,1.07,4441,1.07,4442,0.954,4443,1.07,4444,1.07,4445,1.07,4446,1.07,4447,1.527,4448,4.157,4449,1.73,4450,0.954,4451,1.07,4452,1.07,4453,1.07,4454,1.07,4455,1.07,4456,0.564,4457,1.94,4458,1.07,4459,1.07,4460,1.07,4461,1.07,4462,1.07,4463,1.07,4464,1.07,4465,1.07,4466,1.07,4467,2.317,4468,1.07,4469,1.07,4470,1.07,4471,1.07,4472,1.07,4473,1.94,4474,1.07,4475,1.07,4476,1.07,4477,1.07,4478,1.07,4479,1.07,4480,1.07,4481,1.527,4482,2.317,4483,1.07,4484,1.361,4485,1.07,4486,3.27,4487,1.07,4488,0.564,4489,0.954,4490,1.07,4491,1.07,4492,1.94,4493,1.07,4494,1.07,4495,2.662,4496,1.07,4497,0.954,4498,1.07,4499,1.07,4500,1.07,4501,1.07,4502,1.07,4503,1.07,4504,1.07,4505,1.07,4506,1.94,4507,1.07,4508,1.361,4509,1.94,4510,1.07,4511,1.07,4512,1.07,4513,1.07,4514,1.07,4515,1.07,4516,1.07,4517,5.551,4518,2.317,4519,2.978,4520,2.317,4521,1.07,4522,1.07,4523,1.07,4524,1.07,4525,1.07,4526,1.07,4527,1.07,4528,1.07,4529,1.07,4530,1.07,4531,1.07,4532,1.07,4533,1.07,4534,1.07,4535,1.07,4536,1.07,4537,1.07,4538,1.07,4539,1.07,4540,1.07,4541,1.07,4542,1.07,4543,1.07,4544,1.07,4545,1.07,4546,1.07,4547,1.07,4548,1.07,4549,0.954,4550,1.94,4551,1.07,4552,1.527,4553,1.527,4554,1.07,4555,0.954,4556,1.07,4557,1.07,4558,1.07,4559,1.07,4560,1.94,4561,1.07,4562,1.07,4563,1.07,4564,1.07,4565,1.07,4566,1.07,4567,1.07,4568,1.527,4569,1.07,4570,1.07,4571,1.07,4572,1.07,4573,1.07,4574,4.973,4575,1.07,4576,1.07,4577,1.07,4578,1.07,4579,1.07,4580,1.07,4581,1.07,4582,1.07,4583,1.07,4584,1.07,4585,1.07,4586,1.07,4587,1.07,4588,1.07,4589,2.662,4590,0.878,4591,1.07,4592,1.07,4593,1.73,4594,1.07,4595,1.07,4596,1.73,4597,1.07,4598,1.07,4599,1.07,4600,1.07,4601,1.07,4602,1.07,4603,1.07,4604,2.317,4605,1.07,4606,1.07,4607,1.07,4608,1.07,4609,1.07,4610,1.07,4611,1.07,4612,1.527,4613,1.07,4614,0.564,4615,0.564,4616,0.564,4617,0.564,4618,0.564,4619,0.564,4620,0.564,4621,0.564,4622,0.564,4623,0.564,4624,0.564,4625,0.564,4626,0.564,4627,0.564,4628,2.662,4629,1.73,4630,1.94,4631,1.07,4632,1.07,4633,1.07,4634,1.07,4635,1.07,4636,1.07,4637,1.07,4638,2.662,4639,1.07,4640,1.07,4641,0.564,4642,0.564,4643,0.564,4644,3.586,4645,0.564,4646,0.564,4647,0.564,4648,0.564,4649,0.564,4650,0.564,4651,0.564,4652,0.564,4653,0.564,4654,0.564,4655,0.821,4656,0.564,4657,0.564,4658,0.564,4659,0.564,4660,0.564,4661,0.564,4662,0.564,4663,0.564,4664,0.463,4665,0.954,4666,0.564,4667,0.564,4668,0.564,4669,0.564,4670,0.564,4671,0.564,4672,0.564,4673,0.503,4674,0.564,4675,0.564,4676,0.503,4677,0.503,4678,0.564,4679,0.564,4680,0.564,4681,0.564,4682,0.564,4683,0.564,4684,0.564,4685,0.564,4686,0.564,4687,0.564,4688,0.564,4689,1.07,4690,0.564,4691,0.564,4692,0.564,4693,0.564,4694,0.564,4695,0.564,4696,0.564,4697,1.07,4698,0.463,4699,0.564,4700,0.564,4701,0.564,4702,0.564,4703,0.564,4704,0.564,4705,0.564,4706,0.564,4707,0.564,4708,0.564,4709,0.564,4710,0.564,4711,0.564,4712,0.564,4713,0.564,4714,0.564,4715,0.564,4716,0.564,4717,0.564,4718,0.564,4719,0.564,4720,0.564,4721,1.361,4722,0.564,4723,0.564,4724,0.564,4725,0.564,4726,0.564,4727,0.564,4728,0.564,4729,0.564,4730,0.564,4731,0.564,4732,0.564,4733,0.564,4734,0.564,4735,0.564,4736,1.527,4737,0.564,4738,0.564,4739,0.564,4740,0.564,4741,0.564,4742,0.564,4743,0.564,4744,0.564,4745,0.564,4746,0.463,4747,0.564,4748,0.564,4749,0.564,4750,0.564,4751,0.564,4752,0.564,4753,0.564,4754,0.564,4755,0.564,4756,1.07,4757,0.564,4758,0.954,4759,0.564,4760,0.564,4761,0.564,4762,1.07,4763,1.07,4764,0.564,4765,1.527,4766,0.564,4767,0.564,4768,1.07,4769,0.564,4770,0.564,4771,0.564,4772,0.564,4773,0.564,4774,0.564,4775,0.564,4776,0.564,4777,0.564,4778,0.564,4779,0.564,4780,0.564,4781,0.564,4782,0.564,4783,0.564,4784,0.564,4785,0.503,4786,0.564,4787,0.564,4788,0.564,4789,0.564,4790,0.564,4791,0.564,4792,0.564,4793,0.564,4794,0.564,4795,0.564,4796,0.564,4797,0.564,4798,0.564,4799,0.564,4800,0.564,4801,0.564,4802,0.564,4803,0.564,4804,0.564,4805,0.503,4806,0.564,4807,0.564,4808,0.564,4809,0.564,4810,0.564,4811,0.564,4812,0.564,4813,0.564,4814,0.564,4815,0.564,4816,0.564]],["title/coverage.html",[4817,5.362]],["body/coverage.html",[7,1.285,8,0.006,14,0.026,23,0.291,24,0.002,25,0.002,59,0.117,86,1.914,87,1.914,88,1.914,89,1.914,90,1.914,91,1.914,95,0.973,97,1.148,99,1.42,101,1.326,103,1.42,105,1.42,107,1.42,116,1.79,119,1.79,122,1.371,124,1.537,127,1.295,128,2.626,130,1.608,131,1.608,139,1.608,141,1.608,143,1.065,144,3.282,146,1.42,147,2.626,149,1.326,153,1.537,155,1.537,157,1.475,159,1.285,160,1.826,162,1.537,163,2.428,165,1.691,166,1.326,167,1.537,169,1.537,172,1.42,176,2.239,203,0.668,255,2.008,256,1.79,258,2.081,260,1.608,294,1.691,301,0.783,307,1.691,308,1.691,310,1.326,317,1.691,338,0.952,342,1.79,345,1.148,347,1.537,349,1.537,382,1.914,443,1.691,450,2.94,451,1.79,453,2.923,454,3.126,458,1.679,464,1.371,499,1.79,500,3.638,501,4.343,502,2.081,506,1.691,521,2.439,523,1.608,533,2.081,565,1.79,566,3.328,567,2.081,569,1.691,575,1.608,579,3.126,599,1.79,600,2.081,602,1.691,605,2.51,607,1.608,618,1.608,620,1.79,623,0.594,626,1.691,628,1.914,629,1.804,630,4.186,632,0.594,673,2.098,675,2.081,686,0.812,690,1.211,708,1.79,709,2.081,713,1.608,720,1.608,723,1.065,725,1.04,727,1.42,729,3.525,736,1.79,737,2.081,738,2.081,743,1.691,767,1.608,768,2.081,769,3.126,802,1.691,803,3.126,804,3.126,808,2.439,814,1.475,828,1.79,829,3.126,836,1.79,837,2.081,838,2.081,843,1.79,844,3.126,845,3.126,859,1.691,860,2.081,883,1.691,884,2.081,885,2.081,894,1.608,925,2.081,948,2.081,949,3.126,990,2.39,991,2.081,995,5.585,1021,0.973,1064,2.081,1072,2.081,1102,2.081,1120,2.081,1153,3.126,1154,2.081,1183,4.039,1196,2.081,1205,2.081,1236,2.081,1348,2.081,1351,2.081,1369,2.081,1384,2.081,1403,2.081,1418,2.923,1419,2.081,1463,1.691,1464,2.081,1465,2.081,1468,4.234,1469,2.081,1498,2.081,1532,2.081,1556,1.537,1557,3.126,1559,1.537,1562,1.691,1563,2.081,1565,2.081,1585,1.608,1593,4.048,1598,2.081,1621,1.79,1622,2.081,1631,1.608,1644,2.081,1654,1.79,1655,2.081,1704,1.475,1709,1.691,1755,2.081,1810,1.79,1812,2.081,1813,2.081,1827,1.608,1828,2.081,1842,4.039,1843,2.081,1873,3.126,1879,1.691,1880,2.081,1907,1.79,1908,2.081,1956,1.79,1957,2.081,1999,1.475,2030,2.081,2039,1.914,2054,1.79,2055,2.081,2069,1.691,2076,1.42,2087,1.537,2088,3.126,2089,2.081,2136,1.914,2137,2.923,2149,1.608,2150,1.608,2151,2.081,2171,1.79,2172,1.79,2178,2.081,2219,2.081,2239,2.081,2240,1.691,2254,3.705,2255,2.081,2260,1.79,2282,2.081,2298,3.126,2301,1.79,2310,2.081,2315,1.79,2316,2.081,2330,1.691,2334,1.608,2348,1.79,2349,2.081,2355,1.608,2359,2.081,2376,2.081,2380,1.42,2435,2.081,2495,2.081,2496,2.081,2508,1.211,2519,1.79,2520,2.081,2523,1.371,2527,1.691,2537,1.691,2549,1.914,2551,2.081,2585,3.499,2586,2.081,2616,2.081,2695,1.79,2696,2.081,2697,2.081,2728,1.608,2740,1.79,2741,2.081,2742,2.081,2767,1.608,2778,1.79,2779,2.081,2780,2.081,2804,1.608,2814,1.79,2815,2.081,2816,2.081,2838,1.691,2846,1.608,2848,3.499,2868,2.081,2897,2.081,2922,2.081,2955,1.608,2959,2.081,2973,1.691,2974,3.705,2977,3.126,2978,3.126,2989,1.914,2991,1.914,3064,2.081,3085,2.081,3086,2.081,3130,2.081,3133,2.081,3160,1.691,3161,2.081,3162,2.081,3166,1.914,3167,2.081,3170,3.126,3174,1.79,3180,1.79,3181,4.039,3186,2.081,3223,2.081,3229,2.081,3233,1.79,3234,4.387,3235,2.081,3261,1.608,3281,2.081,3304,1.79,3305,2.081,3353,1.79,3354,2.081,3371,1.608,3372,2.081,3377,1.475,3405,1.79,3406,2.081,3432,1.79,3433,2.081,3509,2.081,3603,3.126,3604,2.081,3662,2.081,3713,1.79,3714,1.79,3721,2.081,3730,2.081,3775,2.081,3776,2.081,3780,2.081,3794,2.51,3795,3.126,3802,1.691,3806,2.081,3823,2.081,3932,2.081,4399,2.081,4448,1.79,4489,2.081,4665,7.427,4817,1.914,4818,2.333,4819,6.592,4820,2.333,4821,8.854,4822,9.593,4823,8.54,4824,3.126,4825,2.081,4826,2.081,4827,6.143,4828,8.329,4829,2.333,4830,6.143,4831,8.63,4832,2.081,4833,2.081,4834,2.081,4835,3.398,4836,2.081,4837,2.081,4838,3.398,4839,2.081,4840,2.081,4841,2.081,4842,7.903,4843,6.143,4844,3.81,4845,2.081,4846,2.081,4847,2.333,4848,2.081,4849,2.333,4850,1.914,4851,2.333,4852,2.333,4853,2.333,4854,2.333]],["title/miscellaneous/enumerations.html",[4855,2.511,4856,5.122]],["body/miscellaneous/enumerations.html",[8,0.006,24,0.004,25,0.004,58,0.794,163,2.545,166,3.987,175,2.587,261,0.258,370,3.365,371,3.731,500,2.162,628,4.347,629,2.999,630,4.918,637,5.756,639,4.221,643,5.084,652,3.451,671,4.836,672,5.756,673,3.863,710,4.836,729,3.351,746,6.067,806,2.863,1090,4.347,1100,4.623,1243,5.756,1252,5.756,1336,5.756,1347,4.437,1452,5.084,1468,3.226,1585,4.836,1591,6.257,1600,4.836,1653,5.756,1787,4.623,1831,4.271,2137,4.065,2143,5.756,2144,5.756,2145,4.836,2146,5.756,2147,5.756,2148,5.756,2424,6.257,2430,6.257,2585,3.84,2602,6.257,2603,6.257,2604,5.383,2605,6.257,2606,6.257,2607,5.756,2608,5.383,2609,5.756,2610,5.756,2611,5.383,4850,5.756,4855,3.351,4856,4.725,4857,5.299,4858,5.299,4859,5.299,4860,7.016,4861,7.016,4862,7.016,4863,4.725,4864,5.299,4865,4.725]],["title/miscellaneous/functions.html",[4855,2.511,4866,5.122]],["body/miscellaneous/functions.html",[8,0.006,24,0.006,25,0.006,261,0.377,4845,6.903,4846,8.312,4855,4.895,4866,6.903,4867,7.741]],["title/index.html",[261,0.193,3961,3.046,3962,3.257]],["body/index.html",[8,0.006,11,2.156,13,0.054,14,0.063,24,0.004,25,0.004,58,0.448,143,2.617,163,1.855,175,3.013,190,5.529,196,4.883,203,1.93,205,6.587,247,3.038,248,5.17,289,3.491,340,5.385,359,1.405,381,2.251,391,2.056,471,2.73,492,2.339,509,2.87,511,2.504,521,3.404,545,2.73,551,2.87,591,3.952,605,3.778,623,1.009,638,1.51,660,1.766,678,1.79,716,3.952,856,6.014,880,4.341,1010,3.038,1025,3.038,1079,2.73,1080,5.17,1145,2.73,1151,2.504,1186,2.504,1260,2.87,1273,3.249,1439,2.87,1480,6.431,1600,2.73,1968,3.491,2031,5.17,2242,3.952,2284,3.038,2323,3.532,2771,2.87,2945,3.532,2985,3.249,2992,5.667,3096,5.922,3232,3.038,3358,4.704,3396,5.68,3980,3.532,3981,6.587,3994,7.288,3995,3.532,4000,5.113,4001,4.398,4026,6.705,4027,8.231,4028,6.009,4065,3.532,4128,3.532,4147,3.532,4176,3.249,4178,6.009,4180,5.113,4189,3.532,4191,7.844,4214,2.87,4228,5.113,4244,3.532,4263,6.587,4280,3.532,4289,3.532,4290,3.532,4333,3.532,4419,3.532,4439,3.532,4442,5.113,4448,3.038,4449,5.113,4484,3.532,4497,3.532,4508,5.113,4590,3.249,4593,3.532,4596,6.587,4629,5.113,4644,7.288,4655,3.038,4664,3.249,4676,3.532,4677,8.354,4698,3.249,4721,5.113,4746,5.529,4785,3.532,4805,3.532,4817,3.249,4868,3.96,4869,3.96,4870,5.113,4871,3.96,4872,3.96,4873,6.739,4874,3.532,4875,3.96,4876,3.96,4877,3.96,4878,3.96,4879,3.96,4880,3.96,4881,6.739,4882,5.733,4883,3.96,4884,3.96,4885,3.96,4886,3.96,4887,5.733,4888,3.96,4889,3.96,4890,3.96,4891,3.96,4892,3.96,4893,3.96,4894,3.96,4895,3.96,4896,3.96,4897,3.96,4898,3.96,4899,3.96,4900,3.96,4901,6.739,4902,3.96,4903,3.96,4904,3.96,4905,3.96,4906,3.96,4907,7.387,4908,5.733,4909,5.733,4910,5.733,4911,5.733,4912,5.733,4913,3.96,4914,3.96,4915,3.96,4916,3.96,4917,3.96,4918,3.96,4919,3.96,4920,3.96,4921,3.96,4922,3.96,4923,3.96,4924,6.739,4925,3.96,4926,3.96,4927,3.96,4928,3.532,4929,8.429,4930,3.96,4931,3.96,4932,3.96,4933,5.733,4934,6.739,4935,3.96,4936,3.96,4937,3.96,4938,3.96,4939,3.96,4940,3.532,4941,3.96,4942,3.96,4943,3.96,4944,5.733,4945,3.96,4946,3.96,4947,3.532,4948,3.532,4949,3.96,4950,3.96,4951,3.96,4952,3.96,4953,5.733,4954,3.96,4955,3.96,4956,3.96,4957,3.96,4958,3.96,4959,3.96,4960,3.96,4961,3.96,4962,5.733,4963,3.96,4964,3.96,4965,5.733,4966,3.96,4967,3.96,4968,3.96,4969,3.96,4970,3.96,4971,3.96,4972,5.733,4973,3.96,4974,5.733,4975,3.96,4976,3.96,4977,3.96,4978,3.96,4979,3.96,4980,3.96,4981,3.96,4982,3.96,4983,3.96,4984,3.96,4985,3.96,4986,3.96,4987,5.733,4988,5.733,4989,3.96,4990,3.96,4991,3.96,4992,3.96,4993,3.96,4994,5.733,4995,3.96,4996,3.96,4997,3.96,4998,3.96,4999,3.96,5000,3.96,5001,3.96,5002,3.96,5003,3.96,5004,3.96,5005,3.96,5006,3.96,5007,3.96,5008,3.96,5009,5.733,5010,3.96,5011,3.96,5012,3.96,5013,3.96,5014,3.249]],["title/license.html",[3961,3.046,3962,3.257,4214,2.877]],["body/license.html",[8,0.005,11,2.455,24,0.005,25,0.005,175,2.407,511,4.129,868,4.302,880,3.836,1014,3.696,1024,5.009,1273,5.356,1503,5.356,1610,5.356,2031,6.15,2038,5.356,3042,5.356,3396,4.731,4153,5.822,4176,6.577,4214,4.731,4448,5.009,4698,6.577,4874,8.687,5014,5.356,5015,8.675,5016,6.529,5017,8.016,5018,6.529,5019,6.529,5020,6.529,5021,6.529,5022,6.529,5023,6.529,5024,6.529,5025,6.529,5026,6.529,5027,6.529,5028,6.529,5029,6.529,5030,6.529,5031,6.529,5032,6.529,5033,6.529,5034,6.529,5035,8.016,5036,6.529,5037,6.529,5038,6.529,5039,6.529,5040,6.529,5041,6.529,5042,8.016,5043,8.016,5044,6.529,5045,6.529,5046,6.529,5047,6.529,5048,6.529,5049,6.529,5050,6.529,5051,6.529,5052,6.529,5053,6.529,5054,6.529,5055,6.529,5056,6.529,5057,6.529,5058,6.529,5059,6.529,5060,6.529,5061,6.529,5062,6.529,5063,6.529,5064,6.529,5065,6.529,5066,6.529,5067,6.529]],["title/modules.html",[2,2.457]],["body/modules.html",[1,3.899,2,2.318,8,0.005,24,0.005,25,0.005,26,4.73,29,4.249,30,4.468,31,4.468,32,4.062,33,4.468,34,4.468,35,4.468,36,4.468,37,4.468,38,4.249,39,4.062,40,3.504,41,4.468,42,4.468,43,4.249,44,4.468,45,4.468,46,3.623,47,4.249,48,4.468,442,4.249,2211,4.73,2414,4.249,4312,9,5068,10.093,5069,10.093,5070,10.104,5071,5.498,5072,6.165]],["title/overview.html",[5073,5.829]],["body/overview.html",[1,5.216,2,1.173,3,1.878,4,2.782,5,2.782,6,2.782,7,4.29,8,0.006,9,1.917,10,1.247,11,1.173,24,0.003,25,0.003,26,7.546,27,2.782,28,2.782,29,6.336,30,5.827,31,5.133,32,5.299,33,5.133,34,6.3,35,4.236,36,5.133,37,6.512,38,5.37,39,6.186,40,5.059,41,5.827,42,5.827,43,5.37,44,6.3,45,5.827,46,5.719,47,5.685,48,5.827,200,1.028,257,0.849,338,3.179,345,3.832,347,5.133,349,5.133,438,2.782,439,2.782,440,2.782,441,2.782,442,5.37,443,5.645,452,2.394,464,4.578,492,1.273,523,4.029,532,1.028,575,4.029,607,4.029,614,2.782,616,2.782,617,2.782,618,5.37,627,0.893,727,4.743,883,5.645,894,4.029,918,2.782,919,2.782,920,2.782,1143,2.394,1631,4.029,1639,2.782,1640,2.782,1704,5.325,1746,2.782,1747,2.782,1749,2.782,1810,2.394,1999,4.927,2076,4.743,2087,3.852,2150,5.37,2166,2.782,2168,2.782,2169,2.782,2211,5.977,2212,2.782,2213,2.782,2214,2.782,2232,2.782,2233,2.782,2234,2.782,2334,4.029,2355,4.029,2380,4.896,2410,2.782,2411,2.782,2412,2.782,2413,2.782,2414,5.37,2508,4.372,2546,2.782,2547,2.782,2548,2.782,2593,2.782,2594,2.782,2595,2.782,2728,5.37,2767,5.37,2804,5.37,2846,5.37,2862,2.782,2864,2.782,2865,2.782,2891,2.782,2892,2.782,2893,2.782,2917,2.782,2918,2.782,2919,2.782,2952,2.782,2953,2.782,2954,2.782,2955,5.37,2970,2.782,2971,2.782,2973,4.756,3058,2.782,3059,2.782,3061,2.782,3261,4.029,3371,5.37,3377,3.697,3708,2.782,3709,2.782,3711,2.782,3798,2.782,3799,2.782,3800,2.782,3802,5.645,3926,2.782,3928,2.782,3929,2.782,3977,2.782,4063,2.782,4450,2.782,5073,2.782,5074,3.12,5075,3.12]],["title/properties.html",[455,1.023,4137,3.54]],["body/properties.html",[8,0.006,24,0.005,25,0.005,76,5.169,175,3.117,340,4.7,406,1.209,455,1.27,678,2.227,789,6.937,880,4.969,1061,5.852,1268,5.852,1760,4.511,3968,6.361,3969,6.361,4001,5.472,4214,5.169,4555,6.361,4664,5.852,4758,6.361,5014,5.852,5071,6.361,5076,7.133,5077,7.133,5078,7.133,5079,7.133,5080,7.133,5081,7.133,5082,7.133,5083,7.133,5084,7.133,5085,7.133,5086,7.133,5087,7.133,5088,7.133,5089,7.133,5090,7.133,5091,7.133]],["title/miscellaneous/typealiases.html",[4855,2.511,5092,5.744]],["body/miscellaneous/typealiases.html",[8,0.006,24,0.006,25,0.006,59,0.389,261,0.377,4824,6.351,4855,4.895,5093,7.741,5094,8.869,5095,6.903]],["title/miscellaneous/variables.html",[4655,4.406,4855,2.511]],["body/miscellaneous/variables.html",[8,0.006,12,0.049,24,0.004,25,0.004,59,0.2,86,4.715,87,4.715,88,4.715,89,4.715,90,4.715,91,4.715,127,1.129,163,1.86,188,5.539,190,5.539,192,3.266,194,5.125,196,4.165,203,1.933,209,5.125,242,3.635,261,0.194,292,0.74,301,1.928,334,1.555,365,1.794,401,1.243,406,0.674,421,1.053,455,0.708,485,2.539,490,2.849,494,2.258,516,1.86,591,2.739,597,3.165,638,2.451,639,3.88,723,2.623,725,2.562,815,2.739,869,3.048,888,3.26,1100,2.618,1316,5.125,1468,2.419,1585,3.961,1600,2.739,1610,4.715,1691,3.26,1818,5.125,2012,3.048,2039,4.715,2042,3.543,2242,3.961,2264,3.543,2974,4.409,2977,3.26,2978,4.715,2989,4.715,2991,4.715,2992,3.048,2993,3.543,2994,3.543,2995,3.543,2996,3.543,3040,3.543,3096,2.879,3177,2.739,4001,4.409,4004,3.543,4023,3.543,4026,3.26,4335,5.125,4549,3.543,4590,3.26,4655,3.048,4673,3.543,4746,3.26,4824,3.26,4825,3.543,4826,5.125,4832,3.543,4833,5.125,4834,3.543,4835,5.125,4836,5.125,4837,5.125,4838,3.543,4839,6.021,4840,3.543,4841,3.543,4848,3.543,4850,4.715,4855,2.513,4863,3.543,4865,3.543,4870,3.543,4928,5.125,4940,5.125,4947,3.543,4948,3.543,5095,5.125,5096,3.974,5097,3.974,5098,3.974,5099,5.747,5100,5.747,5101,3.974,5102,3.974,5103,3.974,5104,3.974,5105,3.974,5106,3.974,5107,3.974,5108,3.974,5109,3.974,5110,3.974,5111,3.974,5112,3.974,5113,3.974,5114,3.974,5115,3.974,5116,8.437,5117,3.974,5118,3.974,5119,3.974,5120,3.974,5121,3.974,5122,3.974,5123,3.974,5124,3.974,5125,3.974,5126,3.974,5127,3.974,5128,3.974,5129,3.974,5130,3.974,5131,3.974,5132,3.974,5133,3.974,5134,3.974,5135,3.974,5136,5.747,5137,3.974,5138,3.974,5139,5.747,5140,3.974,5141,3.974,5142,5.747,5143,3.974,5144,5.747,5145,3.974,5146,5.747,5147,5.747,5148,3.974,5149,3.974,5150,5.747,5151,3.974,5152,3.974,5153,3.974,5154,3.974,5155,3.974,5156,3.974,5157,3.974,5158,3.974,5159,3.974,5160,3.974,5161,3.974,5162,3.974,5163,3.974,5164,3.974,5165,3.974,5166,3.974,5167,5.747,5168,3.974,5169,3.974,5170,3.974,5171,3.974,5172,5.747,5173,3.974,5174,3.974,5175,3.974,5176,3.974,5177,3.974,5178,3.974,5179,3.974,5180,3.974,5181,3.974,5182,3.974,5183,3.974,5184,3.974,5185,3.974,5186,3.974,5187,3.974,5188,3.974,5189,3.974,5190,3.974,5191,3.974,5192,3.974,5193,3.974,5194,3.974,5195,3.974,5196,3.974,5197,3.974,5198,5.747,5199,5.747,5200,3.974,5201,3.974]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":995,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":5110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.7",{"_index":5122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0/1",{"_index":4822,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":4830,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":4844,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":4849,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":4853,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":4851,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4831,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":4820,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":4821,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":4823,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4828,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":4842,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":4843,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":4819,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4827,"title":{},"body":{"coverage.html":{}}}],["0046b05",{"_index":4491,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":869,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["01301c9",{"_index":4162,"title":{},"body":{"changelog.html":{}}}],["01t00:30:00z",{"_index":5196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["02",{"_index":4226,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":4062,"title":{},"body":{"changelog.html":{}}}],["03600f8",{"_index":4110,"title":{},"body":{"changelog.html":{}}}],["03bf95b",{"_index":4503,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1172,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"changelog.html":{}}}],["04082d7",{"_index":4586,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":4043,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":4041,"title":{},"body":{"changelog.html":{}}}],["06dcc23",{"_index":4002,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":3970,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":1035,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["0848443",{"_index":4734,"title":{},"body":{"changelog.html":{}}}],["08f1679",{"_index":4163,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":4346,"title":{},"body":{"changelog.html":{}}}],["09c96fe",{"_index":4545,"title":{},"body":{"changelog.html":{}}}],["0b6d16a",{"_index":4052,"title":{},"body":{"changelog.html":{}}}],["0b85d93",{"_index":4361,"title":{},"body":{"changelog.html":{}}}],["0e8a16",{"_index":1298,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["0eb10bb",{"_index":4381,"title":{},"body":{"changelog.html":{}}}],["0fe8b4d",{"_index":4100,"title":{},"body":{"changelog.html":{}}}],["0})@column({type",{"_index":1229,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{}}}],["1",{"_index":492,"title":{"classes/UserRepoOptionsDto-1.html":{}},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbSubscription.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["1.0.0",{"_index":4801,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":4798,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":4796,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":4792,"title":{},"body":{"changelog.html":{}}}],["1.10.0",{"_index":4488,"title":{},"body":{"changelog.html":{}}}],["1.11.0",{"_index":4481,"title":{},"body":{"changelog.html":{}}}],["1.12.0",{"_index":4473,"title":{},"body":{"changelog.html":{}}}],["1.13.0",{"_index":4456,"title":{},"body":{"changelog.html":{}}}],["1.14.0",{"_index":4447,"title":{},"body":{"changelog.html":{}}}],["1.15.0",{"_index":4424,"title":{},"body":{"changelog.html":{}}}],["1.15.1",{"_index":4423,"title":{},"body":{"changelog.html":{}}}],["1.16.0",{"_index":4417,"title":{},"body":{"changelog.html":{}}}],["1.17.0",{"_index":4408,"title":{},"body":{"changelog.html":{}}}],["1.17.1",{"_index":4406,"title":{},"body":{"changelog.html":{}}}],["1.18.0",{"_index":4401,"title":{},"body":{"changelog.html":{}}}],["1.18.1",{"_index":4396,"title":{},"body":{"changelog.html":{}}}],["1.19.0",{"_index":4392,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":4789,"title":{},"body":{"changelog.html":{}}}],["1.20.0",{"_index":4388,"title":{},"body":{"changelog.html":{}}}],["1.21.0",{"_index":4384,"title":{},"body":{"changelog.html":{}}}],["1.21.1",{"_index":4383,"title":{},"body":{"changelog.html":{}}}],["1.22.0",{"_index":4378,"title":{},"body":{"changelog.html":{}}}],["1.23.0",{"_index":4374,"title":{},"body":{"changelog.html":{}}}],["1.24.0",{"_index":4355,"title":{},"body":{"changelog.html":{}}}],["1.25.0",{"_index":4347,"title":{},"body":{"changelog.html":{}}}],["1.26.0",{"_index":4345,"title":{},"body":{"changelog.html":{}}}],["1.27.0",{"_index":4337,"title":{},"body":{"changelog.html":{}}}],["1.28.0",{"_index":4279,"title":{},"body":{"changelog.html":{}}}],["1.29.0",{"_index":4224,"title":{},"body":{"changelog.html":{}}}],["1.29.1",{"_index":4259,"title":{},"body":{"changelog.html":{}}}],["1.3.0",{"_index":4783,"title":{},"body":{"changelog.html":{}}}],["1.30.0",{"_index":4255,"title":{},"body":{"changelog.html":{}}}],["1.30.1",{"_index":4241,"title":{},"body":{"changelog.html":{}}}],["1.30.2",{"_index":4240,"title":{},"body":{"changelog.html":{}}}],["1.31.0",{"_index":4225,"title":{},"body":{"changelog.html":{}}}],["1.31.1",{"_index":4234,"title":{},"body":{"changelog.html":{}}}],["1.32.0",{"_index":4223,"title":{},"body":{"changelog.html":{}}}],["1.33.0",{"_index":4122,"title":{},"body":{"changelog.html":{}}}],["1.33.1",{"_index":4115,"title":{},"body":{"changelog.html":{}}}],["1.34.0",{"_index":4107,"title":{},"body":{"changelog.html":{}}}],["1.35.0",{"_index":4104,"title":{},"body":{"changelog.html":{}}}],["1.36.0",{"_index":4096,"title":{},"body":{"changelog.html":{}}}],["1.37.0",{"_index":4081,"title":{},"body":{"changelog.html":{}}}],["1.38.0",{"_index":4077,"title":{},"body":{"changelog.html":{}}}],["1.38.1",{"_index":4071,"title":{},"body":{"changelog.html":{}}}],["1.38.2",{"_index":4066,"title":{},"body":{"changelog.html":{}}}],["1.38.3",{"_index":4064,"title":{},"body":{"changelog.html":{}}}],["1.39.0",{"_index":4042,"title":{},"body":{"changelog.html":{}}}],["1.4.0",{"_index":4780,"title":{},"body":{"changelog.html":{}}}],["1.40.0",{"_index":3990,"title":{},"body":{"changelog.html":{}}}],["1.40.1",{"_index":3988,"title":{},"body":{"changelog.html":{}}}],["1.41.0",{"_index":3976,"title":{},"body":{"changelog.html":{}}}],["1.42.0",{"_index":3968,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.5.0",{"_index":4777,"title":{},"body":{"changelog.html":{}}}],["1.5.1",{"_index":4775,"title":{},"body":{"changelog.html":{}}}],["1.6.0",{"_index":4752,"title":{},"body":{"changelog.html":{}}}],["1.6.1",{"_index":4748,"title":{},"body":{"changelog.html":{}}}],["1.6.10",{"_index":4720,"title":{},"body":{"changelog.html":{}}}],["1.6.11",{"_index":4716,"title":{},"body":{"changelog.html":{}}}],["1.6.12",{"_index":4713,"title":{},"body":{"changelog.html":{}}}],["1.6.13",{"_index":4710,"title":{},"body":{"changelog.html":{}}}],["1.6.14",{"_index":4705,"title":{},"body":{"changelog.html":{}}}],["1.6.15",{"_index":4703,"title":{},"body":{"changelog.html":{}}}],["1.6.16",{"_index":4696,"title":{},"body":{"changelog.html":{}}}],["1.6.17",{"_index":4694,"title":{},"body":{"changelog.html":{}}}],["1.6.2",{"_index":4745,"title":{},"body":{"changelog.html":{}}}],["1.6.3",{"_index":4743,"title":{},"body":{"changelog.html":{}}}],["1.6.4",{"_index":4740,"title":{},"body":{"changelog.html":{}}}],["1.6.5",{"_index":4738,"title":{},"body":{"changelog.html":{}}}],["1.6.6",{"_index":4735,"title":{},"body":{"changelog.html":{}}}],["1.6.7",{"_index":4731,"title":{},"body":{"changelog.html":{}}}],["1.6.8",{"_index":4728,"title":{},"body":{"changelog.html":{}}}],["1.6.9",{"_index":4725,"title":{},"body":{"changelog.html":{}}}],["1.7.0",{"_index":4691,"title":{},"body":{"changelog.html":{}}}],["1.7.1",{"_index":4687,"title":{},"body":{"changelog.html":{}}}],["1.7.10",{"_index":4647,"title":{},"body":{"changelog.html":{}}}],["1.7.11",{"_index":4643,"title":{},"body":{"changelog.html":{}}}],["1.7.12",{"_index":4641,"title":{},"body":{"changelog.html":{}}}],["1.7.2",{"_index":4672,"title":{},"body":{"changelog.html":{}}}],["1.7.3",{"_index":4669,"title":{},"body":{"changelog.html":{}}}],["1.7.4",{"_index":4667,"title":{},"body":{"changelog.html":{}}}],["1.7.5",{"_index":4663,"title":{},"body":{"changelog.html":{}}}],["1.7.6",{"_index":4660,"title":{},"body":{"changelog.html":{}}}],["1.7.7",{"_index":4657,"title":{},"body":{"changelog.html":{}}}],["1.7.8",{"_index":4654,"title":{},"body":{"changelog.html":{}}}],["1.7.9",{"_index":4650,"title":{},"body":{"changelog.html":{}}}],["1.8.0",{"_index":4628,"title":{},"body":{"changelog.html":{}}}],["1.8.1",{"_index":4626,"title":{},"body":{"changelog.html":{}}}],["1.8.2",{"_index":4624,"title":{},"body":{"changelog.html":{}}}],["1.9.0",{"_index":4517,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":490,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1100,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserNotification.html":{},"classes/InsightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["100'})@column({type",{"_index":1087,"title":{},"body":{"entities/DbEmoji.html":{}}}],["1000",{"_index":648,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["10000",{"_index":5150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1024",{"_index":5116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":4331,"title":{},"body":{"changelog.html":{}}}],["1045024650",{"_index":1332,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["1045024650})@primarycolumn('integer",{"_index":1288,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["109d081",{"_index":4057,"title":{},"body":{"changelog.html":{}}}],["10})@column({type",{"_index":1261,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(10000)@isoptional",{"_index":649,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["11",{"_index":2935,"title":{},"body":{"injectables/StripeService.html":{},"changelog.html":{}}}],["113e98b",{"_index":4114,"title":{},"body":{"changelog.html":{}}}],["115",{"_index":4339,"title":{},"body":{"changelog.html":{}}}],["116",{"_index":4315,"title":{},"body":{"changelog.html":{}}}],["117",{"_index":4317,"title":{},"body":{"changelog.html":{}}}],["118",{"_index":4313,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":4037,"title":{},"body":{"changelog.html":{}}}],["120",{"_index":4343,"title":{},"body":{"changelog.html":{}}}],["12237133",{"_index":1056,"title":{},"body":{"entities/DbContribution.html":{}}}],["12237133})@primarycolumn('bigint",{"_index":1022,"title":{},"body":{"entities/DbContribution.html":{}}}],["1225197",{"_index":4196,"title":{},"body":{"changelog.html":{}}}],["124",{"_index":4323,"title":{},"body":{"changelog.html":{}}}],["125",{"_index":4327,"title":{},"body":{"changelog.html":{}}}],["128",{"_index":4277,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":4078,"title":{},"body":{"changelog.html":{}}}],["130",{"_index":4275,"title":{},"body":{"changelog.html":{}}}],["131",{"_index":4273,"title":{},"body":{"changelog.html":{}}}],["133",{"_index":1592,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["133'})@column({type",{"_index":1577,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["135",{"_index":4257,"title":{},"body":{"changelog.html":{}}}],["136",{"_index":4253,"title":{},"body":{"changelog.html":{}}}],["138",{"_index":4084,"title":{},"body":{"changelog.html":{}}}],["13:24:51.000000",{"_index":882,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["13:24:51.000000'})@column({type",{"_index":1026,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsightMember.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{}}}],["13:24:51.000000'})@createdatecolumn({type",{"_index":1013,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["13:24:51.000000'})@deletedatecolumn({type",{"_index":1126,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000'})@updatedatecolumn({type",{"_index":1146,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["13:24:51.000000})@isdatestring()@isoptional",{"_index":871,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["14",{"_index":4034,"title":{},"body":{"changelog.html":{}}}],["141",{"_index":4250,"title":{},"body":{"changelog.html":{}}}],["143",{"_index":4235,"title":{},"body":{"changelog.html":{}}}],["144",{"_index":4238,"title":{},"body":{"changelog.html":{}}}],["147",{"_index":4160,"title":{},"body":{"changelog.html":{}}}],["14b6a44",{"_index":4564,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":1059,"title":{},"body":{"entities/DbContribution.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["150",{"_index":4229,"title":{},"body":{"changelog.html":{}}}],["151",{"_index":4231,"title":{},"body":{"changelog.html":{}}}],["154",{"_index":4206,"title":{},"body":{"changelog.html":{}}}],["155",{"_index":4161,"title":{},"body":{"changelog.html":{}}}],["155e99e",{"_index":4513,"title":{},"body":{"changelog.html":{}}}],["157",{"_index":4216,"title":{},"body":{"changelog.html":{}}}],["158",{"_index":4164,"title":{},"body":{"changelog.html":{}}}],["159",{"_index":4218,"title":{},"body":{"changelog.html":{}}}],["15})@column({type",{"_index":1004,"title":{},"body":{"entities/DbContribution.html":{}}}],["16",{"_index":4072,"title":{},"body":{"changelog.html":{}}}],["161",{"_index":4120,"title":{},"body":{"changelog.html":{}}}],["164",{"_index":4109,"title":{},"body":{"changelog.html":{}}}],["165",{"_index":4113,"title":{},"body":{"changelog.html":{}}}],["166050d",{"_index":4772,"title":{},"body":{"changelog.html":{}}}],["16678a7",{"_index":4542,"title":{},"body":{"changelog.html":{}}}],["168",{"_index":4105,"title":{},"body":{"changelog.html":{}}}],["1680fb3",{"_index":4299,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":3991,"title":{},"body":{"changelog.html":{}}}],["170",{"_index":4101,"title":{},"body":{"changelog.html":{}}}],["171",{"_index":4099,"title":{},"body":{"changelog.html":{}}}],["173",{"_index":4094,"title":{},"body":{"changelog.html":{}}}],["176",{"_index":4090,"title":{},"body":{"changelog.html":{}}}],["177",{"_index":4087,"title":{},"body":{"changelog.html":{}}}],["179",{"_index":4079,"title":{},"body":{"changelog.html":{}}}],["17c54b9",{"_index":4634,"title":{},"body":{"changelog.html":{}}}],["17d7725",{"_index":4169,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":3989,"title":{},"body":{"changelog.html":{}}}],["182",{"_index":4075,"title":{},"body":{"changelog.html":{}}}],["185",{"_index":4069,"title":{},"body":{"changelog.html":{}}}],["189",{"_index":4044,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":870,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["190",{"_index":4060,"title":{},"body":{"changelog.html":{}}}],["191",{"_index":4051,"title":{},"body":{"changelog.html":{}}}],["192",{"_index":4047,"title":{},"body":{"changelog.html":{}}}],["195",{"_index":4056,"title":{},"body":{"changelog.html":{}}}],["196",{"_index":1366,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["196})@primarygeneratedcolumn",{"_index":1355,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["198",{"_index":4019,"title":{},"body":{"changelog.html":{}}}],["199",{"_index":4010,"title":{},"body":{"changelog.html":{}}}],["1bbeaf6",{"_index":4600,"title":{},"body":{"changelog.html":{}}}],["1c3378e",{"_index":4165,"title":{},"body":{"changelog.html":{}}}],["1edaeda",{"_index":4516,"title":{},"body":{"changelog.html":{}}}],["1f021a4",{"_index":4403,"title":{},"body":{"changelog.html":{}}}],["1})@column({type",{"_index":1081,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbSubscription.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":656,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["2",{"_index":2323,"title":{},"body":{"controllers/PullRequestController.html":{},"index.html":{}}}],["2.build",{"_index":4923,"title":{},"body":{"index.html":{}}}],["2/3",{"_index":4829,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1114,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{}}}],["200",{"_index":4023,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["201",{"_index":3997,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":1012,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["2022",{"_index":1034,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["2023",{"_index":868,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"license.html":{}}}],["20491d8",{"_index":4179,"title":{},"body":{"changelog.html":{}}}],["205",{"_index":4029,"title":{},"body":{"changelog.html":{}}}],["207",{"_index":4012,"title":{},"body":{"changelog.html":{}}}],["2073883",{"_index":4501,"title":{},"body":{"changelog.html":{}}}],["208",{"_index":4005,"title":{},"body":{"changelog.html":{}}}],["20880c7",{"_index":4659,"title":{},"body":{"changelog.html":{}}}],["20bc1e7",{"_index":4668,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":4067,"title":{},"body":{"changelog.html":{}}}],["210",{"_index":4017,"title":{},"body":{"changelog.html":{}}}],["211",{"_index":4014,"title":{},"body":{"changelog.html":{}}}],["214",{"_index":3982,"title":{},"body":{"changelog.html":{}}}],["216",{"_index":3986,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":4103,"title":{},"body":{"changelog.html":{}}}],["227",{"_index":3974,"title":{},"body":{"changelog.html":{}}}],["22:04:29.000000",{"_index":1060,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:29.000000'})@column({type",{"_index":1278,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@createdatecolumn({type",{"_index":1281,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["22:04:29.000000'})@updatedatecolumn({type",{"_index":1037,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["22:04:39.000000",{"_index":1234,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22:04:39.000000'})@column({type",{"_index":1220,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["22d3cc1",{"_index":4749,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":4097,"title":{},"body":{"changelog.html":{}}}],["234343",{"_index":2592,"title":{},"body":{"classes/RepoInfo.html":{}}}],["234343})@isnumber",{"_index":2590,"title":{},"body":{"classes/RepoInfo.html":{}}}],["237133",{"_index":1070,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["237133})@column",{"_index":1166,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["237133})@column('bigint",{"_index":1526,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["237133})@column({type",{"_index":1104,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["237133})@primarycolumn('bigint",{"_index":1065,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["237133})@primarycolumn()@primarygeneratedcolumn",{"_index":1128,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{}}}],["23b2a83",{"_index":4201,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":3977,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["247e0ba",{"_index":4563,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":1143,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbUserNotification.html":{},"changelog.html":{},"overview.html":{}}}],["250",{"_index":1866,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["25060",{"_index":4940,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["25060:5432",{"_index":4935,"title":{},"body":{"index.html":{}}}],["250})@isnumber()@min(100)@max(500",{"_index":1847,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["255",{"_index":1000,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{}}}],["26",{"_index":4233,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":4482,"title":{},"body":{"changelog.html":{}}}],["272c09a",{"_index":4816,"title":{},"body":{"changelog.html":{}}}],["273f337",{"_index":4795,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":1036,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["286e864",{"_index":4322,"title":{},"body":{"changelog.html":{}}}],["287",{"_index":1235,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["287})@column({type",{"_index":1212,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["28a3b76",{"_index":4102,"title":{},"body":{"changelog.html":{}}}],["28f6699",{"_index":4251,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":4063,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["293c4d3",{"_index":4266,"title":{},"body":{"changelog.html":{}}}],["2a8d198",{"_index":4536,"title":{},"body":{"changelog.html":{}}}],["2bdec65",{"_index":4561,"title":{},"body":{"changelog.html":{}}}],["2c0b15f",{"_index":4808,"title":{},"body":{"changelog.html":{}}}],["2c0b3d1",{"_index":4709,"title":{},"body":{"changelog.html":{}}}],["2ce16fd",{"_index":4391,"title":{},"body":{"changelog.html":{}}}],["2d6609a",{"_index":4274,"title":{},"body":{"changelog.html":{}}}],["2ddb855",{"_index":4405,"title":{},"body":{"changelog.html":{}}}],["2ee076b",{"_index":4175,"title":{},"body":{"changelog.html":{}}}],["2f966a3",{"_index":4554,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":5075,"title":{},"body":{"overview.html":{}}}],["3.5",{"_index":5177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.run",{"_index":4932,"title":{},"body":{"index.html":{}}}],["30",{"_index":658,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["3000",{"_index":5119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":4948,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["30})@type(undefined)@isin(['7",{"_index":661,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["31",{"_index":3971,"title":{},"body":{"changelog.html":{}}}],["31333",{"_index":1119,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31333})@column({type",{"_index":1107,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{}}}],["31e4d60",{"_index":4653,"title":{},"body":{"changelog.html":{}}}],["32",{"_index":1578,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["3282435",{"_index":4569,"title":{},"body":{"changelog.html":{}}}],["334268d",{"_index":4538,"title":{},"body":{"changelog.html":{}}}],["33fea7e",{"_index":4744,"title":{},"body":{"changelog.html":{}}}],["34",{"_index":5074,"title":{},"body":{"overview.html":{}}}],["34d521d",{"_index":4797,"title":{},"body":{"changelog.html":{}}}],["3549897",{"_index":4106,"title":{},"body":{"changelog.html":{}}}],["35a08da",{"_index":4309,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":4466,"title":{},"body":{"changelog.html":{}}}],["365",{"_index":4917,"title":{},"body":{"index.html":{}}}],["37",{"_index":4429,"title":{},"body":{"changelog.html":{}}}],["3774b36",{"_index":4575,"title":{},"body":{"changelog.html":{}}}],["3782b21",{"_index":4430,"title":{},"body":{"changelog.html":{}}}],["38f1dc9",{"_index":4242,"title":{},"body":{"changelog.html":{}}}],["3918a78",{"_index":4766,"title":{},"body":{"changelog.html":{}}}],["39bdd16",{"_index":4336,"title":{},"body":{"changelog.html":{}}}],["39e7ff4",{"_index":4013,"title":{},"body":{"changelog.html":{}}}],["3a662d0",{"_index":4428,"title":{},"body":{"changelog.html":{}}}],["3d2b7eb",{"_index":4143,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":2050,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["41",{"_index":4452,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":4450,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["42211",{"_index":797,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbSubscription.html":{}}}],["42211})@column({type",{"_index":1457,"title":{},"body":{"entities/DbSubscription.html":{}}}],["42211})@isnumber",{"_index":779,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["426820139",{"_index":3797,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["43",{"_index":4455,"title":{},"body":{"changelog.html":{}}}],["43311",{"_index":1590,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["43311})@column({type",{"_index":1570,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["436f2db",{"_index":4186,"title":{},"body":{"changelog.html":{}}}],["4456742596",{"_index":1294,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["452a769",{"_index":4024,"title":{},"body":{"changelog.html":{}}}],["4552c66",{"_index":4637,"title":{},"body":{"changelog.html":{}}}],["4601be2",{"_index":4493,"title":{},"body":{"changelog.html":{}}}],["475e5dd",{"_index":4282,"title":{},"body":{"changelog.html":{}}}],["47dc78b",{"_index":4146,"title":{},"body":{"changelog.html":{}}}],["4828464",{"_index":4011,"title":{},"body":{"changelog.html":{}}}],["487c1a2",{"_index":4091,"title":{},"body":{"changelog.html":{}}}],["498",{"_index":1071,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["498})@column({type",{"_index":1067,"title":{},"body":{"entities/DbCustomer.html":{},"entities/DbUserNotification.html":{}}}],["4b264d5",{"_index":4496,"title":{},"body":{"changelog.html":{}}}],["4c3782f",{"_index":4502,"title":{},"body":{"changelog.html":{}}}],["4deaadd",{"_index":4232,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":1347,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/InsightOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/enumerations.html":{}}}],["5'})@isstring",{"_index":3778,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["5'})@isstring()@isoptional",{"_index":3206,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["50",{"_index":646,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbCustomer.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["500",{"_index":1112,"title":{},"body":{"entities/DbEndorsement.html":{},"entities/DbUserCollaboration.html":{},"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{}}}],["5238f58",{"_index":4167,"title":{},"body":{"changelog.html":{}}}],["5385049",{"_index":4435,"title":{},"body":{"changelog.html":{}}}],["5432",{"_index":4942,"title":{},"body":{"index.html":{}}}],["544673a",{"_index":4236,"title":{},"body":{"changelog.html":{}}}],["55",{"_index":4421,"title":{},"body":{"changelog.html":{}}}],["5699f6a",{"_index":4483,"title":{},"body":{"changelog.html":{}}}],["56eb3bd",{"_index":4048,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":4413,"title":{},"body":{"changelog.html":{}}}],["5736810",{"_index":798,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["5736810})@isnumber",{"_index":782,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["58",{"_index":4415,"title":{},"body":{"changelog.html":{}}}],["58540e7",{"_index":4301,"title":{},"body":{"changelog.html":{}}}],["58bf922",{"_index":4809,"title":{},"body":{"changelog.html":{}}}],["58e4723",{"_index":3987,"title":{},"body":{"changelog.html":{}}}],["5925b74",{"_index":4559,"title":{},"body":{"changelog.html":{}}}],["59dd7bf",{"_index":4532,"title":{},"body":{"changelog.html":{}}}],["5e1cb54",{"_index":4373,"title":{},"body":{"changelog.html":{}}}],["5e24505",{"_index":4377,"title":{},"body":{"changelog.html":{}}}],["5e7c6c7",{"_index":4804,"title":{},"body":{"changelog.html":{}}}],["5eddeb1",{"_index":4678,"title":{},"body":{"changelog.html":{}}}],["5ee770b",{"_index":4271,"title":{},"body":{"changelog.html":{}}}],["5f79c49",{"_index":4763,"title":{},"body":{"changelog.html":{}}}],["5f9be41",{"_index":4367,"title":{},"body":{"changelog.html":{}}}],["5})@column({type",{"_index":1275,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["607cf5d",{"_index":4779,"title":{},"body":{"changelog.html":{}}}],["60].map(async",{"_index":2346,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["611b923",{"_index":4247,"title":{},"body":{"changelog.html":{}}}],["612",{"_index":1334,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["612})@column('integer",{"_index":1309,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["618225f",{"_index":4567,"title":{},"body":{"changelog.html":{}}}],["61ac1e7",{"_index":4585,"title":{},"body":{"changelog.html":{}}}],["61b67d5",{"_index":4774,"title":{},"body":{"changelog.html":{}}}],["62b3eea",{"_index":4640,"title":{},"body":{"changelog.html":{}}}],["63",{"_index":4402,"title":{},"body":{"changelog.html":{}}}],["630f3b5",{"_index":4786,"title":{},"body":{"changelog.html":{}}}],["63639b4",{"_index":4465,"title":{},"body":{"changelog.html":{}}}],["638f9ec",{"_index":4050,"title":{},"body":{"changelog.html":{}}}],["63d6a92",{"_index":4682,"title":{},"body":{"changelog.html":{}}}],["64",{"_index":4404,"title":{},"body":{"changelog.html":{}}}],["648dbeb",{"_index":4416,"title":{},"body":{"changelog.html":{}}}],["64d869f",{"_index":4151,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":4399,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["66fb61e",{"_index":4307,"title":{},"body":{"changelog.html":{}}}],["672ea80",{"_index":4193,"title":{},"body":{"changelog.html":{}}}],["673dca9",{"_index":4649,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":4394,"title":{},"body":{"changelog.html":{}}}],["69b2067",{"_index":4607,"title":{},"body":{"changelog.html":{}}}],["6a4810f",{"_index":4613,"title":{},"body":{"changelog.html":{}}}],["6b157e5",{"_index":4472,"title":{},"body":{"changelog.html":{}}}],["6b832e4",{"_index":4371,"title":{},"body":{"changelog.html":{}}}],["6d23c24",{"_index":4656,"title":{},"body":{"changelog.html":{}}}],["6df9486",{"_index":4288,"title":{},"body":{"changelog.html":{}}}],["6fa4a7d",{"_index":4134,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":1869,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["70a6e7b",{"_index":4172,"title":{},"body":{"changelog.html":{}}}],["71359796",{"_index":1058,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["71359796})@column",{"_index":1359,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["71359796})@column({type",{"_index":1032,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbUserHighlightReaction.html":{}}}],["71359796})@primarycolumn({type",{"_index":1222,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["71a164d",{"_index":4085,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":4390,"title":{},"body":{"changelog.html":{}}}],["7249714",{"_index":4595,"title":{},"body":{"changelog.html":{}}}],["7338f09",{"_index":4158,"title":{},"body":{"changelog.html":{}}}],["73d1c74",{"_index":4800,"title":{},"body":{"changelog.html":{}}}],["74",{"_index":4386,"title":{},"body":{"changelog.html":{}}}],["742b073",{"_index":4469,"title":{},"body":{"changelog.html":{}}}],["758b2d2",{"_index":3983,"title":{},"body":{"changelog.html":{}}}],["762c1cb",{"_index":4230,"title":{},"body":{"changelog.html":{}}}],["77",{"_index":4379,"title":{},"body":{"changelog.html":{}}}],["7728bc8",{"_index":4276,"title":{},"body":{"changelog.html":{}}}],["77c734c",{"_index":4724,"title":{},"body":{"changelog.html":{}}}],["78133",{"_index":799,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["78133})@column({type",{"_index":1109,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["78133})@isnumber",{"_index":784,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["797",{"_index":825,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["79bf61d",{"_index":4675,"title":{},"body":{"changelog.html":{}}}],["7adfb6b",{"_index":4662,"title":{},"body":{"changelog.html":{}}}],["7c846ec",{"_index":4155,"title":{},"body":{"changelog.html":{}}}],["7cfc04b",{"_index":4411,"title":{},"body":{"changelog.html":{}}}],["7db9008",{"_index":4812,"title":{},"body":{"changelog.html":{}}}],["7e2756b",{"_index":4256,"title":{},"body":{"changelog.html":{}}}],["7e29c6e",{"_index":4170,"title":{},"body":{"changelog.html":{}}}],["7e9b8a4",{"_index":4715,"title":{},"body":{"changelog.html":{}}}],["7f618bf",{"_index":4020,"title":{},"body":{"changelog.html":{}}}],["7fe63aa",{"_index":4751,"title":{},"body":{"changelog.html":{}}}],["7})@isnumber()@min(0)@max(10",{"_index":1861,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["802fd4b",{"_index":4006,"title":{},"body":{"changelog.html":{}}}],["8080:3001",{"_index":4974,"title":{},"body":{"index.html":{}}}],["80a866f",{"_index":4202,"title":{},"body":{"changelog.html":{}}}],["81",{"_index":4376,"title":{},"body":{"changelog.html":{}}}],["81e8bbc",{"_index":4761,"title":{},"body":{"changelog.html":{}}}],["828b7d2",{"_index":4239,"title":{},"body":{"changelog.html":{}}}],["83c6888",{"_index":4364,"title":{},"body":{"changelog.html":{}}}],["83fe57d",{"_index":4213,"title":{},"body":{"changelog.html":{}}}],["84af9ff",{"_index":4030,"title":{},"body":{"changelog.html":{}}}],["85a7549",{"_index":4328,"title":{},"body":{"changelog.html":{}}}],["860fff3",{"_index":4597,"title":{},"body":{"changelog.html":{}}}],["867d740",{"_index":4579,"title":{},"body":{"changelog.html":{}}}],["86e013f",{"_index":4316,"title":{},"body":{"changelog.html":{}}}],["87",{"_index":4359,"title":{},"body":{"changelog.html":{}}}],["88",{"_index":4360,"title":{},"body":{"changelog.html":{}}}],["8810e03",{"_index":4507,"title":{},"body":{"changelog.html":{}}}],["8837b2a",{"_index":4690,"title":{},"body":{"changelog.html":{}}}],["88bc55a",{"_index":3975,"title":{},"body":{"changelog.html":{}}}],["88e08d2",{"_index":4130,"title":{},"body":{"changelog.html":{}}}],["88e0adc",{"_index":4219,"title":{},"body":{"changelog.html":{}}}],["89",{"_index":4321,"title":{},"body":{"changelog.html":{}}}],["8952f19",{"_index":4603,"title":{},"body":{"changelog.html":{}}}],["89b5329",{"_index":4407,"title":{},"body":{"changelog.html":{}}}],["8aee8e5",{"_index":4747,"title":{},"body":{"changelog.html":{}}}],["8bfda45",{"_index":4324,"title":{},"body":{"changelog.html":{}}}],["8c6884c",{"_index":4368,"title":{},"body":{"changelog.html":{}}}],["90",{"_index":2297,"title":{},"body":{"classes/PageOptionsDto.html":{},"changelog.html":{}}}],["90'])@isint()@isoptional",{"_index":662,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["911df68",{"_index":4722,"title":{},"body":{"changelog.html":{}}}],["9134f41",{"_index":3998,"title":{},"body":{"changelog.html":{}}}],["92",{"_index":4365,"title":{},"body":{"changelog.html":{}}}],["9427269",{"_index":4088,"title":{},"body":{"changelog.html":{}}}],["94331ba",{"_index":4254,"title":{},"body":{"changelog.html":{}}}],["9484df4",{"_index":4583,"title":{},"body":{"changelog.html":{}}}],["94ba4e1",{"_index":4727,"title":{},"body":{"changelog.html":{}}}],["957b86e",{"_index":4522,"title":{},"body":{"changelog.html":{}}}],["971adeb",{"_index":4199,"title":{},"body":{"changelog.html":{}}}],["9895327",{"_index":4431,"title":{},"body":{"changelog.html":{}}}],["98980b0",{"_index":4298,"title":{},"body":{"changelog.html":{}}}],["99ac2c6",{"_index":4438,"title":{},"body":{"changelog.html":{}}}],["9b12042",{"_index":4258,"title":{},"body":{"changelog.html":{}}}],["9b75deb",{"_index":4015,"title":{},"body":{"changelog.html":{}}}],["9bee970",{"_index":4177,"title":{},"body":{"changelog.html":{}}}],["9c605d0",{"_index":4369,"title":{},"body":{"changelog.html":{}}}],["9f75a41",{"_index":4018,"title":{},"body":{"changelog.html":{}}}],["9fc3be7",{"_index":4217,"title":{},"body":{"changelog.html":{}}}],["_stripe",{"_index":2923,"title":{},"body":{"injectables/StripeService.html":{}}}],["_token",{"_index":1669,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["a057e0e",{"_index":4209,"title":{},"body":{"changelog.html":{}}}],["a08abfd",{"_index":4562,"title":{},"body":{"changelog.html":{}}}],["a0db0aa",{"_index":4767,"title":{},"body":{"changelog.html":{}}}],["a17b835",{"_index":4451,"title":{},"body":{"changelog.html":{}}}],["a229a3b",{"_index":4674,"title":{},"body":{"changelog.html":{}}}],["a398b89",{"_index":4095,"title":{},"body":{"changelog.html":{}}}],["a5a4789",{"_index":4304,"title":{},"body":{"changelog.html":{}}}],["a9e1df6",{"_index":4642,"title":{},"body":{"changelog.html":{}}}],["abb24de",{"_index":4144,"title":{},"body":{"changelog.html":{}}}],["ability",{"_index":4457,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":5041,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":4784,"title":{},"body":{"changelog.html":{}}}],["ac31556",{"_index":4782,"title":{},"body":{"changelog.html":{}}}],["accept",{"_index":3184,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["accept'})@isstring()@isin(['accept",{"_index":3182,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["acceptance",{"_index":1474,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["accepted",{"_index":1211,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{}}}],["accepted_prs",{"_index":1206,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["accepting",{"_index":3247,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["access",{"_index":1155,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{}}}],["accessing",{"_index":4723,"title":{},"body":{"changelog.html":{}}}],["accessors",{"_index":2283,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/StripeService.html":{},"classes/TopUsersDto.html":{}}}],["accessroles",{"_index":2106,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["account",{"_index":4074,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":4153,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["actions",{"_index":4149,"title":{},"body":{"changelog.html":{}}}],["active",{"_index":1452,"title":{},"body":{"entities/DbSubscription.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"miscellaneous/enumerations.html":{}}}],["active'})@column({type",{"_index":1451,"title":{},"body":{"entities/DbSubscription.html":{}}}],["actual",{"_index":4896,"title":{},"body":{"index.html":{}}}],["ad2c624",{"_index":4061,"title":{},"body":{"changelog.html":{}}}],["adapter",{"_index":4441,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":1968,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"index.html":{}}}],["addafeaturedhighlight",{"_index":1967,"title":{},"body":{"controllers/HighlightController.html":{}}}],["addcustomer",{"_index":926,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/StripeService.html":{}}}],["addcustomer(id",{"_index":2926,"title":{},"body":{"injectables/StripeService.html":{}}}],["addcustomer(userid",{"_index":933,"title":{},"body":{"injectables/CustomerService.html":{}}}],["added",{"_index":1260,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{},"index.html":{}}}],["addfeatured",{"_index":3510,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addfeatured(highlightid",{"_index":3524,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addgroupby(\"author_login",{"_index":2478,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addhighlightforuser",{"_index":3452,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser",{"_index":3435,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addhighlightreactionforuser(highlightid",{"_index":3444,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsight",{"_index":2179,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsight(insight",{"_index":2186,"title":{},"body":{"injectables/InsightsService.html":{}}}],["addinsightforuser",{"_index":3436,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["addinsightforuser(@body",{"_index":3675,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightforuser(createhighlightdto",{"_index":3451,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["addinsightforuser(createinsightdto",{"_index":3664,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["addinsightmember",{"_index":2090,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(createinsightmemberdto",{"_index":3608,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addinsightmember(insightmember",{"_index":2099,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addinsightrepo",{"_index":2152,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["addinsightrepo(insightid",{"_index":2157,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["additional",{"_index":4375,"title":{},"body":{"changelog.html":{}}}],["additions",{"_index":1237,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["addmemberforinsight",{"_index":3610,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["addorderby(`\"${orderfield",{"_index":699,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["addorderby(`\"contribution\".\"created_at",{"_index":701,"title":{},"body":{"injectables/ContributionService.html":{}}}],["addorderby(`\"pull_requests\".\"updated_at",{"_index":2462,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addorderby(`\"repo\".\"created_at",{"_index":2680,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"repos\".\"${orderfield",{"_index":2684,"title":{},"body":{"injectables/RepoService.html":{}}}],["addorderby(`\"updated_at",{"_index":2480,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["adds",{"_index":2721,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["addselect",{"_index":1805,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["addselect(\"count(emoji_id",{"_index":3588,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"insight_members.invitation_email",{"_index":2130,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["addselect(\"max(pull_requests.updated_at",{"_index":2477,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"r2votes.deleted_at",{"_index":3955,"title":{},"body":{"injectables/VoteService.html":{}}}],["addselect(\"repos.full_name",{"_index":2468,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"repos.id",{"_index":2470,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["addselect(\"user_follows.deleted_at",{"_index":3397,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["addselect(\"users.login",{"_index":3556,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addselect(\"users.name",{"_index":2128,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/UserHighlightsService.html":{}}}],["addselect((qb",{"_index":2653,"title":{},"body":{"injectables/RepoService.html":{}}}],["addselect(`${interval}::integer",{"_index":2402,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["addusercollaboration",{"_index":3237,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["addusercollaboration(createusercollaborationdto",{"_index":3241,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["addusercollaboration(usercollaboration",{"_index":3286,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["adduserfollowerbyuserid",{"_index":3373,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowerbyuserid(userid",{"_index":3380,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["adduserfollowernotification",{"_index":3731,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserfollowernotification(userid",{"_index":3738,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlight",{"_index":3511,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlight(userid",{"_index":3526,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightnotification",{"_index":3732,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightnotification(userid",{"_index":3740,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserhighlightreaction",{"_index":3512,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["adduserhighlightreaction(userid",{"_index":3528,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["addusernotification",{"_index":3733,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["addusernotification(usernotification",{"_index":3742,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["adduserrepo",{"_index":3807,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adduserrepo(userid",{"_index":3811,"title":{},"body":{"injectables/UserReposService.html":{}}}],["adjust",{"_index":4484,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["adjustments",{"_index":4769,"title":{},"body":{"changelog.html":{}}}],["admin",{"_index":3177,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["admin).'})@isoptional",{"_index":3215,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["advised",{"_index":4983,"title":{},"body":{"index.html":{}}}],["ae43450",{"_index":4570,"title":{},"body":{"changelog.html":{}}}],["ae44652",{"_index":4205,"title":{},"body":{"changelog.html":{}}}],["aef9df6",{"_index":4475,"title":{},"body":{"changelog.html":{}}}],["af531e4",{"_index":4639,"title":{},"body":{"changelog.html":{}}}],["afde490",{"_index":4285,"title":{},"body":{"changelog.html":{}}}],["again",{"_index":4708,"title":{},"body":{"changelog.html":{}}}],["ai.module",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/PullRequestModule.html":{}}}],["ai.module.ts",{"_index":2235,"title":{},"body":{"modules/OpenAiModule.html":{}}}],["ai.service",{"_index":544,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/OpenAiModule.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["ai.service.ts",{"_index":454,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["ai.service.ts:10",{"_index":2237,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai.service.ts:13",{"_index":2238,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["ai/open",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["alias",{"_index":2634,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliases",{"_index":5093,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliasname",{"_index":2638,"title":{},"body":{"injectables/RepoService.html":{}}}],["aliastable",{"_index":2640,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}count",{"_index":2639,"title":{},"body":{"injectables/RepoService.html":{}}}],["alias}countselect",{"_index":2641,"title":{},"body":{"injectables/RepoService.html":{}}}],["all_prs",{"_index":1207,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["allof",{"_index":5131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":4116,"title":{},"body":{"changelog.html":{}}}],["allow_promotion_codes",{"_index":2942,"title":{},"body":{"injectables/StripeService.html":{}}}],["along",{"_index":4523,"title":{},"body":{"changelog.html":{}}}],["alpha",{"_index":4300,"title":{},"body":{"changelog.html":{}}}],["alpha.1",{"_index":4222,"title":{},"body":{"changelog.html":{}}}],["alpha.10",{"_index":4348,"title":{},"body":{"changelog.html":{}}}],["alpha.2",{"_index":4221,"title":{},"body":{"changelog.html":{}}}],["alpha.3",{"_index":4220,"title":{},"body":{"changelog.html":{}}}],["alpha.4",{"_index":4354,"title":{},"body":{"changelog.html":{}}}],["alpha.5",{"_index":4353,"title":{},"body":{"changelog.html":{}}}],["alpha.6",{"_index":4352,"title":{},"body":{"changelog.html":{}}}],["alpha.7",{"_index":4351,"title":{},"body":{"changelog.html":{}}}],["alpha.8",{"_index":4350,"title":{},"body":{"changelog.html":{}}}],["alpha.9",{"_index":4349,"title":{},"body":{"changelog.html":{}}}],["already",{"_index":2709,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["and/or",{"_index":5033,"title":{},"body":{"license.html":{}}}],["ands",{"_index":1673,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["andwhere",{"_index":2692,"title":{},"body":{"injectables/RepoService.html":{}}}],["andwhere(\"insight_members.access",{"_index":2127,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"insight_members.user_id",{"_index":2126,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["andwhere(\"pull_requests.updated_at",{"_index":2491,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["andwhere(\"r2stargazes.user_id",{"_index":2911,"title":{},"body":{"injectables/StargazeService.html":{}}}],["andwhere(\"r2stars.user_id",{"_index":2883,"title":{},"body":{"injectables/StarService.html":{}}}],["andwhere(\"r2submits.user_id",{"_index":3078,"title":{},"body":{"injectables/SubmitService.html":{}}}],["andwhere(\"r2votes.user_id",{"_index":3957,"title":{},"body":{"injectables/VoteService.html":{}}}],["andwhere(\"user_follows.deleted_at",{"_index":3394,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_follows.following_user_id",{"_index":3393,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["andwhere(\"user_highlight_reactions.emoji_id",{"_index":3593,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_highlight_reactions.user_id",{"_index":3592,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["andwhere(\"user_notifications.read_at",{"_index":3756,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(\"user_notifications.type",{"_index":3755,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["andwhere(`now",{"_index":2467,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["andwhere(`pull_requests.updated_at",{"_index":2493,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["any(\"repo\".\"topics",{"_index":2691,"title":{},"body":{"injectables/RepoService.html":{}}}],["any(\"repos\".\"topics",{"_index":2568,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["any(\"spam_pull_requests\".\"label_names",{"_index":2581,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["anything",{"_index":585,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["api",{"_index":4001,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api.certificate",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["api.config.ts",{"_index":4836,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["api.connection",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["api.database",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["api.host",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["api.maxqueryexecutiontime",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["api.opensauced.pizza",{"_index":4870,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api.opensauced.pizzaalternatively",{"_index":4975,"title":{},"body":{"index.html":{}}}],["api.password",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["api.port",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["api.username",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["api_domain=your_api_domainreplace",{"_index":4891,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":518,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apibearerauth",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apibody",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiconfig",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiconflictresponse",{"_index":2727,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{}}}],["apiconnection",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["apidocs",{"_index":4631,"title":{},"body":{"changelog.html":{}}}],["apiextramodels(pagedto",{"_index":5129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apihideproperty",{"_index":1050,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@column({type",{"_index":1312,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{}}}],["apihideproperty()@deletedatecolumn({type",{"_index":1018,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":1028,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1089,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["apikey",{"_index":5172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":1051,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelproperty({description",{"_index":993,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional",{"_index":1052,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apimodelpropertyoptional({description",{"_index":1007,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["apinotfoundresponse",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["apiokresponse",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"miscellaneous/variables.html":{}}}],["apioperation",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apipaginatedresponse",{"_index":723,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apipaginatedresponse(dbcontribution",{"_index":2513,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["apipaginatedresponse(dbemoji",{"_index":1636,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apipaginatedresponse(dbendorsement",{"_index":1719,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apipaginatedresponse(dbinsight",{"_index":3673,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["apipaginatedresponse(dbinsightmember",{"_index":3633,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["apipaginatedresponse(dbpullrequest",{"_index":2337,"title":{},"body":{"controllers/PullRequestController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbpullrequestcontributor",{"_index":734,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apipaginatedresponse(dbrepo",{"_index":2541,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbusercollaboration",{"_index":3266,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["apipaginatedresponse(dbuserhighlight",{"_index":2005,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["apipaginatedresponse(dbuserhighlightrepo",{"_index":2018,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apiproperty",{"_index":794,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({description",{"_index":775,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageMetaDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["apiproperty({type",{"_index":2248,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":664,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":1837,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apipropertyoptional({description",{"_index":659,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":641,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":647,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["apipropertyoptional({type",{"_index":1834,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["apiservicesmodule",{"_index":1,"title":{"modules/ApiServicesModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["apitags",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitags(\"authentication",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"contributors",{"_index":732,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{}}}],["apitags(\"emojis",{"_index":1635,"title":{},"body":{"controllers/EmojiController.html":{}}}],["apitags(\"endorsements",{"_index":1712,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["apitags(\"health",{"_index":1925,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags(\"highlights",{"_index":2003,"title":{},"body":{"controllers/HighlightController.html":{}}}],["apitags(\"insights",{"_index":2079,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apitags(\"pull",{"_index":526,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["apitags(\"repository",{"_index":2511,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["apitags(\"stripe",{"_index":2997,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["apitags(\"user",{"_index":3265,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["apitoken",{"_index":1820,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["apiunauthorizedresponse",{"_index":2072,"title":{},"body":{"controllers/InsightController.html":{}}}],["apiunprocessableentityresponse",{"_index":3629,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["apiversion",{"_index":2934,"title":{},"body":{"injectables/StripeService.html":{}}}],["app",{"_index":4947,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["appearing",{"_index":4588,"title":{},"body":{"changelog.html":{}}}],["application",{"_index":4945,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":483,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["applies",{"_index":2556,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applydecorators",{"_index":5128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applypagination",{"_index":2299,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["applypagination(undefined",{"_index":2300,"title":{},"body":{"injectables/PagerService.html":{}}}],["applyquerybuilderfilters",{"_index":2552,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["applyquerybuilderfilters(qb",{"_index":2554,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["appmodule",{"_index":26,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1390,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["apps",{"_index":4525,"title":{},"body":{"changelog.html":{}}}],["apt",{"_index":2363,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["arg",{"_index":1326,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["arising",{"_index":5066,"title":{},"body":{"license.html":{}}}],["array",{"_index":815,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createinsightdto.repos",{"_index":3677,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["artifact",{"_index":4736,"title":{},"body":{"changelog.html":{}}}],["asc",{"_index":1653,"title":{},"body":{"injectables/EmojiService.html":{},"injectables/InsightMemberService.html":{},"miscellaneous/enumerations.html":{}}}],["assets",{"_index":4991,"title":{},"body":{"index.html":{}}}],["assign",{"_index":4729,"title":{},"body":{"changelog.html":{}}}],["assignee",{"_index":1263,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_avatar",{"_index":1238,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["assignee_login",{"_index":1239,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["associated",{"_index":5024,"title":{},"body":{"license.html":{}}}],["associating",{"_index":4412,"title":{},"body":{"changelog.html":{}}}],["async",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["attach",{"_index":4790,"title":{},"body":{"changelog.html":{}}}],["attempt",{"_index":4518,"title":{},"body":{"changelog.html":{}}}],["auth",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{},"coverage.html":{}}}],["auth.controller",{"_index":448,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{}}}],["auth/dtos/user",{"_index":3863,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/supabase.guard",{"_index":519,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["auth/supabase.user.decorator",{"_index":1996,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["authcontroller",{"_index":256,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authed",{"_index":4016,"title":{},"body":{"changelog.html":{}}}],["authenticate",{"_index":3134,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticate(req",{"_index":3137,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["authenticated",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["authguard",{"_index":3131,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authguard(\"supabase",{"_index":3132,"title":{},"body":{"injectables/SupabaseGuard.html":{}}}],["authmodule",{"_index":29,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1268,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"properties.html":{}}}],["author_avatar",{"_index":1240,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["author_login",{"_index":1241,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{}}}],["authorization",{"_index":480,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["authorized",{"_index":2062,"title":{},"body":{"controllers/InsightController.html":{}}}],["authors",{"_index":5057,"title":{},"body":{"license.html":{}}}],["authuser${relation",{"_index":2676,"title":{},"body":{"injectables/RepoService.html":{}}}],["authuser${relation}.user_id",{"_index":2677,"title":{},"body":{"injectables/RepoService.html":{}}}],["autoloadentities",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":5072,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1264,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["await",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["aws:main",{"_index":1341,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["aws:main'})@column({type",{"_index":1323,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["b0169e7",{"_index":4534,"title":{},"body":{"changelog.html":{}}}],["b174a3f",{"_index":4454,"title":{},"body":{"changelog.html":{}}}],["b1a67da",{"_index":4671,"title":{},"body":{"changelog.html":{}}}],["b1eda28",{"_index":4704,"title":{},"body":{"changelog.html":{}}}],["b457783",{"_index":4511,"title":{},"body":{"changelog.html":{}}}],["b4c9879",{"_index":4572,"title":{},"body":{"changelog.html":{}}}],["b4d3785",{"_index":4788,"title":{},"body":{"changelog.html":{}}}],["b57f47b",{"_index":4666,"title":{},"body":{"changelog.html":{}}}],["b5b6ac5",{"_index":4773,"title":{},"body":{"changelog.html":{}}}],["b7c3395",{"_index":4737,"title":{},"body":{"changelog.html":{}}}],["b8b22da",{"_index":4576,"title":{},"body":{"changelog.html":{}}}],["b8e8c88",{"_index":4076,"title":{},"body":{"changelog.html":{}}}],["b991dad",{"_index":4426,"title":{},"body":{"changelog.html":{}}}],["b9d5a6e",{"_index":4387,"title":{},"body":{"changelog.html":{}}}],["b9f3798",{"_index":4526,"title":{},"body":{"changelog.html":{}}}],["ba8dfbb",{"_index":4695,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":1226,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["backend",{"_index":5078,"title":{},"body":{"properties.html":{}}}],["backfill",{"_index":4157,"title":{},"body":{"changelog.html":{}}}],["badge",{"_index":4556,"title":{},"body":{"changelog.html":{}}}],["badges",{"_index":4633,"title":{},"body":{"changelog.html":{}}}],["badrequestexception",{"_index":517,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{}}}],["bag",{"_index":4166,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":572,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EndorsementController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["baseentity",{"_index":1043,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["basefilterquerybuilder",{"_index":2617,"title":{},"body":{"injectables/RepoService.html":{}}}],["basefilterquerybuilder(range",{"_index":2623,"title":{},"body":{"injectables/RepoService.html":{}}}],["baseline",{"_index":4764,"title":{},"body":{"changelog.html":{}}}],["basequerybuilder",{"_index":927,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["bash",{"_index":4685,"title":{},"body":{"changelog.html":{}}}],["basic",{"_index":4793,"title":{},"body":{"changelog.html":{}}}],["bb26d27",{"_index":4190,"title":{},"body":{"changelog.html":{}}}],["bc3a37d",{"_index":4693,"title":{},"body":{"changelog.html":{}}}],["bd25889",{"_index":4400,"title":{},"body":{"changelog.html":{}}}],["bd6d621",{"_index":4755,"title":{},"body":{"changelog.html":{}}}],["bd905ab",{"_index":4380,"title":{},"body":{"changelog.html":{}}}],["bdougie",{"_index":855,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["bdougie'})@column({type",{"_index":1511,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["bdougie'})@isstring",{"_index":852,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["bdougie'})@isstring()@isoptional",{"_index":2422,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["be5fae7",{"_index":4332,"title":{},"body":{"changelog.html":{}}}],["bearer",{"_index":481,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["beautiful",{"_index":4436,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":4228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":4953,"title":{},"body":{"index.html":{}}}],["below",{"_index":551,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"index.html":{}}}],["beneficial",{"_index":4955,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":3969,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["beta.10",{"_index":4623,"title":{},"body":{"changelog.html":{}}}],["beta.11",{"_index":4622,"title":{},"body":{"changelog.html":{}}}],["beta.12",{"_index":4621,"title":{},"body":{"changelog.html":{}}}],["beta.13",{"_index":4620,"title":{},"body":{"changelog.html":{}}}],["beta.14",{"_index":4619,"title":{},"body":{"changelog.html":{}}}],["beta.15",{"_index":4618,"title":{},"body":{"changelog.html":{}}}],["beta.16",{"_index":4617,"title":{},"body":{"changelog.html":{}}}],["beta.17",{"_index":4616,"title":{},"body":{"changelog.html":{}}}],["beta.18",{"_index":4615,"title":{},"body":{"changelog.html":{}}}],["beta.19",{"_index":4614,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":4040,"title":{},"body":{"changelog.html":{}}}],["beta.3",{"_index":4039,"title":{},"body":{"changelog.html":{}}}],["beta.4",{"_index":4038,"title":{},"body":{"changelog.html":{}}}],["beta.5",{"_index":4036,"title":{},"body":{"changelog.html":{}}}],["beta.6",{"_index":4035,"title":{},"body":{"changelog.html":{}}}],["beta.7",{"_index":4033,"title":{},"body":{"changelog.html":{}}}],["beta.8",{"_index":4032,"title":{},"body":{"changelog.html":{}}}],["beta.9",{"_index":4031,"title":{},"body":{"changelog.html":{}}}],["beta.api.opensauced.pizza",{"_index":4871,"title":{},"body":{"index.html":{}}}],["better",{"_index":4467,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":4459,"title":{},"body":{"changelog.html":{}}}],["bigint",{"_index":1005,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserNotification.html":{}}}],["billing_address_collection",{"_index":2940,"title":{},"body":{"injectables/StripeService.html":{}}}],["binaries",{"_index":4875,"title":{},"body":{"index.html":{}}}],["bio",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["blocking",{"_index":4268,"title":{},"body":{"changelog.html":{}}}],["body",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["body.interests",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.timezone",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":807,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["bootstrap",{"_index":4846,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["boxes",{"_index":1906,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["branch",{"_index":1025,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"index.html":{}}}],["break",{"_index":4981,"title":{},"body":{"index.html":{}}}],["breaking",{"_index":4530,"title":{},"body":{"changelog.html":{}}}],["brian",{"_index":1175,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["browse",{"_index":5070,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":5068,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1901,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["bugs",{"_index":5087,"title":{},"body":{"properties.html":{}}}],["build",{"_index":3994,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["builder",{"_index":2118,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["builder/selectquerybuilder",{"_index":2304,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["building",{"_index":4111,"title":{},"body":{"changelog.html":{}}}],["builds",{"_index":4972,"title":{},"body":{"index.html":{}}}],["business",{"_index":4961,"title":{},"body":{"index.html":{}}}],["c",{"_index":5016,"title":{},"body":{"license.html":{}}}],["c000984",{"_index":4344,"title":{},"body":{"changelog.html":{}}}],["c013b70",{"_index":4702,"title":{},"body":{"changelog.html":{}}}],["c127cea",{"_index":4706,"title":{},"body":{"changelog.html":{}}}],["c24937f",{"_index":4759,"title":{},"body":{"changelog.html":{}}}],["c292277",{"_index":4080,"title":{},"body":{"changelog.html":{}}}],["c4addf6",{"_index":4422,"title":{},"body":{"changelog.html":{}}}],["c54dcd9",{"_index":4269,"title":{},"body":{"changelog.html":{}}}],["c6c07c6",{"_index":4366,"title":{},"body":{"changelog.html":{}}}],["c8115b6",{"_index":4573,"title":{},"body":{"changelog.html":{}}}],["c8dab92",{"_index":4293,"title":{},"body":{"changelog.html":{}}}],["ca",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"classes/SupabaseAuthDto.html":{}}}],["ca9a69c",{"_index":4318,"title":{},"body":{"changelog.html":{}}}],["cae5dbd",{"_index":4261,"title":{},"body":{"changelog.html":{}}}],["canaccess",{"_index":3635,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["canactivate",{"_index":1814,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["canactivate(host",{"_index":1817,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["cancel",{"_index":1432,"title":{},"body":{"entities/DbSubscription.html":{}}}],["cancel_at",{"_index":1420,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_at_period_end",{"_index":1421,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["cancel_url",{"_index":2948,"title":{},"body":{"injectables/StripeService.html":{}}}],["canceled",{"_index":1436,"title":{},"body":{"entities/DbSubscription.html":{}}}],["canceled_at",{"_index":1422,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["canupdate",{"_index":3640,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["canusermanageinsight",{"_index":2091,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["canusermanageinsight(userid",{"_index":2104,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["capabilities",{"_index":4427,"title":{},"body":{"changelog.html":{}}}],["capturing",{"_index":4329,"title":{},"body":{"changelog.html":{}}}],["card",{"_index":2939,"title":{},"body":{"injectables/StripeService.html":{}}}],["cascade",{"_index":4303,"title":{},"body":{"changelog.html":{}}}],["case",{"_index":4954,"title":{},"body":{"index.html":{}}}],["catch",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["cb83f9d",{"_index":4770,"title":{},"body":{"changelog.html":{}}}],["cb9206d",{"_index":4802,"title":{},"body":{"changelog.html":{}}}],["cc46460",{"_index":4712,"title":{},"body":{"changelog.html":{}}}],["cd306f8",{"_index":4739,"title":{},"body":{"changelog.html":{}}}],["cd8f21d",{"_index":4646,"title":{},"body":{"changelog.html":{}}}],["cda2cb2",{"_index":4414,"title":{},"body":{"changelog.html":{}}}],["certificate",{"_index":5147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certificates",{"_index":4907,"title":{},"body":{"index.html":{}}}],["certificates:for",{"_index":4903,"title":{},"body":{"index.html":{}}}],["cfe2a69",{"_index":4314,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":4046,"title":{},"body":{"changelog.html":{}}}],["changed",{"_index":1274,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changed_files",{"_index":1242,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["changelog",{"_index":3963,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":3966,"title":{},"body":{"changelog.html":{}}}],["channel",{"_index":5008,"title":{},"body":{"index.html":{}}}],["character",{"_index":997,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["characters",{"_index":553,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["charge",{"_index":5021,"title":{},"body":{"license.html":{}}}],["chatresponse",{"_index":451,"title":{"interfaces/ChatResponse.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["check",{"_index":248,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["check/insert",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkadduser",{"_index":3824,"title":{},"body":{"injectables/UserService.html":{}}}],["checkadduser(user",{"_index":3839,"title":{},"body":{"injectables/UserService.html":{}}}],["checkauthsession",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkin",{"_index":4989,"title":{},"body":{"index.html":{}}}],["checkout",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["checkout.session.completed",{"_index":2993,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["checkoutsession",{"_index":3052,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.customer",{"_index":3057,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.mode",{"_index":3054,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkoutsession.subscription",{"_index":3055,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["checkowner",{"_index":2107,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["checks",{"_index":3417,"title":{},"body":{"controllers/UserFollowsController.html":{},"changelog.html":{}}}],["chinese",{"_index":1858,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["choices",{"_index":456,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["chore",{"_index":1899,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["ci",{"_index":3996,"title":{},"body":{"changelog.html":{}}}],["cito",{"_index":4946,"title":{},"body":{"index.html":{}}}],["claim",{"_index":5060,"title":{},"body":{"license.html":{}}}],["class",{"_index":23,"title":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["classes",{"_index":627,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbPullRequestContributor.html":{},"classes/DbTopUser.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"overview.html":{}}}],["clc",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["clc.green(`{msg",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["clc.magentabright(message",{"_index":2052,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.red(`+${string(time)}ms",{"_index":985,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["clc.red(message",{"_index":2049,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["clc.yellow(`+${string(date.now",{"_index":5134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clc.yellow(`[{context",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["clean",{"_index":4568,"title":{},"body":{"changelog.html":{}}}],["cli_split_kwargs",{"_index":1343,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["cli_split_kwargs'})@column('text",{"_index":1321,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["click",{"_index":4992,"title":{},"body":{"index.html":{}}}],["cliduration",{"_index":2039,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":5080,"title":{},"body":{"properties.html":{}}}],["close",{"_index":1277,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed",{"_index":1336,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closed'})@column('text",{"_index":1319,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["closed_at",{"_index":1243,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["closes",{"_index":4159,"title":{},"body":{"changelog.html":{}}}],["cluster_apiservicesmodule",{"_index":4,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_exports",{"_index":5,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_apiservicesmodule_providers",{"_index":6,"title":{},"body":{"modules/ApiServicesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_contributionmodule",{"_index":614,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_exports",{"_index":616,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributionmodule_imports",{"_index":615,"title":{},"body":{"modules/ContributionModule.html":{}}}],["cluster_contributionmodule_providers",{"_index":617,"title":{},"body":{"modules/ContributionModule.html":{},"overview.html":{}}}],["cluster_contributormodule",{"_index":761,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_contributormodule_imports",{"_index":762,"title":{},"body":{"modules/ContributorModule.html":{}}}],["cluster_customermodule",{"_index":918,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_exports",{"_index":919,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_customermodule_providers",{"_index":920,"title":{},"body":{"modules/CustomerModule.html":{},"overview.html":{}}}],["cluster_emojimodule",{"_index":1639,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_emojimodule_providers",{"_index":1640,"title":{},"body":{"modules/EmojiModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule",{"_index":1746,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_exports",{"_index":1749,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_endorsementmodule_imports",{"_index":1748,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["cluster_endorsementmodule_providers",{"_index":1747,"title":{},"body":{"modules/EndorsementModule.html":{},"overview.html":{}}}],["cluster_highlightmodule",{"_index":2024,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_highlightmodule_imports",{"_index":2025,"title":{},"body":{"modules/HighlightModule.html":{}}}],["cluster_insightsmodule",{"_index":2166,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_exports",{"_index":2169,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_insightsmodule_imports",{"_index":2167,"title":{},"body":{"modules/InsightsModule.html":{}}}],["cluster_insightsmodule_providers",{"_index":2168,"title":{},"body":{"modules/InsightsModule.html":{},"overview.html":{}}}],["cluster_logmodule",{"_index":2212,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_exports",{"_index":2213,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_logmodule_providers",{"_index":2214,"title":{},"body":{"modules/LogModule.html":{},"overview.html":{}}}],["cluster_openaimodule",{"_index":2232,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_exports",{"_index":2234,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_openaimodule_providers",{"_index":2233,"title":{},"body":{"modules/OpenAiModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule",{"_index":2410,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_exports",{"_index":2413,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_imports",{"_index":2411,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_pullrequestmodule_providers",{"_index":2412,"title":{},"body":{"modules/PullRequestModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule",{"_index":2546,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_exports",{"_index":2547,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repofiltermodule_providers",{"_index":2548,"title":{},"body":{"modules/RepoFilterModule.html":{},"overview.html":{}}}],["cluster_repomodule",{"_index":2593,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_exports",{"_index":2594,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_repomodule_imports",{"_index":2596,"title":{},"body":{"modules/RepoModule.html":{}}}],["cluster_repomodule_providers",{"_index":2595,"title":{},"body":{"modules/RepoModule.html":{},"overview.html":{}}}],["cluster_stargazemodule",{"_index":2891,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_exports",{"_index":2892,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_stargazemodule_imports",{"_index":2894,"title":{},"body":{"modules/StargazeModule.html":{}}}],["cluster_stargazemodule_providers",{"_index":2893,"title":{},"body":{"modules/StargazeModule.html":{},"overview.html":{}}}],["cluster_starmodule",{"_index":2862,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_exports",{"_index":2865,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_starmodule_imports",{"_index":2863,"title":{},"body":{"modules/StarModule.html":{}}}],["cluster_starmodule_providers",{"_index":2864,"title":{},"body":{"modules/StarModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":2917,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_exports",{"_index":2918,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_providers",{"_index":2919,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule",{"_index":2952,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_exports",{"_index":2954,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripesubscriptionmodule_providers",{"_index":2953,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule",{"_index":2970,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_exports",{"_index":2971,"title":{},"body":{"modules/StripeWebHookModule.html":{},"overview.html":{}}}],["cluster_stripewebhookmodule_imports",{"_index":2972,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["cluster_submitmodule",{"_index":3058,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_exports",{"_index":3061,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_submitmodule_imports",{"_index":3060,"title":{},"body":{"modules/SubmitModule.html":{}}}],["cluster_submitmodule_providers",{"_index":3059,"title":{},"body":{"modules/SubmitModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":3708,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":3709,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":3710,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":3711,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_userreposmodule",{"_index":3798,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_exports",{"_index":3799,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_userreposmodule_imports",{"_index":3801,"title":{},"body":{"modules/UserReposModule.html":{}}}],["cluster_userreposmodule_providers",{"_index":3800,"title":{},"body":{"modules/UserReposModule.html":{},"overview.html":{}}}],["cluster_votemodule",{"_index":3926,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_exports",{"_index":3928,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cluster_votemodule_imports",{"_index":3927,"title":{},"body":{"modules/VoteModule.html":{}}}],["cluster_votemodule_providers",{"_index":3929,"title":{},"body":{"modules/VoteModule.html":{},"overview.html":{}}}],["cn=localhost\"please",{"_index":4920,"title":{},"body":{"index.html":{}}}],["coalesce(count(\"open_pull_requests\".\"id",{"_index":2664,"title":{},"body":{"injectables/RepoService.html":{}}}],["coalesce(count(\"pull_requests\".\"id",{"_index":3888,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_follows\".\"id",{"_index":3883,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_highlights\".\"id",{"_index":3880,"title":{},"body":{"injectables/UserService.html":{}}}],["coalesce(count(\"user_notifications\".\"id",{"_index":3872,"title":{},"body":{"injectables/UserService.html":{}}}],["code",{"_index":521,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbInsight.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["code'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":512,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{}}}],["code'})@column({type",{"_index":1142,"title":{},"body":{"entities/DbInsight.html":{}}}],["codeblock",{"_index":595,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["codeexplanationcontroller",{"_index":499,"title":{"controllers/CodeExplanationController.html":{}},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codeexplanationservice",{"_index":523,"title":{"injectables/CodeExplanationService.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codename",{"_index":5106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coderefactorsuggestioncontroller",{"_index":565,"title":{"controllers/CodeRefactorSuggestionController.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["coderefactorsuggestionservice",{"_index":575,"title":{"injectables/CodeRefactorSuggestionService.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["codes",{"_index":4059,"title":{},"body":{"changelog.html":{}}}],["codetestsuggestioncontroller",{"_index":599,"title":{"controllers/CodeTestSuggestionController.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["codetestsuggestionservice",{"_index":607,"title":{"injectables/CodeTestSuggestionService.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["collaborate",{"_index":848,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaborating",{"_index":1481,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration",{"_index":846,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["collaboration'})@apibadrequestresponse({description",{"_index":3244,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3259,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller",{"_index":3718,"title":{},"body":{"modules/UserModule.html":{}}}],["collaboration.controller.ts",{"_index":3235,"title":{},"body":{"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["collaboration.controller.ts:110",{"_index":3260,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:137",{"_index":3256,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:55",{"_index":3253,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.controller.ts:74",{"_index":3249,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto",{"_index":3263,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration.dto.ts",{"_index":845,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"coverage.html":{}}}],["collaboration.dto.ts:11",{"_index":853,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:12",{"_index":3183,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["collaboration.dto.ts:21",{"_index":851,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["collaboration.entity",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{}}}],["collaboration.entity.ts",{"_index":1469,"title":{},"body":{"entities/DbUserCollaboration.html":{},"coverage.html":{}}}],["collaboration.entity.ts:101",{"_index":1489,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:111",{"_index":1477,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:121",{"_index":1484,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:131",{"_index":1475,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:29",{"_index":1478,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:36",{"_index":1493,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:43",{"_index":1487,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:51",{"_index":1491,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:59",{"_index":1486,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:70",{"_index":1483,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:81",{"_index":1488,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.entity.ts:91",{"_index":1476,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaboration.service",{"_index":3262,"title":{},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{}}}],["collaboration.service.ts",{"_index":3281,"title":{},"body":{"injectables/UserCollaborationService.html":{},"coverage.html":{}}}],["collaboration.service.ts:12",{"_index":3284,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:19",{"_index":3288,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:25",{"_index":3290,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:39",{"_index":3287,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:43",{"_index":3293,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:47",{"_index":3292,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.service.ts:51",{"_index":3289,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["collaboration.user_id",{"_index":3273,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["collaboration_emailed_at",{"_index":1470,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["collaborations",{"_index":3251,"title":{},"body":{"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["collection",{"_index":2265,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["color",{"_index":1297,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["colorize",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["colors.util",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["column",{"_index":1042,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["column(\"bigint",{"_index":1529,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["column(\"boolean",{"_index":1338,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"integer",{"_index":1335,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["column(\"text",{"_index":1337,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{}}}],["column({type",{"_index":1302,"title":{},"body":{"entities/DbPullRequest.html":{},"entities/DbUserHighlightReaction.html":{}}}],["columns",{"_index":1552,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["come",{"_index":847,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["command",{"_index":4929,"title":{},"body":{"index.html":{}}}],["comment",{"_index":786,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["comments",{"_index":1244,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["commit",{"_index":1884,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["commitmessages",{"_index":1881,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["committing",{"_index":4984,"title":{},"body":{"index.html":{}}}],["common",{"_index":4310,"title":{},"body":{"changelog.html":{}}}],["common/constants/order",{"_index":688,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["common/decorators/api",{"_index":724,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["common/dtos/filter",{"_index":2335,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{}}}],["common/dtos/page",{"_index":668,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{}}}],["common/dtos/page.dto",{"_index":687,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["common/filters/repo",{"_index":2389,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["common/middleware/database",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middleware/http",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["common/services/api",{"_index":1752,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["common/services/pager.service",{"_index":1782,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["communication",{"_index":4905,"title":{},"body":{"index.html":{}}}],["community",{"_index":5001,"title":{},"body":{"index.html":{}}}],["company",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["complete",{"_index":4990,"title":{},"body":{"index.html":{}}}],["completely",{"_index":4286,"title":{},"body":{"changelog.html":{}}}],["completing",{"_index":4512,"title":{},"body":{"changelog.html":{}}}],["completion",{"_index":556,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["completionsurl",{"_index":5179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complexity",{"_index":5081,"title":{},"body":{"properties.html":{}}}],["component",{"_index":4785,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["computed",{"_index":1216,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["concurrency",{"_index":4679,"title":{},"body":{"changelog.html":{}}}],["conditions",{"_index":5040,"title":{},"body":{"license.html":{}}}],["config",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(\"api.logging",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{}}}],["configmodule.forroot",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["configservice.get(\"db",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":4765,"title":{},"body":{"changelog.html":{}}}],["configure",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":3090,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["confirmed_at",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["conflict",{"_index":4185,"title":{},"body":{"changelog.html":{}}}],["conflictexception",{"_index":2879,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/VoteService.html":{}}}],["conflictexception(\"the",{"_index":3643,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["conflictexception(\"you",{"_index":2886,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/VoteService.html":{}}}],["connect",{"_index":4073,"title":{},"body":{"changelog.html":{}}}],["connected_at",{"_index":3899,"title":{},"body":{"injectables/UserService.html":{},"changelog.html":{}}}],["connection",{"_index":1610,"title":{},"body":{"entities/DbUserTopRepo.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["connections",{"_index":4334,"title":{},"body":{"changelog.html":{}}}],["connector",{"_index":4287,"title":{},"body":{"changelog.html":{}}}],["console.error(\"openai",{"_index":563,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["console.log",{"_index":4571,"title":{},"body":{"changelog.html":{}}}],["console.logs",{"_index":4445,"title":{},"body":{"changelog.html":{}}}],["consolelogger",{"_index":886,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["consoleloggeroptions",{"_index":893,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["const",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["constants/order",{"_index":2292,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["constructor",{"_index":249,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["constructor(configservice",{"_index":1815,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{}}}],["constructor(context",{"_index":892,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["constructor(contributionrepository",{"_index":677,"title":{},"body":{"injectables/ContributionService.html":{}}}],["constructor(customerrepository",{"_index":930,"title":{},"body":{"injectables/CustomerService.html":{}}}],["constructor(data",{"_index":2241,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(emojirepository",{"_index":1645,"title":{},"body":{"injectables/EmojiService.html":{}}}],["constructor(endorsementrepository",{"_index":1761,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["constructor(insightmemberrepository",{"_index":2095,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["constructor(insightreporepository",{"_index":2154,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["constructor(insightrepository",{"_index":2183,"title":{},"body":{"injectables/InsightsService.html":{}}}],["constructor(logsrepository",{"_index":2221,"title":{},"body":{"injectables/LogService.html":{}}}],["constructor(name",{"_index":958,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["constructor(openaiservice",{"_index":536,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["constructor(prinsightrepository",{"_index":2379,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["constructor(private",{"_index":465,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["constructor(pullrequestrepository",{"_index":2442,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["constructor(reporepository",{"_index":2620,"title":{},"body":{"injectables/RepoService.html":{}}}],["constructor(repostargazerepository",{"_index":2900,"title":{},"body":{"injectables/StargazeService.html":{}}}],["constructor(repostarrepository",{"_index":2871,"title":{},"body":{"injectables/StarService.html":{}}}],["constructor(reposubmitrepository",{"_index":3067,"title":{},"body":{"injectables/SubmitService.html":{}}}],["constructor(repovoterepository",{"_index":3936,"title":{},"body":{"injectables/VoteService.html":{}}}],["constructor(subscriptionrepository",{"_index":2961,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["constructor(undefined",{"_index":2259,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(usercollaborationrepository",{"_index":3283,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["constructor(userfollowrepository",{"_index":3376,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["constructor(userhighlightrepository",{"_index":3520,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["constructor(usernotificationrepository",{"_index":3735,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["constructor(userreporepository",{"_index":3808,"title":{},"body":{"injectables/UserReposService.html":{}}}],["constructor(userrepository",{"_index":3835,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(httploggermiddleware).forroutes(`v1",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":3209,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["container",{"_index":4644,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["content",{"_index":463,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["contents",{"_index":4699,"title":{},"body":{"changelog.html":{}}}],["context",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"entities/DbEndorsement.html":{},"entities/DbLog.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":5199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continuous",{"_index":3992,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":5063,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":4996,"title":{},"body":{"index.html":{}}}],["contributed",{"_index":1003,"title":{},"body":{"entities/DbContribution.html":{}}}],["contributing",{"_index":4994,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1010,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"changelog.html":{},"index.html":{}}}],["contribution.entity",{"_index":621,"title":{},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution.service",{"_index":622,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{}}}],["contribution/contribution.entity",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["contribution/contribution.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["contributionmodule",{"_index":30,"title":{"modules/ContributionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules.html":{},"overview.html":{}}}],["contributionorderfieldsenum",{"_index":637,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionorderfieldsenum.count",{"_index":640,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{}}}],["contributionpageoptionsdto",{"_index":626,"title":{"classes/ContributionPageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributionrepository",{"_index":680,"title":{},"body":{"injectables/ContributionService.html":{}}}],["contributions",{"_index":1055,"title":{},"body":{"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["contributions.controller",{"_index":624,"title":{},"body":{"modules/ContributionModule.html":{}}}],["contributions.controller.ts",{"_index":2496,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["contributions.controller.ts:23",{"_index":2507,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.controller.ts:40",{"_index":2504,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["contributions.repo_id",{"_index":2652,"title":{},"body":{"injectables/RepoService.html":{}}}],["contributionscount",{"_index":2607,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["contributionservice",{"_index":618,"title":{"injectables/ContributionService.html":{}},"body":{"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{},"overview.html":{}}}],["contributor",{"_index":673,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["contributor.controller",{"_index":764,"title":{},"body":{"modules/ContributorModule.html":{}}}],["contributor.dto",{"_index":730,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["contributor.dto.ts",{"_index":1348,"title":{},"body":{"classes/DbPullRequestContributor.html":{},"coverage.html":{}}}],["contributor.dto.ts:14",{"_index":1350,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.dto.ts:8",{"_index":1349,"title":{},"body":{"classes/DbPullRequestContributor.html":{}}}],["contributor.tolowercase",{"_index":2466,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["contributor/contributor.module",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["contributorcontroller",{"_index":708,"title":{"controllers/ContributorController.html":{}},"body":{"controllers/ContributorController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributorinsightscontroller",{"_index":736,"title":{"controllers/ContributorInsightsController.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"coverage.html":{}}}],["contributormodule",{"_index":31,"title":{"modules/ContributorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules.html":{},"overview.html":{}}}],["contributors",{"_index":710,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["contributors/insights",{"_index":739,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller",{"_index":255,"title":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"contributors",{"_index":731,"title":{},"body":{"controllers/ContributorController.html":{}}}],["controller(\"contributors/insights",{"_index":755,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["controller(\"emojis",{"_index":1634,"title":{},"body":{"controllers/EmojiController.html":{}}}],["controller(\"endorsements",{"_index":1711,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["controller(\"health",{"_index":1924,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"highlights",{"_index":2002,"title":{},"body":{"controllers/HighlightController.html":{}}}],["controller(\"insights",{"_index":2078,"title":{},"body":{"controllers/InsightController.html":{}}}],["controller(\"prs",{"_index":525,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["controller(\"repos",{"_index":2510,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["controller(\"stripe",{"_index":2998,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["controller(\"user/collaborations",{"_index":3264,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["controller(\"user/endorsements",{"_index":3364,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["controller(\"user/highlights",{"_index":3484,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["controller(\"user/insights",{"_index":3631,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["controller(\"user/notifications",{"_index":3728,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["controller(\"user/recommendations",{"_index":3788,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["controller(\"users",{"_index":3339,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["controllers",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/ContributionModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["conversation",{"_index":5003,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":4270,"title":{},"body":{"changelog.html":{}}}],["cool",{"_index":849,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{}}}],["copies",{"_index":5035,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4698,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":5015,"title":{},"body":{"license.html":{}}}],["corners",{"_index":1905,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["correct",{"_index":4156,"title":{},"body":{"changelog.html":{}}}],["correctly",{"_index":4505,"title":{},"body":{"changelog.html":{}}}],["count",{"_index":671,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["counting",{"_index":4592,"title":{},"body":{"changelog.html":{}}}],["counts",{"_index":4055,"title":{},"body":{"changelog.html":{}}}],["couple",{"_index":4986,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":4817,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cr.repo_id",{"_index":3700,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["create",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["create(createendorsementdto",{"_index":1765,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["createcheckoutsession",{"_index":2924,"title":{},"body":{"injectables/StripeService.html":{}}}],["createcheckoutsession(customer",{"_index":2928,"title":{},"body":{"injectables/StripeService.html":{}}}],["created",{"_index":3358,"title":{},"body":{"controllers/UserEndorsementController.html":{},"changelog.html":{},"index.html":{}}}],["created_at",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["createdatecolumn",{"_index":1048,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["createendorsement",{"_index":1656,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsement(_token",{"_index":1664,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["createendorsementdto",{"_index":767,"title":{"classes/CreateEndorsementDto.html":{}},"body":{"classes/CreateEndorsementDto.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["createhighlightdto",{"_index":3455,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["createinsightdto",{"_index":802,"title":{"classes/CreateInsightDto.html":{}},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["createinsightdto.is_public",{"_index":3680,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.name",{"_index":3676,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto.repos.foreach(async",{"_index":3681,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["createinsightdto:14",{"_index":3172,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:22",{"_index":3171,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightdto:32",{"_index":3173,"title":{},"body":{"classes/UpdateInsightDto.html":{}}}],["createinsightmemberdto",{"_index":828,"title":{"classes/CreateInsightMemberDto.html":{}},"body":{"classes/CreateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["createinsightmemberdto.email",{"_index":3650,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["createlog",{"_index":2220,"title":{},"body":{"injectables/LogService.html":{}}}],["createlog(log",{"_index":2224,"title":{},"body":{"injectables/LogService.html":{}}}],["createlogdto",{"_index":836,"title":{"classes/CreateLogDto.html":{}},"body":{"classes/CreateLogDto.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["createparamdecorator((_data",{"_index":5198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"repo",{"_index":2647,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"repos",{"_index":2663,"title":{},"body":{"injectables/RepoService.html":{}}}],["createquerybuilder(\"user_highlight_reactions",{"_index":3595,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["creates",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{}}}],["createusercollaborationdto",{"_index":843,"title":{"classes/CreateUserCollaborationDto.html":{}},"body":{"classes/CreateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["createuserhighlightdto",{"_index":859,"title":{"classes/CreateUserHighlightDto.html":{}},"body":{"classes/CreateUserHighlightDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["creating",{"_index":4389,"title":{},"body":{"changelog.html":{}}}],["creation",{"_index":1011,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["creator",{"_index":777,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["creator_user_id",{"_index":770,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["ctx",{"_index":1822,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["ctx.getrequest",{"_index":1824,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["current",{"_index":1439,"title":{},"body":{"entities/DbSubscription.html":{},"classes/PageMetaDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["current_period_end_at",{"_index":1423,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["current_period_start_at",{"_index":1424,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["currentrepoids",{"_index":3698,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepoids.find((id",{"_index":3703,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos",{"_index":3686,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.filter",{"_index":3690,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["currentrepos.map((cr",{"_index":3699,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["custom",{"_index":2217,"title":{},"body":{"modules/LogModule.html":{}}}],["customer",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{}}}],["customer.entity",{"_index":922,"title":{},"body":{"modules/CustomerModule.html":{},"injectables/CustomerService.html":{}}}],["customer.service",{"_index":923,"title":{},"body":{"modules/CustomerModule.html":{}}}],["customer.stripe_customer_id",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["customer.subscription.created",{"_index":2994,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.deleted",{"_index":2996,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer.subscription.updated",{"_index":2995,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["customer/customer.entity",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["customer/customer.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["customer/customer.service",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customerdata",{"_index":3000,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["customerid",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["customermodule",{"_index":32,"title":{"modules/CustomerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CustomerModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["customerrepository",{"_index":932,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customers",{"_index":1069,"title":{},"body":{"entities/DbCustomer.html":{}}}],["customerservice",{"_index":349,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["customlogger",{"_index":883,"title":{"injectables/CustomLogger.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"coverage.html":{},"overview.html":{}}}],["customprops",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["cypress",{"_index":4969,"title":{},"body":{"index.html":{}}}],["d",{"_index":4936,"title":{},"body":{"index.html":{}}}],["d051987",{"_index":4566,"title":{},"body":{"changelog.html":{}}}],["d08173f",{"_index":4326,"title":{},"body":{"changelog.html":{}}}],["d08b3ff",{"_index":4581,"title":{},"body":{"changelog.html":{}}}],["d0d5ca5",{"_index":4684,"title":{},"body":{"changelog.html":{}}}],["d2745ff",{"_index":4514,"title":{},"body":{"changelog.html":{}}}],["d315ea4",{"_index":4610,"title":{},"body":{"changelog.html":{}}}],["d3afb4b",{"_index":4140,"title":{},"body":{"changelog.html":{}}}],["d3cb75a",{"_index":4278,"title":{},"body":{"changelog.html":{}}}],["d50b86f",{"_index":4372,"title":{},"body":{"changelog.html":{}}}],["d77ea52",{"_index":4632,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":5061,"title":{},"body":{"license.html":{}}}],["data",{"_index":494,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["data.choices[0]?.message.content",{"_index":496,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["database",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databaseloggermiddleware",{"_index":119,"title":{"classes/DatabaseLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["databaseloggermiddleware(\"lg",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseloggermiddleware(\"os",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":752,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["date(\"1970",{"_index":5195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(confirmed_at",{"_index":3905,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.created_at",{"_index":3902,"title":{},"body":{"injectables/UserService.html":{}}}],["date(github.updated_at",{"_index":3903,"title":{},"body":{"injectables/UserService.html":{}}}],["date(highlight.shipped_at",{"_index":3582,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["date(updatehighlightdto.shipped_at",{"_index":3493,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["date.now",{"_index":2043,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["day",{"_index":1208,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/PullRequestInsightsService.html":{},"changelog.html":{}}}],["days",{"_index":660,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbPRInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["db",{"_index":1580,"title":{},"body":{"entities/DbUserNotification.html":{},"changelog.html":{}}}],["dbapiconfig",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbc66f3",{"_index":4565,"title":{},"body":{"changelog.html":{}}}],["dbcontribution",{"_index":99,"title":{"entities/DbContribution.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbcontribution})@apinotfoundresponse({description",{"_index":2503,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["dbcustomer",{"_index":131,"title":{"entities/DbCustomer.html":{}},"body":{"modules/AppModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"entities/DbCustomer.html":{},"coverage.html":{}}}],["dbemoji",{"_index":157,"title":{"entities/DbEmoji.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{}}}],["dbemoji})@apinotfoundresponse({description",{"_index":1628,"title":{},"body":{"controllers/EmojiController.html":{}}}],["dbendorsement",{"_index":172,"title":{"entities/DbEndorsement.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbendorsement})@apibody({type",{"_index":1667,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbendorsement})@apinotfoundresponse({description",{"_index":1700,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["dbinsight",{"_index":122,"title":{"entities/DbInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["dbinsightmember",{"_index":155,"title":{"entities/DbInsightMember.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsightMember.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["dbinsightmember})@apinotfoundresponse({description",{"_index":3612,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["dbinsightrepo",{"_index":124,"title":{"entities/DbInsightRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["dbinsight})@apinotfoundresponse({description",{"_index":2060,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dblog",{"_index":141,"title":{"entities/DbLog.html":{}},"body":{"modules/AppModule.html":{},"entities/DbLog.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{}}}],["dbloggingconfig",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbprinsight",{"_index":162,"title":{"entities/DbPRInsight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["dbpullrequest",{"_index":146,"title":{"entities/DbPullRequest.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPullRequest.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["dbpullrequestcontributor",{"_index":720,"title":{"classes/DbPullRequestContributor.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["dbpullrequest})@apinotfoundresponse({description",{"_index":3322,"title":{},"body":{"controllers/UserController.html":{}}}],["dbrepo",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers",{"_index":107,"title":{"entities/DbRepoToUserStargazers.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstargazers})@apinotfoundresponse({description",{"_index":2751,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["dbrepotouserstars",{"_index":103,"title":{"entities/DbRepoToUserStars.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouserstars})@apinotfoundresponse({description",{"_index":2707,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["dbrepotousersubmissions",{"_index":105,"title":{"entities/DbRepoToUserSubmissions.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotousersubmissions})@apinotfoundresponse({description",{"_index":2789,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["dbrepotouservotes",{"_index":101,"title":{"entities/DbRepoToUserVotes.html":{}},"body":{"modules/AppModule.html":{},"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{}}}],["dbrepotouservotes})@apinotfoundresponse({description",{"_index":2826,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["dbrepo})@apinotfoundresponse({description",{"_index":2529,"title":{},"body":{"controllers/RepoController.html":{},"controllers/UserController.html":{}}}],["dbsubscription",{"_index":139,"title":{"entities/DbSubscription.html":{}},"body":{"modules/AppModule.html":{},"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["dbtopuser",{"_index":1463,"title":{"classes/DbTopUser.html":{}},"body":{"classes/DbTopUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbuser",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["dbusercollaboration",{"_index":169,"title":{"entities/DbUserCollaboration.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserCollaboration.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusercollaboration})@apinotfoundresponse({description",{"_index":3243,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["dbuserhighlight",{"_index":149,"title":{"entities/DbUserHighlight.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbuserhighlight.create(await",{"_index":3574,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["dbuserhighlightreaction",{"_index":159,"title":{"entities/DbUserHighlightReaction.html":{}},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse",{"_index":1556,"title":{"classes/DbUserHighlightReactionResponse.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["dbuserhighlightreactionresponse})@apinotfoundresponse({description",{"_index":1988,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightreaction})@apinotfoundresponse({description",{"_index":3447,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlightrepo",{"_index":1562,"title":{"classes/DbUserHighlightRepo.html":{}},"body":{"classes/DbUserHighlightRepo.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["dbuserhighlightrepo})@apibadrequestresponse({description",{"_index":3469,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["dbuserhighlight})@apinotfoundresponse({description",{"_index":1970,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{}}}],["dbusernotification",{"_index":167,"title":{"entities/DbUserNotification.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserNotification.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["dbusernotification})@apinotfoundresponse({description",{"_index":3726,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["dbuserrepo",{"_index":130,"title":{"entities/DbUserRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["dbusertoprepo",{"_index":165,"title":{"entities/DbUserTopRepo.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserTopRepo.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows",{"_index":153,"title":{"entities/DbUserToUserFollows.html":{}},"body":{"modules/AppModule.html":{},"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["dbusertouserfollows})@apinotfoundresponse({description",{"_index":3423,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["dbuser})@apinotfoundresponse({description",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["dd",{"_index":2401,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["dd5e668",{"_index":4627,"title":{},"body":{"changelog.html":{}}}],["de371dc",{"_index":4462,"title":{},"body":{"changelog.html":{}}}],["de9cea0",{"_index":4420,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":5025,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":5067,"title":{},"body":{"license.html":{}}}],["debug",{"_index":888,"title":{},"body":{"injectables/CustomLogger.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["debug(message",{"_index":896,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["decodeuricomponent(options.repo.tolowercase",{"_index":2565,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["decodeuricomponent(pageoptionsdto.repo",{"_index":3568,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["decorator",{"_index":4781,"title":{},"body":{"changelog.html":{}}}],["decorators",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["default",{"_index":638,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_payment_method",{"_index":3005,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["defaultdb",{"_index":5146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["delete",{"_index":1703,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["delete(\"/:id",{"_index":2083,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/featured",{"_index":2015,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete(\"/:id/reactions/:emojiid",{"_index":3503,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete(\"/:id/star",{"_index":2736,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:id/stargaze",{"_index":2774,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:id/submit",{"_index":2811,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:id/vote",{"_index":2858,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:owner/:repo/star",{"_index":2739,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete(\"/:owner/:repo/stargaze",{"_index":2777,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete(\"/:owner/:repo/submit",{"_index":2813,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete(\"/:owner/:repo/vote",{"_index":2861,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete(\"/:username/follow",{"_index":3430,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(\":id",{"_index":1743,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(\":id/members/:memberid",{"_index":3660,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["delete('/:id')@apioperation({operationid",{"_index":2066,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserHighlightsController.html":{}}}],["delete('/:id/featured')@apioperation({operationid",{"_index":1992,"title":{},"body":{"controllers/HighlightController.html":{}}}],["delete('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3460,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["delete('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2704,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2749,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2787,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2824,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2713,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["delete('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2755,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["delete('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2792,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["delete('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2829,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["delete('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3420,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["delete(':id')@apioperation({operationid",{"_index":1671,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{}}}],["delete(':id/members/:memberid')@apioperation({operationid",{"_index":3622,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["deleted",{"_index":1283,"title":{},"body":{"entities/DbPullRequest.html":{},"controllers/UserInsightsController.html":{}}}],["deleted_at",{"_index":992,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{}}}],["deletedatecolumn",{"_index":1047,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["deleteendoresementbyid",{"_index":1657,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(@param(\"id",{"_index":1744,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deleteendoresementbyid(id",{"_index":1670,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["deletehighlightforuser",{"_index":3437,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightforuser(userid",{"_index":3456,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser",{"_index":3438,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletehighlightreactionforuser(userid",{"_index":3459,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["deletes",{"_index":1674,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserHighlightsController.html":{}}}],["deleteuserhighlight",{"_index":3513,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlight(highlightid",{"_index":3532,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction",{"_index":3514,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deleteuserhighlightreaction(id",{"_index":3534,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["deletion",{"_index":1125,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{}}}],["deletions",{"_index":1245,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["demo",{"_index":4680,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"overview.html":{}}}],["dependency",{"_index":4264,"title":{},"body":{"changelog.html":{}}}],["deploy",{"_index":4211,"title":{},"body":{"changelog.html":{}}}],["deployment",{"_index":4629,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["deprecated",{"_index":4148,"title":{},"body":{"changelog.html":{}}}],["deps",{"_index":4145,"title":{},"body":{"changelog.html":{}}}],["desc",{"_index":1787,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["description",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["description.controller",{"_index":2418,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["description.controller.ts",{"_index":2349,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"coverage.html":{}}}],["description.controller.ts:22",{"_index":2353,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["description.dto",{"_index":2354,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["description.dto.ts",{"_index":1880,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["description.dto.ts:13",{"_index":1887,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:23",{"_index":1891,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:32",{"_index":1897,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:42",{"_index":1890,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:50",{"_index":1889,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.dto.ts:59",{"_index":1886,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["description.service",{"_index":2356,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{}}}],["description.service.ts",{"_index":2359,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["description.service.ts:10",{"_index":2362,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:19",{"_index":2361,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["description.service.ts:7",{"_index":2360,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["descriptionlength",{"_index":1844,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["designed",{"_index":5079,"title":{},"body":{"properties.html":{}}}],["dev",{"_index":4419,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["developer",{"_index":4688,"title":{},"body":{"changelog.html":{}}}],["development",{"_index":4026,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["df56c4f",{"_index":4395,"title":{},"body":{"changelog.html":{}}}],["diagram",{"_index":4280,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["diagrams",{"_index":4295,"title":{},"body":{"changelog.html":{}}}],["diff",{"_index":1882,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["diff/commit",{"_index":2366,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["digital",{"_index":4126,"title":{},"body":{"changelog.html":{}}}],["direction.constant",{"_index":689,"title":{},"body":{"injectables/ContributionService.html":{},"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["direction.constant.ts",{"_index":4860,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directly",{"_index":2369,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["directory",{"_index":4901,"title":{},"body":{"index.html":{}}}],["disable",{"_index":470,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{}}}],["discord",{"_index":3093,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["discord.find",{"_index":5004,"title":{},"body":{"index.html":{}}}],["discord_url",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["disk",{"_index":1927,"title":{},"body":{"controllers/HealthController.html":{}}}],["disk_percentage",{"_index":5120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disk_size",{"_index":5123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diskhealthindicator",{"_index":1923,"title":{},"body":{"controllers/HealthController.html":{}}}],["display",{"_index":1079,"title":{},"body":{"entities/DbEmoji.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"changelog.html":{},"index.html":{}}}],["display_email",{"_index":3224,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["display_local_time",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["display_order",{"_index":1073,"title":{},"body":{"entities/DbEmoji.html":{}}}],["distinct",{"_index":2475,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["distribute",{"_index":5031,"title":{},"body":{"license.html":{}}}],["dit",{"_index":4976,"title":{},"body":{"index.html":{}}}],["doadmin",{"_index":5142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doc",{"_index":801,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["doc'})@column({type",{"_index":1116,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["doc'})@isstring",{"_index":792,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["docker",{"_index":4027,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["docker>=20.10.12",{"_index":4880,"title":{},"body":{"index.html":{}}}],["dockerfile",{"_index":4180,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dockerfile.local",{"_index":4927,"title":{},"body":{"index.html":{}}}],["docr",{"_index":4520,"title":{},"body":{"changelog.html":{}}}],["docs",{"_index":4004,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":4635,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":4448,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":3967,"title":{},"body":{"changelog.html":{}}}],["domain",{"_index":4673,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["dot",{"_index":5076,"title":{},"body":{"properties.html":{}}}],["douglas",{"_index":1182,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["douglas'})@column({type",{"_index":1176,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserHighlight.html":{}}}],["down",{"_index":4540,"title":{},"body":{"changelog.html":{}}}],["downstarbyrepoid",{"_index":2869,"title":{},"body":{"injectables/StarService.html":{}}}],["downstarbyrepoid(repoid",{"_index":2875,"title":{},"body":{"injectables/StarService.html":{}}}],["downstargazebyrepoid",{"_index":2898,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazebyrepoid(repoid",{"_index":2904,"title":{},"body":{"injectables/StargazeService.html":{}}}],["downstargazeonebyid",{"_index":2743,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyid(id",{"_index":2748,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo",{"_index":2744,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstargazeonebyownerandrepo(owner",{"_index":2754,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["downstaronebyid",{"_index":2698,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(@param(\"id",{"_index":2737,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyid(id",{"_index":2703,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo",{"_index":2699,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downstaronebyownerandrepo(owner",{"_index":2712,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["downsubmitbyrepoid",{"_index":3065,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitbyrepoid(repoid",{"_index":3071,"title":{},"body":{"injectables/SubmitService.html":{}}}],["downsubmitonebyid",{"_index":2781,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyid(id",{"_index":2786,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo",{"_index":2782,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downsubmitonebyownerandrepo(owner",{"_index":2791,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["downvotebyrepoid",{"_index":3933,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvotebyrepoid(repoid",{"_index":3940,"title":{},"body":{"injectables/VoteService.html":{}}}],["downvoteonebyid",{"_index":2817,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(@param(\"id",{"_index":2859,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyid(id",{"_index":2823,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo",{"_index":2818,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["downvoteonebyownerandrepo(owner",{"_index":2828,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["draft",{"_index":1246,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["drop",{"_index":4008,"title":{},"body":{"changelog.html":{}}}],["dry",{"_index":4676,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dto/create",{"_index":1706,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["dtos",{"_index":4599,"title":{},"body":{"changelog.html":{}}}],["dtos/contribution",{"_index":692,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoContributionsController.html":{}}}],["dtos/create",{"_index":520,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/LogService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/filter",{"_index":2560,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["dtos/highlight",{"_index":1997,"title":{},"body":{"controllers/HighlightController.html":{}}}],["dtos/insight",{"_index":2196,"title":{},"body":{"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["dtos/page",{"_index":2306,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/page.dto",{"_index":2307,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["dtos/pull",{"_index":2333,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{}}}],["dtos/repo",{"_index":2536,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["dtos/supabase",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/top",{"_index":3337,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/update",{"_index":2073,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["dtos/user",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserReposService.html":{}}}],["duplicated",{"_index":4009,"title":{},"body":{"changelog.html":{}}}],["duration",{"_index":2041,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["duration.ts",{"_index":4833,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":4980,"title":{},"body":{"index.html":{}}}],["dutch",{"_index":1856,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["e",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["e043912",{"_index":4306,"title":{},"body":{"changelog.html":{}}}],["e0d38ca",{"_index":4551,"title":{},"body":{"changelog.html":{}}}],["e145e2d",{"_index":4742,"title":{},"body":{"changelog.html":{}}}],["e1fe498",{"_index":4686,"title":{},"body":{"changelog.html":{}}}],["e3161ab",{"_index":4382,"title":{},"body":{"changelog.html":{}}}],["e392288",{"_index":4543,"title":{},"body":{"changelog.html":{}}}],["e3d7bd7",{"_index":4446,"title":{},"body":{"changelog.html":{}}}],["e42223f",{"_index":4602,"title":{},"body":{"changelog.html":{}}}],["e5e2e03",{"_index":4504,"title":{},"body":{"changelog.html":{}}}],["e663170",{"_index":4791,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":2251,"title":{},"body":{"classes/PageDto.html":{}}}],["eba258a",{"_index":4636,"title":{},"body":{"changelog.html":{}}}],["echo",{"_index":4661,"title":{},"body":{"changelog.html":{}}}],["ed28e07",{"_index":4340,"title":{},"body":{"changelog.html":{}}}],["ed9729a",{"_index":4548,"title":{},"body":{"changelog.html":{}}}],["edit",{"_index":3176,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["email",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["email.tolowercase",{"_index":3925,"title":{},"body":{"injectables/UserService.html":{}}}],["emoji",{"_index":1078,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"changelog.html":{}}}],["emoji.controller",{"_index":1642,"title":{},"body":{"modules/EmojiModule.html":{}}}],["emoji.service",{"_index":1632,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{}}}],["emoji/emoji.module",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["emoji/entities/emoji.entity",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{}}}],["emoji_id",{"_index":1533,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["emojicontroller",{"_index":1621,"title":{"controllers/EmojiController.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"coverage.html":{}}}],["emojiid",{"_index":3445,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["emojimodule",{"_index":33,"title":{"modules/EmojiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmojiModule.html":{},"modules.html":{},"overview.html":{}}}],["emojirepository",{"_index":1647,"title":{},"body":{"injectables/EmojiService.html":{}}}],["emojis",{"_index":1098,"title":{},"body":{"entities/DbEmoji.html":{},"controllers/EmojiController.html":{}}}],["emojiservice",{"_index":1631,"title":{"injectables/EmojiService.html":{}},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"coverage.html":{},"overview.html":{}}}],["enable",{"_index":4025,"title":{},"body":{"changelog.html":{}}}],["encounter",{"_index":4952,"title":{},"body":{"index.html":{}}}],["encourage",{"_index":4995,"title":{},"body":{"index.html":{}}}],["end",{"_index":592,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbSubscription.html":{}}}],["ended_at",{"_index":1425,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["endorsement",{"_index":776,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement.controller",{"_index":1751,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/UserModule.html":{}}}],["endorsement.controller.ts",{"_index":3354,"title":{},"body":{"controllers/UserEndorsementController.html":{},"coverage.html":{}}}],["endorsement.controller.ts:25",{"_index":3359,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.controller.ts:38",{"_index":3362,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["endorsement.dto",{"_index":1707,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/UpdateEndorsementDto.html":{}}}],["endorsement.dto.ts",{"_index":769,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["endorsement.dto.ts:11",{"_index":780,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:19",{"_index":783,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:26",{"_index":785,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:34",{"_index":788,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:41",{"_index":791,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.dto.ts:48",{"_index":793,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["endorsement.service",{"_index":1705,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["endorsement/endorsement.module",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["endorsement/endorsement.service",{"_index":3363,"title":{},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsement/entities/endorsement.entity",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{}}}],["endorsementcontroller",{"_index":1654,"title":{"controllers/EndorsementController.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"coverage.html":{}}}],["endorsementmodule",{"_index":34,"title":{"modules/EndorsementModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EndorsementModule.html":{},"modules.html":{},"overview.html":{}}}],["endorsementrepository",{"_index":1763,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements",{"_index":1118,"title":{},"body":{"entities/DbEndorsement.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"changelog.html":{}}}],["endorsements.recipient_user_id=users.id",{"_index":1795,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=repos.id",{"_index":1793,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsements.repo_id=users.id",{"_index":1803,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["endorsementservice",{"_index":1704,"title":{"injectables/EndorsementService.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["endorsementservicetoken",{"_index":5125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endorsementtokenguard",{"_index":1709,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["endpoint",{"_index":3973,"title":{},"body":{"changelog.html":{}}}],["endpointconfig",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":1929,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["endpoints'})@healthcheck()@apiokresponse",{"_index":1913,"title":{},"body":{"controllers/HealthController.html":{}}}],["engines",{"_index":4810,"title":{},"body":{"changelog.html":{}}}],["english",{"_index":1849,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["english'})@isstring()@isin(['english",{"_index":1850,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["entire",{"_index":2367,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["entities",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{},"overview.html":{}}}],["entities.length",{"_index":2492,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["entities.map((notification",{"_index":3757,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["entities/emoji.entity",{"_index":1633,"title":{},"body":{"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{}}}],["entities/endorsement.entity",{"_index":1708,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{}}}],["entities/insight",{"_index":2116,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["entities/insight.entity",{"_index":2075,"title":{},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["entities/pull",{"_index":2332,"title":{},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{}}}],["entities/repo.entity",{"_index":2535,"title":{},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{}}}],["entities/top",{"_index":3335,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["entities/user",{"_index":1998,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":990,"title":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PagerService.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["enum",{"_index":670,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbUserNotification.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["enumerations",{"_index":4856,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":642,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["env",{"_index":4449,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environment",{"_index":4333,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["environments",{"_index":4869,"title":{},"body":{"index.html":{}}}],["epoch",{"_index":5194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equal",{"_index":1328,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["error",{"_index":561,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["error(message",{"_index":898,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["error(response.statustext",{"_index":498,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["error).tostring",{"_index":3032,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["error.message",{"_index":564,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["errors",{"_index":4178,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["escape",{"_index":3565,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["eslint",{"_index":469,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["etl",{"_index":4319,"title":{},"body":{"changelog.html":{}}}],["event",{"_index":3042,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{},"license.html":{}}}],["event.data.object",{"_index":3047,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["event.type",{"_index":3051,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["everywhere",{"_index":4437,"title":{},"body":{"changelog.html":{}}}],["example",{"_index":778,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["exception/responses",{"_index":4479,"title":{},"body":{"changelog.html":{}}}],["exclude",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["executioncontext",{"_index":1818,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":3498,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["exist'})@apibadrequestresponse({description",{"_index":3448,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["existing",{"_index":2705,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["existinguser",{"_index":3644,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.email",{"_index":3649,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["existinguser?.id",{"_index":3648,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["expand",{"_index":3004,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["experiment",{"_index":4135,"title":{},"body":{"changelog.html":{}}}],["experimental",{"_index":4171,"title":{},"body":{"changelog.html":{}}}],["explain",{"_index":4813,"title":{},"body":{"changelog.html":{}}}],["explanation",{"_index":510,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"changelog.html":{}}}],["explanation.controller",{"_index":2421,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["explanation.controller.ts",{"_index":502,"title":{},"body":{"controllers/CodeExplanationController.html":{},"coverage.html":{}}}],["explanation.controller.ts:22",{"_index":515,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["explanation.dto",{"_index":522,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{}}}],["explanation.dto.ts",{"_index":1843,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["explanation.dto.ts:13",{"_index":1848,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:23",{"_index":1862,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:33",{"_index":1860,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.dto.ts:40",{"_index":1846,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{}}}],["explanation.service",{"_index":524,"title":{},"body":{"controllers/CodeExplanationController.html":{},"modules/PullRequestModule.html":{}}}],["explanation.service.ts",{"_index":533,"title":{},"body":{"injectables/CodeExplanationService.html":{},"coverage.html":{}}}],["explanation.service.ts:10",{"_index":542,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:17",{"_index":539,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explanation.service.ts:7",{"_index":537,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["explore",{"_index":5164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":22,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["exports",{"_index":18,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["exposing",{"_index":4711,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":2038,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"license.html":{}}}],["extend",{"_index":4683,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":631,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/CustomLogger.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["extra",{"_index":4362,"title":{},"body":{"changelog.html":{}}}],["extractjwt",{"_index":3143,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":3157,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extractor",{"_index":3156,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["extraneous",{"_index":4444,"title":{},"body":{"changelog.html":{}}}],["f",{"_index":4926,"title":{},"body":{"index.html":{}}}],["f0304d4",{"_index":4625,"title":{},"body":{"changelog.html":{}}}],["f05c29c",{"_index":4577,"title":{},"body":{"changelog.html":{}}}],["f212fb2",{"_index":4045,"title":{},"body":{"changelog.html":{}}}],["f29f5f2",{"_index":4605,"title":{},"body":{"changelog.html":{}}}],["f3808a5",{"_index":4478,"title":{},"body":{"changelog.html":{}}}],["f4570c3",{"_index":4591,"title":{},"body":{"changelog.html":{}}}],["f5385b3",{"_index":4719,"title":{},"body":{"changelog.html":{}}}],["f57c5b6",{"_index":4296,"title":{},"body":{"changelog.html":{}}}],["f5b6599",{"_index":4461,"title":{},"body":{"changelog.html":{}}}],["f5f2761",{"_index":4487,"title":{},"body":{"changelog.html":{}}}],["f5f942f",{"_index":4537,"title":{},"body":{"changelog.html":{}}}],["f73f891",{"_index":4184,"title":{},"body":{"changelog.html":{}}}],["f8c9324",{"_index":4494,"title":{},"body":{"changelog.html":{}}}],["f8d41f1",{"_index":4544,"title":{},"body":{"changelog.html":{}}}],["f96a793",{"_index":4539,"title":{},"body":{"changelog.html":{}}}],["f9defe2",{"_index":4070,"title":{},"body":{"changelog.html":{}}}],["facilitate",{"_index":4899,"title":{},"body":{"index.html":{}}}],["fad79b1",{"_index":4527,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/InsightMemberService.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["false})@column('boolean",{"_index":1285,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["false})@column({default",{"_index":1133,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{}}}],["false})@column({type",{"_index":1504,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["false})@isboolean",{"_index":810,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{}}}],["false})@isboolean()@isoptional",{"_index":3194,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["fastify",{"_index":4418,"title":{},"body":{"changelog.html":{}}}],["favorite",{"_index":1132,"title":{},"body":{"entities/DbInsight.html":{}}}],["fc74284",{"_index":4443,"title":{},"body":{"changelog.html":{}}}],["fcaddb5",{"_index":4480,"title":{},"body":{"changelog.html":{}}}],["fdc11ea",{"_index":4778,"title":{},"body":{"changelog.html":{}}}],["fe20c2d",{"_index":4529,"title":{},"body":{"changelog.html":{}}}],["fe4b9e9",{"_index":4730,"title":{},"body":{"changelog.html":{}}}],["feat",{"_index":4358,"title":{},"body":{"changelog.html":{}}}],["feature",{"_index":4022,"title":{},"body":{"changelog.html":{}}}],["featured",{"_index":1499,"title":{},"body":{"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"changelog.html":{}}}],["featurehighlight",{"_index":1959,"title":{},"body":{"controllers/HighlightController.html":{}}}],["featurehighlight(id",{"_index":1965,"title":{},"body":{"controllers/HighlightController.html":{}}}],["features",{"_index":3972,"title":{},"body":{"changelog.html":{}}}],["fed79a1",{"_index":4212,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":4477,"title":{},"body":{"changelog.html":{}}}],["fetch",{"_index":459,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"changelog.html":{}}}],["fetcher",{"_index":473,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetcher(this.configservice.get(\"openai.completionsurl",{"_index":478,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["fetches",{"_index":3467,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["fetching",{"_index":4086,"title":{},"body":{"changelog.html":{}}}],["ff434b5",{"_index":4121,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":4173,"title":{},"body":{"changelog.html":{}}}],["fields",{"_index":4363,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1273,"title":{},"body":{"entities/DbPullRequest.html":{},"index.html":{},"license.html":{}}}],["filter",{"_index":1560,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"changelog.html":{}}}],["filter.module",{"_index":2416,"title":{},"body":{"modules/PullRequestModule.html":{},"modules/RepoModule.html":{}}}],["filter.module.ts",{"_index":2550,"title":{},"body":{"modules/RepoFilterModule.html":{}}}],["filter.service",{"_index":2390,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{}}}],["filter.service.ts",{"_index":2551,"title":{},"body":{"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filter.service.ts:15",{"_index":2558,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter.service.ts:85",{"_index":2555,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filter/insightfilterfieldsenum",{"_index":2559,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filtering",{"_index":4311,"title":{},"body":{"changelog.html":{}}}],["filteroptionsdto",{"_index":1827,"title":{"classes/FilterOptionsDto.html":{}},"body":{"classes/FilterOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["filters",{"_index":717,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["filters.foreach(([sql",{"_index":2582,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push",{"_index":2573,"title":{},"body":{"injectables/RepoFilterService.html":{},"injectables/UserHighlightsService.html":{}}}],["filters.push([\"repos.stars",{"_index":2571,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`:topic",{"_index":2567,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`lower(repos.full_name)=:repo",{"_index":2564,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filters.push([`now",{"_index":2397,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["filters.push([`repos.id",{"_index":2562,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["filterservice",{"_index":2443,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["find",{"_index":1971,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["findall",{"_index":676,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findall(@query",{"_index":2542,"title":{},"body":{"controllers/RepoController.html":{}}}],["findall(pageoptionsdto",{"_index":681,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["findallbycontributor",{"_index":2436,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycontributor(contributor",{"_index":2448,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallbycreatoruserid",{"_index":1756,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbycreatoruserid(userid",{"_index":1768,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyownerandrepo",{"_index":2497,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyownerandrepo(owner",{"_index":2499,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrecipientuserid",{"_index":1757,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrecipientuserid(userid",{"_index":1770,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoid",{"_index":2498,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoid(id",{"_index":2505,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["findallbyrepoowneroruser",{"_index":1758,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoowneroruser(repoowneroruser",{"_index":1772,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallbyrepoownerorusername",{"_index":1658,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyrepoownerorusername(repoowneroruser",{"_index":1677,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallbyuserid",{"_index":2180,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(pageoptionsdto",{"_index":2189,"title":{},"body":{"injectables/InsightsService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["findallbyuserid(userid",{"_index":3746,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["findallcontributorswithfilters",{"_index":2437,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallcontributorswithfilters(pageoptionsdto",{"_index":2450,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallemojis",{"_index":1623,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(@query",{"_index":1637,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallemojis(pageoptionsdto",{"_index":1624,"title":{},"body":{"controllers/EmojiController.html":{}}}],["findallendorsements",{"_index":1659,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(@query",{"_index":1720,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsements(pageoptionsdto",{"_index":1683,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallendorsementsbyrepo",{"_index":1660,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepo(owner",{"_index":1685,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser",{"_index":1730,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["findallendorsementsbyrepobyuser(owner",{"_index":1775,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["findallfeatured",{"_index":3515,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallfeatured(pageoptionsdto",{"_index":3538,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallfeaturedhighlights",{"_index":1960,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(@query",{"_index":2009,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallfeaturedhighlights(pageoptionsdto",{"_index":1974,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightreactions",{"_index":3516,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightreactions(highlightid",{"_index":3540,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos",{"_index":1961,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlightrepos(@query",{"_index":2019,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightrepos(pageoptionsdto",{"_index":1978,"title":{},"body":{"controllers/HighlightController.html":{},"injectables/UserHighlightsService.html":{}}}],["findallhighlights",{"_index":1962,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(@query",{"_index":2006,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlights(pageoptionsdto",{"_index":1982,"title":{},"body":{"controllers/HighlightController.html":{}}}],["findallhighlightsbyusername",{"_index":3306,"title":{},"body":{"controllers/UserController.html":{}}}],["findallhighlightsbyusername(username",{"_index":3311,"title":{},"body":{"controllers/UserController.html":{}}}],["findallinsightmembers",{"_index":2092,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["findallinsightmembers(pageoptionsdto",{"_index":2109,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["findallinsightsbyuserid",{"_index":3606,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallinsightsbyuserid(pageoptionsdto",{"_index":3615,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["findallrecentcontributors",{"_index":2438,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentcontributors(pageoptionsdto",{"_index":2452,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findallrecentpullrequestcontributors",{"_index":740,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallrecentpullrequestcontributors(pageoptionsdto",{"_index":742,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["findallreposwithfilters",{"_index":2521,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(@query",{"_index":2544,"title":{},"body":{"controllers/RepoController.html":{}}}],["findallreposwithfilters(pageoptionsdto",{"_index":2526,"title":{},"body":{"controllers/RepoController.html":{}}}],["findalltopreposbyusername",{"_index":3307,"title":{},"body":{"controllers/UserController.html":{}}}],["findalltopreposbyusername(username",{"_index":3315,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusercollaborations",{"_index":3238,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercollaborations(pageoptionsdto",{"_index":3250,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["findallusercreatedendorsements",{"_index":1661,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(@param(\"username",{"_index":1737,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findallusercreatedendorsements(@userid",{"_index":3366,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(userid",{"_index":3356,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findallusercreatedendorsements(username",{"_index":1689,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements",{"_index":1662,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(@param(\"username",{"_index":1741,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserreceivedendorsements(@userid",{"_index":3369,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(userid",{"_index":3360,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["findalluserreceivedendorsements(username",{"_index":1693,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findalluserstargazed",{"_index":2745,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstargazed(pageoptionsdto",{"_index":2757,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["findalluserstarred",{"_index":2700,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findalluserstarred(pageoptionsdto",{"_index":2715,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["findallusersubmitted",{"_index":2783,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findallusersubmitted(pageoptionsdto",{"_index":2794,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["findalluservoted",{"_index":2819,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findalluservoted(pageoptionsdto",{"_index":2831,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findallwithfilters",{"_index":2439,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findallwithfilters(pageoptionsdto",{"_index":2454,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["findbycustomerid",{"_index":928,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbycustomerid(id",{"_index":937,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid",{"_index":929,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findbyid(id",{"_index":939,"title":{},"body":{"injectables/CustomerService.html":{}}}],["findcontributorpullrequests",{"_index":3308,"title":{},"body":{"controllers/UserController.html":{}}}],["findcontributorpullrequests(username",{"_index":3319,"title":{},"body":{"controllers/UserController.html":{}}}],["findendorsementbyid",{"_index":1663,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(@param(\"id",{"_index":1734,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findendorsementbyid(id",{"_index":1696,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["findinsightpagebyid",{"_index":2056,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(@param(\"id",{"_index":2081,"title":{},"body":{"controllers/InsightController.html":{}}}],["findinsightpagebyid(id",{"_index":2058,"title":{},"body":{"controllers/InsightController.html":{}}}],["findnewcontributorsintimerange",{"_index":2440,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findnewcontributorsintimerange(pageoptionsdto",{"_index":2456,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["findonebyemail",{"_index":3825,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":3841,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1759,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyid(@param(\"id",{"_index":2538,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyid(id",{"_index":1777,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["findonebyownerandrepo",{"_index":2522,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyownerandrepo(@param(\"owner",{"_index":2540,"title":{},"body":{"controllers/RepoController.html":{}}}],["findonebyownerandrepo(owner",{"_index":2531,"title":{},"body":{"controllers/RepoController.html":{},"injectables/RepoService.html":{}}}],["findonebyrepoid",{"_index":2820,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyrepoid(@param(\"repoid",{"_index":2852,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["findonebyrepoid(repoid",{"_index":2835,"title":{},"body":{"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{}}}],["findonebyusername",{"_index":3826,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":3845,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyid",{"_index":3309,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(@param(\"username",{"_index":3341,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyid(username",{"_index":3324,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserbyuserame",{"_index":3326,"title":{},"body":{"controllers/UserController.html":{}}}],["findoneuserhighlightreaction",{"_index":3517,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findoneuserhighlightreaction(highlightid",{"_index":3545,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["findrecommendations",{"_index":2618,"title":{},"body":{"injectables/RepoService.html":{}}}],["findrecommendations(interests",{"_index":2631,"title":{},"body":{"injectables/RepoService.html":{}}}],["finds",{"_index":1672,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{}}}],["findtopusers",{"_index":3827,"title":{},"body":{"injectables/UserService.html":{}}}],["findtopusers(pageoptionsdto",{"_index":3847,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserfollowerbyid",{"_index":3374,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserfollowerbyid(userid",{"_index":3384,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["finduserreporecommendations",{"_index":3782,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(@userid",{"_index":3791,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["finduserreporecommendations(userid",{"_index":3783,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["first",{"_index":863,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{}}}],["fitness",{"_index":5053,"title":{},"body":{"license.html":{}}}],["fix",{"_index":4147,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fix(cli",{"_index":1325,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["fixed",{"_index":1900,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["fixes",{"_index":3999,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":1130,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"classes/PageMetaDto.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["flight",{"_index":4741,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":4964,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1600,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["follow.controller",{"_index":3716,"title":{},"body":{"modules/UserModule.html":{}}}],["follow.controller.ts",{"_index":3406,"title":{},"body":{"controllers/UserFollowsController.html":{},"coverage.html":{}}}],["follow.controller.ts:30",{"_index":3418,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:48",{"_index":3414,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.controller.ts:70",{"_index":3424,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follow.service",{"_index":3425,"title":{},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follow.service.ts",{"_index":3372,"title":{},"body":{"injectables/UserFollowService.html":{},"coverage.html":{}}}],["follow.service.ts:10",{"_index":3378,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:18",{"_index":3383,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:24",{"_index":3386,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:40",{"_index":3382,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["follow.service.ts:69",{"_index":3388,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followed",{"_index":1574,"title":{},"body":{"entities/DbUserNotification.html":{},"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["followeduserid",{"_index":3381,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserNotificationService.html":{}}}],["follower",{"_index":1603,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followers",{"_index":4053,"title":{},"body":{"changelog.html":{}}}],["followeruserid",{"_index":3385,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{}}}],["followexists",{"_index":3395,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["followexists.deleted_at",{"_index":3399,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["following",{"_index":3396,"title":{},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["following_user_id",{"_index":1599,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["follows",{"_index":2771,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{},"index.html":{}}}],["follows'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3468,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["follows'})@apiokresponse({description",{"_index":2762,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["follows.entity",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{}}}],["follows.entity.ts",{"_index":1598,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"coverage.html":{}}}],["follows.entity.ts:15",{"_index":1605,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:22",{"_index":1607,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:29",{"_index":1604,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:39",{"_index":1601,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:49",{"_index":1606,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["follows.entity.ts:56",{"_index":1602,"title":{},"body":{"entities/DbUserToUserFollows.html":{}}}],["followuser",{"_index":3766,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuser.login",{"_index":3769,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["followuserbyid",{"_index":3412,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername",{"_index":3407,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["followuserbyusername(username",{"_index":3410,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["follweruserid",{"_index":3542,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["force",{"_index":4262,"title":{},"body":{"changelog.html":{}}}],["formal",{"_index":1896,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["formal'})@isstring()@isin(['exciting",{"_index":1892,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["format",{"_index":1219,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["formatit",{"_index":4982,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":4308,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":1629,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["found'})@apiconflictresponse({description",{"_index":2708,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":2061,"title":{},"body":{"controllers/InsightController.html":{}}}],["francisco",{"_index":3115,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["free",{"_index":5020,"title":{},"body":{"license.html":{}}}],["french",{"_index":1852,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["from(`(${prevmonthquery.getquery",{"_index":2486,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(dbendorsement",{"_index":1802,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["from(dbpullrequest",{"_index":2474,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["from(entity",{"_index":2643,"title":{},"body":{"injectables/RepoService.html":{}}}],["from_user_id",{"_index":1566,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["full",{"_index":1186,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/RepoInfo.html":{},"changelog.html":{},"index.html":{}}}],["full_name",{"_index":826,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{},"changelog.html":{}}}],["fullname",{"_index":2587,"title":{},"body":{"classes/RepoInfo.html":{},"changelog.html":{}}}],["function",{"_index":4489,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["functionality",{"_index":4541,"title":{},"body":{"changelog.html":{}}}],["functions",{"_index":4866,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":5038,"title":{},"body":{"license.html":{}}}],["garbage",{"_index":4470,"title":{},"body":{"changelog.html":{}}}],["generate",{"_index":545,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{},"index.html":{}}}],["generatecodeexplanation",{"_index":508,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generatecodeexplanationdto",{"_index":506,"title":{"classes/GenerateCodeExplanationDto.html":{}},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"classes/GenerateCodeExplanationDto.html":{},"coverage.html":{}}}],["generatecoderefactor",{"_index":571,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generatecoderefactorsuggestiondto",{"_index":569,"title":{"classes/GenerateCodeRefactorSuggestionDto.html":{}},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"coverage.html":{}}}],["generatecodetest",{"_index":604,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generatecodetestsuggestiondto",{"_index":602,"title":{"classes/GenerateCodeTestSuggestionDto.html":{}},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["generatecompletion",{"_index":2236,"title":{},"body":{"injectables/OpenAiService.html":{}}}],["generatecompletion(systemmessage",{"_index":466,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["generated",{"_index":4508,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generatedescription",{"_index":580,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generatedescription(options",{"_index":582,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateexplanation",{"_index":534,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateexplanation(options",{"_index":538,"title":{},"body":{"injectables/CodeExplanationService.html":{}}}],["generateprdescription",{"_index":504,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(@body",{"_index":529,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["generateprdescription(generatecodeexplanationdto",{"_index":505,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["generateprdescription(generatecoderefactorsuggestiondto",{"_index":568,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["generateprdescription(generatecodetestsuggestiondto",{"_index":601,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["generateprdescription(generatepullrequestdescriptiondto",{"_index":2350,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["generateprompt",{"_index":535,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(language",{"_index":540,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["generateprompt(maxlength",{"_index":611,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatepullrequestdescriptiondto",{"_index":1879,"title":{"classes/GeneratePullRequestDescriptionDto.html":{}},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{}}}],["generates",{"_index":509,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"index.html":{}}}],["generatetestsuggestion",{"_index":610,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generatetestsuggestion(options",{"_index":612,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["generation",{"_index":4281,"title":{},"body":{"changelog.html":{}}}],["generator",{"_index":4283,"title":{},"body":{"changelog.html":{}}}],["german",{"_index":1853,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["get(\"/:id",{"_index":2080,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:id/contributions",{"_index":2512,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:id/reactions",{"_index":2021,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get(\"/:owner/:repo",{"_index":2539,"title":{},"body":{"controllers/RepoController.html":{}}}],["get(\"/:owner/:repo/contributions",{"_index":2517,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get(\"/:repoid/vote",{"_index":2851,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/:username",{"_index":3340,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/follow",{"_index":3426,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get(\"/:username/highlights",{"_index":3345,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/prs",{"_index":3342,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/:username/top",{"_index":3348,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/created",{"_index":3365,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/featured",{"_index":2008,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/following",{"_index":3507,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/following/repos",{"_index":3508,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get(\"/insights",{"_index":2342,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get(\"/list",{"_index":2004,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/listuserstargazed",{"_index":2769,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get(\"/listuserstarred",{"_index":2731,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get(\"/listusersubmitted",{"_index":2807,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get(\"/listuservoted",{"_index":2850,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get(\"/new",{"_index":756,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/received",{"_index":3368,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get(\"/recent",{"_index":759,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get(\"/repos",{"_index":3790,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get(\"/repos/:owner/:repo",{"_index":1725,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:owner/:repo/byuser",{"_index":1729,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/:repoowneroruser",{"_index":1722,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/repos/list",{"_index":2017,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get(\"/search",{"_index":733,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get(\"/service",{"_index":1928,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\"/session",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"/top",{"_index":3350,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"/user/:username/created",{"_index":1736,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/user/:username/received",{"_index":1740,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\"/web",{"_index":1941,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(\":id",{"_index":1733,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(\":id/members",{"_index":3632,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["get('/')@apioperation({operationid",{"_index":1625,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["get('/:id')@apioperation({operationid",{"_index":2059,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:id/contributions')@apioperation({operationid",{"_index":2506,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:id/reactions')@apioperation({operationid",{"_index":1986,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["get('/:owner/:repo')@apioperation({operationid",{"_index":2532,"title":{},"body":{"controllers/RepoController.html":{}}}],["get('/:owner/:repo/contributions')@apioperation({operationid",{"_index":2500,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["get('/:repoid/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2836,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/:username')@apioperation({operationid",{"_index":3325,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3416,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["get('/:username/highlights')@apioperation({operationid",{"_index":3312,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/prs')@apioperation({operationid",{"_index":3320,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:username/top",{"_index":3316,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/created')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3357,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/featured')@apioperation({operationid",{"_index":1975,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/following')@apioperation({operationid",{"_index":3472,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/following/repos')@apioperation({operationid",{"_index":3466,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["get('/insights')@apioperation({operationid",{"_index":2321,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["get('/list')@apioperation({operationid",{"_index":1983,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/listuserstargazed')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2758,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["get('/listuserstarred')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2716,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["get('/listusersubmitted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2795,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["get('/listuservoted')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2832,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["get('/new')@apioperation({operationid",{"_index":751,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/received')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3361,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["get('/recent')@apioperation({operationid",{"_index":744,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["get('/repos')@apioperation({operationid",{"_index":3784,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["get('/repos/:owner/:repo')@apioperation({operationid",{"_index":1686,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/:repoowneroruser')@apioperation({operationid",{"_index":1678,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/repos/list')@apioperation({operationid",{"_index":1979,"title":{},"body":{"controllers/HighlightController.html":{}}}],["get('/search')@apioperation({operationid",{"_index":714,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{}}}],["get('/service')@apioperation({operationid",{"_index":1911,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/top')@apioperation({operationid",{"_index":3330,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/user/:username/created')@apioperation({operationid",{"_index":1690,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/user/:username/received')@apioperation({operationid",{"_index":1694,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get('/web')@apioperation({operationid",{"_index":1915,"title":{},"body":{"controllers/HealthController.html":{}}}],["get(':id')@apioperation({operationid",{"_index":1697,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["get(':id/members')@apioperation({operationid",{"_index":3616,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["getallhighlightreactions",{"_index":1963,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(@param(\"id",{"_index":2022,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightreactions(id",{"_index":1985,"title":{},"body":{"controllers/HighlightController.html":{}}}],["getallhighlightuserreactions",{"_index":3439,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getallhighlightuserreactions(id",{"_index":3463,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getcontributorrangequerybuilder",{"_index":2441,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getcontributorrangequerybuilder(start",{"_index":2458,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["getdomain",{"_index":4839,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdomain(\"admin",{"_index":5166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"app",{"_index":5161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"docs",{"_index":5163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"explore",{"_index":5165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdomain(\"hot",{"_index":5162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getfollowinghighlightrepos",{"_index":3440,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlightrepos(pageoptionsdto",{"_index":3465,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights",{"_index":3441,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowinghighlights(pageoptionsdto",{"_index":3471,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getfollowstatusbyusername",{"_index":3408,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getfollowstatusbyusername(username",{"_index":3415,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["getinsight",{"_index":2377,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getinsight(interval",{"_index":2384,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["getpullrequestinsights",{"_index":2317,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(@query",{"_index":2344,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getpullrequestinsights(pageoptionsdto",{"_index":2320,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["getrepofilters",{"_index":2553,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["getrepofilters(options",{"_index":2557,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["gets",{"_index":745,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["getschemapath(model",{"_index":5133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pagedto",{"_index":5132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getsession",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(@user",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsession(user",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["getskip",{"_index":2289,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["getstripe",{"_index":2930,"title":{},"body":{"injectables/StripeService.html":{}}}],["getting",{"_index":3961,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{}}}],["gettop10highlights",{"_index":3331,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers",{"_index":3310,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(@query",{"_index":3351,"title":{},"body":{"controllers/UserController.html":{}}}],["gettopusers(pageoptionsdto",{"_index":3329,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserhighlight",{"_index":3442,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(@param(\"id",{"_index":3487,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getuserhighlight(id",{"_index":3474,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["getusernotifications",{"_index":3723,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getusernotifications(userid",{"_index":3724,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["getvotequery",{"_index":3934,"title":{},"body":{"injectables/VoteService.html":{}}}],["getvotequery(repoid",{"_index":3943,"title":{},"body":{"injectables/VoteService.html":{}}}],["ghcr.io/open",{"_index":4977,"title":{},"body":{"index.html":{}}}],["git",{"_index":4152,"title":{},"body":{"changelog.html":{}}}],["git+https://github.com/open",{"_index":5089,"title":{},"body":{"properties.html":{}}}],["github",{"_index":594,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbContribution.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["github\")[0",{"_index":3893,"title":{},"body":{"injectables/UserService.html":{}}}],["github.com/open",{"_index":875,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["github.created_at",{"_index":3904,"title":{},"body":{"injectables/UserService.html":{}}}],["github_sponsors_url",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["given",{"_index":546,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"controllers/ContributorInsightsController.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["globals",{"_index":4129,"title":{},"body":{"changelog.html":{}}}],["goes",{"_index":1225,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["gpt",{"_index":5176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["granted",{"_index":5019,"title":{},"body":{"license.html":{}}}],["graph",{"_index":5071,"title":{},"body":{"modules.html":{},"properties.html":{}}}],["groupby(\"login",{"_index":3870,"title":{},"body":{"injectables/UserService.html":{}}}],["groupby(\"users.login",{"_index":1806,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["grouped",{"_index":1731,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["guard",{"_index":1810,"title":{"guards/EndorsementTokenGuard.html":{}},"body":{"changelog.html":{},"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":2730,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["guards",{"_index":1811,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["guide",{"_index":4998,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":4999,"title":{},"body":{"index.html":{}}}],["hack",{"_index":4139,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":3879,"title":{},"body":{"injectables/UserService.html":{}}}],["handler",{"_index":4546,"title":{},"body":{"changelog.html":{}}}],["handlestripewebhook",{"_index":2979,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(@req",{"_index":3035,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["handlestripewebhook(req",{"_index":2981,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["hasnextpage",{"_index":2256,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":2257,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["hasty",{"_index":4528,"title":{},"body":{"changelog.html":{}}}],["headers",{"_index":479,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/OpenAiService.html":{}}}],["headers(\"x",{"_index":1715,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["health",{"_index":1909,"title":{},"body":{"controllers/HealthController.html":{},"changelog.html":{}}}],["health.controller",{"_index":1955,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1921,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1918,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1907,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":35,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["healthstatusservice",{"_index":1912,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthstatusweb",{"_index":1916,"title":{},"body":{"controllers/HealthController.html":{}}}],["hello@opensauced.pizza",{"_index":835,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateUserDto.html":{}}}],["hello@opensauced.pizza'})@column({type",{"_index":1169,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["hello@opensauced.pizza'})@isemail",{"_index":832,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["hereby",{"_index":5018,"title":{},"body":{"license.html":{}}}],["hey",{"_index":1479,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["hidden",{"_index":4492,"title":{},"body":{"changelog.html":{}}}],["hide",{"_index":4506,"title":{},"body":{"changelog.html":{}}}],["highlight",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{},"coverage.html":{}}}],["highlight'})@apibadrequestresponse({description",{"_index":1972,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight'})@apiokresponse({type",{"_index":1987,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["highlight.controller",{"_index":2027,"title":{},"body":{"modules/HighlightModule.html":{},"modules/UserModule.html":{}}}],["highlight.controller.ts",{"_index":3433,"title":{},"body":{"controllers/UserHighlightsController.html":{},"coverage.html":{}}}],["highlight.controller.ts:106",{"_index":3458,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:125",{"_index":3464,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:143",{"_index":3449,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:166",{"_index":3462,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:188",{"_index":3473,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:204",{"_index":3470,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:52",{"_index":3454,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:67",{"_index":3475,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.controller.ts:82",{"_index":3478,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.created_at",{"_index":3494,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight.dto",{"_index":3481,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight.dto.ts",{"_index":860,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["highlight.dto.ts:11",{"_index":877,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:20",{"_index":874,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:30",{"_index":866,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.dto.ts:39",{"_index":872,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["highlight.entity",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{}}}],["highlight.entity.ts",{"_index":1498,"title":{},"body":{"entities/DbUserHighlight.html":{},"coverage.html":{}}}],["highlight.entity.ts:100",{"_index":1521,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:107",{"_index":1502,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:114",{"_index":1518,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:125",{"_index":1506,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:136",{"_index":1513,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:147",{"_index":1512,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:155",{"_index":1525,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:163",{"_index":1517,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:29",{"_index":1510,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:36",{"_index":1527,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:43",{"_index":1523,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:50",{"_index":1520,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:60",{"_index":1509,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:70",{"_index":1514,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:80",{"_index":1505,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.entity.ts:90",{"_index":1501,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlight.highlight",{"_index":3579,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.shipped_at",{"_index":3581,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.title",{"_index":3580,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.url",{"_index":3578,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlight.user_id",{"_index":3502,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/dtos/highlight",{"_index":3482,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight/entities/user",{"_index":3483,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["highlight/highlight.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["highlight_id",{"_index":1516,"title":{},"body":{"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserHighlightsService.html":{}}}],["highlight_reaction",{"_index":4865,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["highlightcontroller",{"_index":1956,"title":{"controllers/HighlightController.html":{}},"body":{"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"coverage.html":{}}}],["highlightid",{"_index":3450,"title":{},"body":{"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["highlightmodule",{"_index":36,"title":{"modules/HighlightModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HighlightModule.html":{},"modules.html":{},"overview.html":{}}}],["highlightoptionsdto",{"_index":1559,"title":{"classes/HighlightOptionsDto.html":{}},"body":{"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlightreaction",{"_index":1090,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"miscellaneous/enumerations.html":{}}}],["highlightreaction.emoji",{"_index":1091,"title":{},"body":{"entities/DbEmoji.html":{}}}],["highlightreaction.highlight",{"_index":1531,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlightreaction.highlight)@joincolumn({name",{"_index":1515,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["highlights",{"_index":1958,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["highlights.service",{"_index":2001,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{}}}],["highlights.service.ts",{"_index":3509,"title":{},"body":{"injectables/UserHighlightsService.html":{},"coverage.html":{}}}],["highlights.service.ts:110",{"_index":3525,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:129",{"_index":3548,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:149",{"_index":3543,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:17",{"_index":3522,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:189",{"_index":3537,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:200",{"_index":3527,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:212",{"_index":3550,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:216",{"_index":3533,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:220",{"_index":3541,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:239",{"_index":3546,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:256",{"_index":3530,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:28",{"_index":3531,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:288",{"_index":3535,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:34",{"_index":3544,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:55",{"_index":3536,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlights.service.ts:99",{"_index":3539,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["highlightuserid",{"_index":3529,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{}}}],["holders",{"_index":5058,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":5085,"title":{},"body":{"properties.html":{}}}],["host",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"guards/EndorsementTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":1823,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["hot",{"_index":4549,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{}}}],["http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com",{"_index":3567,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["httpcode",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["httphealthindicator",{"_index":1919,"title":{},"body":{"controllers/HealthController.html":{}}}],["httploggermiddleware",{"_index":116,"title":{"injectables/HttpLoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["httpmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["https://api.github.com/repos/denoland/fresh/labels/showcase",{"_index":1295,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4",{"_index":1345,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://avatars.githubusercontent.com/u/25160953?v=4'})@column('text",{"_index":1269,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["https://discord.gg/opensauced",{"_index":3094,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://discord.gg/opensauced'})@isurl()@isoptional",{"_index":3192,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://github.com/open",{"_index":789,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbContribution.html":{},"properties.html":{}}}],["https://github.com/sponsors/open",{"_index":3101,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8",{"_index":1101,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@column({type",{"_index":1094,"title":{},"body":{"entities/DbEmoji.html":{}}}],["https://opensauced.pizza",{"_index":3127,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://opensauced.pizza'})@isurl()@isoptional",{"_index":3217,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas",{"_index":3112,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["https://www.linkedin.com/in/brianldouglas'})@isurl()@isoptional",{"_index":3199,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["httpstatus",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{}}}],["human",{"_index":1217,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["humorous",{"_index":1895,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["id",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["id'})@apinotfoundresponse({description",{"_index":1675,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["id'})@apiokresponse({type",{"_index":1699,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/InsightController.html":{},"controllers/RepoController.html":{}}}],["identifier",{"_index":1021,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["identities",{"_index":3890,"title":{},"body":{"injectables/UserService.html":{}}}],["identities!.filter((identity",{"_index":3891,"title":{},"body":{"injectables/UserService.html":{}}}],["identity.provider",{"_index":3892,"title":{},"body":{"injectables/UserService.html":{}}}],["ids",{"_index":757,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["ids'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":748,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["ignore",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["image",{"_index":4924,"title":{},"body":{"index.html":{}}}],["immediate",{"_index":4753,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":4021,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":950,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["implied",{"_index":5049,"title":{},"body":{"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{}}}],["improve",{"_index":4432,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":4124,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":5044,"title":{},"body":{"license.html":{}}}],["includeemail",{"_index":3843,"title":{},"body":{"injectables/UserService.html":{}}}],["including",{"_index":4176,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["inclusion",{"_index":4284,"title":{},"body":{"changelog.html":{}}}],["increase",{"_index":4453,"title":{},"body":{"changelog.html":{}}}],["index",{"_index":261,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexer",{"_index":4200,"title":{},"body":{"changelog.html":{}}}],["indexes",{"_index":4198,"title":{},"body":{"changelog.html":{}}}],["indicated",{"_index":3105,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["indicating",{"_index":1131,"title":{},"body":{"entities/DbInsight.html":{},"classes/PageMetaDto.html":{}}}],["individual",{"_index":4338,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["info.dto",{"_index":823,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["info.dto.ts",{"_index":2586,"title":{},"body":{"classes/RepoInfo.html":{},"coverage.html":{}}}],["info.dto.ts:11",{"_index":2591,"title":{},"body":{"classes/RepoInfo.html":{}}}],["info.dto.ts:19",{"_index":2589,"title":{},"body":{"classes/RepoInfo.html":{}}}],["information",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateInsightDto.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apibadrequestresponse({description",{"_index":2352,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["information'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3625,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["information'})@apiokresponse({type",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["informative",{"_index":1894,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["inherited",{"_index":650,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["initial",{"_index":4803,"title":{},"body":{"changelog.html":{}}}],["inject",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":458,"title":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{}}}],["injectables",{"_index":532,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"overview.html":{}}}],["injectdatasource",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"apiconnection",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["injectdatasource(\"logconnection",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":685,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["injectrepository(dbcontribution",{"_index":693,"title":{},"body":{"injectables/ContributionService.html":{}}}],["injectrepository(dbcustomer",{"_index":941,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(dbemoji",{"_index":1650,"title":{},"body":{"injectables/EmojiService.html":{}}}],["injectrepository(dbendorsement",{"_index":1783,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["injectrepository(dbinsight",{"_index":2197,"title":{},"body":{"injectables/InsightsService.html":{}}}],["injectrepository(dbinsightmember",{"_index":2117,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["injectrepository(dbinsightrepo",{"_index":2161,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["injectrepository(dblog",{"_index":2227,"title":{},"body":{"injectables/LogService.html":{}}}],["injectrepository(dbprinsight",{"_index":2391,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["injectrepository(dbpullrequest",{"_index":2460,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["injectrepository(dbrepo",{"_index":2637,"title":{},"body":{"injectables/RepoService.html":{}}}],["injectrepository(dbrepotouserstargazers",{"_index":2908,"title":{},"body":{"injectables/StargazeService.html":{}}}],["injectrepository(dbrepotouserstars",{"_index":2880,"title":{},"body":{"injectables/StarService.html":{}}}],["injectrepository(dbrepotousersubmissions",{"_index":3075,"title":{},"body":{"injectables/SubmitService.html":{}}}],["injectrepository(dbrepotouservotes",{"_index":3947,"title":{},"body":{"injectables/VoteService.html":{}}}],["injectrepository(dbsubscription",{"_index":2967,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["injectrepository(dbuser",{"_index":3864,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(dbusercollaboration",{"_index":3294,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["injectrepository(dbuserhighlight",{"_index":3551,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["injectrepository(dbuserhighlightreaction",{"_index":3552,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(dbusernotification",{"_index":3751,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["injectrepository(dbuserrepo",{"_index":3816,"title":{},"body":{"injectables/UserReposService.html":{}}}],["injectrepository(dbusertouserfollows",{"_index":3390,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["innerjoin(\"insights",{"_index":2132,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["innerjoin(\"repos",{"_index":1792,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{}}}],["innerjoin(\"users",{"_index":3554,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["innerjoinandselect(\"user_collaborations.request_user",{"_index":3301,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(\"user_collaborations.user",{"_index":3300,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["innerjoinandselect(`insights.user",{"_index":2200,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insert",{"_index":1177,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{}}}],["inserting/updating",{"_index":3031,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["insight",{"_index":808,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{}}}],["insight'})@apibadrequestresponse({description",{"_index":2068,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightsController.html":{}}}],["insight'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":3611,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insight.controller",{"_index":2173,"title":{},"body":{"modules/InsightsModule.html":{}}}],["insight.controller.ts",{"_index":3662,"title":{},"body":{"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insight.controller.ts:106",{"_index":3670,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:58",{"_index":3667,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.controller.ts:76",{"_index":3665,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight.dto",{"_index":2074,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["insight.dto.ts",{"_index":804,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{},"coverage.html":{}}}],["insight.dto.ts:14",{"_index":813,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:22",{"_index":811,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.dto.ts:32",{"_index":819,"title":{},"body":{"classes/CreateInsightDto.html":{}}}],["insight.entity",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsightRepo.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{}}}],["insight.entity.ts",{"_index":1205,"title":{},"body":{"entities/DbPRInsight.html":{},"coverage.html":{}}}],["insight.entity.ts:14",{"_index":1223,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:26",{"_index":1230,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:37",{"_index":1221,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:48",{"_index":1214,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:59",{"_index":1213,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.entity.ts:70",{"_index":1232,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["insight.id",{"_index":3637,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insight.repos",{"_index":1195,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos)@joincolumn({name",{"_index":1190,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["insight.repos.filter((insightrepo",{"_index":3687,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insight/dtos/insight",{"_index":1840,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["insight/entities/insight",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/entities/insight.entity",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["insight/insights.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["insight_id",{"_index":1156,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insight_members",{"_index":1181,"title":{},"body":{"entities/DbInsightMember.html":{},"injectables/InsightsService.html":{}}}],["insight_members.insight_id=insights.id",{"_index":2133,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members.user_id=users.id",{"_index":2134,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_invitation_email",{"_index":2131,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_members_name",{"_index":2129,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insight_repos",{"_index":1194,"title":{},"body":{"entities/DbInsightRepo.html":{},"injectables/InsightsService.html":{}}}],["insightcontroller",{"_index":2054,"title":{"controllers/InsightController.html":{}},"body":{"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"coverage.html":{}}}],["insightfilterfieldsenum",{"_index":1831,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["insightfilterfieldsenum'})@isenum(insightfilterfieldsenum)@isoptional",{"_index":1832,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["insightfilterfieldsenum.mostspammed",{"_index":2578,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.recent",{"_index":2570,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightfilterfieldsenum.top100",{"_index":2572,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["insightid",{"_index":2105,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember",{"_index":2101,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["insightmember.access",{"_index":3654,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["insightmemberrepository",{"_index":2098,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightmemberservice",{"_index":2087,"title":{"injectables/InsightMemberService.html":{}},"body":{"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightoptionsdto",{"_index":2136,"title":{"classes/InsightOptionsDto.html":{}},"body":{"classes/InsightOptionsDto.html":{},"coverage.html":{}}}],["insightpageoptionsdto",{"_index":2149,"title":{"classes/InsightPageOptionsDto.html":{}},"body":{"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["insightrepo",{"_index":1138,"title":{},"body":{"entities/DbInsight.html":{},"controllers/UserInsightsController.html":{}}}],["insightrepo.deleted_at",{"_index":3688,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightrepo.insight",{"_index":1139,"title":{},"body":{"entities/DbInsight.html":{}}}],["insightreporepository",{"_index":2156,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["insightreposervice",{"_index":2150,"title":{"injectables/InsightRepoService.html":{}},"body":{"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["insightrepository",{"_index":2185,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights",{"_index":1151,"title":{},"body":{"entities/DbInsight.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"index.html":{}}}],["insights.controller",{"_index":765,"title":{},"body":{"modules/ContributorModule.html":{}}}],["insights.controller.ts",{"_index":738,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["insights.controller.ts:23",{"_index":753,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.controller.ts:36",{"_index":749,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["insights.dto",{"_index":754,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"injectables/PullRequestService.html":{}}}],["insights.dto.ts",{"_index":2310,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{},"coverage.html":{}}}],["insights.dto.ts:11",{"_index":2312,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["insights.id",{"_index":2208,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.id=insight_repos.insight_id",{"_index":2202,"title":{},"body":{"injectables/InsightsService.html":{}}}],["insights.service",{"_index":2077,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["insights.service.ts",{"_index":2376,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"coverage.html":{}}}],["insights.service.ts:10",{"_index":2381,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:17",{"_index":2383,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:21",{"_index":2387,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights.service.ts:44",{"_index":2385,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["insights_role",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["insightservice",{"_index":2096,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["insightsmodule",{"_index":37,"title":{"modules/InsightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InsightsModule.html":{},"modules.html":{},"overview.html":{}}}],["insightsreposervice",{"_index":3672,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["insightsservice",{"_index":2076,"title":{"injectables/InsightsService.html":{}},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{},"overview.html":{}}}],["inspection",{"_index":4707,"title":{},"body":{"changelog.html":{}}}],["install",{"_index":4944,"title":{},"body":{"index.html":{}}}],["installation",{"_index":4943,"title":{},"body":{"index.html":{}}}],["installed",{"_index":4876,"title":{},"body":{"index.html":{}}}],["instance",{"_index":4882,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":562,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["instead",{"_index":4342,"title":{},"body":{"changelog.html":{}}}],["instructions",{"_index":589,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["integer",{"_index":1082,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"injectables/UserService.html":{}}}],["integration",{"_index":3993,"title":{},"body":{"changelog.html":{}}}],["integrations",{"_index":5083,"title":{},"body":{"properties.html":{}}}],["interest",{"_index":2689,"title":{},"body":{"injectables/RepoService.html":{}}}],["interests",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RepoService.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["interests.dto",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["interests.dto.ts",{"_index":3229,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["interests.dto.ts:12",{"_index":3231,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{}}}],["interests.map(async",{"_index":2688,"title":{},"body":{"injectables/RepoService.html":{}}}],["interface",{"_index":450,"title":{"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["interfaces",{"_index":452,"title":{},"body":{"interfaces/ChatResponse.html":{},"interfaces/PageMetaParameters.html":{},"interfaces/PaginationInput.html":{},"overview.html":{}}}],["internal",{"_index":1304,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["interval",{"_index":1209,"title":{},"body":{"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["invalid",{"_index":513,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["invitation",{"_index":1168,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_email",{"_index":1157,"title":{},"body":{"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{}}}],["invitation_emailed_at",{"_index":1158,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["invite",{"_index":831,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbUserNotification.html":{}}}],["invites",{"_index":4246,"title":{},"body":{"changelog.html":{}}}],["is_accepted",{"_index":1385,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"changelog.html":{}}}],["is_favorite",{"_index":1121,"title":{},"body":{"entities/DbInsight.html":{}}}],["is_onboarded",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["is_open_sauced_member",{"_index":3898,"title":{},"body":{"injectables/UserService.html":{}}}],["is_public",{"_index":805,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{}}}],["is_waitlisted",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["isarray",{"_index":817,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":2244,"title":{},"body":{"classes/PageDto.html":{}}}],["isboolean",{"_index":821,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["iscreatinglogs",{"_index":2231,"title":{},"body":{"injectables/LogService.html":{}}}],["isdatestring",{"_index":878,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["isemail",{"_index":834,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":665,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(contributionorderfieldsenum",{"_index":674,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["isenum(insightfilterfieldsenum",{"_index":1841,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["isenum(orderdirectionenum",{"_index":2295,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(pullrequestorderfieldsenum",{"_index":2433,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(pullrequeststatusenum",{"_index":2434,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["isenum(repoorderfieldsenum",{"_index":2612,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["isglobal",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1865,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"accept",{"_index":3185,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{}}}],["isin([\"english",{"_index":1872,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"exciting",{"_index":1898,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["isin([\"view",{"_index":3179,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["isin([7",{"_index":2296,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isint",{"_index":2291,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["ismember",{"_index":3641,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["isnumber",{"_index":796,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/RepoInfo.html":{}}}],["isoptional",{"_index":666,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["isoptional()@isstring",{"_index":839,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["isstring",{"_index":795,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["isstring()@isoptional",{"_index":787,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/FilterOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["issues",{"_index":2603,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["isurl",{"_index":3219,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isvalid",{"_index":1826,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["it'})@apiokresponse({type",{"_index":2837,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["italian",{"_index":1854,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["item",{"_index":1808,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["item.id",{"_index":2516,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["itemcount",{"_index":704,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["items",{"_index":2264,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":2314,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["javascript'})@isstring()@isoptional",{"_index":2313,"title":{},"body":{"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["javscript",{"_index":2140,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["javscript'})@isstring()@isoptional",{"_index":2141,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["job",{"_index":4651,"title":{},"body":{"changelog.html":{}}}],["jobs",{"_index":4760,"title":{},"body":{"changelog.html":{}}}],["join",{"_index":4244,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["join(\"\\n",{"_index":554,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["joincolumn",{"_index":1046,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["js",{"_index":3862,"title":{},"body":{"injectables/UserService.html":{}}}],["js/dist/module/lib/types",{"_index":461,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json",{"_index":4138,"title":{},"body":{"changelog.html":{}}}],["json.stringify",{"_index":484,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["json.stringify(parameters",{"_index":989,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["json.stringify(subscription.metadata",{"_index":3010,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["jwt",{"_index":3145,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["key",{"_index":4886,"title":{},"body":{"index.html":{}}}],["keyout",{"_index":4916,"title":{},"body":{"index.html":{}}}],["keywords",{"_index":5084,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":5048,"title":{},"body":{"license.html":{}}}],["korean",{"_index":1859,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["la_kwdofcv7488aaaabcar",{"_index":1300,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label",{"_index":1290,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["label_names",{"_index":1247,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["labels",{"_index":1248,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["landing",{"_index":5160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":543,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["last",{"_index":747,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/PullRequestController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_merged_at",{"_index":672,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"miscellaneous/enumerations.html":{}}}],["last_sign_in_at",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["last_updated_at",{"_index":1249,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["latest",{"_index":3007,"title":{},"body":{"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["leave",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{}}}],["left",{"_index":4243,"title":{},"body":{"changelog.html":{}}}],["leftjoin",{"_index":2488,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["leftjoin(\"users",{"_index":1794,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{}}}],["leftjoinandmapmany(\"repo.contributions",{"_index":2651,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(\"repo.user",{"_index":2649,"title":{},"body":{"injectables/RepoService.html":{}}}],["leftjoinandselect(`insights.repos",{"_index":2201,"title":{},"body":{"injectables/InsightsService.html":{}}}],["leftjoinandselect(dbrepotouserstars",{"_index":2650,"title":{},"body":{"injectables/RepoService.html":{}}}],["lenght",{"_index":4305,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":999,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["letters",{"_index":3210,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["level",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{}}}],["levelfirst",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["leverage",{"_index":4967,"title":{},"body":{"index.html":{}}}],["liability",{"_index":5062,"title":{},"body":{"license.html":{}}}],["liable",{"_index":5059,"title":{},"body":{"license.html":{}}}],["lib",{"_index":4963,"title":{},"body":{"index.html":{}}}],["library",{"_index":4182,"title":{},"body":{"changelog.html":{}}}],["license",{"_index":4214,"title":{"license.html":{}},"body":{"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["limit",{"_index":634,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["limit(1",{"_index":2403,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["limit(pageoptionsdto.limit",{"_index":703,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["limitation",{"_index":5027,"title":{},"body":{"license.html":{}}}],["limited",{"_index":5050,"title":{},"body":{"license.html":{}}}],["limits",{"_index":4464,"title":{},"body":{"changelog.html":{}}}],["line",{"_index":472,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserHighlightsService.html":{}}}],["line_items",{"_index":2943,"title":{},"body":{"injectables/StripeService.html":{}}}],["lines",{"_index":1259,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["link",{"_index":4558,"title":{},"body":{"changelog.html":{}}}],["linkedin",{"_index":3111,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["linkedin_url",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["links",{"_index":4630,"title":{},"body":{"changelog.html":{}}}],["lint",{"_index":4495,"title":{},"body":{"changelog.html":{}}}],["linting",{"_index":4442,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["lintthis",{"_index":4979,"title":{},"body":{"index.html":{}}}],["list",{"_index":2012,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["list'})@useguards(supabaseguard)@apibearerauth()@apiokresponse({type",{"_index":1969,"title":{},"body":{"controllers/HighlightController.html":{}}}],["listallpullrequests",{"_index":2318,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(@query",{"_index":2338,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listallpullrequests(pageoptionsdto",{"_index":2326,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["listing",{"_index":1626,"title":{},"body":{"controllers/EmojiController.html":{},"controllers/RepoContributionsController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["literal",{"_index":457,"title":{},"body":{"interfaces/ChatResponse.html":{}}}],["live",{"_index":4868,"title":{},"body":{"index.html":{}}}],["load",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["loading",{"_index":4409,"title":{},"body":{"changelog.html":{}}}],["loadrelationcountandmap(\"repo.contributionscount",{"_index":2658,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.stargazerscount",{"_index":2661,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.starscount",{"_index":2662,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.submissionscount",{"_index":2660,"title":{},"body":{"injectables/RepoService.html":{}}}],["loadrelationcountandmap(\"repo.votescount",{"_index":2659,"title":{},"body":{"injectables/RepoService.html":{}}}],["local",{"_index":3096,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["localhost",{"_index":5139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":4898,"title":{},"body":{"index.html":{}}}],["location",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["log",{"_index":889,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/LogService.html":{}}}],["log(level",{"_index":960,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["log(message",{"_index":901,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["log.dto",{"_index":2226,"title":{},"body":{"injectables/LogService.html":{}}}],["log.dto.ts",{"_index":838,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["log.dto.ts:10",{"_index":842,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:14",{"_index":841,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.dto.ts:6",{"_index":840,"title":{},"body":{"classes/CreateLogDto.html":{}}}],["log.entity",{"_index":2216,"title":{},"body":{"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["log.service",{"_index":909,"title":{},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{}}}],["log/log.entity",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["logconnection",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{}}}],["logger",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"modules/LogModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["logger(`http",{"_index":2035,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger(`stripewebhook",{"_index":2999,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["logger.middleware",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["logger.middleware.ts",{"_index":949,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["logger.middleware.ts:11",{"_index":2034,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.middleware.ts:12",{"_index":966,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:20",{"_index":968,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:28",{"_index":970,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:38",{"_index":964,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:42",{"_index":973,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:46",{"_index":962,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:6",{"_index":959,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:61",{"_index":975,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logger.middleware.ts:9",{"_index":2036,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["logger.service",{"_index":908,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts",{"_index":885,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["logger.ts:19",{"_index":902,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:29",{"_index":900,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:39",{"_index":906,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:49",{"_index":897,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:59",{"_index":904,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logger.ts:8",{"_index":895,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["loggermodule",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forrootasync",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":4335,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["logging.certificate",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.config.ts",{"_index":4837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging.connection",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.database",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.host",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.maxqueryexecutiontime",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.password",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.port",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["logging.username",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["logic",{"_index":4962,"title":{},"body":{"index.html":{}}}],["login",{"_index":1466,"title":{},"body":{"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["loglevels",{"_index":911,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["logmigration",{"_index":952,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmigration(message",{"_index":963,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logmodule",{"_index":2211,"title":{"modules/LogModule.html":{}},"body":{"modules/LogModule.html":{},"modules.html":{},"overview.html":{}}}],["logquery",{"_index":953,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logquery(query",{"_index":965,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror",{"_index":954,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryerror(error",{"_index":967,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow",{"_index":955,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logqueryslow(time",{"_index":969,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logs",{"_index":1203,"title":{},"body":{"entities/DbLog.html":{}}}],["logschemabuild",{"_index":956,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logschemabuild(message",{"_index":972,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["logservice",{"_index":894,"title":{"injectables/LogService.html":{}},"body":{"injectables/CustomLogger.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"coverage.html":{},"overview.html":{}}}],["logsrepository",{"_index":2223,"title":{},"body":{"injectables/LogService.html":{}}}],["logsservice",{"_index":887,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["lower(\"open_pull_requests\".\"state",{"_index":2666,"title":{},"body":{"injectables/RepoService.html":{}}}],["lower(author_login",{"_index":3889,"title":{},"body":{"injectables/UserService.html":{}}}],["lowercase",{"_index":4227,"title":{},"body":{"changelog.html":{}}}],["machine",{"_index":4941,"title":{},"body":{"index.html":{}}}],["machines",{"_index":4877,"title":{},"body":{"index.html":{}}}],["made",{"_index":1507,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["main",{"_index":1342,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["main'})@column('text",{"_index":1314,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["make",{"_index":3187,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["maker",{"_index":3221,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["maker'})@isstring",{"_index":3203,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["managed",{"_index":4533,"title":{},"body":{"changelog.html":{}}}],["managesubscriptionstatuschange",{"_index":2980,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managesubscriptionstatuschange(subscriptionid",{"_index":2986,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["managing",{"_index":4089,"title":{},"body":{"changelog.html":{}}}],["manual",{"_index":4499,"title":{},"body":{"changelog.html":{}}}],["many",{"_index":4593,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["manytoone",{"_index":1045,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["mapping",{"_index":4939,"title":{},"body":{"index.html":{}}}],["marknotificationsasread",{"_index":3734,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["marknotificationsasread(notificationids",{"_index":3748,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["matches",{"_index":3220,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":3222,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matching",{"_index":25,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":2279,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1863,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(10",{"_index":1871,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["max(10000",{"_index":2294,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["max(500",{"_index":1868,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["maximum",{"_index":552,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["maxlength",{"_index":541,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["maxlength(500",{"_index":858,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["maxqueryexecutiontime",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1227,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["mechanics",{"_index":4471,"title":{},"body":{"changelog.html":{}}}],["member",{"_index":830,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"entities/DbInsightMember.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["member'})@apibadrequestresponse({description",{"_index":3613,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member'})@apibody({type",{"_index":3627,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller",{"_index":2175,"title":{},"body":{"modules/InsightsModule.html":{}}}],["member.controller.ts",{"_index":3604,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["member.controller.ts:136",{"_index":3628,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:173",{"_index":3623,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:59",{"_index":3619,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.controller.ts:89",{"_index":3614,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto",{"_index":3630,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["member.dto.ts",{"_index":829,"title":{},"body":{"classes/CreateInsightMemberDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:11",{"_index":833,"title":{},"body":{"classes/CreateInsightMemberDto.html":{}}}],["member.dto.ts:12",{"_index":3178,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["member.entity",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"injectables/InsightMemberService.html":{},"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{}}}],["member.entity.ts",{"_index":1154,"title":{},"body":{"entities/DbInsightMember.html":{},"coverage.html":{}}}],["member.entity.ts:108",{"_index":1170,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:25",{"_index":1165,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:32",{"_index":1167,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:39",{"_index":1180,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:50",{"_index":1178,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:61",{"_index":1161,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:71",{"_index":1162,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:81",{"_index":1179,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:88",{"_index":1163,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.entity.ts:98",{"_index":1173,"title":{},"body":{"entities/DbInsightMember.html":{}}}],["member.service",{"_index":2176,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["member.service.ts",{"_index":2089,"title":{},"body":{"injectables/InsightMemberService.html":{},"coverage.html":{}}}],["member.service.ts:13",{"_index":2097,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:21",{"_index":2102,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:27",{"_index":2111,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:41",{"_index":2100,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:45",{"_index":2115,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:49",{"_index":2113,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:53",{"_index":2108,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["member.service.ts:81",{"_index":2110,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["memberid",{"_index":3621,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["members",{"_index":3617,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["memory",{"_index":1926,"title":{},"body":{"controllers/HealthController.html":{}}}],["memory_heap",{"_index":5114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memory_rss",{"_index":5117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":1922,"title":{},"body":{"controllers/HealthController.html":{}}}],["mentioned",{"_index":550,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["merchantability",{"_index":5052,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1024,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"changelog.html":{},"license.html":{}}}],["mergeable",{"_index":1250,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["merged",{"_index":1251,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["merged_at",{"_index":1252,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["message",{"_index":462,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbLog.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserNotificationService.html":{}}}],["messageformat",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["messages",{"_index":487,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["meta",{"_index":2240,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"changelog.html":{},"coverage.html":{}}}],["meta.dto",{"_index":691,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["meta.dto.ts",{"_index":2255,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:15",{"_index":2268,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":2266,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:27",{"_index":2271,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:33",{"_index":2263,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:39",{"_index":2261,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":2269,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta_id",{"_index":1567,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"changelog.html":{}}}],["metadata",{"_index":1426,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["method",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{}}}],["methods",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["middleware",{"_index":4440,"title":{},"body":{"changelog.html":{}}}],["middlewareconsumer",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":4197,"title":{},"body":{"changelog.html":{}}}],["migrations",{"_index":4174,"title":{},"body":{"changelog.html":{}}}],["min",{"_index":1864,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(0",{"_index":1870,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["min(1",{"_index":2293,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["min(100",{"_index":1867,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["minimal",{"_index":4425,"title":{},"body":{"changelog.html":{}}}],["minimum",{"_index":2145,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/TopUsersDto.html":{},"miscellaneous/enumerations.html":{}}}],["minimumcontributors",{"_index":2144,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["minlength",{"_index":854,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{}}}],["minlength(20",{"_index":857,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["minlength(3",{"_index":881,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["minor",{"_index":4768,"title":{},"body":{"changelog.html":{}}}],["misaligned",{"_index":4187,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":4855,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":4000,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mit",{"_index":5014,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mkdocs",{"_index":4689,"title":{},"body":{"changelog.html":{}}}],["mm",{"_index":2400,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["mocking",{"_index":4971,"title":{},"body":{"index.html":{}}}],["mode",{"_index":2945,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["model",{"_index":485,"title":{},"body":{"interfaces/ChatResponse.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/OpenAiService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["modelname",{"_index":5174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":5029,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HealthModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["months",{"_index":2343,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["months'})@apiokresponse({type",{"_index":2324,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["more",{"_index":4608,"title":{},"body":{"changelog.html":{}}}],["mostactive",{"_index":2146,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mostspammed",{"_index":2147,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["mount",{"_index":4732,"title":{},"body":{"changelog.html":{}}}],["mounted",{"_index":4700,"title":{},"body":{"changelog.html":{}}}],["move",{"_index":4289,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mrpizza",{"_index":3117,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["much",{"_index":4498,"title":{},"body":{"changelog.html":{}}}],["my_postgres_container",{"_index":4933,"title":{},"body":{"index.html":{}}}],["my_postgres_image",{"_index":4925,"title":{},"body":{"index.html":{}}}],["my_postgres_image:latestthis",{"_index":4937,"title":{},"body":{"index.html":{}}}],["n",{"_index":491,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["name",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["named",{"_index":4938,"title":{},"body":{"index.html":{}}}],["names",{"_index":1291,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["naming",{"_index":4490,"title":{},"body":{"changelog.html":{}}}],["navigating",{"_index":4900,"title":{},"body":{"index.html":{}}}],["ncommit",{"_index":2373,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["need",{"_index":4873,"title":{},"body":{"index.html":{}}}],["needs",{"_index":4966,"title":{},"body":{"index.html":{}}}],["nest",{"_index":4756,"title":{},"body":{"changelog.html":{}}}],["nestjs",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/common/services/console",{"_index":907,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["nestjs/common/utils/cli",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ChatResponse.html":{},"injectables/CustomLogger.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"modules/LogModule.html":{},"injectables/OpenAiService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["nestjs/passport",{"_index":446,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{}}}],["nestjs/swagger",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["nestjs/swagger/dist/decorators/api",{"_index":1053,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["nestjs/terminus",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{}}}],["nestjs/typeorm",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"injectables/ContributionService.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"modules/HighlightModule.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{}}}],["nestjs/typeorm/dist/interfaces/typeorm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["nestlogger",{"_index":976,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestlogger(name",{"_index":979,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["nestmiddleware",{"_index":2037,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["never",{"_index":3138,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["new",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/ContributionService.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newcustomer",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{}}}],["newcustomer.stripe_customer_id",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["newinsight",{"_index":3678,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["newinsightmember",{"_index":3646,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["newkey",{"_index":4914,"title":{},"body":{"index.html":{}}}],["newlog",{"_index":2228,"title":{},"body":{"injectables/LogService.html":{}}}],["newpullrequestcontributors",{"_index":741,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newpullrequestcontributors(pageoptionsdto",{"_index":750,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["newuser",{"_index":3900,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.save",{"_index":3906,"title":{},"body":{"injectables/UserService.html":{}}}],["newuserhighlight",{"_index":3576,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["newuserrepo",{"_index":3819,"title":{},"body":{"injectables/UserReposService.html":{}}}],["next",{"_index":471,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"injectables/UserHighlightsService.html":{},"index.html":{}}}],["nextfunction",{"_index":2033,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["node",{"_index":4806,"title":{},"body":{"changelog.html":{}}}],["node>=16.7.0",{"_index":4878,"title":{},"body":{"index.html":{}}}],["node_id",{"_index":1299,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["nodes",{"_index":4918,"title":{},"body":{"index.html":{}}}],["non",{"_index":596,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"changelog.html":{}}}],["noninfringement",{"_index":5056,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":4207,"title":{},"body":{"changelog.html":{}}}],["notable",{"_index":3965,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":4921,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1781,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["notfoundexception(\"unable",{"_index":3920,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"you",{"_index":2889,"title":{},"body":{"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/VoteService.html":{}}}],["notice",{"_index":5042,"title":{},"body":{"license.html":{}}}],["notifcation.service",{"_index":3389,"title":{},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{}}}],["notifcation.service.ts",{"_index":3730,"title":{},"body":{"injectables/UserNotificationService.html":{},"coverage.html":{}}}],["notifcation.service.ts:13",{"_index":3736,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:20",{"_index":3745,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:26",{"_index":3747,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:46",{"_index":3743,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:57",{"_index":3739,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:69",{"_index":3741,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifcation.service.ts:81",{"_index":3749,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification",{"_index":1572,"title":{},"body":{"entities/DbUserNotification.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["notification.constants",{"_index":1588,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["notification.constants.ts",{"_index":4850,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notification.controller",{"_index":3717,"title":{},"body":{"modules/UserModule.html":{}}}],["notification.controller.ts",{"_index":3721,"title":{},"body":{"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["notification.controller.ts:25",{"_index":3727,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["notification.entity",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{}}}],["notification.entity.ts",{"_index":1565,"title":{},"body":{"entities/DbUserNotification.html":{},"coverage.html":{}}}],["notification.entity.ts:15",{"_index":1573,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:22",{"_index":1587,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:29",{"_index":1571,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:40",{"_index":1586,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:50",{"_index":1576,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:60",{"_index":1581,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:70",{"_index":1583,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.entity.ts:80",{"_index":1579,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["notification.id",{"_index":3758,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notification_count",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{}}}],["notificationids",{"_index":3750,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notificationids.map(async",{"_index":3772,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["notifications",{"_index":3725,"title":{},"body":{"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["notified_at",{"_index":1568,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["now",{"_index":1016,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":4191,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm>=8.0.0",{"_index":4879,"title":{},"body":{"index.html":{}}}],["null",{"_index":1346,"title":{},"body":{"entities/DbPullRequest.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["number",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"miscellaneous/variables.html":{}}}],["number(highlight.user_id",{"_index":3500,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["number(insight.user.id",{"_index":2085,"title":{},"body":{"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{}}}],["number(parsefloat(process.env.disk_percengate",{"_index":5121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.disk_size",{"_index":5124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_heap",{"_index":5115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.memory_rss",{"_index":5118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_api",{"_index":5149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(parseint(process.env.typeorm_max_query_execution_time_logging",{"_index":5158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":3211,"title":{},"body":{"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["numerical",{"_index":1224,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["oas3",{"_index":5077,"title":{},"body":{"properties.html":{}}}],["object",{"_index":2561,"title":{},"body":{"injectables/RepoFilterService.html":{},"controllers/StripeWebhookController.html":{},"injectables/UserHighlightsService.html":{}}}],["objectliteral",{"_index":2305,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{}}}],["objects",{"_index":816,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["obtain",{"_index":4902,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":5023,"title":{},"body":{"license.html":{}}}],["ocean",{"_index":4127,"title":{},"body":{"changelog.html":{}}}],["octo",{"_index":5012,"title":{},"body":{"index.html":{}}}],["offset(pageoptionsdto.skip",{"_index":702,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["old",{"_index":4119,"title":{},"body":{"changelog.html":{}}}],["omittype",{"_index":3480,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["omittype(dbuserhighlight",{"_index":3485,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["onboarded",{"_index":3106,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["onboarding",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["onboarding.dto",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["onboarding.dto.ts",{"_index":3776,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["onboarding.dto.ts:12",{"_index":3777,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding.dto.ts:20",{"_index":3779,"title":{},"body":{"classes/UserOnboardingDto.html":{}}}],["onboarding/insight",{"_index":4330,"title":{},"body":{"changelog.html":{}}}],["once",{"_index":4885,"title":{},"body":{"index.html":{}}}],["onetomany",{"_index":1096,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbUserHighlight.html":{}}}],["open",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateInsightDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"classes/HighlightOptionsDto.html":{},"modules/OpenAiModule.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["open_pull_requests",{"_index":2665,"title":{},"body":{"injectables/RepoService.html":{}}}],["open_pull_requests\".\"repo_id",{"_index":2667,"title":{},"body":{"injectables/RepoService.html":{}}}],["openaiconfig",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["openaimodule",{"_index":38,"title":{"modules/OpenAiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules.html":{},"overview.html":{}}}],["openaiservice",{"_index":464,"title":{"injectables/OpenAiService.html":{}},"body":{"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"coverage.html":{},"overview.html":{}}}],["openapi",{"_index":4589,"title":{},"body":{"changelog.html":{}}}],["opening",{"_index":4985,"title":{},"body":{"index.html":{}}}],["opensauced",{"_index":1716,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["opensauced'})@isstring()@isoptional",{"_index":3190,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["opensauced.pizza\"}`).tostring",{"_index":5170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openssl",{"_index":4912,"title":{},"body":{"index.html":{}}}],["operation",{"_index":4398,"title":{},"body":{"changelog.html":{}}}],["operationid",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["optional",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["options",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{}}}],["options.code}\\n",{"_index":555,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["options.commitmessages",{"_index":2372,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.commitmessages.join",{"_index":2374,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.descriptionlength",{"_index":559,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.diff",{"_index":2370,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.diff}\\n",{"_index":2371,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.dto",{"_index":669,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"interfaces/PageMetaParameters.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{}}}],["options.dto.ts",{"_index":630,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["options.dto.ts:13",{"_index":2029,"title":{},"body":{"classes/HighlightOptionsDto.html":{}}}],["options.dto.ts:14",{"_index":1833,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:16",{"_index":2287,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:19",{"_index":2613,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:21",{"_index":645,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:22",{"_index":1839,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:26",{"_index":2138,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:27",{"_index":2427,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":2285,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:30",{"_index":1836,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{}}}],["options.dto.ts:32",{"_index":2614,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["options.dto.ts:33",{"_index":2286,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":2142,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:35",{"_index":1838,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":2601,"title":{},"body":{"classes/RepoPageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":2139,"title":{},"body":{"classes/InsightOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":2288,"title":{},"body":{"classes/PageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:45",{"_index":2290,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:51",{"_index":2428,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:56",{"_index":2429,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:64",{"_index":2432,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.dto.ts:72",{"_index":2423,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["options.filter",{"_index":2569,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.interface",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["options.repo",{"_index":2563,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["options.repoids",{"_index":2407,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.repoids.split",{"_index":2408,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{}}}],["options.temperature",{"_index":560,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["options.tone",{"_index":2375,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["options.topic",{"_index":2566,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["order",{"_index":1080,"title":{},"body":{"entities/DbEmoji.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["orderby",{"_index":633,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["orderby(\"count(user_highlight_reactions.emoji_id",{"_index":3871,"title":{},"body":{"injectables/UserService.html":{}}}],["orderby(\"endorsements.created_at",{"_index":1790,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["orderby(\"insights.updated_at",{"_index":2209,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orderby(\"user_collaborations.updated_at",{"_index":3303,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["orderby(\"user_highlights.updated_at",{"_index":3561,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["orderby(\"users.name",{"_index":2135,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["orderby(`\"repo\".\"is_fork",{"_index":2678,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirection",{"_index":635,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderdirectionenum",{"_index":652,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderdirectionenum.asc",{"_index":2679,"title":{},"body":{"injectables/RepoService.html":{}}}],["orderdirectionenum.desc",{"_index":653,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{}}}],["orderfield",{"_index":696,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["org",{"_index":1679,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["origin",{"_index":1039,"title":{},"body":{"entities/DbContribution.html":{}}}],["originalurl",{"_index":2045,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["orwhere",{"_index":2207,"title":{},"body":{"injectables/InsightsService.html":{}}}],["orwhere(\"lower(users.login",{"_index":1799,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["os.${string(config.get(\"api.codename\")).tolowercase",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["otherwise",{"_index":5065,"title":{},"body":{"license.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":4718,"title":{},"body":{"changelog.html":{}}}],["outputs",{"_index":4652,"title":{},"body":{"changelog.html":{}}}],["outside",{"_index":598,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"changelog.html":{}}}],["over",{"_index":2322,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["overview",{"_index":5073,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overviews",{"_index":5006,"title":{},"body":{"index.html":{}}}],["owner",{"_index":1687,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"changelog.html":{}}}],["owneroruser",{"_index":1797,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["owner}/${repo",{"_index":2672,"title":{},"body":{"injectables/RepoService.html":{}}}],["owner}/${repo}`.tolowercase",{"_index":1800,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["p",{"_index":4934,"title":{},"body":{"index.html":{}}}],["package",{"_index":4137,"title":{"properties.html":{}},"body":{"changelog.html":{}}}],["package.json",{"_index":4987,"title":{},"body":{"index.html":{}}}],["packages",{"_index":4370,"title":{},"body":{"changelog.html":{}}}],["page",{"_index":629,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["pagecount",{"_index":2258,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":686,"title":{"classes/PageDto.html":{}},"body":{"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/EmojiService.html":{},"controllers/HighlightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":707,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{}}}],["pagemetadto",{"_index":690,"title":{"classes/PageMetaDto.html":{}},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagemetadto})@validatenested()@type(undefined",{"_index":2249,"title":{},"body":{"classes/PageDto.html":{}}}],["pagemetaparameters",{"_index":2260,"title":{"interfaces/PageMetaParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":632,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightsService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pageoptionsdto.limit",{"_index":2276,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.orderby",{"_index":697,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.orderdirection",{"_index":700,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.page",{"_index":2274,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.range",{"_index":2463,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["pageoptionsdto.repo",{"_index":2683,"title":{},"body":{"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["pageoptionsdto.repoids",{"_index":2682,"title":{},"body":{"injectables/RepoService.html":{}}}],["pageoptionsdto.repoids?.split",{"_index":2482,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pageoptionsdto:16",{"_index":657,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:23",{"_index":2311,"title":{},"body":{"classes/PullRequestContributorInsightsDto.html":{}}}],["pageoptionsdto:28",{"_index":651,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:33",{"_index":655,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pageoptionsdto:43",{"_index":663,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["pager",{"_index":4007,"title":{},"body":{"changelog.html":{}}}],["pager.service",{"_index":21,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["pagerservice",{"_index":7,"title":{"injectables/PagerService.html":{}},"body":{"modules/ApiServicesModule.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["pages",{"_index":2270,"title":{},"body":{"classes/PageMetaDto.html":{},"changelog.html":{}}}],["paginate",{"_index":3313,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["paginated",{"_index":725,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginates",{"_index":718,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserEndorsementController.html":{}}}],["paginating",{"_index":2501,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["pagination",{"_index":3985,"title":{},"body":{"changelog.html":{}}}],["paginationinput",{"_index":2301,"title":{"interfaces/PaginationInput.html":{}},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["pair",{"_index":4906,"title":{},"body":{"index.html":{}}}],["param",{"_index":1702,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"emojiid",{"_index":3499,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["param(\"id",{"_index":2013,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["param(\"memberid",{"_index":3652,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["param(\"owner",{"_index":1726,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repo",{"_index":1727,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["param(\"repoowneroruser",{"_index":1723,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["param(\"username",{"_index":3343,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/PagerService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["parameters.dto",{"_index":2272,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.dto.ts",{"_index":2282,"title":{},"body":{"interfaces/PageMetaParameters.html":{},"coverage.html":{}}}],["params",{"_index":3984,"title":{},"body":{"changelog.html":{}}}],["parseint(`${countqueryresult?.count",{"_index":2479,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{}}}],["parseint(`${uuid",{"_index":3002,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["parseint(github.id",{"_index":3894,"title":{},"body":{"injectables/UserService.html":{}}}],["parseint(request.user?.user_metadata.sub",{"_index":5201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint8",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":1995,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["partial",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"injectables/UserNotificationService.html":{}}}],["partialtype",{"_index":3168,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["partialtype(createendorsementdto",{"_index":3169,"title":{},"body":{"classes/UpdateEndorsementDto.html":{}}}],["particular",{"_index":5054,"title":{},"body":{"license.html":{}}}],["passed",{"_index":2368,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["passport",{"_index":3144,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportmodule",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":3142,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["passportstrategy(supabaseauthstrategy",{"_index":3147,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["password",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/:id",{"_index":3489,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch(\"/profile",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/email",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\"/profile/interests",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(\":id/members/:memberid",{"_index":3651,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["patch('/:id')@apioperation({operationid",{"_index":3477,"title":{},"body":{"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["patch('/profile')@apioperation({operationid",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/email')@apioperation({operationid",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/profile/interests')@apioperation({operationid",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id')@apioperation({operationid",{"_index":3258,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["patch(':id/members/:memberid')@apioperation({operationid",{"_index":3624,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["path",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"controllers/HealthController.html":{},"changelog.html":{},"index.html":{}}}],["paths",{"_index":4181,"title":{},"body":{"changelog.html":{}}}],["pattern",{"_index":4083,"title":{},"body":{"changelog.html":{}}}],["payment_method_types",{"_index":2938,"title":{},"body":{"injectables/StripeService.html":{}}}],["pending",{"_index":1160,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"injectables/InsightsService.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["pending'})@column({type",{"_index":1159,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["per",{"_index":2267,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["performance",{"_index":4123,"title":{},"body":{"changelog.html":{}}}],["period",{"_index":1440,"title":{},"body":{"entities/DbSubscription.html":{}}}],["permission",{"_index":5017,"title":{},"body":{"license.html":{}}}],["permit",{"_index":5036,"title":{},"body":{"license.html":{}}}],["person",{"_index":5022,"title":{},"body":{"license.html":{}}}],["persons",{"_index":5037,"title":{},"body":{"license.html":{}}}],["persuasive",{"_index":1893,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["pgmigrate",{"_index":4292,"title":{},"body":{"changelog.html":{}}}],["picktype",{"_index":1558,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["picktype(dbuserhighlightreaction",{"_index":1561,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{}}}],["pid,hostname,context",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["pinned",{"_index":1500,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pino",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["pinohttp",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe",{"_index":4204,"title":{},"body":{"changelog.html":{}}}],["pipelines",{"_index":4815,"title":{},"body":{"changelog.html":{}}}],["pizza",{"_index":3202,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizza'})@isstring()@isoptional",{"_index":3188,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pizzas",{"_index":4485,"title":{},"body":{"changelog.html":{}}}],["please",{"_index":4997,"title":{},"body":{"index.html":{}}}],["port",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["portions",{"_index":5046,"title":{},"body":{"license.html":{}}}],["portuguese",{"_index":1855,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["post",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["post(\"/:id/featured",{"_index":2011,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post(\"/:id/reactions/:emojiid",{"_index":3497,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post(\"/checkout/session",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/description/generate",{"_index":2357,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post(\"/explanation/generate",{"_index":528,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post(\"/onboarding",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/suggestion/generate",{"_index":577,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post(\"/test/generate",{"_index":608,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post(\"/waitlist",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"/webhooks",{"_index":3034,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(\":id/members",{"_index":3639,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["post('/')@apioperation({operationid",{"_index":3242,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{}}}],["post('/')@useguards(endorsementtokenguard)@apioperation({operationid",{"_index":1665,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["post('/:id/featured')@apioperation({operationid",{"_index":1966,"title":{},"body":{"controllers/HighlightController.html":{}}}],["post('/:id/reactions/:emojiid')@apioperation({operationid",{"_index":3446,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["post('/checkout/session')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/description/generate')@apioperation({operationid",{"_index":2351,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["post('/explanation/generate')@apioperation({operationid",{"_index":507,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["post('/onboarding')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/suggestion/generate')@apioperation({operationid",{"_index":570,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["post('/test/generate')@apioperation({operationid",{"_index":603,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["post('/waitlist')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/webhooks')@apiokresponse",{"_index":2983,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["post(':id/members')@apioperation({operationid",{"_index":3609,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["postcreatecheckoutsession",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(@user",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["postcreatecheckoutsession(user",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":4928,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["postgresql",{"_index":4028,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["postonboarding",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(@userid",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["postonboarding(userid",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(@userid",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["postwaitlist(userid",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["powered",{"_index":4555,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["pr",{"_index":864,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["pr!'})@column('text",{"_index":1519,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["pr!})@isoptional()@isstring",{"_index":873,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["pr\".\"repo_id\"=\"repos\".\"id",{"_index":2395,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["preferences",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{}}}],["prefix",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["prefs.dto",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["prefs.dto.ts",{"_index":3223,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"coverage.html":{}}}],["prefs.dto.ts:11",{"_index":3226,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prefs.dto.ts:19",{"_index":3228,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["prepare",{"_index":4291,"title":{},"body":{"changelog.html":{}}}],["prerequisites",{"_index":4872,"title":{},"body":{"index.html":{}}}],["present",{"_index":2364,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["prettier",{"_index":4771,"title":{},"body":{"changelog.html":{}}}],["pretty",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["preview",{"_index":4973,"title":{},"body":{"index.html":{}}}],["previous",{"_index":2262,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["previous_month",{"_index":2487,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["previously",{"_index":4930,"title":{},"body":{"index.html":{}}}],["prevmonthquery",{"_index":2483,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["price",{"_index":1447,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{}}}],["price_12345",{"_index":1462,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_12345'})@column({type",{"_index":1448,"title":{},"body":{"entities/DbSubscription.html":{}}}],["price_id",{"_index":1427,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["primarycolumn",{"_index":1044,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"bigint",{"_index":1057,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{}}}],["primarycolumn(\"integer",{"_index":1333,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["primarycolumn(\"text",{"_index":1461,"title":{},"body":{"entities/DbSubscription.html":{}}}],["primarygeneratedcolumn",{"_index":1097,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1204,"title":{},"body":{"entities/DbLog.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1199,"title":{},"body":{"entities/DbLog.html":{}}}],["prinsightrepository",{"_index":2382,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["print",{"_index":4658,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["proceed",{"_index":5000,"title":{},"body":{"index.html":{}}}],["process",{"_index":4717,"title":{},"body":{"changelog.html":{}}}],["process.env.ci",{"_index":5113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.domain",{"_index":5169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":5108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.stripe_webhook_secret",{"_index":5185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.supabase_api_key",{"_index":3152,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_jwt_secret",{"_index":3155,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["process.env.supabase_url",{"_index":3150,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["production",{"_index":4746,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["profile'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile'})@apibody({type",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":856,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"entities/DbUserCollaboration.html":{},"changelog.html":{},"index.html":{}}}],["project's",{"_index":4887,"title":{},"body":{"index.html":{}}}],["project'})@isstring()@minlength(20)@maxlength(500",{"_index":850,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{}}}],["project?'})@column({type",{"_index":1482,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["promise",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["promise.all",{"_index":2345,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["promise.all([querybuilder.getcount",{"_index":2309,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserService.html":{}}}],["promise.all(repostoremoverequests",{"_index":3697,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(repotoaddrequests",{"_index":3707,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["promise.all(updates",{"_index":3774,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["promises",{"_index":2687,"title":{},"body":{"injectables/RepoService.html":{}}}],["promo",{"_index":4058,"title":{},"body":{"changelog.html":{}}}],["proper",{"_index":4638,"title":{},"body":{"changelog.html":{}}}],["properly",{"_index":4697,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":455,"title":{"properties.html":{}},"body":{"interfaces/ChatResponse.html":{},"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/StripeService.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property.decorator",{"_index":1054,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["provide",{"_index":4664,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["provided",{"_index":511,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/RepoFilterService.html":{},"controllers/UserFollowsController.html":{},"index.html":{},"license.html":{}}}],["providers",{"_index":17,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["prquery",{"_index":2393,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["prs",{"_index":503,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{}}}],["public",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"changelog.html":{}}}],["public.users",{"_index":4515,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":5030,"title":{},"body":{"license.html":{}}}],["published",{"_index":4136,"title":{},"body":{"changelog.html":{}}}],["pull",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"entities/DbContribution.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserHighlight.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["pull_requests",{"_index":1233,"title":{},"body":{"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserService.html":{}}}],["pull_requests\".\"repo_id\"=\"repos\".\"id",{"_index":2464,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_full_name",{"_index":2469,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_repo_id",{"_index":2471,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pull_requests_velocity\".\"created_at",{"_index":2669,"title":{},"body":{"injectables/RepoService.html":{}}}],["pullrequestcontributorinsightsdto",{"_index":743,"title":{"classes/PullRequestContributorInsightsDto.html":{}},"body":{"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontributoroptionsdto",{"_index":713,"title":{"classes/PullRequestContributorOptionsDto.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestcontroller",{"_index":2315,"title":{"controllers/PullRequestController.html":{}},"body":{"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptioncontroller",{"_index":2348,"title":{"controllers/PullRequestDescriptionController.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"modules/PullRequestModule.html":{},"coverage.html":{}}}],["pullrequestdescriptionservice",{"_index":2355,"title":{"injectables/PullRequestDescriptionService.html":{}},"body":{"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestinsightsservice",{"_index":2334,"title":{"injectables/PullRequestInsightsService.html":{}},"body":{"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestmodule",{"_index":39,"title":{"modules/PullRequestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["pullrequestorderfieldsenum",{"_index":2424,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequestorderfieldsenum.updated_at",{"_index":2425,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["pullrequestpageoptionsdto",{"_index":2330,"title":{"classes/PullRequestPageOptionsDto.html":{}},"body":{"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{}}}],["pullrequestrepository",{"_index":2445,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["pullrequestservice",{"_index":727,"title":{"injectables/PullRequestService.html":{}},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["pullrequestsinsightservice",{"_index":2336,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["pullrequeststatusenum",{"_index":2430,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["pullrequeststatusenum'})@isenum(pullrequeststatusenum)@isoptional",{"_index":2431,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["purpose",{"_index":5055,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4681,"title":{},"body":{"changelog.html":{}}}],["push",{"_index":4519,"title":{},"body":{"changelog.html":{}}}],["put",{"_index":2726,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserFollowsController.html":{}}}],["put(\"/:id/star",{"_index":2732,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:id/stargaze",{"_index":2770,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:id/submit",{"_index":2808,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:id/vote",{"_index":2854,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:owner/:repo/star",{"_index":2735,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put(\"/:owner/:repo/stargaze",{"_index":2773,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put(\"/:owner/:repo/submit",{"_index":2810,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put(\"/:owner/:repo/vote",{"_index":2857,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put(\"/:username/follow",{"_index":3428,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["put('/:id/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2720,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:id/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2761,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:id/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2799,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:id/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2841,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:owner/:repo/star')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2724,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["put('/:owner/:repo/stargaze')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2765,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["put('/:owner/:repo/submit')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2802,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["put('/:owner/:repo/vote')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":2844,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["put('/:username/follow')@apibearerauth()@useguards(supabaseguard)@apioperation({operationid",{"_index":3411,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["qb",{"_index":2388,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{}}}],["qb.andwhere(sql",{"_index":2584,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["qb.where(sql",{"_index":2583,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["quality",{"_index":4978,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1428,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{}}}],["queries",{"_index":4208,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":722,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"changelog.html":{}}}],["querybuilder",{"_index":694,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.addgroupby(\"emoji_id",{"_index":3591,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.addselect(\"users.email",{"_index":3877,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.andwhere(\"repos.id",{"_index":2494,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["querybuilder.andwhere(\"user_highlight_reactions.user_id",{"_index":3590,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(\"user_highlights.user_id",{"_index":3559,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.andwhere(sql",{"_index":3570,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.getcount",{"_index":705,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{}}}],["querybuilder.getmany",{"_index":706,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/EmojiService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/UserNotificationService.html":{}}}],["querybuilder.getone",{"_index":945,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["querybuilder.getoneorfail",{"_index":3404,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["querybuilder.getrawmany",{"_index":2481,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.getrawone",{"_index":2409,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["querybuilder.innerjoin",{"_index":2674,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.offset(pageoptionsdto.skip).limit(pageoptionsdto.limit",{"_index":2308,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/UserService.html":{}}}],["querybuilder.orderby(\"emoji.display_order",{"_index":1652,"title":{},"body":{"injectables/EmojiService.html":{}}}],["querybuilder.orderby(\"endorsements.created_at",{"_index":1786,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.setparameters",{"_index":2406,"title":{},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/UserService.html":{}}}],["querybuilder.skip(pageoptionsdto.skip).take(pageoptionsdto.limit",{"_index":2210,"title":{},"body":{"injectables/InsightsService.html":{}}}],["querybuilder.where(\"contribution.repo_id",{"_index":698,"title":{},"body":{"injectables/ContributionService.html":{}}}],["querybuilder.where(\"customer.id=:id",{"_index":944,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"customer.stripe_customer_id=:id",{"_index":946,"title":{},"body":{"injectables/CustomerService.html":{}}}],["querybuilder.where(\"endorsements.creator_user_id",{"_index":1789,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"endorsements.id",{"_index":1807,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["querybuilder.where(\"id",{"_index":3818,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(\"insight_members.id",{"_index":2120,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["querybuilder.where(\"r2stars.repo_id",{"_index":2882,"title":{},"body":{"injectables/StarService.html":{}}}],["querybuilder.where(\"r2submits.repo_id",{"_index":3077,"title":{},"body":{"injectables/SubmitService.html":{}}}],["querybuilder.where(\"repo.full_name",{"_index":2671,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"repo.id",{"_index":2670,"title":{},"body":{"injectables/RepoService.html":{}}}],["querybuilder.where(\"user_collaborations.id",{"_index":3296,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["querybuilder.where(\"user_highlights.user_id",{"_index":3575,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(\"user_repos.user_id",{"_index":3822,"title":{},"body":{"injectables/UserReposService.html":{}}}],["querybuilder.where(`user_highlights.featured",{"_index":3571,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["querybuilder.where(`users.email",{"_index":3924,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.where(sql",{"_index":3569,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["queryrunner",{"_index":961,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["queryrunner?.data.iscreatinglogs",{"_index":980,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["questions",{"_index":5002,"title":{},"body":{"index.html":{}}}],["range",{"_index":636,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorInsightsController.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/UserRepoOptionsDto.html":{},"changelog.html":{}}}],["rate",{"_index":4463,"title":{},"body":{"changelog.html":{}}}],["rawbodyrequest",{"_index":2982,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["re",{"_index":4141,"title":{},"body":{"changelog.html":{}}}],["react",{"_index":3232,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserHighlightsController.html":{},"classes/UserOnboardingDto.html":{},"index.html":{}}}],["reacted",{"_index":3771,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["reaction",{"_index":1075,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{}}}],["reaction'})@apibadrequestresponse({description",{"_index":3461,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["reaction.emoji",{"_index":1555,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.emoji)@joincolumn({name",{"_index":1537,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["reaction.entity.ts",{"_index":1532,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"coverage.html":{}}}],["reaction.entity.ts:107",{"_index":1548,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:115",{"_index":1538,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:27",{"_index":1544,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:37",{"_index":1543,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:47",{"_index":1549,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:57",{"_index":1540,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:68",{"_index":1535,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:79",{"_index":1546,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:83",{"_index":1536,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:91",{"_index":1545,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.entity.ts:99",{"_index":1542,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight",{"_index":1553,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.highlight)@joincolumn({name",{"_index":1541,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user",{"_index":1554,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction.user)@joincolumn({name",{"_index":1547,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["reaction_count",{"_index":1534,"title":{},"body":{"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"injectables/UserHighlightsService.html":{}}}],["reactionexists",{"_index":3597,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactionexists.deleted_at",{"_index":3598,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["reactions",{"_index":1074,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbUserHighlight.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"changelog.html":{}}}],["reactions'})@apibadrequestresponse({description",{"_index":1989,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["reactionsquerybuilder",{"_index":3828,"title":{},"body":{"injectables/UserService.html":{}}}],["read",{"_index":1582,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["read_at",{"_index":1569,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{}}}],["readable",{"_index":1218,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["readme",{"_index":4486,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":252,"title":{},"body":{"modules/AppModule.html":{},"classes/ContributionPageOptionsDto.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateLogDto.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/EndorsementController.html":{},"classes/FilterOptionsDto.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"controllers/InsightController.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/SupabaseAuthDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["real",{"_index":4188,"title":{},"body":{"changelog.html":{}}}],["rebaseable",{"_index":1253,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["receipient",{"_index":1492,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["receive_collaboration",{"_index":3225,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{}}}],["received",{"_index":1691,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{},"miscellaneous/variables.html":{}}}],["recent",{"_index":746,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["recieve",{"_index":3227,"title":{},"body":{"classes/UpdateUserEmailPreferencesDto.html":{}}}],["recipient",{"_index":781,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbEndorsement.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["recipient_user_id",{"_index":771,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["recommendation",{"_index":4049,"title":{},"body":{"changelog.html":{}}}],["recommendation.controller",{"_index":3719,"title":{},"body":{"modules/UserModule.html":{}}}],["recommendation.controller.ts",{"_index":3780,"title":{},"body":{"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["recommendation.controller.ts:23",{"_index":3787,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["recommendations",{"_index":3789,"title":{},"body":{"controllers/UserRecommendationController.html":{},"changelog.html":{}}}],["recommended",{"_index":3785,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["record",{"_index":1714,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["record'})@apiokresponse({type",{"_index":1666,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["record)[\"stripe",{"_index":3038,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["ref",{"_index":1316,"title":{},"body":{"entities/DbPullRequest.html":{},"miscellaneous/variables.html":{}}}],["refactor",{"_index":566,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{}}}],["refactoring",{"_index":3978,"title":{},"body":{"changelog.html":{}}}],["referal",{"_index":4557,"title":{},"body":{"changelog.html":{}}}],["referencedcolumnname",{"_index":1030,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbInsight.html":{},"entities/DbInsightRepo.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{}}}],["references",{"_index":4302,"title":{},"body":{"changelog.html":{}}}],["regex",{"_index":4082,"title":{},"body":{"changelog.html":{}}}],["regexp_replace(regexp_replace(user_highlights.url",{"_index":3566,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["registeras(\"api",{"_index":5105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"db",{"_index":5136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"endpoint",{"_index":5159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"openai",{"_index":5171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registeras(\"stripe",{"_index":5181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registration",{"_index":3089,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["registry",{"_index":4645,"title":{},"body":{"changelog.html":{}}}],["rejectunauthorized",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["relation",{"_index":4587,"title":{},"body":{"changelog.html":{}}}],["relations",{"_index":4787,"title":{},"body":{"changelog.html":{}}}],["relationship",{"_index":4604,"title":{},"body":{"changelog.html":{}}}],["relationships",{"_index":4252,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":4263,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["releasing",{"_index":4192,"title":{},"body":{"changelog.html":{}}}],["relevantevents",{"_index":2991,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["relevantevents.has(event.type",{"_index":3044,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["remaining",{"_index":4598,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":1760,"title":{},"body":{"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"properties.html":{}}}],["remove(id",{"_index":1779,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["removeafeaturedhighlight",{"_index":1993,"title":{},"body":{"controllers/HighlightController.html":{}}}],["removed",{"_index":2710,"title":{},"body":{"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["removefeatured",{"_index":3518,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removefeatured(highlightid",{"_index":3547,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["removeinsight",{"_index":2181,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsight(id",{"_index":2192,"title":{},"body":{"injectables/InsightsService.html":{}}}],["removeinsightforuser",{"_index":2057,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(@param(\"id",{"_index":2084,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightforuser(id",{"_index":2065,"title":{},"body":{"controllers/InsightController.html":{}}}],["removeinsightmember",{"_index":2093,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmember(id",{"_index":2112,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["removeinsightmemberbyid",{"_index":3607,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightmemberbyid(id",{"_index":3620,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["removeinsightrepo",{"_index":2153,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removeinsightrepo(id",{"_index":2159,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["removes",{"_index":2067,"title":{},"body":{"controllers/InsightController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["removeusercollaboration",{"_index":3282,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaboration(id",{"_index":3291,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["removeusercollaborationbyid",{"_index":3239,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(@param(\"id",{"_index":3277,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeusercollaborationbyid(id",{"_index":3254,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["removeuserfollowerbyid",{"_index":3375,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removeuserfollowerbyid(userid",{"_index":3387,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["removing",{"_index":4118,"title":{},"body":{"changelog.html":{}}}],["rename",{"_index":4574,"title":{},"body":{"changelog.html":{}}}],["repo",{"_index":623,"title":{},"body":{"modules/ContributionModule.html":{},"controllers/ContributorInsightsController.html":{},"entities/DbContribution.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightRepoService.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightsController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["repo'})@apiokresponse({type",{"_index":2533,"title":{},"body":{"controllers/RepoController.html":{}}}],["repo.contributions",{"_index":1063,"title":{},"body":{"entities/DbContribution.html":{},"injectables/RepoService.html":{}}}],["repo.contributions)@joincolumn({name",{"_index":1029,"title":{},"body":{"entities/DbContribution.html":{}}}],["repo.controller",{"_index":2598,"title":{},"body":{"modules/RepoModule.html":{}}}],["repo.entity",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"controllers/HighlightController.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{}}}],["repo.entity.ts",{"_index":1183,"title":{},"body":{"entities/DbInsightRepo.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{}}}],["repo.entity.ts:15",{"_index":1595,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:22",{"_index":1596,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:26",{"_index":1611,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:29",{"_index":1189,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:33",{"_index":1617,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:36",{"_index":1192,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserRepo.html":{}}}],["repo.entity.ts:40",{"_index":1614,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:43",{"_index":1193,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:46",{"_index":1594,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["repo.entity.ts:50",{"_index":1188,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:60",{"_index":1184,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:67",{"_index":1609,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:70",{"_index":1185,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:75",{"_index":1616,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.entity.ts:78",{"_index":1191,"title":{},"body":{"entities/DbInsightRepo.html":{}}}],["repo.entity.ts:8",{"_index":1564,"title":{},"body":{"classes/DbUserHighlightRepo.html":{}}}],["repo.entity.ts:83",{"_index":1613,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.fullname",{"_index":2164,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.id",{"_index":2163,"title":{},"body":{"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/UserReposService.html":{}}}],["repo.repo_id",{"_index":3693,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repo.repotouser${relation",{"_index":2675,"title":{},"body":{"injectables/RepoService.html":{}}}],["repo.repotouserstargazers",{"_index":1368,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstargazers)@joincolumn({name",{"_index":1357,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["repo.repotouserstars",{"_index":1383,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"injectables/RepoService.html":{}}}],["repo.repotouserstars)@joincolumn({name",{"_index":1374,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["repo.repotousersubmissions",{"_index":1402,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"injectables/RepoService.html":{}}}],["repo.repotousersubmissions)@joincolumn({name",{"_index":1393,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["repo.repotousertoprepos",{"_index":1620,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotousertoprepos)@joincolumn({name",{"_index":1612,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["repo.repotouservotes",{"_index":1417,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"injectables/RepoService.html":{}}}],["repo.repotouservotes)@joincolumn({name",{"_index":1408,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["repo.service",{"_index":2174,"title":{},"body":{"modules/InsightsModule.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"controllers/UserInsightsController.html":{}}}],["repo.service.ts",{"_index":2151,"title":{},"body":{"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["repo.service.ts:15",{"_index":2158,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:19",{"_index":2160,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo.service.ts:9",{"_index":2155,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["repo/dtos/repo",{"_index":822,"title":{},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/UserReposService.html":{}}}],["repo/dtos/user",{"_index":2848,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repo/entities/repo.entity",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"entities/DbContribution.html":{},"entities/DbUserTopRepo.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/entities/repo.to.user.stargazers.entity",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{}}}],["repo/entities/repo.to.user.stars.entity",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{}}}],["repo/entities/repo.to.user.submissions.entity",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{}}}],["repo/entities/repo.to.user.votes.entity",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["repo/repo.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{}}}],["repo/repo.service",{"_index":2509,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{}}}],["repo/user",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"entities/DbUserRepo.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repo_id",{"_index":772,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserRepo.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightRepoService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserReposService.html":{},"injectables/VoteService.html":{}}}],["repocontributionscontroller",{"_index":620,"title":{"controllers/RepoContributionsController.html":{}},"body":{"modules/ContributionModule.html":{},"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["repocontroller",{"_index":2519,"title":{"controllers/RepoController.html":{}},"body":{"controllers/RepoController.html":{},"modules/RepoModule.html":{},"coverage.html":{}}}],["repofilterfieldsenum",{"_index":2602,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["repofiltermodule",{"_index":2414,"title":{"modules/RepoFilterModule.html":{}},"body":{"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules.html":{},"overview.html":{}}}],["repofilterservice",{"_index":2380,"title":{"injectables/RepoFilterService.html":{}},"body":{"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["repoid",{"_index":682,"title":{},"body":{"injectables/ContributionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/VoteService.html":{}}}],["repoids",{"_index":1829,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["repoinfo",{"_index":814,"title":{"classes/RepoInfo.html":{}},"body":{"classes/CreateInsightDto.html":{},"injectables/InsightRepoService.html":{},"classes/RepoInfo.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"coverage.html":{}}}],["repoinfo.id",{"_index":3692,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repomodule",{"_index":40,"title":{"modules/RepoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["repoorderfieldsenum",{"_index":643,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["repoorderfieldsenum.stars",{"_index":2599,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["repoowneroruser",{"_index":1682,"title":{},"body":{"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{}}}],["repoowneroruser.tolowercase",{"_index":1798,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["repopageoptionsdto",{"_index":2523,"title":{"classes/RepoPageOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["repopageoptionsdto:37",{"_index":2615,"title":{},"body":{"classes/RepoSearchOptionsDto.html":{}}}],["reporepository",{"_index":2622,"title":{},"body":{"injectables/RepoService.html":{}}}],["report",{"_index":4958,"title":{},"body":{"index.html":{}}}],["repos",{"_index":806,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"classes/InsightOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["repos\".\"id",{"_index":2668,"title":{},"body":{"injectables/RepoService.html":{}}}],["repos')@apioperation({operationid",{"_index":3317,"title":{},"body":{"controllers/UserController.html":{}}}],["repos'})@apibody({type",{"_index":3669,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repos.dto",{"_index":2849,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["repos.dto.ts",{"_index":3795,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["repos.dto.ts:13",{"_index":3796,"title":{},"body":{"classes/UserRepoOptionsDto-1.html":{}}}],["repos.dto.ts:23",{"_index":3960,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.dto.ts:26",{"_index":3958,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["repos.id",{"_index":2574,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["repos.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["repos.module.ts",{"_index":3803,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service",{"_index":3804,"title":{},"body":{"modules/UserReposModule.html":{}}}],["repos.service.ts",{"_index":3806,"title":{},"body":{"injectables/UserReposService.html":{},"coverage.html":{}}}],["repos.service.ts:13",{"_index":3809,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:20",{"_index":3813,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:26",{"_index":3815,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:40",{"_index":3812,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos.service.ts:50",{"_index":3814,"title":{},"body":{"injectables/UserReposService.html":{}}}],["repos_id",{"_index":4260,"title":{},"body":{"changelog.html":{}}}],["reposearchoptionsdto",{"_index":2527,"title":{"classes/RepoSearchOptionsDto.html":{}},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"coverage.html":{}}}],["reposervice",{"_index":2508,"title":{"injectables/RepoService.html":{}},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoModule.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["repositories",{"_index":4068,"title":{},"body":{"changelog.html":{}}}],["repository",{"_index":678,"title":{},"body":{"injectables/ContributionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"injectables/CustomerService.html":{},"entities/DbContribution.html":{},"entities/DbEndorsement.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoController.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"classes/UpdateInsightDto.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["repostarcontroller",{"_index":2695,"title":{"controllers/RepoStarController.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"coverage.html":{}}}],["repostargazecontroller",{"_index":2740,"title":{"controllers/RepoStargazeController.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"coverage.html":{}}}],["repostargazerepository",{"_index":2902,"title":{},"body":{"injectables/StargazeService.html":{}}}],["repostarrepository",{"_index":2873,"title":{},"body":{"injectables/StarService.html":{}}}],["repostoadd",{"_index":3701,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoadd.map(async",{"_index":3705,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove",{"_index":3689,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremove.map(async",{"_index":3695,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repostoremoverequests",{"_index":3694,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["reposubmitcontroller",{"_index":2778,"title":{"controllers/RepoSubmitController.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"coverage.html":{}}}],["reposubmitrepository",{"_index":3069,"title":{},"body":{"injectables/SubmitService.html":{}}}],["repotoaddrequests",{"_index":3704,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["repotouserstargazers",{"_index":4578,"title":{},"body":{"changelog.html":{}}}],["repotouserstars",{"_index":4580,"title":{},"body":{"changelog.html":{}}}],["repotousersubmissions",{"_index":4582,"title":{},"body":{"changelog.html":{}}}],["repotouservotes",{"_index":4584,"title":{},"body":{"changelog.html":{}}}],["repovotecontroller",{"_index":2814,"title":{"controllers/RepoVoteController.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"coverage.html":{}}}],["repovoterepository",{"_index":3938,"title":{},"body":{"injectables/VoteService.html":{}}}],["representation",{"_index":5011,"title":{},"body":{"index.html":{}}}],["representing",{"_index":1009,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{}}}],["req",{"_index":2985,"title":{},"body":{"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"index.html":{}}}],["req.headers",{"_index":3037,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["request",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3255,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["request'})@apibody({type",{"_index":514,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request'})@apiconflictresponse({description",{"_index":3245,"title":{},"body":{"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{}}}],["request'})@apiunprocessableentityresponse({description",{"_index":3626,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["request.controller",{"_index":2417,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.controller.ts",{"_index":2316,"title":{},"body":{"controllers/PullRequestController.html":{},"coverage.html":{}}}],["request.controller.ts:29",{"_index":2328,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:40",{"_index":2331,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.controller.ts:50",{"_index":2325,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["request.entity",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{}}}],["request.entity.ts",{"_index":1236,"title":{},"body":{"entities/DbPullRequest.html":{},"coverage.html":{}}}],["request.entity.ts:105",{"_index":1322,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:125",{"_index":1303,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:135",{"_index":1293,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:142",{"_index":1272,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:149",{"_index":1270,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:15",{"_index":1289,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:159",{"_index":1267,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:169",{"_index":1266,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:179",{"_index":1282,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:189",{"_index":1279,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:199",{"_index":1308,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:209",{"_index":1331,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:219",{"_index":1305,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:22",{"_index":1313,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:226",{"_index":1280,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:233",{"_index":1262,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:240",{"_index":1284,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:247",{"_index":1276,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:258",{"_index":1287,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:29",{"_index":1310,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:36",{"_index":1320,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:43",{"_index":1286,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:50",{"_index":1307,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:57",{"_index":1306,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:64",{"_index":1311,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:71",{"_index":1330,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:81",{"_index":1318,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:91",{"_index":1324,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.entity.ts:98",{"_index":1315,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["request.headers[\"x",{"_index":1825,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["request.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"modules/UserModule.html":{}}}],["request.module.ts",{"_index":2415,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["request.service",{"_index":728,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/PullRequestController.html":{},"modules/PullRequestModule.html":{},"controllers/UserController.html":{}}}],["request.service.ts",{"_index":2435,"title":{},"body":{"injectables/PullRequestService.html":{},"coverage.html":{}}}],["request.service.ts:112",{"_index":2451,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:153",{"_index":2457,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:18",{"_index":2444,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:190",{"_index":2453,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:208",{"_index":2459,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:25",{"_index":2446,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:31",{"_index":2447,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:47",{"_index":2449,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.service.ts:69",{"_index":2455,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["request.user",{"_index":5200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_emailed_at",{"_index":1471,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["request_user",{"_index":1472,"title":{},"body":{"entities/DbUserCollaboration.html":{},"injectables/UserCollaborationService.html":{}}}],["request_user_id",{"_index":1473,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["requested",{"_index":3246,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requester",{"_index":3269,"title":{},"body":{"controllers/UserCollaborationController.html":{},"changelog.html":{}}}],["requester.role",{"_index":3271,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requesting",{"_index":4248,"title":{},"body":{"changelog.html":{}}}],["requestmethod",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":527,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"entities/DbContribution.html":{},"entities/DbPRInsight.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"changelog.html":{}}}],["requests'})@apibody({type",{"_index":3248,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["requests/code",{"_index":501,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["requests/dtos/create",{"_index":1842,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"coverage.html":{}}}],["requests/dtos/pull",{"_index":729,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/DbPullRequestContributor.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["requests/entities/pull",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributorModule.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["requests/pull",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"injectables/PullRequestService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["require(\"node",{"_index":476,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["required",{"_index":2941,"title":{},"body":{"injectables/StripeService.html":{}}}],["requirements",{"_index":4811,"title":{},"body":{"changelog.html":{}}}],["reserved",{"_index":3213,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}],["response",{"_index":477,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/OpenAiService.html":{},"injectables/PullRequestDescriptionService.html":{},"changelog.html":{}}}],["response.decorator",{"_index":726,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["response.decorator.ts",{"_index":4826,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["response.dto",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.dto.ts",{"_index":3086,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["response.dto.ts:104",{"_index":3116,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:110",{"_index":3097,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:116",{"_index":3113,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:122",{"_index":3102,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:128",{"_index":3095,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:134",{"_index":3120,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:14",{"_index":3129,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:20",{"_index":3121,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:26",{"_index":3099,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:32",{"_index":3091,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:38",{"_index":3110,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:44",{"_index":3092,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:50",{"_index":3125,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:56",{"_index":3107,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:62",{"_index":3109,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:68",{"_index":3104,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:74",{"_index":3087,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:8",{"_index":3103,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:80",{"_index":3118,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:86",{"_index":3128,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:92",{"_index":3124,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.dto.ts:98",{"_index":3088,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["response.json",{"_index":495,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.ok",{"_index":493,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["response.on(\"finish",{"_index":2044,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["restriction",{"_index":5026,"title":{},"body":{"license.html":{}}}],["results",{"_index":24,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results[index",{"_index":2694,"title":{},"body":{"injectables/RepoService.html":{}}}],["retrieve",{"_index":4237,"title":{},"body":{"changelog.html":{}}}],["retrieve/update",{"_index":4474,"title":{},"body":{"changelog.html":{}}}],["retrieves",{"_index":1698,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserNotificationController.html":{}}}],["retrieving",{"_index":4108,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["revert",{"_index":4357,"title":{},"body":{"changelog.html":{}}}],["reverts",{"_index":4356,"title":{},"body":{"changelog.html":{}}}],["review",{"_index":4476,"title":{},"body":{"changelog.html":{}}}],["rights",{"_index":5028,"title":{},"body":{"license.html":{}}}],["rogue",{"_index":4612,"title":{},"body":{"changelog.html":{}}}],["role",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["rounded",{"_index":1904,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["route",{"_index":4168,"title":{},"body":{"changelog.html":{}}}],["rsa:4096",{"_index":4915,"title":{},"body":{"index.html":{}}}],["rule",{"_index":4960,"title":{},"body":{"index.html":{}}}],["rules",{"_index":4550,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":4677,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["runner",{"_index":4726,"title":{},"body":{"changelog.html":{}}}],["running",{"_index":4721,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["russian",{"_index":1857,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["same",{"_index":4931,"title":{},"body":{"index.html":{}}}],["san",{"_index":3114,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["sauced",{"_index":880,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserSubmissions.html":{},"controllers/HealthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["sauced!})@isstring()@minlength(3)@maxlength(500",{"_index":865,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced'})@isurl()@isoptional",{"_index":3197,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["sauced/api",{"_index":3964,"title":{},"body":{"changelog.html":{}}}],["sauced/api.opensauced.pizza",{"_index":4065,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sauced/api.opensauced.pizza#readme",{"_index":5086,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza.git",{"_index":5090,"title":{},"body":{"properties.html":{}}}],["sauced/api.opensauced.pizza/issues",{"_index":5088,"title":{},"body":{"properties.html":{}}}],["sauced/hot/pull/320",{"_index":1062,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/hot/pull/320'})@column({type",{"_index":1040,"title":{},"body":{"entities/DbContribution.html":{}}}],["sauced/insights",{"_index":827,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserRepo.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{}}}],["sauced/insights'})@column({type",{"_index":1187,"title":{},"body":{"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserRepo.html":{}}}],["sauced/insights'})@isstring",{"_index":2588,"title":{},"body":{"classes/RepoInfo.html":{}}}],["sauced/insights'})@isstring()@isoptional",{"_index":1835,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{}}}],["sauced/insights/pull/1",{"_index":879,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@column('text",{"_index":1522,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pull/1'})@isstring",{"_index":876,"title":{},"body":{"classes/CreateUserHighlightDto.html":{}}}],["sauced/insights/pull/1})@column('text",{"_index":1508,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["sauced/insights/pulls",{"_index":800,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/insights/pulls'})@isstring",{"_index":790,"title":{},"body":{"classes/CreateEndorsementDto.html":{}}}],["sauced/open",{"_index":4092,"title":{},"body":{"changelog.html":{}}}],["saucedopen",{"_index":3123,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["saucedopen'})@isstring()@matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i",{"_index":3208,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["save",{"_index":4397,"title":{},"body":{"changelog.html":{}}}],["saving",{"_index":4410,"title":{},"body":{"changelog.html":{}}}],["schema",{"_index":4590,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":4609,"title":{},"body":{"changelog.html":{}}}],["scoping",{"_index":4754,"title":{},"body":{"changelog.html":{}}}],["script",{"_index":4762,"title":{},"body":{"changelog.html":{}}}],["scripts",{"_index":4805,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["search",{"_index":2537,"title":{},"body":{"controllers/RepoController.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"coverage.html":{}}}],["searchallpullrequestcontributors",{"_index":711,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequestcontributors(pageoptionsdto",{"_index":712,"title":{},"body":{"controllers/ContributorController.html":{}}}],["searchallpullrequests",{"_index":2319,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(@query",{"_index":2340,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searchallpullrequests(pageoptionsdto",{"_index":2329,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["searches",{"_index":715,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{}}}],["secretkey",{"_index":5182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secs",{"_index":5192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secure",{"_index":4904,"title":{},"body":{"index.html":{}}}],["see",{"_index":4993,"title":{},"body":{"index.html":{}}}],["select",{"_index":1019,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["select(\"author_login",{"_index":2489,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"count(distinct",{"_index":2642,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(\"emoji_id",{"_index":3587,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["select(\"previous_month.author_login",{"_index":2485,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"pull_requests.author_login",{"_index":2476,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["select(\"users.login",{"_index":1804,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/UserService.html":{}}}],["select(['repo.id",{"_index":2648,"title":{},"body":{"injectables/RepoService.html":{}}}],["select(`coalesce(count(\"pr\".\"id",{"_index":2394,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["select(`to_char(now",{"_index":2398,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["selected",{"_index":1215,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["selectquerybuilder",{"_index":2103,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{}}}],["self",{"_index":4910,"title":{},"body":{"index.html":{}}}],["sell",{"_index":5034,"title":{},"body":{"license.html":{}}}],["sent",{"_index":1171,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["server",{"_index":4194,"title":{},"body":{"changelog.html":{}}}],["server.crt",{"_index":4908,"title":{},"body":{"index.html":{}}}],["server.key",{"_index":4909,"title":{},"body":{"index.html":{}}}],["servers",{"_index":4460,"title":{},"body":{"changelog.html":{}}}],["service",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":4601,"title":{},"body":{"changelog.html":{}}}],["services.module",{"_index":1753,"title":{},"body":{"modules/EndorsementModule.html":{},"modules/InsightsModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{}}}],["services.module.ts",{"_index":16,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["session",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"changelog.html":{}}}],["session.id",{"_index":2951,"title":{},"body":{"injectables/StripeService.html":{}}}],["session_email",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessionid",{"_index":2950,"title":{},"body":{"injectables/StripeService.html":{}}}],["set",{"_index":2992,"title":{},"body":{"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":4881,"title":{},"body":{"index.html":{}}}],["settings",{"_index":4897,"title":{},"body":{"index.html":{}}}],["setup",{"_index":3979,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":5043,"title":{},"body":{"license.html":{}}}],["shipped",{"_index":867,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{}}}],["shipped_at",{"_index":861,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbUserHighlight.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"changelog.html":{}}}],["short",{"_index":1141,"title":{},"body":{"entities/DbInsight.html":{}}}],["short_code",{"_index":1122,"title":{},"body":{"entities/DbInsight.html":{}}}],["show",{"_index":4245,"title":{},"body":{"changelog.html":{}}}],["showcase",{"_index":1296,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["showcase})@column({type",{"_index":1292,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["sig",{"_index":3036,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["sign",{"_index":1339,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/SupabaseAuthDto.html":{}}}],["sign'})@column('text",{"_index":1329,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["signature",{"_index":3039,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["signed",{"_index":4911,"title":{},"body":{"index.html":{}}}],["simple",{"_index":4552,"title":{},"body":{"changelog.html":{}}}],["simplify",{"_index":4125,"title":{},"body":{"changelog.html":{}}}],["singleline",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["skip",{"_index":2284,"title":{},"body":{"classes/PageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/TopUsersDto.html":{},"index.html":{}}}],["slow",{"_index":4433,"title":{},"body":{"changelog.html":{}}}],["small",{"_index":4142,"title":{},"body":{"changelog.html":{}}}],["snippet",{"_index":547,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["soft",{"_index":4560,"title":{},"body":{"changelog.html":{}}}],["software",{"_index":4874,"title":{},"body":{"index.html":{},"license.html":{}}}],["sort",{"_index":4272,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"modules/ContributionModule.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"modules/ContributorModule.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"modules/CustomerModule.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"modules/EmojiModule.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"modules/LogModule.html":{},"injectables/LogService.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"modules/RepoModule.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseGuard.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateEndorsementDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"index.html":{}}}],["source_branch",{"_index":1254,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["source_comment_url",{"_index":773,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_context_url",{"_index":774,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"entities/DbEndorsement.html":{}}}],["source_label",{"_index":1255,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["spam",{"_index":1231,"title":{},"body":{"entities/DbPRInsight.html":{},"injectables/RepoFilterService.html":{}}}],["spam\"].foreach((type",{"_index":2404,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["spam_prs",{"_index":1210,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["spam_pull_requests",{"_index":2580,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spam_pull_requests.repo_id",{"_index":2579,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["spammed",{"_index":2148,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["spanish",{"_index":1851,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{}}}],["spec",{"_index":4714,"title":{},"body":{"changelog.html":{}}}],["specific",{"_index":4249,"title":{},"body":{"changelog.html":{}}}],["specifications",{"_index":549,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["split",{"_index":4297,"title":{},"body":{"changelog.html":{}}}],["sponsors",{"_index":3100,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{}}}],["sql",{"_index":977,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"changelog.html":{}}}],["src/.../api",{"_index":5097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.config.ts",{"_index":5096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cli",{"_index":5098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../contribution",{"_index":4857,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../db",{"_index":5099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoint.config.ts",{"_index":5100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../insight",{"_index":4858,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":4867,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../openai.config.ts",{"_index":5101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../order",{"_index":4859,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../pull",{"_index":4861,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../repo",{"_index":4862,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stripe",{"_index":5102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stripe.config.ts",{"_index":5103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../supabase.user.decorator.ts",{"_index":5095,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":4863,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":5104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:194",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:111",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:129",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:142",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:173",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:187",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:206",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/supabase",{"_index":3085,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/user",{"_index":3775,"title":{},"body":{"classes/UserOnboardingDto.html":{},"coverage.html":{}}}],["src/auth/supabase.guard.ts",{"_index":3130,"title":{},"body":{"injectables/SupabaseGuard.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts",{"_index":3133,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"coverage.html":{}}}],["src/auth/supabase.strategy.ts:18",{"_index":3141,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:22",{"_index":3139,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.strategy.ts:7",{"_index":3136,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["src/auth/supabase.user.decorator.ts",{"_index":4824,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/common/constants/order",{"_index":4864,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/decorators/api",{"_index":4825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/filter",{"_index":1828,"title":{},"body":{"classes/FilterOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page",{"_index":2254,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":2239,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":2247,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:16",{"_index":2243,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/filters/repo",{"_index":2549,"title":{},"body":{"modules/RepoFilterModule.html":{},"injectables/RepoFilterService.html":{},"coverage.html":{}}}],["src/common/middleware/database",{"_index":948,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/http",{"_index":2030,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/services/api",{"_index":15,"title":{},"body":{"modules/ApiServicesModule.html":{}}}],["src/common/services/pager.service.ts",{"_index":2298,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"coverage.html":{}}}],["src/common/services/pager.service.ts:16",{"_index":2302,"title":{},"body":{"injectables/PagerService.html":{}}}],["src/common/util/cli",{"_index":4832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/api.config.ts",{"_index":4834,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/db",{"_index":4835,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/endpoint.config.ts",{"_index":4838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/openai.config.ts",{"_index":4840,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/stripe.config.ts",{"_index":4841,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/contribution/contribution.entity.ts",{"_index":991,"title":{},"body":{"entities/DbContribution.html":{},"coverage.html":{}}}],["src/contribution/contribution.entity.ts:101",{"_index":1041,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:109",{"_index":1031,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:27",{"_index":1023,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:37",{"_index":1033,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:47",{"_index":1006,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:54",{"_index":1027,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:64",{"_index":1017,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:74",{"_index":1038,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:81",{"_index":1020,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.entity.ts:91",{"_index":1001,"title":{},"body":{"entities/DbContribution.html":{}}}],["src/contribution/contribution.module.ts",{"_index":619,"title":{},"body":{"modules/ContributionModule.html":{}}}],["src/contribution/contribution.service.ts",{"_index":675,"title":{},"body":{"injectables/ContributionService.html":{},"coverage.html":{}}}],["src/contribution/contribution.service.ts:11",{"_index":679,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/contribution.service.ts:17",{"_index":683,"title":{},"body":{"injectables/ContributionService.html":{}}}],["src/contribution/dtos/contribution",{"_index":628,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/contribution/repo",{"_index":2495,"title":{},"body":{"controllers/RepoContributionsController.html":{},"coverage.html":{}}}],["src/contributor/contributor",{"_index":737,"title":{},"body":{"controllers/ContributorInsightsController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts",{"_index":709,"title":{},"body":{"controllers/ContributorController.html":{},"coverage.html":{}}}],["src/contributor/contributor.controller.ts:22",{"_index":721,"title":{},"body":{"controllers/ContributorController.html":{}}}],["src/contributor/contributor.module.ts",{"_index":763,"title":{},"body":{"modules/ContributorModule.html":{}}}],["src/customer/customer.entity.ts",{"_index":1064,"title":{},"body":{"entities/DbCustomer.html":{},"coverage.html":{}}}],["src/customer/customer.entity.ts:12",{"_index":1066,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.entity.ts:22",{"_index":1068,"title":{},"body":{"entities/DbCustomer.html":{}}}],["src/customer/customer.module.ts",{"_index":921,"title":{},"body":{"modules/CustomerModule.html":{}}}],["src/customer/customer.service.ts",{"_index":925,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/customer/customer.service.ts:14",{"_index":936,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:18",{"_index":940,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:26",{"_index":938,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:34",{"_index":935,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/customer/customer.service.ts:8",{"_index":931,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/emoji/emoji.controller.ts",{"_index":1622,"title":{},"body":{"controllers/EmojiController.html":{},"coverage.html":{}}}],["src/emoji/emoji.controller.ts:23",{"_index":1630,"title":{},"body":{"controllers/EmojiController.html":{}}}],["src/emoji/emoji.module.ts",{"_index":1641,"title":{},"body":{"modules/EmojiModule.html":{}}}],["src/emoji/emoji.service.ts",{"_index":1644,"title":{},"body":{"injectables/EmojiService.html":{},"coverage.html":{}}}],["src/emoji/emoji.service.ts:11",{"_index":1646,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:17",{"_index":1648,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/emoji.service.ts:21",{"_index":1649,"title":{},"body":{"injectables/EmojiService.html":{}}}],["src/emoji/entities/emoji.entity.ts",{"_index":1072,"title":{},"body":{"entities/DbEmoji.html":{},"coverage.html":{}}}],["src/emoji/entities/emoji.entity.ts:25",{"_index":1086,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:32",{"_index":1088,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:39",{"_index":1095,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:46",{"_index":1083,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:56",{"_index":1076,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:66",{"_index":1093,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:73",{"_index":1077,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/emoji/entities/emoji.entity.ts:77",{"_index":1092,"title":{},"body":{"entities/DbEmoji.html":{}}}],["src/endorsement/dto/create",{"_index":768,"title":{},"body":{"classes/CreateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/dto/update",{"_index":3167,"title":{},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["src/endorsement/endorsement",{"_index":1812,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts",{"_index":1655,"title":{},"body":{"controllers/EndorsementController.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.controller.ts:107",{"_index":1692,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:120",{"_index":1695,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:132",{"_index":1676,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:26",{"_index":1668,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:40",{"_index":1684,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:51",{"_index":1681,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:65",{"_index":1688,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.controller.ts:96",{"_index":1701,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["src/endorsement/endorsement.module.ts",{"_index":1750,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["src/endorsement/endorsement.service.ts",{"_index":1755,"title":{},"body":{"injectables/EndorsementService.html":{},"coverage.html":{}}}],["src/endorsement/endorsement.service.ts:111",{"_index":1778,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:12",{"_index":1762,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:125",{"_index":1780,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:19",{"_index":1764,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:23",{"_index":1766,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:27",{"_index":1767,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:38",{"_index":1769,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:49",{"_index":1771,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:62",{"_index":1773,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:78",{"_index":1774,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/endorsement.service.ts:92",{"_index":1776,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["src/endorsement/entities/endorsement.entity.ts",{"_index":1102,"title":{},"body":{"entities/DbEndorsement.html":{},"coverage.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:14",{"_index":1106,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:21",{"_index":1105,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:28",{"_index":1108,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:35",{"_index":1110,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:42",{"_index":1113,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:49",{"_index":1115,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:59",{"_index":1117,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/endorsement/entities/endorsement.entity.ts:69",{"_index":1103,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["src/health/health.controller.ts",{"_index":1908,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:32",{"_index":1914,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:57",{"_index":1917,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1954,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/highlight/dtos/highlight",{"_index":1557,"title":{},"body":{"classes/DbUserHighlightReactionResponse.html":{},"classes/HighlightOptionsDto.html":{},"coverage.html":{}}}],["src/highlight/entities/user",{"_index":1563,"title":{},"body":{"classes/DbUserHighlightRepo.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts",{"_index":1957,"title":{},"body":{"controllers/HighlightController.html":{},"coverage.html":{}}}],["src/highlight/highlight.controller.ts:102",{"_index":1990,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:34",{"_index":1984,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:45",{"_index":1977,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:59",{"_index":1973,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:76",{"_index":1994,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.controller.ts:90",{"_index":1981,"title":{},"body":{"controllers/HighlightController.html":{}}}],["src/highlight/highlight.module.ts",{"_index":2026,"title":{},"body":{"modules/HighlightModule.html":{}}}],["src/insight/dtos/create",{"_index":803,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/dtos/insight",{"_index":2137,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/insight/dtos/update",{"_index":3170,"title":{},"body":{"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"coverage.html":{}}}],["src/insight/entities/insight",{"_index":1153,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts",{"_index":1120,"title":{},"body":{"entities/DbInsight.html":{},"coverage.html":{}}}],["src/insight/entities/insight.entity.ts:106",{"_index":1127,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:114",{"_index":1149,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:118",{"_index":1140,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:32",{"_index":1129,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:42",{"_index":1150,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:52",{"_index":1137,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:59",{"_index":1135,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:66",{"_index":1134,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:76",{"_index":1144,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:86",{"_index":1124,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/entities/insight.entity.ts:96",{"_index":1147,"title":{},"body":{"entities/DbInsight.html":{}}}],["src/insight/insight",{"_index":2088,"title":{},"body":{"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts",{"_index":2055,"title":{},"body":{"controllers/InsightController.html":{},"coverage.html":{}}}],["src/insight/insight.controller.ts:32",{"_index":2064,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insight.controller.ts:47",{"_index":2070,"title":{},"body":{"controllers/InsightController.html":{}}}],["src/insight/insights.module.ts",{"_index":2170,"title":{},"body":{"modules/InsightsModule.html":{}}}],["src/insight/insights.service.ts",{"_index":2178,"title":{},"body":{"injectables/InsightsService.html":{},"coverage.html":{}}}],["src/insight/insights.service.ts:12",{"_index":2184,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:18",{"_index":2188,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:24",{"_index":2191,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:41",{"_index":2187,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:45",{"_index":2195,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:49",{"_index":2193,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/insights.service.ts:53",{"_index":2190,"title":{},"body":{"injectables/InsightsService.html":{}}}],["src/insight/user",{"_index":3603,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["src/log/custom",{"_index":884,"title":{},"body":{"injectables/CustomLogger.html":{},"coverage.html":{}}}],["src/log/dtos/create",{"_index":837,"title":{},"body":{"classes/CreateLogDto.html":{},"coverage.html":{}}}],["src/log/log.entity.ts",{"_index":1196,"title":{},"body":{"entities/DbLog.html":{},"coverage.html":{}}}],["src/log/log.entity.ts:12",{"_index":1202,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:15",{"_index":1201,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:18",{"_index":1198,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:6",{"_index":1200,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.entity.ts:9",{"_index":1197,"title":{},"body":{"entities/DbLog.html":{}}}],["src/log/log.module.ts",{"_index":2215,"title":{},"body":{"modules/LogModule.html":{}}}],["src/log/log.service.ts",{"_index":2219,"title":{},"body":{"injectables/LogService.html":{},"coverage.html":{}}}],["src/log/log.service.ts:14",{"_index":2225,"title":{},"body":{"injectables/LogService.html":{}}}],["src/log/log.service.ts:8",{"_index":2222,"title":{},"body":{"injectables/LogService.html":{}}}],["src/main.ts",{"_index":4845,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/open",{"_index":453,"title":{},"body":{"interfaces/ChatResponse.html":{},"modules/OpenAiModule.html":{},"injectables/OpenAiService.html":{},"coverage.html":{}}}],["src/pull",{"_index":500,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"modules/PullRequestModule.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/dtos/repo",{"_index":2585,"title":{},"body":{"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/repo/entities/repo.entity.ts",{"_index":4847,"title":{},"body":{"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts",{"_index":1351,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:26",{"_index":1356,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:33",{"_index":1364,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:40",{"_index":1360,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:50",{"_index":1353,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:60",{"_index":1361,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:67",{"_index":1354,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:75",{"_index":1363,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stargazers.entity.ts:83",{"_index":1358,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts",{"_index":1369,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:26",{"_index":1373,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:33",{"_index":1380,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:40",{"_index":1376,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:50",{"_index":1371,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:60",{"_index":1377,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:67",{"_index":1372,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:75",{"_index":1379,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.stars.entity.ts:83",{"_index":1375,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts",{"_index":1384,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:26",{"_index":1389,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:33",{"_index":1399,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:40",{"_index":1395,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:47",{"_index":1392,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:57",{"_index":1387,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:67",{"_index":1396,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:74",{"_index":1388,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:82",{"_index":1398,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.submissions.entity.ts:90",{"_index":1394,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts",{"_index":1403,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"coverage.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:26",{"_index":1407,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:33",{"_index":1414,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:40",{"_index":1410,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:50",{"_index":1405,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:60",{"_index":1411,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:67",{"_index":1406,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:75",{"_index":1413,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/entities/repo.to.user.votes.entity.ts:83",{"_index":1409,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["src/repo/repo.controller.ts",{"_index":2520,"title":{},"body":{"controllers/RepoController.html":{},"coverage.html":{}}}],["src/repo/repo.controller.ts:22",{"_index":2530,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:33",{"_index":2534,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:44",{"_index":2525,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.controller.ts:55",{"_index":2528,"title":{},"body":{"controllers/RepoController.html":{}}}],["src/repo/repo.module.ts",{"_index":2597,"title":{},"body":{"modules/RepoModule.html":{}}}],["src/repo/repo.service.ts",{"_index":2616,"title":{},"body":{"injectables/RepoService.html":{},"coverage.html":{}}}],["src/repo/repo.service.ts:146",{"_index":2629,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:15",{"_index":2621,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:160",{"_index":2630,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:174",{"_index":2627,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:208",{"_index":2628,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:22",{"_index":2635,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:257",{"_index":2632,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:37",{"_index":2625,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/repo/repo.service.ts:62",{"_index":2624,"title":{},"body":{"injectables/RepoService.html":{}}}],["src/star/repo",{"_index":2696,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["src/star/star.module.ts",{"_index":2866,"title":{},"body":{"modules/StarModule.html":{}}}],["src/star/star.service.ts",{"_index":2868,"title":{},"body":{"injectables/StarService.html":{},"coverage.html":{}}}],["src/star/star.service.ts:13",{"_index":2874,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:19",{"_index":2878,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:42",{"_index":2876,"title":{},"body":{"injectables/StarService.html":{}}}],["src/star/star.service.ts:7",{"_index":2872,"title":{},"body":{"injectables/StarService.html":{}}}],["src/stargaze/repo",{"_index":2741,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.module.ts",{"_index":2895,"title":{},"body":{"modules/StargazeModule.html":{}}}],["src/stargaze/stargaze.service.ts",{"_index":2897,"title":{},"body":{"injectables/StargazeService.html":{},"coverage.html":{}}}],["src/stargaze/stargaze.service.ts:13",{"_index":2903,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:19",{"_index":2907,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:44",{"_index":2905,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stargaze/stargaze.service.ts:7",{"_index":2901,"title":{},"body":{"injectables/StargazeService.html":{}}}],["src/stripe",{"_index":2974,"title":{},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/stripe/stripe.module.ts",{"_index":2920,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/stripe/stripe.service.ts",{"_index":2922,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/stripe/stripe.service.ts:12",{"_index":2931,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:20",{"_index":2927,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:27",{"_index":2929,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/stripe/stripe.service.ts:8",{"_index":2925,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/submit/repo",{"_index":2779,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["src/submit/submit.module.ts",{"_index":3062,"title":{},"body":{"modules/SubmitModule.html":{}}}],["src/submit/submit.service.ts",{"_index":3064,"title":{},"body":{"injectables/SubmitService.html":{},"coverage.html":{}}}],["src/submit/submit.service.ts:13",{"_index":3070,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:19",{"_index":3074,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:42",{"_index":3072,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/submit/submit.service.ts:7",{"_index":3068,"title":{},"body":{"injectables/SubmitService.html":{}}}],["src/subscription/stripe",{"_index":1418,"title":{},"body":{"entities/DbSubscription.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["src/user",{"_index":1593,"title":{},"body":{"entities/DbUserRepo.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["src/user/dtos/create",{"_index":844,"title":{},"body":{"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"coverage.html":{}}}],["src/user/dtos/top",{"_index":3161,"title":{},"body":{"classes/TopUsersDto.html":{},"coverage.html":{}}}],["src/user/dtos/update",{"_index":3181,"title":{},"body":{"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"coverage.html":{}}}],["src/user/entities/top",{"_index":1464,"title":{},"body":{"classes/DbTopUser.html":{},"coverage.html":{}}}],["src/user/entities/user",{"_index":1468,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/user/user",{"_index":3234,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":3305,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:35",{"_index":3328,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:47",{"_index":3323,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:62",{"_index":3314,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:79",{"_index":3318,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:94",{"_index":3333,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":4852,"title":{},"body":{"coverage.html":{}}}],["src/user/user.module.ts",{"_index":3712,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":3823,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:157",{"_index":3840,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:196",{"_index":3859,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:20",{"_index":3836,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:221",{"_index":3855,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:236",{"_index":3861,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:246",{"_index":3857,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:256",{"_index":3853,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:260",{"_index":3851,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:267",{"_index":3842,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:29",{"_index":3838,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":3849,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:41",{"_index":3848,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:59",{"_index":3844,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:96",{"_index":3846,"title":{},"body":{"injectables/UserService.html":{}}}],["src/vote/repo",{"_index":2815,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["src/vote/vote.module.ts",{"_index":3930,"title":{},"body":{"modules/VoteModule.html":{}}}],["src/vote/vote.service.ts",{"_index":3932,"title":{},"body":{"injectables/VoteService.html":{},"coverage.html":{}}}],["src/vote/vote.service.ts:13",{"_index":3939,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:19",{"_index":3942,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:42",{"_index":3946,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:61",{"_index":3941,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:7",{"_index":3937,"title":{},"body":{"injectables/VoteService.html":{}}}],["src/vote/vote.service.ts:77",{"_index":3944,"title":{},"body":{"injectables/VoteService.html":{}}}],["ssl",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["stable",{"_index":4757,"title":{},"body":{"changelog.html":{}}}],["stack",{"_index":899,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["staff",{"_index":1391,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["star",{"_index":1370,"title":{},"body":{"entities/DbRepoToUserStars.html":{},"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["star'})@apiokresponse({description",{"_index":2706,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller",{"_index":2867,"title":{},"body":{"modules/StarModule.html":{}}}],["star.controller.ts",{"_index":2697,"title":{},"body":{"controllers/RepoStarController.html":{},"coverage.html":{}}}],["star.controller.ts:116",{"_index":2714,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:35",{"_index":2718,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:55",{"_index":2722,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:74",{"_index":2725,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.controller.ts:97",{"_index":2711,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["star.service",{"_index":2729,"title":{},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{}}}],["star/star.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["starbyrepoid",{"_index":2870,"title":{},"body":{"injectables/StarService.html":{}}}],["starbyrepoid(repoid",{"_index":2877,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists",{"_index":2884,"title":{},"body":{"injectables/StarService.html":{}}}],["starexists.deleted_at",{"_index":2885,"title":{},"body":{"injectables/StarService.html":{}}}],["stargaze",{"_index":1352,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{},"controllers/RepoStargazeController.html":{},"changelog.html":{}}}],["stargaze.controller",{"_index":2896,"title":{},"body":{"modules/StargazeModule.html":{}}}],["stargaze.controller.ts",{"_index":2742,"title":{},"body":{"controllers/RepoStargazeController.html":{},"coverage.html":{}}}],["stargaze.controller.ts:100",{"_index":2753,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:122",{"_index":2756,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:35",{"_index":2759,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:55",{"_index":2763,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.controller.ts:77",{"_index":2766,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargaze.service",{"_index":2768,"title":{},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{}}}],["stargaze/stargaze.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["stargazebyrepoid",{"_index":2899,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazebyrepoid(repoid",{"_index":2906,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazed",{"_index":4535,"title":{},"body":{"changelog.html":{}}}],["stargazeexists",{"_index":2912,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazeexists.deleted_at",{"_index":2913,"title":{},"body":{"injectables/StargazeService.html":{}}}],["stargazemodule",{"_index":42,"title":{"modules/StargazeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StargazeModule.html":{},"modules.html":{},"overview.html":{}}}],["stargazeonebyid",{"_index":2746,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyid(id",{"_index":2760,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo",{"_index":2747,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazeonebyownerandrepo(owner",{"_index":2764,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["stargazers",{"_index":2657,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoStargazeController.html":{}}}],["stargazerscount",{"_index":2610,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["stargazeservice",{"_index":2767,"title":{"injectables/StargazeService.html":{}},"body":{"controllers/RepoStargazeController.html":{},"modules/StargazeModule.html":{},"injectables/StargazeService.html":{},"coverage.html":{},"overview.html":{}}}],["starmodule",{"_index":41,"title":{"modules/StarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StarModule.html":{},"modules.html":{},"overview.html":{}}}],["staronebyid",{"_index":2701,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(@param(\"id",{"_index":2733,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyid(id",{"_index":2719,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo",{"_index":2702,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["staronebyownerandrepo(owner",{"_index":2723,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["starred",{"_index":2717,"title":{},"body":{"controllers/RepoStarController.html":{},"injectables/StarService.html":{},"changelog.html":{}}}],["stars",{"_index":2604,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"miscellaneous/enumerations.html":{}}}],["starscount",{"_index":2611,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["starservice",{"_index":2728,"title":{"injectables/StarService.html":{}},"body":{"controllers/RepoStarController.html":{},"modules/StarModule.html":{},"injectables/StarService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":591,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"entities/DbSubscription.html":{},"injectables/PullRequestService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":4949,"title":{},"body":{"index.html":{}}}],["started",{"_index":3962,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["starttime",{"_index":2042,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["starttime)}ms",{"_index":5135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stash",{"_index":4131,"title":{},"body":{"changelog.html":{}}}],["state",{"_index":1256,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["statements",{"_index":4818,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":4128,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["status",{"_index":1429,"title":{},"body":{"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"classes/PullRequestPageOptionsDto.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["statuscode",{"_index":2046,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["statusmessage",{"_index":2047,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["steps",{"_index":4883,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":4553,"title":{},"body":{"changelog.html":{}}}],["stray",{"_index":4294,"title":{},"body":{"changelog.html":{}}}],["stress",{"_index":4132,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(id",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["string(process.env.api_codename",{"_index":5107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_domain",{"_index":5112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_host",{"_index":5109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.api_port",{"_index":5111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.endorsement_service_token",{"_index":5126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_api_key",{"_index":5173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_completions_api_url",{"_index":5180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.openai_model_name",{"_index":5175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_cancel_url",{"_index":5191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_checkout_session_success_url",{"_index":5189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_secret_key",{"_index":5183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_subscription_price_id",{"_index":5187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.stripe_webhook_secret_live",{"_index":5184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_api",{"_index":5137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_connection_logging",{"_index":5151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_api",{"_index":5145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_database_logging",{"_index":5156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_api",{"_index":5138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_host_logging",{"_index":5152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_api",{"_index":5143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_password_logging",{"_index":5155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_api",{"_index":5140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_port_logging",{"_index":5153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_api",{"_index":5148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_ssl_cert_logging",{"_index":5157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_api",{"_index":5141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.typeorm_username_logging",{"_index":5154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user_name",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["stringifyparameters",{"_index":957,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["stringifyparameters(parameters",{"_index":974,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["string})@isstring",{"_index":1845,"title":{},"body":{"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["string})@isstring()@isoptional",{"_index":1888,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["stripe",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"entities/DbCustomer.html":{},"injectables/StripeService.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"changelog.html":{}}}],["stripe(this.configservice.get(\"stripe.secretkey",{"_index":2933,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.checkout.session",{"_index":3053,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe.service",{"_index":2921,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.subscription",{"_index":3048,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["stripe/stripe.module",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{},"modules/StripeWebHookModule.html":{}}}],["stripe/stripe.service",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeWebhookController.html":{}}}],["stripe_customer_id",{"_index":934,"title":{},"body":{"injectables/CustomerService.html":{},"entities/DbCustomer.html":{}}}],["stripeconfig",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stripecustomer",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripecustomer.id",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["stripemodule",{"_index":442,"title":{"modules/StripeModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/StripeModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":347,"title":{"injectables/StripeService.html":{}},"body":{"controllers/AuthController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripesubscriptionmodule",{"_index":43,"title":{"modules/StripeSubscriptionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["stripesubscriptionservice",{"_index":2955,"title":{"injectables/StripeSubscriptionService.html":{}},"body":{"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookcontroller",{"_index":2973,"title":{"controllers/StripeWebhookController.html":{}},"body":{"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{},"coverage.html":{},"overview.html":{}}}],["stripewebhookmodule",{"_index":44,"title":{"modules/StripeWebHookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{},"modules.html":{},"overview.html":{}}}],["structure",{"_index":4290,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["structured",{"_index":5082,"title":{},"body":{"properties.html":{}}}],["stuff",{"_index":4500,"title":{},"body":{"changelog.html":{}}}],["style",{"_index":1903,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"changelog.html":{}}}],["styles",{"_index":4439,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["sub",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub_1234",{"_index":1460,"title":{},"body":{"entities/DbSubscription.html":{}}}],["sub_1234'})@primarycolumn('text",{"_index":1444,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subdomain",{"_index":5167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subevents",{"_index":3045,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subevents.includes(event.type",{"_index":3046,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subj",{"_index":4919,"title":{},"body":{"index.html":{}}}],["subject",{"_index":5039,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":5032,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1386,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submission'})@apiokresponse({description",{"_index":2788,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submissions",{"_index":2656,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["submissionscount",{"_index":2609,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"miscellaneous/enumerations.html":{}}}],["submit",{"_index":2806,"title":{},"body":{"controllers/RepoSubmitController.html":{},"injectables/SubmitService.html":{},"changelog.html":{}}}],["submit.controller",{"_index":3063,"title":{},"body":{"modules/SubmitModule.html":{}}}],["submit.controller.ts",{"_index":2780,"title":{},"body":{"controllers/RepoSubmitController.html":{},"coverage.html":{}}}],["submit.controller.ts:100",{"_index":2790,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:122",{"_index":2793,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:35",{"_index":2797,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:55",{"_index":2800,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.controller.ts:77",{"_index":2803,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submit.service",{"_index":2805,"title":{},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{}}}],["submit/submit.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["submitbyrepoid",{"_index":3066,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitbyrepoid(repoid",{"_index":3073,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitd",{"_index":3081,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists",{"_index":3079,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitexists.deleted_at",{"_index":3080,"title":{},"body":{"injectables/SubmitService.html":{}}}],["submitmodule",{"_index":45,"title":{"modules/SubmitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubmitModule.html":{},"modules.html":{},"overview.html":{}}}],["submitonebyid",{"_index":2784,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyid(id",{"_index":2798,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo",{"_index":2785,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitonebyownerandrepo(owner",{"_index":2801,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["submitservice",{"_index":2804,"title":{"injectables/SubmitService.html":{}},"body":{"controllers/RepoSubmitController.html":{},"modules/SubmitModule.html":{},"injectables/SubmitService.html":{},"coverage.html":{},"overview.html":{}}}],["submitted",{"_index":2796,"title":{},"body":{"controllers/RepoSubmitController.html":{},"changelog.html":{}}}],["subquery",{"_index":2636,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount",{"_index":2619,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycount(subquery",{"_index":2633,"title":{},"body":{"injectables/RepoService.html":{}}}],["subquerycountprs",{"_index":2378,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subquerycountprs(qb",{"_index":2386,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["subscribers",{"_index":2606,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["subscription",{"_index":1434,"title":{},"body":{"entities/DbSubscription.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at",{"_index":3015,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.cancel_at_period_end",{"_index":3014,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.canceled_at",{"_index":3017,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.customer",{"_index":3050,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.dto",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"injectables/StripeSubscriptionService.html":{}}}],["subscription.dto.ts",{"_index":1419,"title":{},"body":{"entities/DbSubscription.html":{},"coverage.html":{}}}],["subscription.dto.ts:101",{"_index":1443,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:111",{"_index":1433,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:121",{"_index":1437,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:131",{"_index":1456,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:141",{"_index":1455,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:16",{"_index":1445,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:23",{"_index":1458,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:33",{"_index":1453,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:40",{"_index":1446,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:47",{"_index":1449,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:54",{"_index":1450,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:61",{"_index":1435,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:71",{"_index":1438,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:81",{"_index":1442,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.dto.ts:91",{"_index":1441,"title":{},"body":{"entities/DbSubscription.html":{}}}],["subscription.ended_at",{"_index":3022,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.id",{"_index":3009,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data.length",{"_index":3013,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.items.data[0].price.id",{"_index":3012,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeWebHookModule.html":{}}}],["subscription.module.ts",{"_index":2956,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["subscription.service",{"_index":2957,"title":{},"body":{"modules/StripeSubscriptionModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscription.service.ts",{"_index":2959,"title":{},"body":{"injectables/StripeSubscriptionService.html":{},"coverage.html":{}}}],["subscription.service.ts:14",{"_index":2964,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:18",{"_index":2966,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.service.ts:8",{"_index":2962,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscription.status",{"_index":3011,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_end",{"_index":3026,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription.trial_start",{"_index":3024,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscription/stripe",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"controllers/StripeWebhookController.html":{}}}],["subscriptiondata",{"_index":3008,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionid",{"_index":2988,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["subscriptionpriceid",{"_index":5186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionrepository",{"_index":2963,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["subscriptions",{"_index":1459,"title":{},"body":{"entities/DbSubscription.html":{},"changelog.html":{}}}],["subscriptionsessioncancelurl",{"_index":5190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subscriptionsessioncheckoutsuccessurl",{"_index":5188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["substantial",{"_index":5045,"title":{},"body":{"license.html":{}}}],["success_url",{"_index":2946,"title":{},"body":{"injectables/StripeService.html":{}}}],["successful",{"_index":4521,"title":{},"body":{"changelog.html":{}}}],["successfully",{"_index":5130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":587,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["suggest",{"_index":590,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion",{"_index":530,"title":{},"body":{"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.controller",{"_index":2419,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["suggestion.controller.ts",{"_index":567,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"coverage.html":{}}}],["suggestion.controller.ts:22",{"_index":573,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["suggestion.dto",{"_index":574,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.dto.ts",{"_index":1873,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"coverage.html":{}}}],["suggestion.dto.ts:13",{"_index":1875,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:23",{"_index":1877,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:30",{"_index":1878,"title":{},"body":{"classes/GenerateCodeTestSuggestionDto.html":{}}}],["suggestion.dto.ts:33",{"_index":1876,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.dto.ts:40",{"_index":1874,"title":{},"body":{"classes/GenerateCodeRefactorSuggestionDto.html":{}}}],["suggestion.service",{"_index":576,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"modules/PullRequestModule.html":{}}}],["suggestion.service.ts",{"_index":579,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"coverage.html":{}}}],["suggestion.service.ts:10",{"_index":584,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:18",{"_index":583,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestion.service.ts:7",{"_index":581,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["suggestions",{"_index":4098,"title":{},"body":{"changelog.html":{}}}],["suite",{"_index":4950,"title":{},"body":{"index.html":{}}}],["summary",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"controllers/EmojiController.html":{},"controllers/EndorsementController.html":{},"controllers/HealthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["supabase",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{},"changelog.html":{},"index.html":{},"properties.html":{}}}],["supabase.guard",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["supabase.strategy",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{}}}],["supabase.user.decorator",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabase/supabase",{"_index":460,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"injectables/UserService.html":{}}}],["supabase_api_key=your_supabase_api_key",{"_index":4889,"title":{},"body":{"index.html":{}}}],["supabase_jwt_secret=your_supabase_jwt_secret",{"_index":4890,"title":{},"body":{"index.html":{}}}],["supabase_url=your_supabase_url",{"_index":4888,"title":{},"body":{"index.html":{}}}],["supabaseauthdto",{"_index":342,"title":{"classes/SupabaseAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"coverage.html":{}}}],["supabaseauthdto})@apinotfoundresponse({description",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthdto})@httpcode(httpstatus.ok",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["supabaseauthrequest",{"_index":5094,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["supabaseauthstrategy",{"_index":3146,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseauthuser",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SupabaseStrategy.html":{},"controllers/UserCollaborationController.html":{}}}],["supabaseguard",{"_index":338,"title":{"injectables/SupabaseGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/SupabaseGuard.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{},"overview.html":{}}}],["supabasejwtsecret",{"_index":3154,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasekey",{"_index":3151,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabaseoptions",{"_index":3153,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["supabasestrategy",{"_index":443,"title":{"injectables/SupabaseStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/SupabaseStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["supabaseurl",{"_index":3149,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super",{"_index":3148,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super(context",{"_index":910,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.authenticate(req",{"_index":3159,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.debug.apply(this",{"_index":917,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.error.apply(this",{"_index":915,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.log.apply(this",{"_index":913,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["super.validate(user",{"_index":3158,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["super.warn.apply(this",{"_index":916,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["support",{"_index":4312,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supporting",{"_index":4320,"title":{},"body":{"changelog.html":{}}}],["svg",{"_index":5069,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":4003,"title":{},"body":{"changelog.html":{}}}],["switch",{"_index":4458,"title":{},"body":{"changelog.html":{}}}],["synchronize",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":488,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"changelog.html":{}}}],["systemmessage",{"_index":489,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["t",{"_index":2242,"title":{},"body":{"classes/PageDto.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["t.setseconds(secs",{"_index":5197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"changelog.html":{},"coverage.html":{}}}],["tables",{"_index":4594,"title":{},"body":{"changelog.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4854,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":4670,"title":{},"body":{"changelog.html":{}}}],["tagging",{"_index":4648,"title":{},"body":{"changelog.html":{}}}],["tags",{"_index":1327,"title":{},"body":{"entities/DbPullRequest.html":{},"changelog.html":{}}}],["take",{"_index":4341,"title":{},"body":{"changelog.html":{}}}],["target",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"entities/DbPullRequest.html":{},"injectables/RepoService.html":{},"changelog.html":{}}}],["target_branch",{"_index":1257,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["target_label",{"_index":1258,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["targets",{"_index":4468,"title":{},"body":{"changelog.html":{}}}],["target}.id",{"_index":2645,"title":{},"body":{"injectables/RepoService.html":{}}}],["team",{"_index":824,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["team'})@column({type",{"_index":1136,"title":{},"body":{"entities/DbInsight.html":{}}}],["team'})@isstring",{"_index":812,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["tech",{"_index":4692,"title":{},"body":{"changelog.html":{}}}],["ted",{"_index":5091,"title":{},"body":{"properties.html":{}}}],["temperature",{"_index":468,"title":{},"body":{"interfaces/ChatResponse.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/OpenAiService.html":{}}}],["temporary",{"_index":4509,"title":{},"body":{"changelog.html":{}}}],["tense",{"_index":2365,"title":{},"body":{"injectables/PullRequestDescriptionService.html":{}}}],["terminusmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{}}}],["test",{"_index":605,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"modules/PullRequestModule.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["test.suggestion.controller",{"_index":2420,"title":{},"body":{"modules/PullRequestModule.html":{}}}],["test.suggestion.controller.ts",{"_index":600,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{},"coverage.html":{}}}],["test.suggestion.controller.ts:22",{"_index":606,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["test:coveragefor",{"_index":4959,"title":{},"body":{"index.html":{}}}],["tester",{"_index":4133,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":3981,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["testyou",{"_index":4957,"title":{},"body":{"index.html":{}}}],["text",{"_index":597,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbEmoji.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPullRequest.html":{},"entities/DbSubscription.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserRepo.html":{},"miscellaneous/variables.html":{}}}],["th3nn3ss",{"_index":1344,"title":{},"body":{"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{}}}],["th3nn3ss'})@column('text",{"_index":1271,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs",{"_index":1340,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["th3nn3ss:cli_split_kwargs'})@column({type",{"_index":1317,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsight)@apiokresponse({type",{"_index":3666,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["them'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbinsightmember)@apiokresponse({type",{"_index":3618,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["them'})@apipaginatedresponse(dbcontribution)@apiokresponse({type",{"_index":2502,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["them'})@apipaginatedresponse(dbemoji)@apiokresponse({type",{"_index":1627,"title":{},"body":{"controllers/EmojiController.html":{}}}],["them'})@apipaginatedresponse(dbendorsement)@apiokresponse({type",{"_index":1680,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserEndorsementController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":2327,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["them'})@apipaginatedresponse(dbpullrequestcontributor)@apiokresponse({type",{"_index":719,"title":{},"body":{"controllers/ContributorController.html":{}}}],["them'})@apipaginatedresponse(dbrepo)@apiokresponse({type",{"_index":2524,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlight)@apiokresponse({type",{"_index":1976,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{}}}],["them'})@apipaginatedresponse(dbuserhighlightrepo)@apiokresponse({type",{"_index":1980,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this._stripe",{"_index":2932,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.addusernotification",{"_index":3767,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.basefilterquerybuilder(range",{"_index":2681,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.basequerybuilder",{"_index":943,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["this.codeexplanationservice.generateexplanation(generatecodeexplanationdto",{"_index":531,"title":{},"body":{"controllers/CodeExplanationController.html":{}}}],["this.coderefactorsuggestionservice.generatedescription(generatecoderefactorsuggestiondto",{"_index":578,"title":{},"body":{"controllers/CodeRefactorSuggestionController.html":{}}}],["this.codetestsuggestionservice.generatetestsuggestion(generatecodetestsuggestiondto",{"_index":609,"title":{},"body":{"controllers/CodeTestSuggestionController.html":{}}}],["this.configservice.get(\"api.endorsementservicetoken",{"_index":1821,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["this.configservice.get(\"disk_percentage",{"_index":1938,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"disk_size",{"_index":1940,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.admin",{"_index":1953,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.app",{"_index":1945,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.docs",{"_index":1949,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.explore",{"_index":1951,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.hot",{"_index":1947,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"endpoint.landing",{"_index":1943,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_heap",{"_index":1933,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"memory_rss",{"_index":1935,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.configservice.get(\"openai.apikey",{"_index":482,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"openai.modelname",{"_index":486,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["this.configservice.get(\"stripe.subscriptionpriceid",{"_index":2944,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncancelurl",{"_index":2949,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.subscriptionsessioncheckoutsuccessurl",{"_index":2947,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.configservice.get(\"stripe.webhooksecret",{"_index":3041,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.contributionrepository.createquerybuilder(\"contribution",{"_index":695,"title":{},"body":{"injectables/ContributionService.html":{}}}],["this.contributionservice.findall(pageoptionsdto",{"_index":2515,"title":{},"body":{"controllers/RepoContributionsController.html":{}}}],["this.customerrepository.createquerybuilder(\"customer",{"_index":942,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.save",{"_index":947,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerservice.addcustomer(id",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.customerservice.findbycustomerid(customerid",{"_index":3001,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.customerservice.findbyid(id",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.data",{"_index":2252,"title":{},"body":{"classes/PageDto.html":{}}}],["this.database.pingcheck(\"db",{"_index":1931,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.storage",{"_index":1939,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.disk.checkstorage(\"disk.usage",{"_index":1936,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.emojirepository.createquerybuilder(\"emoji",{"_index":1651,"title":{},"body":{"injectables/EmojiService.html":{}}}],["this.emojiservice.findall(pageoptionsdto",{"_index":1638,"title":{},"body":{"controllers/EmojiController.html":{}}}],["this.endorsementrepository.createquerybuilder(\"endorsements",{"_index":1784,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.manager.createquerybuilder",{"_index":1801,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.save(createendorsementdto",{"_index":1785,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementrepository.softdelete(id",{"_index":1809,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["this.endorsementservice.create(createendorsementdto",{"_index":1718,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findall(pageoptionsdto",{"_index":1721,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(user.id",{"_index":1739,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbycreatoruserid(userid",{"_index":3367,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(user.id",{"_index":1742,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallbyrecipientuserid(userid",{"_index":3370,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["this.endorsementservice.findallbyrepoowneroruser(repoowneroruser",{"_index":1724,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepo(owner",{"_index":1728,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findallendorsementsbyrepobyuser(owner",{"_index":1732,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.findonebyid(id",{"_index":1735,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.endorsementservice.remove(id",{"_index":1745,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["this.filterservice.getrepofilters(pageoptionsdto",{"_index":2472,"title":{},"body":{"injectables/PullRequestService.html":{},"injectables/RepoService.html":{}}}],["this.findonebyid(id",{"_index":3895,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generateprompt(options.descriptionlength",{"_index":613,"title":{},"body":{"injectables/CodeTestSuggestionService.html":{}}}],["this.generateprompt(options.language",{"_index":558,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.getcontributorrangequerybuilder(range",{"_index":2484,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.getvotequery(repoid",{"_index":3950,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.hasnextpage",{"_index":2281,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":2280,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":1930,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"admin.opensauced",{"_index":1952,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"app.opensauced",{"_index":1944,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"docs.opensauced",{"_index":1948,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"explore.opensauced",{"_index":1950,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"hot.opensauced",{"_index":1946,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck(\"opensauced.pizza",{"_index":1942,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.insightmemberrepository.createquerybuilder(\"insight_members",{"_index":2119,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.save(insightmember",{"_index":2121,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.softdelete(id",{"_index":2123,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberrepository.update(id",{"_index":2122,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightmemberservice.addinsightmember",{"_index":3647,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight",{"_index":3642,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.canusermanageinsight(userid",{"_index":3636,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightmemberservice.findallinsightmembers(pageoptionsdto",{"_index":3638,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.findonebyid(memberid",{"_index":3653,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.removeinsightmember(memberid",{"_index":3661,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightmemberservice.updateinsightmember(memberid",{"_index":3659,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightreporepository.save",{"_index":2162,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightreporepository.softdelete(id",{"_index":2165,"title":{},"body":{"injectables/InsightRepoService.html":{}}}],["this.insightrepository.createquerybuilder(\"insights",{"_index":2198,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.save(insight",{"_index":2203,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.softdelete(id",{"_index":2205,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightrepository.update(id",{"_index":2204,"title":{},"body":{"injectables/InsightsService.html":{}}}],["this.insightservice.findonebyid(insightid",{"_index":2124,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["this.insightsreposervice.addinsightrepo(insight.id",{"_index":3706,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.addinsightrepo(newinsight.id",{"_index":3682,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsreposervice.removeinsightrepo(insightrepo.id",{"_index":3696,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.addinsight",{"_index":3679,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findallbyuserid(pageoptionsdto",{"_index":3674,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(id",{"_index":2082,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["this.insightsservice.findonebyid(insightid",{"_index":3634,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.insightsservice.removeinsight(id",{"_index":2086,"title":{},"body":{"controllers/InsightController.html":{}}}],["this.insightsservice.updateinsight(id",{"_index":3683,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["this.itemcount",{"_index":2277,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.limit",{"_index":2275,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.logger",{"_index":978,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.debug(message",{"_index":988,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error",{"_index":984,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"controllers/StripeWebhookController.html":{}}}],["this.logger.error(`${query",{"_index":983,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.error(cliduration(starttime",{"_index":2048,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(`${query",{"_index":981,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.log(`inserted/updated",{"_index":3033,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.logger.log(cliduration(starttime",{"_index":2053,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.log(message",{"_index":987,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logger.warn(cliduration(starttime",{"_index":2051,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["this.logger.warn(message",{"_index":986,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.logsrepository.create(log",{"_index":2229,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsrepository.save(newlog",{"_index":2230,"title":{},"body":{"injectables/LogService.html":{}}}],["this.logsservice",{"_index":912,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.logsservice.createlog",{"_index":914,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["this.managesubscriptionstatuschange(subscription.id",{"_index":3049,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.managesubscriptionstatuschange(subscriptionid",{"_index":3056,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.marknotificationsasread(notificationids",{"_index":3759,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.memory.checkheap(\"memory.heap",{"_index":1932,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.memory.checkrss(\"memory.rss",{"_index":1934,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.meta",{"_index":2253,"title":{},"body":{"classes/PageDto.html":{}}}],["this.openaiservice.generatecompletion",{"_index":557,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["this.page",{"_index":2273,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/TopUsersDto.html":{}}}],["this.pagecount",{"_index":2278,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.pagerservice.applypagination",{"_index":1788,"title":{},"body":{"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserReposService.html":{}}}],["this.prinsightrepository.createquerybuilder(\"pr",{"_index":2392,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.pullrequestdescriptionservice.generatedescription(generatepullrequestdescriptiondto",{"_index":2358,"title":{},"body":{"controllers/PullRequestDescriptionController.html":{}}}],["this.pullrequestrepository.createquerybuilder(\"pull_requests",{"_index":2461,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestrepository.manager.createquerybuilder",{"_index":2473,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["this.pullrequestservice.findall(pageoptionsdto",{"_index":2339,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findallbycontributor(username",{"_index":3344,"title":{},"body":{"controllers/UserController.html":{}}}],["this.pullrequestservice.findallcontributorswithfilters(pageoptionsdto",{"_index":735,"title":{},"body":{"controllers/ContributorController.html":{}}}],["this.pullrequestservice.findallrecentcontributors(pageoptionsdto",{"_index":760,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestservice.findallwithfilters(pageoptionsdto",{"_index":2341,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.pullrequestservice.findnewcontributorsintimerange(pageoptionsdto",{"_index":758,"title":{},"body":{"controllers/ContributorInsightsController.html":{}}}],["this.pullrequestsinsightservice.getinsight(interval",{"_index":2347,"title":{},"body":{"controllers/PullRequestController.html":{}}}],["this.reactionsquerybuilder",{"_index":3866,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repofilterservice.getrepofilters(options",{"_index":2396,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.reporepository",{"_index":2646,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reporepository.createquerybuilder(\"repo",{"_index":2685,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.reposervice.findall(pageoptionsdto",{"_index":2543,"title":{},"body":{"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserController.html":{}}}],["this.reposervice.findallwithfilters(pageoptionsdto",{"_index":2545,"title":{},"body":{"controllers/RepoController.html":{}}}],["this.reposervice.findonebyid(id",{"_index":2514,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findonebyownerandrepo(owner",{"_index":2518,"title":{},"body":{"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{}}}],["this.reposervice.findrecommendations(interests",{"_index":3793,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["this.repostargazerepository.createquerybuilder(\"r2stargazes\").withdeleted",{"_index":2909,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.restore(stargazeexists.id",{"_index":2914,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.save",{"_index":2915,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostargazerepository.softdelete(stargazeexists.id",{"_index":2916,"title":{},"body":{"injectables/StargazeService.html":{}}}],["this.repostarrepository.createquerybuilder(\"r2stars\").withdeleted",{"_index":2881,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.restore(starexists.id",{"_index":2887,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.save",{"_index":2888,"title":{},"body":{"injectables/StarService.html":{}}}],["this.repostarrepository.softdelete(starexists.id",{"_index":2890,"title":{},"body":{"injectables/StarService.html":{}}}],["this.reposubmitrepository.createquerybuilder(\"r2submits\").withdeleted",{"_index":3076,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.restore(submitexists.id",{"_index":3082,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.save",{"_index":3083,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.reposubmitrepository.softdelete(submitexists.id",{"_index":3084,"title":{},"body":{"injectables/SubmitService.html":{}}}],["this.repovoterepository.createquerybuilder(\"r2votes\").withdeleted",{"_index":3948,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.restore(voteexists.id",{"_index":3952,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.save",{"_index":3953,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.repovoterepository.softdelete(voteexists.id",{"_index":3954,"title":{},"body":{"injectables/VoteService.html":{}}}],["this.stargazeservice.downstargazebyrepoid(item.id",{"_index":2776,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.stargazeservice.stargazebyrepoid(item.id",{"_index":2772,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["this.starservice.downstarbyrepoid(item.id",{"_index":2738,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.starservice.starbyrepoid(item.id",{"_index":2734,"title":{},"body":{"controllers/RepoStarController.html":{}}}],["this.stringifyparameters(parameters",{"_index":982,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["this.stripe.checkout.sessions.create",{"_index":2937,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.customers.create",{"_index":2936,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.addcustomer(id",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.createcheckoutsession(customerid",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.stripeservice.stripe.subscriptions.retrieve(subscriptionid",{"_index":3003,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripeservice.stripe.webhooks.constructevent(req.rawbody",{"_index":3043,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.stripesubscriptionservice.upsertsubscription(subscriptiondata",{"_index":3028,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.submitservice.downsubmitbyrepoid(item.id",{"_index":2812,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.submitservice.submitbyrepoid(item.id",{"_index":2809,"title":{},"body":{"controllers/RepoSubmitController.html":{}}}],["this.subquerycount(qb",{"_index":2654,"title":{},"body":{"injectables/RepoService.html":{}}}],["this.subquerycountprs(querybuilder",{"_index":2405,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["this.subscriptionrepository.createquerybuilder(\"subscription",{"_index":2968,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.subscriptionrepository.save(subscription",{"_index":2969,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["this.usercollaborationrepository.createquerybuilder(\"user_collaborations",{"_index":3295,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.save(usercollaboration",{"_index":3297,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.softdelete(id",{"_index":3299,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationrepository.update(id",{"_index":3298,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["this.usercollaborationservice.findallusercollaborations(pageoptionsdto",{"_index":3267,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.findonebyid(id",{"_index":3272,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.removeusercollaboration(id",{"_index":3280,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.usercollaborationservice.updateusercollaboration(id",{"_index":3276,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userfollowrepository.createquerybuilder(\"user_follows\").withdeleted",{"_index":3391,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.restore(followexists.id",{"_index":3400,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.save",{"_index":3402,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowrepository.softdelete(followexists.id",{"_index":3403,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.userfollowservice.adduserfollowerbyuserid(userid",{"_index":3429,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.finduserfollowerbyid(userid",{"_index":3427,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userfollowservice.removeuserfollowerbyid(userid",{"_index":3431,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["this.userhighlightreactionrepository",{"_index":3594,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.createquerybuilder(\"user_highlight_reactions",{"_index":3586,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["this.userhighlightreactionrepository.restore(reactionexists.id",{"_index":3599,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.save",{"_index":3601,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightreactionrepository.softdelete(id",{"_index":3602,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.create",{"_index":3577,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.createquerybuilder(\"user_highlights",{"_index":3553,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.save(newuserhighlight",{"_index":3583,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.softdelete(highlightid",{"_index":3585,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightrepository.update(highlightid",{"_index":3584,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.userhighlightsservice.addfeatured(id",{"_index":2014,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.adduserhighlight(userid",{"_index":3486,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.adduserhighlightreaction(userid",{"_index":3501,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlight(highlight.id",{"_index":3496,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.deleteuserhighlightreaction(userhighlightreaction.id",{"_index":3506,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findall(pageoptionsdto",{"_index":2007,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallbyuserid(pageoptionsdto",{"_index":3346,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userhighlightsservice.findallfeatured(pageoptionsdto",{"_index":2010,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.findallhighlightreactions(id",{"_index":2023,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findallhighlightrepos(pageoptionsdto",{"_index":2020,"title":{},"body":{"controllers/HighlightController.html":{},"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlight.id",{"_index":3495,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(highlightid",{"_index":3490,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findonebyid(id",{"_index":3488,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.findoneuserhighlightreaction",{"_index":3505,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.userhighlightsservice.removefeatured(id",{"_index":2016,"title":{},"body":{"controllers/HighlightController.html":{}}}],["this.userhighlightsservice.updateuserhighlight(highlight.id",{"_index":3491,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["this.usernotificationrepository.createquerybuilder(\"user_notifications",{"_index":3752,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.save",{"_index":3760,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationrepository.update(id",{"_index":3773,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["this.usernotificationservice.adduserfollowernotification(userid",{"_index":3401,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["this.usernotificationservice.adduserhighlightnotification(userid",{"_index":3600,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["this.usernotificationservice.findallbyuserid(userid",{"_index":3729,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["this.userreporepository.create",{"_index":3820,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.createquerybuilder(\"user_repos",{"_index":3817,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userreporepository.save(newuserrepo",{"_index":3821,"title":{},"body":{"injectables/UserReposService.html":{}}}],["this.userrepository.create",{"_index":3901,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder(\"users",{"_index":3865,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":3907,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(user.id",{"_index":3897,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.checkadduser(user",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findonebyemail(createinsightmemberdto.email",{"_index":3645,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["this.userservice.findonebyid(user.user_metadata.sub",{"_index":3270,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["this.userservice.findonebyusername(createusercollaborationdto.username",{"_index":3268,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["this.userservice.findonebyusername(username",{"_index":1738,"title":{},"body":{"controllers/EndorsementController.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["this.userservice.findtopusers(pageoptionsdto",{"_index":3352,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateemailpreferences(userid",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateinterests(userid",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updateonboarding(userid",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updaterole(userid",{"_index":3030,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["this.userservice.updateuser(userid",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.updatewaitliststatus(userid",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.voteservice.downvotebyrepoid(item.id",{"_index":2860,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.findonebyrepoid(repoid",{"_index":2853,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["this.voteservice.votebyrepoid(item.id",{"_index":2856,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["thresholdpercent",{"_index":1937,"title":{},"body":{"controllers/HealthController.html":{}}}],["throw",{"_index":497,"title":{},"body":{"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/EndorsementService.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{}}}],["time",{"_index":971,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["timeout",{"_index":4434,"title":{},"body":{"changelog.html":{}}}],["timestamp",{"_index":1008,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"changelog.html":{}}}],["timezone",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{}}}],["title",{"_index":862,"title":{},"body":{"classes/CreateUserHighlightDto.html":{},"entities/DbInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"injectables/UserHighlightsService.html":{}}}],["tld",{"_index":4794,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":5127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todatetime",{"_index":2989,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["todatetime(subscription.cancel_at",{"_index":3016,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.canceled_at",{"_index":3018,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.created",{"_index":3021,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_end",{"_index":3020,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.current_period_start",{"_index":3019,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.ended_at",{"_index":3023,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_end",{"_index":3027,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["todatetime(subscription.trial_start",{"_index":3025,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["today",{"_index":1228,"title":{},"body":{"entities/DbPRInsight.html":{}}}],["token",{"_index":1717,"title":{},"body":{"controllers/EndorsementController.html":{},"guards/EndorsementTokenGuard.html":{},"changelog.html":{}}}],["token.guard",{"_index":1710,"title":{},"body":{"controllers/EndorsementController.html":{},"modules/EndorsementModule.html":{}}}],["token.guard.ts",{"_index":1813,"title":{},"body":{"guards/EndorsementTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:5",{"_index":1816,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["token.guard.ts:8",{"_index":1819,"title":{},"body":{"guards/EndorsementTokenGuard.html":{}}}],["tone",{"_index":1883,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["tools",{"_index":4968,"title":{},"body":{"index.html":{}}}],["top",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"classes/DbTopUser.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserTopRepo.html":{},"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["top100",{"_index":2143,"title":{},"body":{"classes/InsightOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["top_repos",{"_index":2576,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos\".id",{"_index":2575,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["top_repos.stars",{"_index":2577,"title":{},"body":{"injectables/RepoFilterService.html":{}}}],["topic",{"_index":1830,"title":{},"body":{"classes/FilterOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{}}}],["topics",{"_index":4325,"title":{},"body":{"changelog.html":{}}}],["toprepos",{"_index":3349,"title":{},"body":{"controllers/UserController.html":{}}}],["topusersdto",{"_index":3160,"title":{"classes/TopUsersDto.html":{}},"body":{"classes/TopUsersDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["tort",{"_index":5064,"title":{},"body":{"license.html":{}}}],["total",{"_index":1002,"title":{},"body":{"entities/DbContribution.html":{},"controllers/HighlightController.html":{}}}],["transformer",{"_index":820,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/TopUsersDto.html":{}}}],["translatetime",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["translation",{"_index":588,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["transport",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["trial",{"_index":1454,"title":{},"body":{"entities/DbSubscription.html":{}}}],["trial_end_at",{"_index":1430,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trial_start_at",{"_index":1431,"title":{},"body":{"entities/DbSubscription.html":{},"controllers/StripeWebhookController.html":{}}}],["trigger",{"_index":4210,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateInsightDto.html":{},"guards/EndorsementTokenGuard.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"injectables/InsightMemberService.html":{},"injectables/LogService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/StripeService.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{}}}],["true`).orderby(\"user_highlights.updated_at",{"_index":3572,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["true})@isboolean",{"_index":3959,"title":{},"body":{"classes/VotedRepoDto.html":{}}}],["true})@type(undefined",{"_index":2246,"title":{},"body":{"classes/PageDto.html":{}}}],["true})@validatenested({each",{"_index":2245,"title":{},"body":{"classes/PageDto.html":{}}}],["try",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{}}}],["turbo",{"_index":5178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":3122,"title":{},"body":{"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"changelog.html":{}}}],["twitter_username",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["type",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ChatResponse.html":{},"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"classes/ContributionPageOptionsDto.html":{},"injectables/ContributionService.html":{},"controllers/ContributorController.html":{},"controllers/ContributorInsightsController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"classes/DbUserHighlightRepo.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"guards/EndorsementTokenGuard.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"controllers/HighlightController.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"controllers/PullRequestController.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"controllers/RepoContributionsController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":5092,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":474,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["typeorm",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/ContributionService.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbLog.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/EmojiService.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{},"injectables/PullRequestInsightsService.html":{},"injectables/PullRequestService.html":{},"injectables/RepoFilterService.html":{},"injectables/RepoService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeSubscriptionService.html":{},"injectables/SubmitService.html":{},"injectables/UserCollaborationService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["typeorm/query",{"_index":2303,"title":{},"body":{"injectables/PagerService.html":{},"interfaces/PaginationInput.html":{}}}],["typeormhealthindicator",{"_index":1920,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormlogger",{"_index":951,"title":{},"body":{"classes/DatabaseLoggerMiddleware.html":{}}}],["typeormmodule",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature",{"_index":3720,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([dbcustomer",{"_index":924,"title":{},"body":{"modules/CustomerModule.html":{}}}],["typeormmodule.forfeature([dbemoji",{"_index":1643,"title":{},"body":{"modules/EmojiModule.html":{}}}],["typeormmodule.forfeature([dbendorsement",{"_index":1754,"title":{},"body":{"modules/EndorsementModule.html":{}}}],["typeormmodule.forfeature([dbinsight",{"_index":2177,"title":{},"body":{"modules/InsightsModule.html":{}}}],["typeormmodule.forfeature([dblog",{"_index":2218,"title":{},"body":{"modules/LogModule.html":{}}}],["typeormmodule.forfeature([dbpullrequest",{"_index":766,"title":{},"body":{"modules/ContributorModule.html":{},"modules/PullRequestModule.html":{}}}],["typeormmodule.forfeature([dbrepo",{"_index":625,"title":{},"body":{"modules/ContributionModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/SubmitModule.html":{},"modules/VoteModule.html":{}}}],["typeormmodule.forfeature([dbsubscription",{"_index":2958,"title":{},"body":{"modules/StripeSubscriptionModule.html":{}}}],["typeormmodule.forfeature([dbuserhighlight",{"_index":2028,"title":{},"body":{"modules/HighlightModule.html":{}}}],["typeormmodule.forfeature([dbuserrepo",{"_index":3805,"title":{},"body":{"modules/UserReposModule.html":{}}}],["typeormmodule.forrootasync",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":4596,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["types:auto",{"_index":4988,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":4267,"title":{},"body":{"changelog.html":{}}}],["ucn2zrh2wgxkck7tt2jg4my6wbhkex9s",{"_index":5144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":1902,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["unable",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["unauthorizedexception",{"_index":2071,"title":{},"body":{"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["unblock",{"_index":4814,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":475,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{},"controllers/PullRequestController.html":{},"injectables/PullRequestInsightsService.html":{},"controllers/StripeWebhookController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":3453,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["undefined})@column({type",{"_index":1265,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["undefined})@isarray",{"_index":3230,"title":{},"body":{"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{}}}],["undefined})@isenum(contributionorderfieldsenum)@isoptional",{"_index":644,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{}}}],["undefined})@isenum(orderdirectionenum)@isoptional",{"_index":654,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/UserRepoOptionsDto.html":{}}}],["undefined})@isenum(pullrequestorderfieldsenum)@isoptional",{"_index":2426,"title":{},"body":{"classes/PullRequestPageOptionsDto.html":{}}}],["undefined})@isenum(repoorderfieldsenum)@isoptional",{"_index":2600,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{}}}],["undefined})@isoptional",{"_index":1885,"title":{},"body":{"classes/GeneratePullRequestDescriptionDto.html":{}}}],["undefined})@type(undefined)@isarray",{"_index":818,"title":{},"body":{"classes/CreateInsightDto.html":{},"classes/UpdateInsightDto.html":{}}}],["underscores",{"_index":3212,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["undo",{"_index":4611,"title":{},"body":{"changelog.html":{}}}],["unfeaturehighlight",{"_index":1964,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfeaturehighlight(id",{"_index":1991,"title":{},"body":{"controllers/HighlightController.html":{}}}],["unfollowed",{"_index":2752,"title":{},"body":{"controllers/RepoStargazeController.html":{},"injectables/StargazeService.html":{}}}],["unfollows",{"_index":2775,"title":{},"body":{"controllers/RepoStargazeController.html":{},"controllers/UserFollowsController.html":{}}}],["unfollows'})@apiokresponse({description",{"_index":2750,"title":{},"body":{"controllers/RepoStargazeController.html":{}}}],["unfollowuserbyuserid",{"_index":3409,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyuserid(username",{"_index":3419,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unfollowuserbyusername",{"_index":3421,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["unique",{"_index":994,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{}}}],["unit",{"_index":3980,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["unix",{"_index":5193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":516,"title":{},"body":{"controllers/CodeExplanationController.html":{},"injectables/CodeExplanationService.html":{},"controllers/CodeRefactorSuggestionController.html":{},"injectables/CodeRefactorSuggestionService.html":{},"controllers/CodeTestSuggestionController.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/CustomLogger.html":{},"injectables/CustomerService.html":{},"classes/DatabaseLoggerMiddleware.html":{},"controllers/EmojiController.html":{},"injectables/EmojiService.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HealthController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightRepoService.html":{},"injectables/InsightsService.html":{},"injectables/LogService.html":{},"injectables/OpenAiService.html":{},"injectables/PagerService.html":{},"controllers/PullRequestDescriptionController.html":{},"injectables/PullRequestDescriptionService.html":{},"controllers/RepoVoteController.html":{},"injectables/StripeService.html":{},"injectables/StripeSubscriptionService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SupabaseStrategy.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"miscellaneous/variables.html":{}}}],["unnecessary",{"_index":586,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["unprocessableentityexception",{"_index":3671,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["unread",{"_index":3119,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["up",{"_index":1480,"title":{},"body":{"entities/DbUserCollaboration.html":{},"changelog.html":{},"index.html":{}}}],["update",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/SupabaseAuthDto.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["update/remove",{"_index":4393,"title":{},"body":{"changelog.html":{}}}],["updated",{"_index":1145,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"changelog.html":{},"index.html":{}}}],["updated_at",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"classes/ContributionPageOptionsDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/PullRequestService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["updatedatecolumn",{"_index":1049,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["updatedinsightmember",{"_index":3655,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.access",{"_index":3658,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedinsightmember.user_id",{"_index":3657,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updatedusercollaboration",{"_index":3274,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateemailpreferences",{"_index":3829,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferences(id",{"_index":3850,"title":{},"body":{"injectables/UserService.html":{}}}],["updateemailpreferencesforuserprofile",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateemailpreferencesforuserprofile(userid",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateendorsementdto",{"_index":3166,"title":{"classes/UpdateEndorsementDto.html":{}},"body":{"classes/UpdateEndorsementDto.html":{},"coverage.html":{}}}],["updatehighlightdto",{"_index":3479,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightdto.shipped_at",{"_index":3492,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser",{"_index":3443,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updatehighlightforuser(updatehighlightdto",{"_index":3476,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["updateinsight",{"_index":2182,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsight(id",{"_index":2194,"title":{},"body":{"injectables/InsightsService.html":{}}}],["updateinsightdto",{"_index":2069,"title":{"classes/UpdateInsightDto.html":{}},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightDto.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["updateinsightdto.is_public",{"_index":3685,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.name",{"_index":3684,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.filter",{"_index":3702,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightdto.repos.find((repoinfo",{"_index":3691,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser",{"_index":3663,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightforuser(id",{"_index":3668,"title":{},"body":{"controllers/UserInsightsController.html":{}}}],["updateinsightmember",{"_index":2094,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmember(id",{"_index":2114,"title":{},"body":{"injectables/InsightMemberService.html":{},"controllers/UserInsightMemberController.html":{}}}],["updateinsightmemberdto",{"_index":3174,"title":{"classes/UpdateInsightMemberDto.html":{}},"body":{"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["updateinsightmemberdto.access",{"_index":3656,"title":{},"body":{"controllers/UserInsightMemberController.html":{}}}],["updateinterests",{"_index":3830,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterests(id",{"_index":3852,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinterestsforuserprofile",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateinterestsforuserprofile(userid",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateonboarding",{"_index":3831,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonboarding(id",{"_index":3854,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileforuser",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(@userid",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofileforuser(userid",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["updaterole",{"_index":3832,"title":{},"body":{"injectables/UserService.html":{}}}],["updaterole(id",{"_index":3856,"title":{},"body":{"injectables/UserService.html":{}}}],["updates",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{}}}],["updateuser",{"_index":3833,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(id",{"_index":3858,"title":{},"body":{"injectables/UserService.html":{}}}],["updateusercollaboration",{"_index":3240,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaboration(id",{"_index":3257,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["updateusercollaborationdto",{"_index":3180,"title":{"classes/UpdateUserCollaborationDto.html":{}},"body":{"classes/UpdateUserCollaborationDto.html":{},"controllers/UserCollaborationController.html":{},"coverage.html":{}}}],["updateusercollaborationdto.status",{"_index":3275,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["updateuserdto",{"_index":307,"title":{"classes/UpdateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuseremailpreferencesdto",{"_index":308,"title":{"classes/UpdateUserEmailPreferencesDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserhighlight",{"_index":3519,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserhighlight(highlightid",{"_index":3549,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["updateuserprofileinterestsdto",{"_index":317,"title":{"classes/UpdateUserProfileInterestsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updatewaitliststatus",{"_index":3834,"title":{},"body":{"injectables/UserService.html":{}}}],["updatewaitliststatus(id",{"_index":3860,"title":{},"body":{"injectables/UserService.html":{}}}],["upgrades",{"_index":4265,"title":{},"body":{"changelog.html":{}}}],["upsert",{"_index":3006,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["upsertsubscription",{"_index":2960,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["upsertsubscription(subscription",{"_index":2965,"title":{},"body":{"injectables/StripeSubscriptionService.html":{}}}],["url",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbPullRequest.html":{},"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["url'})@column({type",{"_index":1111,"title":{},"body":{"entities/DbEndorsement.html":{}}}],["url(`https://${subdomain",{"_index":5168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":4112,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":4183,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":2031,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["use(request",{"_index":2032,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["used",{"_index":4922,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/EndorsementController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useguards(endorsementtokenguard",{"_index":1713,"title":{},"body":{"controllers/EndorsementController.html":{}}}],["useguards(supabaseguard",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CodeExplanationController.html":{},"controllers/CodeRefactorSuggestionController.html":{},"controllers/CodeTestSuggestionController.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"controllers/PullRequestDescriptionController.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserEndorsementController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"controllers/UserRecommendationController.html":{}}}],["useless",{"_index":3564,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/ChatResponse.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"classes/DbTopUser.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"controllers/EndorsementController.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"modules/InsightsModule.html":{},"injectables/InsightsService.html":{},"injectables/OpenAiService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"controllers/StripeWebhookController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/SupabaseStrategy.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserController.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"classes/UserOnboardingDto.html":{},"controllers/UserRecommendationController.html":{},"classes/UserRepoOptionsDto-1.html":{},"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1174,"title":{},"body":{"entities/DbInsightMember.html":{},"classes/SupabaseAuthDto.html":{}}}],["user'})@apibearerauth()@apiokresponse()@useguards(supabaseguard",{"_index":3786,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apinotfoundresponse({description",{"_index":3457,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apiokresponse({type",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"controllers/InsightController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserHighlightsController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{}}}],["user'})@apibearerauth()@useguards(supabaseguard)@apipaginatedresponse(dbusercollaboration)@apiokresponse({type",{"_index":3252,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user'})@apiokresponse({type",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.bio",{"_index":3910,"title":{},"body":{"injectables/UserService.html":{}}}],["user.collaborations",{"_index":1496,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.collaborations)@joincolumn({name",{"_index":1490,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.company",{"_index":3913,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":3715,"title":{},"body":{"modules/UserModule.html":{}}}],["user.discord_url",{"_index":3919,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_email",{"_index":3922,"title":{},"body":{"injectables/UserService.html":{}}}],["user.display_local_time",{"_index":3915,"title":{},"body":{"injectables/UserService.html":{}}}],["user.dto",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":3186,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":3198,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:11",{"_index":3204,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:110",{"_index":3193,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:19",{"_index":3196,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":3189,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":3218,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:50",{"_index":3216,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:59",{"_index":3191,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":3201,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:77",{"_index":3195,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:86",{"_index":3207,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":3200,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":3909,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":1494,"title":{},"body":{"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserTopRepo.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.github_sponsors_url",{"_index":3917,"title":{},"body":{"injectables/UserService.html":{}}}],["user.highlights",{"_index":1530,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.highlights)@joincolumn({name",{"_index":1524,"title":{},"body":{"entities/DbUserHighlight.html":{}}}],["user.id",{"_index":3347,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserFollowsController.html":{}}}],["user.insights",{"_index":1152,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.insights)@joincolumn({name",{"_index":1148,"title":{},"body":{"entities/DbInsight.html":{}}}],["user.interests.join",{"_index":3921,"title":{},"body":{"injectables/UserService.html":{}}}],["user.interests?.split(\",\").filter(boolean",{"_index":3792,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user.is_open_sauced_member",{"_index":3896,"title":{},"body":{"injectables/UserService.html":{}}}],["user.linkedin_url",{"_index":3918,"title":{},"body":{"injectables/UserService.html":{}}}],["user.location",{"_index":3914,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":3908,"title":{},"body":{"injectables/UserService.html":{}}}],["user.receive_collaboration",{"_index":3923,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repotouserstargazers",{"_index":1367,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstargazers)@joincolumn({name",{"_index":1362,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["user.repotouserstars",{"_index":1382,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotouserstars)@joincolumn({name",{"_index":1378,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["user.repotousersubmissions",{"_index":1401,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotousersubmissions)@joincolumn({name",{"_index":1397,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["user.repotouservotes",{"_index":1416,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.repotouservotes)@joincolumn({name",{"_index":1412,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["user.request_collaborations",{"_index":1497,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.request_collaborations)@joincolumn({name",{"_index":1485,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user.role",{"_index":3573,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user.service",{"_index":3334,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{}}}],["user.timezone",{"_index":3916,"title":{},"body":{"injectables/UserService.html":{}}}],["user.toprepos",{"_index":1619,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.toprepos)@joincolumn({name",{"_index":1615,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["user.twitter_username",{"_index":3912,"title":{},"body":{"injectables/UserService.html":{}}}],["user.url",{"_index":3911,"title":{},"body":{"injectables/UserService.html":{}}}],["user/collaborations",{"_index":3236,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["user/dtos/update",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/endorsements",{"_index":3355,"title":{},"body":{"controllers/UserEndorsementController.html":{}}}],["user/entities/user",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"entities/DbEmoji.html":{},"classes/DbUserHighlightReactionResponse.html":{},"controllers/HighlightController.html":{},"modules/HighlightModule.html":{},"classes/HighlightOptionsDto.html":{}}}],["user/highlights",{"_index":3434,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["user/insights",{"_index":3605,"title":{},"body":{"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{}}}],["user/notifications",{"_index":3722,"title":{},"body":{"controllers/UserNotificationController.html":{}}}],["user/recommendations",{"_index":3781,"title":{},"body":{"controllers/UserRecommendationController.html":{}}}],["user/user",{"_index":2000,"title":{},"body":{"controllers/HighlightController.html":{}}}],["user/user.entity",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/DbInsight.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{}}}],["user/user.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{}}}],["user/user.service",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserInsightMemberController.html":{}}}],["user_collaborations",{"_index":1495,"title":{},"body":{"entities/DbUserCollaboration.html":{}}}],["user_follows",{"_index":3884,"title":{},"body":{"injectables/UserService.html":{}}}],["user_follows.deleted_at",{"_index":3885,"title":{},"body":{"injectables/UserService.html":{}}}],["user_follows_deleted_at",{"_index":3398,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["user_highlight_reactions",{"_index":1550,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["user_highlight_reactions.user_id",{"_index":3868,"title":{},"body":{"injectables/UserService.html":{}}}],["user_highlights",{"_index":1528,"title":{},"body":{"entities/DbUserHighlight.html":{},"injectables/UserService.html":{}}}],["user_highlights.deleted_at",{"_index":3881,"title":{},"body":{"injectables/UserService.html":{}}}],["user_highlights.user_id",{"_index":3562,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights.user_id=users.id",{"_index":3555,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_login",{"_index":3557,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_highlights_name",{"_index":3560,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_id",{"_index":1123,"title":{},"body":{"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"injectables/InsightsService.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"injectables/UserNotificationService.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["user_id=:userid",{"_index":3563,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["user_metadata",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/SupabaseAuthDto.html":{},"injectables/UserService.html":{}}}],["user_notifications",{"_index":1589,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserService.html":{}}}],["user_notifications.read_at",{"_index":3874,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.type",{"_index":3873,"title":{},"body":{"injectables/UserService.html":{}}}],["user_notifications.user_id=users.id",{"_index":3753,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["user_repos",{"_index":1597,"title":{},"body":{"entities/DbUserRepo.html":{}}}],["user_top_repos",{"_index":1618,"title":{},"body":{"entities/DbUserTopRepo.html":{}}}],["usercollaboration",{"_index":3278,"title":{},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{}}}],["usercollaboration.user_id",{"_index":3279,"title":{},"body":{"controllers/UserCollaborationController.html":{}}}],["usercollaborationcontroller",{"_index":3233,"title":{"controllers/UserCollaborationController.html":{}},"body":{"controllers/UserCollaborationController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercollaborationrepository",{"_index":3285,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["usercollaborationservice",{"_index":3261,"title":{"injectables/UserCollaborationService.html":{}},"body":{"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercontroller",{"_index":3304,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["userendorsementcontroller",{"_index":3353,"title":{"controllers/UserEndorsementController.html":{}},"body":{"controllers/UserEndorsementController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowrepository",{"_index":3379,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["userfollowscontroller",{"_index":3405,"title":{"controllers/UserFollowsController.html":{}},"body":{"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userfollowservice",{"_index":3371,"title":{"injectables/UserFollowService.html":{}},"body":{"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userhighlightreaction",{"_index":3504,"title":{},"body":{"controllers/UserHighlightsController.html":{}}}],["userhighlightreactionrepository",{"_index":3521,"title":{},"body":{"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["userhighlightrepository",{"_index":3523,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["userhighlightscontroller",{"_index":3432,"title":{"controllers/UserHighlightsController.html":{}},"body":{"controllers/UserHighlightsController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userhighlightsservice",{"_index":1999,"title":{"injectables/UserHighlightsService.html":{}},"body":{"controllers/HighlightController.html":{},"controllers/UserController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CustomerService.html":{},"injectables/EndorsementService.html":{},"controllers/HighlightController.html":{},"controllers/InsightController.html":{},"injectables/InsightMemberService.html":{},"injectables/InsightsService.html":{},"injectables/RepoService.html":{},"controllers/RepoStarController.html":{},"controllers/RepoStargazeController.html":{},"controllers/RepoSubmitController.html":{},"controllers/RepoVoteController.html":{},"injectables/StarService.html":{},"injectables/StargazeService.html":{},"injectables/StripeService.html":{},"controllers/StripeWebhookController.html":{},"injectables/SubmitService.html":{},"controllers/UserCollaborationController.html":{},"injectables/UserCollaborationService.html":{},"controllers/UserEndorsementController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"controllers/UserInsightsController.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserReposService.html":{},"injectables/UserService.html":{},"injectables/VoteService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userinsightmembercontroller",{"_index":2172,"title":{"controllers/UserInsightMemberController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightMemberController.html":{},"coverage.html":{}}}],["userinsightscontroller",{"_index":2171,"title":{"controllers/UserInsightsController.html":{}},"body":{"modules/InsightsModule.html":{},"controllers/UserInsightsController.html":{},"coverage.html":{}}}],["userinterests",{"_index":2686,"title":{},"body":{"injectables/RepoService.html":{}}}],["userinterests[interest",{"_index":2693,"title":{},"body":{"injectables/RepoService.html":{}}}],["usermessage",{"_index":467,"title":{},"body":{"interfaces/ChatResponse.html":{},"injectables/OpenAiService.html":{}}}],["usermodule",{"_index":46,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/StripeWebHookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserCollaborationDto.html":{},"entities/DbPullRequest.html":{},"classes/DbPullRequestContributor.html":{},"controllers/EndorsementController.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["username'})@apinotfoundresponse({description",{"_index":3413,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({description",{"_index":3422,"title":{},"body":{"controllers/UserFollowsController.html":{}}}],["username'})@apiokresponse({type",{"_index":3327,"title":{},"body":{"controllers/UserController.html":{}}}],["username'})@apipaginatedresponse(dbpullrequest)@apiokresponse({type",{"_index":3321,"title":{},"body":{"controllers/UserController.html":{}}}],["usernames",{"_index":3214,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["usernotification",{"_index":3744,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.from_user_id",{"_index":3764,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.message",{"_index":3763,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.meta_id",{"_index":3765,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.type",{"_index":3761,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotification.user_id",{"_index":3762,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationcontroller",{"_index":3713,"title":{"controllers/UserNotificationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"coverage.html":{}}}],["usernotificationrepository",{"_index":3737,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationservice",{"_index":3377,"title":{"injectables/UserNotificationService.html":{}},"body":{"injectables/UserFollowService.html":{},"injectables/UserHighlightsService.html":{},"modules/UserModule.html":{},"controllers/UserNotificationController.html":{},"injectables/UserNotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["usernotificationtypes",{"_index":1585,"title":{},"body":{"entities/DbUserNotification.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usernotificationtypes.follow",{"_index":3768,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["usernotificationtypes.highlightreaction",{"_index":3770,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["useronboardingdto",{"_index":294,"title":{"classes/UserOnboardingDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserOnboardingDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userprofile",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["userprofile.email",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrecommendationcontroller",{"_index":3714,"title":{"controllers/UserRecommendationController.html":{}},"body":{"modules/UserModule.html":{},"controllers/UserRecommendationController.html":{},"coverage.html":{}}}],["userrelations",{"_index":2626,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrelations?.map((relation",{"_index":2673,"title":{},"body":{"injectables/RepoService.html":{}}}],["userrepooptionsdto",{"_index":3794,"title":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{}},"body":{"classes/UserRepoOptionsDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/UserReposService.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["userreporepository",{"_index":3810,"title":{},"body":{"injectables/UserReposService.html":{}}}],["userrepository",{"_index":3837,"title":{},"body":{"injectables/UserService.html":{}}}],["userreposmodule",{"_index":47,"title":{"modules/UserReposModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserReposModule.html":{},"modules.html":{},"overview.html":{}}}],["userreposservice",{"_index":3802,"title":{"injectables/UserReposService.html":{}},"body":{"modules/UserReposModule.html":{},"injectables/UserReposService.html":{},"coverage.html":{},"overview.html":{}}}],["userrole",{"_index":3029,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["users",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EndorsementService.html":{},"injectables/InsightMemberService.html":{},"controllers/UserController.html":{},"controllers/UserFollowsController.html":{},"controllers/UserHighlightsController.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserNotificationService.html":{},"injectables/UserService.html":{},"changelog.html":{},"index.html":{}}}],["users'})@apiokresponse({type",{"_index":3332,"title":{},"body":{"controllers/UserController.html":{}}}],["users.dto",{"_index":3338,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.dto.ts",{"_index":3162,"title":{},"body":{"classes/TopUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:14",{"_index":3164,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.dto.ts:26",{"_index":3163,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.dto.ts:28",{"_index":3165,"title":{},"body":{"classes/TopUsersDto.html":{}}}],["users.entity",{"_index":3336,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users.entity.ts",{"_index":1465,"title":{},"body":{"classes/DbTopUser.html":{},"coverage.html":{}}}],["users.entity.ts:8",{"_index":1467,"title":{},"body":{"classes/DbTopUser.html":{}}}],["users.id",{"_index":3867,"title":{},"body":{"injectables/UserService.html":{}}}],["users_email",{"_index":3878,"title":{},"body":{"injectables/UserService.html":{}}}],["users_followers_count",{"_index":3887,"title":{},"body":{"injectables/UserService.html":{}}}],["users_following_count",{"_index":3886,"title":{},"body":{"injectables/UserService.html":{}}}],["users_highlights_count",{"_index":3882,"title":{},"body":{"injectables/UserService.html":{}}}],["users_notification_count",{"_index":3875,"title":{},"body":{"injectables/UserService.html":{}}}],["users_to_repos_stargazers",{"_index":1365,"title":{},"body":{"entities/DbRepoToUserStargazers.html":{}}}],["users_to_repos_stars",{"_index":1381,"title":{},"body":{"entities/DbRepoToUserStars.html":{}}}],["users_to_repos_submissions",{"_index":1400,"title":{},"body":{"entities/DbRepoToUserSubmissions.html":{}}}],["users_to_repos_votes",{"_index":1415,"title":{},"body":{"entities/DbRepoToUserVotes.html":{}}}],["users_to_users_followers",{"_index":1608,"title":{},"body":{"entities/DbUserToUserFollows.html":{},"injectables/UserHighlightsService.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":345,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EndorsementController.html":{},"controllers/StripeWebhookController.html":{},"controllers/UserCollaborationController.html":{},"controllers/UserController.html":{},"injectables/UserFollowService.html":{},"controllers/UserFollowsController.html":{},"injectables/UserHighlightsService.html":{},"controllers/UserInsightMemberController.html":{},"modules/UserModule.html":{},"injectables/UserNotificationService.html":{},"controllers/UserRecommendationController.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":716,"title":{},"body":{"controllers/ContributorController.html":{},"controllers/PullRequestController.html":{},"controllers/RepoController.html":{},"injectables/RepoFilterService.html":{},"changelog.html":{},"index.html":{}}}],["utc",{"_index":3205,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/UserOnboardingDto.html":{}}}],["utc:hh:mm:ss.l",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["util/cli",{"_index":2040,"title":{},"body":{"injectables/HttpLoggerMiddleware.html":{}}}],["utils",{"_index":2990,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["uuid",{"_index":1084,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{},"controllers/StripeWebhookController.html":{}}}],["v4",{"_index":1099,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlightReaction.html":{}}}],["v4'})@column({type",{"_index":1539,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["v4'})@primarycolumn()@primarygeneratedcolumn",{"_index":1164,"title":{},"body":{"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{}}}],["v4'})@primarygeneratedcolumn",{"_index":1085,"title":{},"body":{"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbUserHighlightReaction.html":{}}}],["valid",{"_index":593,"title":{},"body":{"injectables/CodeRefactorSuggestionService.html":{},"injectables/CodeTestSuggestionService.html":{}}}],["validate",{"_index":3135,"title":{},"body":{"injectables/SupabaseStrategy.html":{},"changelog.html":{}}}],["validate(user",{"_index":3140,"title":{},"body":{"injectables/SupabaseStrategy.html":{}}}],["validatenested",{"_index":2250,"title":{},"body":{"classes/PageDto.html":{}}}],["validation",{"_index":4203,"title":{},"body":{"changelog.html":{}}}],["validator",{"_index":667,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"classes/CreateEndorsementDto.html":{},"classes/CreateInsightDto.html":{},"classes/CreateInsightMemberDto.html":{},"classes/CreateLogDto.html":{},"classes/CreateUserCollaborationDto.html":{},"classes/CreateUserHighlightDto.html":{},"classes/DbUserHighlightReactionResponse.html":{},"classes/FilterOptionsDto.html":{},"classes/GenerateCodeExplanationDto.html":{},"classes/GenerateCodeRefactorSuggestionDto.html":{},"classes/GenerateCodeTestSuggestionDto.html":{},"classes/GeneratePullRequestDescriptionDto.html":{},"classes/HighlightOptionsDto.html":{},"classes/InsightOptionsDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"classes/PullRequestPageOptionsDto.html":{},"classes/RepoInfo.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"classes/TopUsersDto.html":{},"classes/UpdateInsightMemberDto.html":{},"classes/UpdateUserCollaborationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserEmailPreferencesDto.html":{},"classes/UpdateUserProfileInterestsDto.html":{},"classes/UserOnboardingDto.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{}}}],["value",{"_index":639,"title":{},"body":{"classes/ContributionPageOptionsDto.html":{},"entities/DbPullRequest.html":{},"classes/FilterOptionsDto.html":{},"classes/HighlightOptionsDto.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/InsightMemberService.html":{},"classes/InsightOptionsDto.html":{},"classes/InsightPageOptionsDto.html":{},"classes/PageOptionsDto.html":{},"classes/PullRequestContributorInsightsDto.html":{},"classes/PullRequestContributorOptionsDto.html":{},"injectables/PullRequestInsightsService.html":{},"classes/PullRequestPageOptionsDto.html":{},"injectables/RepoFilterService.html":{},"classes/RepoPageOptionsDto.html":{},"classes/RepoSearchOptionsDto.html":{},"injectables/RepoService.html":{},"classes/TopUsersDto.html":{},"classes/UserRepoOptionsDto.html":{},"injectables/UserService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":4189,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["variable",{"_index":4665,"title":{},"body":{"changelog.html":{},"coverage.html":{}}}],["variables",{"_index":4655,"title":{"miscellaneous/variables.html":{}},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":998,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbCustomer.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserNotification.html":{}}}],["velocity",{"_index":4054,"title":{},"body":{"changelog.html":{}}}],["verbose",{"_index":890,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verbose(message",{"_index":903,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["verify",{"_index":4799,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":4758,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["versiond",{"_index":4807,"title":{},"body":{"changelog.html":{}}}],["versioning",{"_index":4195,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":4531,"title":{},"body":{"changelog.html":{}}}],["videos",{"_index":5005,"title":{},"body":{"index.html":{}}}],["view",{"_index":2063,"title":{},"body":{"controllers/InsightController.html":{},"classes/UpdateInsightMemberDto.html":{},"controllers/UserInsightMemberController.html":{},"changelog.html":{}}}],["view'})@isstring()@isin(['view",{"_index":3175,"title":{},"body":{"classes/UpdateInsightMemberDto.html":{}}}],["virtual",{"_index":1551,"title":{},"body":{"entities/DbUserHighlightReaction.html":{}}}],["visibility",{"_index":809,"title":{},"body":{"classes/CreateInsightDto.html":{},"entities/DbInsight.html":{},"classes/UpdateInsightDto.html":{},"changelog.html":{}}}],["visit",{"_index":4884,"title":{},"body":{"index.html":{}}}],["visual",{"_index":5010,"title":{},"body":{"index.html":{}}}],["visualisation",{"_index":4510,"title":{},"body":{"changelog.html":{}}}],["visualization",{"_index":5009,"title":{},"body":{"index.html":{}}}],["visualizer",{"_index":5013,"title":{},"body":{"index.html":{}}}],["vite",{"_index":4524,"title":{},"body":{"changelog.html":{}}}],["vitest",{"_index":4970,"title":{},"body":{"index.html":{}}}],["void",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/HttpLoggerMiddleware.html":{},"injectables/RepoFilterService.html":{},"injectables/SupabaseStrategy.html":{}}}],["volume",{"_index":4701,"title":{},"body":{"changelog.html":{}}}],["volumes",{"_index":4733,"title":{},"body":{"changelog.html":{}}}],["vortex",{"_index":1061,"title":{},"body":{"entities/DbContribution.html":{},"classes/SupabaseAuthDto.html":{},"properties.html":{}}}],["vortex'})@column({type",{"_index":996,"title":{},"body":{"entities/DbContribution.html":{}}}],["vortex/api.opensauced.pizza",{"_index":4776,"title":{},"body":{"changelog.html":{}}}],["vortex@opensauced.pizza",{"_index":3098,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["vote",{"_index":1404,"title":{},"body":{"entities/DbRepoToUserVotes.html":{},"controllers/RepoVoteController.html":{},"injectables/VoteService.html":{},"changelog.html":{}}}],["vote'})@apiokresponse({description",{"_index":2825,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller",{"_index":3931,"title":{},"body":{"modules/VoteModule.html":{}}}],["vote.controller.ts",{"_index":2816,"title":{},"body":{"controllers/RepoVoteController.html":{},"coverage.html":{}}}],["vote.controller.ts:113",{"_index":2827,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:132",{"_index":2830,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:36",{"_index":2834,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:54",{"_index":2839,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:71",{"_index":2842,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.controller.ts:90",{"_index":2845,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["vote.service",{"_index":2847,"title":{},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{}}}],["vote/vote.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["votebyrepoid",{"_index":3935,"title":{},"body":{"injectables/VoteService.html":{}}}],["votebyrepoid(repoid",{"_index":3945,"title":{},"body":{"injectables/VoteService.html":{}}}],["voted",{"_index":2833,"title":{},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"injectables/VoteService.html":{},"classes/VotedRepoDto.html":{},"changelog.html":{}}}],["votedrepodto",{"_index":2838,"title":{"classes/VotedRepoDto.html":{}},"body":{"controllers/RepoVoteController.html":{},"classes/UserRepoOptionsDto-1.html":{},"classes/VotedRepoDto.html":{},"coverage.html":{}}}],["voteexists",{"_index":3949,"title":{},"body":{"injectables/VoteService.html":{}}}],["voteexists.deleted_at",{"_index":3951,"title":{},"body":{"injectables/VoteService.html":{}}}],["votemodule",{"_index":48,"title":{"modules/VoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VoteModule.html":{},"modules.html":{},"overview.html":{}}}],["voteonebyid",{"_index":2821,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(@param(\"id",{"_index":2855,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyid(id",{"_index":2840,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo",{"_index":2822,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["voteonebyownerandrepo(owner",{"_index":2843,"title":{},"body":{"controllers/RepoVoteController.html":{}}}],["votes",{"_index":2655,"title":{},"body":{"injectables/RepoService.html":{},"controllers/RepoVoteController.html":{}}}],["votescount",{"_index":2608,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"injectables/RepoService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["voteservice",{"_index":2846,"title":{"injectables/VoteService.html":{}},"body":{"controllers/RepoVoteController.html":{},"modules/VoteModule.html":{},"injectables/VoteService.html":{},"coverage.html":{},"overview.html":{}}}],["voting",{"_index":4117,"title":{},"body":{"changelog.html":{}}}],["waitlist",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{},"changelog.html":{}}}],["waitlisted",{"_index":3108,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["warn",{"_index":891,"title":{},"body":{"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{}}}],["warn(message",{"_index":905,"title":{},"body":{"injectables/CustomLogger.html":{}}}],["warnings",{"_index":4150,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":5051,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":5047,"title":{},"body":{"license.html":{}}}],["watch",{"_index":4951,"title":{},"body":{"index.html":{}}}],["watchers",{"_index":2605,"title":{},"body":{"classes/RepoPageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["watchman",{"_index":4956,"title":{},"body":{"index.html":{}}}],["web",{"_index":1910,"title":{},"body":{"controllers/HealthController.html":{}}}],["webhook",{"_index":4385,"title":{},"body":{"changelog.html":{}}}],["webhook.controller",{"_index":2976,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhook.controller.ts",{"_index":2978,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook.controller.ts:32",{"_index":2987,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook.controller.ts:82",{"_index":2984,"title":{},"body":{"controllers/StripeWebhookController.html":{}}}],["webhook/stripe",{"_index":2977,"title":{},"body":{"controllers/StripeWebhookController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/utils.ts",{"_index":4848,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook/webhook.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["webhook/webhook.module.ts",{"_index":2975,"title":{},"body":{"modules/StripeWebHookModule.html":{}}}],["webhooksecret",{"_index":3040,"title":{},"body":{"controllers/StripeWebhookController.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":3126,"title":{},"body":{"classes/SupabaseAuthDto.html":{}}}],["welcome",{"_index":1591,"title":{},"body":{"entities/DbUserNotification.html":{},"miscellaneous/enumerations.html":{}}}],["welcome'})@column({type",{"_index":1584,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["where(\"endorsements.recipient_user_id",{"_index":1791,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"id",{"_index":3876,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"insight_members.insight_id",{"_index":2125,"title":{},"body":{"injectables/InsightMemberService.html":{}}}],["where(\"insights.id",{"_index":2199,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"insights.user_id",{"_index":2206,"title":{},"body":{"injectables/InsightsService.html":{}}}],["where(\"lower(repos.full_name",{"_index":1796,"title":{},"body":{"injectables/EndorsementService.html":{}}}],["where(\"r2stargazes.repo_id",{"_index":2910,"title":{},"body":{"injectables/StargazeService.html":{}}}],["where(\"r2votes.repo_id",{"_index":3956,"title":{},"body":{"injectables/VoteService.html":{}}}],["where(\"user_collaborations.user_id",{"_index":3302,"title":{},"body":{"injectables/UserCollaborationService.html":{}}}],["where(\"user_follows.user_id",{"_index":3392,"title":{},"body":{"injectables/UserFollowService.html":{}}}],["where(\"user_highlight_reactions.deleted_at",{"_index":3869,"title":{},"body":{"injectables/UserService.html":{}}}],["where(\"user_highlight_reactions.highlight_id",{"_index":3589,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_highlights.id",{"_index":3558,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["where(\"user_id",{"_index":3754,"title":{},"body":{"injectables/UserNotificationService.html":{}}}],["where(`${aliastable}.${target}_id",{"_index":2644,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`(:topic",{"_index":2690,"title":{},"body":{"injectables/RepoService.html":{}}}],["where(`lower(\"pull_requests\".\"author_login\")=:contributor",{"_index":2465,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["where(`pull_requests.updated_at",{"_index":2490,"title":{},"body":{"injectables/PullRequestService.html":{}}}],["whether",{"_index":1503,"title":{},"body":{"entities/DbUserHighlight.html":{},"classes/SupabaseAuthDto.html":{},"license.html":{}}}],["withdeleted",{"_index":3596,"title":{},"body":{"injectables/UserHighlightsService.html":{}}}],["without",{"_index":1014,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{},"changelog.html":{},"license.html":{}}}],["work",{"_index":4606,"title":{},"body":{"changelog.html":{}}}],["workflow",{"_index":3995,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["workflows",{"_index":4154,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":4547,"title":{},"body":{"changelog.html":{}}}],["write",{"_index":4965,"title":{},"body":{"index.html":{}}}],["writing",{"_index":4497,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["written",{"_index":548,"title":{},"body":{"injectables/CodeExplanationService.html":{},"injectables/CodeRefactorSuggestionService.html":{},"injectables/PullRequestDescriptionService.html":{}}}],["x509",{"_index":4913,"title":{},"body":{"index.html":{}}}],["xa",{"_index":1301,"title":{},"body":{"entities/DbPullRequest.html":{}}}],["yaml",{"_index":4750,"title":{},"body":{"changelog.html":{}}}],["year",{"_index":4215,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":684,"title":{},"body":{"injectables/ContributionService.html":{},"injectables/CustomLogger.html":{},"classes/DatabaseLoggerMiddleware.html":{},"injectables/RepoService.html":{},"injectables/StripeService.html":{},"injectables/UserHighlightsService.html":{}}}],["yml",{"_index":4093,"title":{},"body":{"changelog.html":{}}}],["you'})@column({type",{"_index":1575,"title":{},"body":{"entities/DbUserNotification.html":{}}}],["your_api_domain",{"_index":4895,"title":{},"body":{"index.html":{}}}],["your_supabase_api_key",{"_index":4893,"title":{},"body":{"index.html":{}}}],["your_supabase_jwt_secret",{"_index":4894,"title":{},"body":{"index.html":{}}}],["your_supabase_url",{"_index":4892,"title":{},"body":{"index.html":{}}}],["youtube",{"_index":5007,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":2399,"title":{},"body":{"injectables/PullRequestInsightsService.html":{}}}],["zone",{"_index":1015,"title":{},"body":{"entities/DbContribution.html":{},"entities/DbEmoji.html":{},"entities/DbEndorsement.html":{},"entities/DbInsight.html":{},"entities/DbInsightMember.html":{},"entities/DbInsightRepo.html":{},"entities/DbPRInsight.html":{},"entities/DbPullRequest.html":{},"entities/DbRepoToUserStargazers.html":{},"entities/DbRepoToUserStars.html":{},"entities/DbRepoToUserSubmissions.html":{},"entities/DbRepoToUserVotes.html":{},"entities/DbSubscription.html":{},"entities/DbUserCollaboration.html":{},"entities/DbUserHighlight.html":{},"entities/DbUserHighlightReaction.html":{},"entities/DbUserNotification.html":{},"entities/DbUserRepo.html":{},"entities/DbUserToUserFollows.html":{},"entities/DbUserTopRepo.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/ApiServicesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ContributionModule.html":{},"modules/ContributorModule.html":{},"modules/CustomerModule.html":{},"modules/EmojiModule.html":{},"modules/EndorsementModule.html":{},"modules/HighlightModule.html":{},"modules/InsightsModule.html":{},"modules/LogModule.html":{},"modules/OpenAiModule.html":{},"modules/PullRequestModule.html":{},"modules/RepoFilterModule.html":{},"modules/RepoModule.html":{},"modules/StarModule.html":{},"modules/StargazeModule.html":{},"modules/StripeModule.html":{},"modules/StripeSubscriptionModule.html":{},"modules/StripeWebHookModule.html":{},"modules/SubmitModule.html":{},"modules/UserModule.html":{},"modules/UserReposModule.html":{},"modules/VoteModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiServicesModule.html":{"url":"modules/ApiServicesModule.html","title":"module - ApiServicesModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiServicesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/services/api-services.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PagerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PagerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PagerService } from \"./pager.service\";\n\n@Module({\n  providers: [PagerService],\n  exports: [PagerService],\n})\nexport class ApiServicesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ContributionModule\n                        \n                        \n                            ContributorModule\n                        \n                        \n                            CustomerModule\n                        \n                        \n                            EmojiModule\n                        \n                        \n                            EndorsementModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            HighlightModule\n                        \n                        \n                            InsightsModule\n                        \n                        \n                            OpenAiModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                        \n                            StarModule\n                        \n                        \n                            StargazeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            StripeWebHookModule\n                        \n                        \n                            SubmitModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                        \n                            VoteModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from \"@nestjs/common\";\nimport { InjectDataSource, TypeOrmModule } from \"@nestjs/typeorm\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { HttpModule } from \"@nestjs/axios\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { DataSource } from \"typeorm\";\nimport { TypeOrmModuleOptions } from \"@nestjs/typeorm/dist/interfaces/typeorm-options.interface\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nimport { ApiConfig, DbApiConfig, DbLoggingConfig, EndpointConfig, StripeConfig, OpenAIConfig } from \"./config\";\nimport { RepoModule } from \"./repo/repo.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { DbRepo } from \"./repo/entities/repo.entity\";\nimport { DbUser } from \"./user/user.entity\";\nimport { DbContribution } from \"./contribution/contribution.entity\";\nimport { DbRepoToUserVotes } from \"./repo/entities/repo.to.user.votes.entity\";\nimport { DbRepoToUserStars } from \"./repo/entities/repo.to.user.stars.entity\";\nimport { DbRepoToUserSubmissions } from \"./repo/entities/repo.to.user.submissions.entity\";\nimport { DbRepoToUserStargazers } from \"./repo/entities/repo.to.user.stargazers.entity\";\nimport { AuthModule } from \"./auth/auth.module\";\nimport { VoteModule } from \"./vote/vote.module\";\nimport { StarModule } from \"./star/star.module\";\nimport { StargazeModule } from \"./stargaze/stargaze.module\";\nimport { SubmitModule } from \"./submit/submit.module\";\nimport { ContributionModule } from \"./contribution/contribution.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { HttpLoggerMiddleware } from \"./common/middleware/http-logger.middleware\";\nimport { DatabaseLoggerMiddleware } from \"./common/middleware/database-logger.middleware\";\nimport { InsightsModule } from \"./insight/insights.module\";\nimport { DbInsight } from \"./insight/entities/insight.entity\";\nimport { DbInsightRepo } from \"./insight/entities/insight-repo.entity\";\nimport { UserReposModule } from \"./user-repo/user-repos.module\";\nimport { DbUserRepo } from \"./user-repo/user-repo.entity\";\nimport { DbCustomer } from \"./customer/customer.entity\";\nimport { CustomerModule } from \"./customer/customer.module\";\nimport { StripeWebHookModule } from \"./stripe-webhook/webhook.module\";\nimport { EmojiModule } from \"./emoji/emoji.module\";\nimport { StripeSubscriptionModule } from \"./subscription/stripe-subscription.module\";\nimport { DbSubscription } from \"./subscription/stripe-subscription.dto\";\nimport { DbLog } from \"./log/log.entity\";\nimport { PullRequestModule } from \"./pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"./pull-requests/entities/pull-request.entity\";\nimport { DbUserHighlight } from \"./user/entities/user-highlight.entity\";\nimport { HighlightModule } from \"./highlight/highlight.module\";\nimport { DbUserToUserFollows } from \"./user/entities/user-follows.entity\";\nimport { DbInsightMember } from \"./insight/entities/insight-member.entity\";\nimport { DbEmoji } from \"./emoji/entities/emoji.entity\";\nimport { DbUserHighlightReaction } from \"./user/entities/user-highlight-reaction.entity\";\nimport { DbPRInsight } from \"./pull-requests/entities/pull-request-insight.entity\";\nimport { DbUserTopRepo } from \"./user/entities/user-top-repo.entity\";\nimport { DbUserNotification } from \"./user/entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./user/entities/user-collaboration.entity\";\nimport { EndorsementModule } from \"./endorsement/endorsement.module\";\nimport { DbEndorsement } from \"./endorsement/entities/endorsement.entity\";\nimport { ContributorModule } from \"./contributor/contributor.module\";\nimport { OpenAiModule } from \"./open-ai/open-ai.module\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [ApiConfig, DbApiConfig, DbLoggingConfig, EndpointConfig, StripeConfig, OpenAIConfig],\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"ApiConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-api.connection\"),\n          host: configService.get(\"db-api.host\"),\n          port: configService.get(\"db-api.port\"),\n          username: configService.get(\"db-api.username\"),\n          password: configService.get(\"db-api.password\"),\n          database: configService.get(\"db-api.database\"),\n          autoLoadEntities: false,\n          entities: [\n            DbUser,\n            DbUserRepo,\n            DbUserHighlight,\n            DbUserHighlightReaction,\n            DbUserNotification,\n            DbUserCollaboration,\n            DbRepo,\n            DbContribution,\n            DbRepoToUserVotes,\n            DbRepoToUserStars,\n            DbRepoToUserSubmissions,\n            DbRepoToUserStargazers,\n            DbInsight,\n            DbInsightMember,\n            DbInsightRepo,\n            DbCustomer,\n            DbSubscription,\n            DbPullRequest,\n            DbPRInsight,\n            DbUserToUserFollows,\n            DbEmoji,\n            DbUserTopRepo,\n            DbEndorsement,\n          ],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"OS\"),\n          ssl: {\n            ca: configService.get(\"db-api.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-api.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      name: \"LogConnection\",\n      useFactory: (configService: ConfigService) =>\n        ({\n          parseInt8: true,\n          type: configService.get(\"db-logging.connection\"),\n          host: configService.get(\"db-logging.host\"),\n          port: configService.get(\"db-logging.port\"),\n          username: configService.get(\"db-logging.username\"),\n          password: configService.get(\"db-logging.password\"),\n          database: configService.get(\"db-logging.database\"),\n          autoLoadEntities: false,\n          entities: [DbLog],\n          synchronize: false,\n          logger: new DatabaseLoggerMiddleware(\"LG\"),\n          ssl: {\n            ca: configService.get(\"db-logging.certificate\"),\n            rejectUnauthorized: false,\n          },\n          maxQueryExecutionTime: configService.get(\"db-logging.maxQueryExecutionTime\"),\n        } as TypeOrmModuleOptions),\n      inject: [ConfigService],\n    }),\n    LoggerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        pinoHttp: {\n          name: `os.${String(config.get(\"api.codename\")).toLowerCase()}`,\n          level: config.get(\"api.logging\"),\n          transport: {\n            target: \"pino-pretty\",\n            options: {\n              colorize: true,\n              levelFirst: true,\n              translateTime: \"UTC:hh:MM:ss.l\",\n              singleLine: true,\n              messageFormat: `${clc.yellow(`[{context}]`)} ${clc.green(`{msg}`)}`,\n              ignore: \"pid,hostname,context\",\n            },\n          },\n          customProps: () => ({ context: \"HTTP\" }),\n        },\n        exclude: [{ method: RequestMethod.ALL, path: \"check\" }],\n      }),\n    }),\n    TerminusModule,\n    HttpModule,\n    AuthModule,\n    HealthModule,\n    RepoModule,\n    VoteModule,\n    StarModule,\n    StargazeModule,\n    SubmitModule,\n    ContributionModule,\n    UserModule,\n    InsightsModule,\n    UserReposModule,\n    CustomerModule,\n    StripeWebHookModule,\n    StripeSubscriptionModule,\n    PullRequestModule,\n    HighlightModule,\n    EmojiModule,\n    EndorsementModule,\n    ContributorModule,\n    OpenAiModule,\n  ],\n  providers: [],\n})\nexport class AppModule {\n  constructor(\n    @InjectDataSource(\"ApiConnection\")\n    private readonly apiConnection: DataSource,\n\n    @InjectDataSource(\"LogConnection\")\n    private readonly logConnection: DataSource\n  ) {}\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(HttpLoggerMiddleware).forRoutes(`v1`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getSession\n                            \n                            \n                                    Async\n                                postCreateCheckoutSession\n                            \n                            \n                                    Async\n                                postOnboarding\n                            \n                            \n                                    Async\n                                postWaitlist\n                            \n                            \n                                    Async\n                                updateEmailPreferencesForUserProfile\n                            \n                            \n                                    Async\n                                updateInterestsForUserProfile\n                            \n                            \n                                    Async\n                                updateProfileForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'checkAuthSession', summary: 'Get authenticated session information'})@ApiOkResponse({type: SupabaseAuthDto})@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postCreateCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    postCreateCheckoutSession(user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/checkout/session')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postCreateCheckoutSession', summary: 'Creates a new checkout session for the user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to create checkout session'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    postOnboarding(userId: number, body: UserOnboardingDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/onboarding')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postOnboarding', summary: 'Updates onboarding information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update onboarding information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        postWaitlist\n                        \n                    \n                \n            \n            \n                \n                    \n                    postWaitlist(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/waitlist')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'postWaitlist', summary: 'Updates waitlist information for user'})@ApiOkResponse({type: SupabaseAuthDto})@ApiNotFoundResponse({description: 'Unable to update waitlist information for the user'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferencesForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferencesForUserProfile(userId: number, updateUserDto: UpdateUserEmailPreferencesDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/email')@ApiOperation({operationId: 'updateEmailPreferencesForUserProfile', summary: 'Updates the email preferences for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update email preferences for the user profile'})@ApiBody({type: UpdateUserEmailPreferencesDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterestsForUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterestsForUserProfile(userId: number, updateUserDto: UpdateUserProfileInterestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile/interests')@ApiOperation({operationId: 'updateInterestsForUserProfile', summary: 'Updates the interests for the authenticated user profile'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update interests for the user profile'})@ApiBody({type: UpdateUserProfileInterestsDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfileForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileForUser(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/profile')@ApiOperation({operationId: 'updateProfileForUser', summary: 'Updates the profile for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'Unable to update user profile'})@ApiBody({type: UpdateUserDto})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpStatus, Patch, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\nimport { User, UserId } from \"./supabase.user.decorator\";\nimport { SupabaseAuthDto } from \"./dtos/supabase-auth-response.dto\";\nimport { UserService } from \"../user/user.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { DbUser } from \"../user/user.entity\";\nimport { UpdateUserDto } from \"../user/dtos/update-user.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"../user/dtos/update-user-email-prefs.dto\";\nimport { UpdateUserProfileInterestsDto } from \"../user/dtos/update-user-interests.dto\";\nimport { UserOnboardingDto } from \"./dtos/user-onboarding.dto\";\n\n@Controller(\"auth\")\n@ApiTags(\"Authentication service\")\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private stripeService: StripeService,\n    private customerService: CustomerService\n  ) {}\n\n  @Get(\"/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"checkAuthSession\",\n    summary: \"Get authenticated session information\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @HttpCode(HttpStatus.OK)\n  async getSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      role,\n      email: session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      user_metadata: { sub: id, user_name },\n    } = user;\n\n    let userProfile: Partial = {};\n\n    // check/insert user\n    try {\n      // get user from public users table\n      const {\n        is_onboarded,\n        is_waitlisted,\n        role: insights_role,\n        name,\n        bio,\n        location,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n      } = await this.userService.checkAddUser(user);\n\n      userProfile = {\n        is_onboarded,\n        insights_role,\n        is_waitlisted,\n        name,\n        location,\n        bio,\n        twitter_username,\n        company,\n        display_local_time,\n        url,\n        email,\n        github_sponsors_url,\n        linkedin_url,\n        discord_url,\n        notification_count,\n      };\n    } catch (e) {\n      // leave user profile as-is\n    }\n\n    return {\n      id: `${String(id)}`,\n      user_name: `${String(user_name)}`,\n      role,\n      email: userProfile.email ?? session_email,\n      confirmed_at,\n      last_sign_in_at,\n      created_at,\n      updated_at,\n      ...userProfile,\n    };\n  }\n\n  @Post(\"/onboarding\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postOnboarding\",\n    summary: \"Updates onboarding information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update onboarding information for the user\" })\n  async postOnboarding(@UserId() userId: number, @Body() body: UserOnboardingDto): Promise {\n    const userData = {\n      timezone: body.timezone,\n      interests: body.interests,\n    };\n\n    return this.userService.updateOnboarding(userId, userData);\n  }\n\n  @Post(\"/waitlist\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postWaitlist\",\n    summary: \"Updates waitlist information for user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to update waitlist information for the user\" })\n  async postWaitlist(@UserId() userId: number): Promise {\n    return this.userService.updateWaitlistStatus(userId);\n  }\n\n  @Post(\"/checkout/session\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"postCreateCheckoutSession\",\n    summary: \"Creates a new checkout session for the user\",\n  })\n  @ApiOkResponse({ type: SupabaseAuthDto })\n  @ApiNotFoundResponse({ description: \"Unable to create checkout session\" })\n  async postCreateCheckoutSession(@User() user: SupabaseAuthUser): Promise {\n    const {\n      email,\n      user_metadata: { sub },\n    } = user;\n    const id = sub as number;\n    const customer = await this.customerService.findById(id);\n    let customerId: string;\n\n    if (customer) {\n      customerId = customer.stripe_customer_id;\n    } else {\n      const stripeCustomer = await this.stripeService.addCustomer(id, email);\n      const newCustomer = await this.customerService.addCustomer(id, stripeCustomer.id);\n\n      customerId = newCustomer.stripe_customer_id;\n    }\n\n    return this.stripeService.createCheckoutSession(customerId);\n  }\n\n  @Patch(\"/profile\")\n  @ApiOperation({\n    operationId: \"updateProfileForUser\",\n    summary: \"Updates the profile for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update user profile\" })\n  @ApiBody({ type: UpdateUserDto })\n  async updateProfileForUser(@UserId() userId: number, @Body() updateUserDto: UpdateUserDto): Promise {\n    return this.userService.updateUser(userId, updateUserDto);\n  }\n\n  @Patch(\"/profile/interests\")\n  @ApiOperation({\n    operationId: \"updateInterestsForUserProfile\",\n    summary: \"Updates the interests for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update interests for the user profile\" })\n  @ApiBody({ type: UpdateUserProfileInterestsDto })\n  async updateInterestsForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserProfileInterestsDto\n  ): Promise {\n    await this.userService.updateInterests(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n\n  @Patch(\"/profile/email\")\n  @ApiOperation({\n    operationId: \"updateEmailPreferencesForUserProfile\",\n    summary: \"Updates the email preferences for the authenticated user profile\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"Unable to update email preferences for the user profile\" })\n  @ApiBody({ type: UpdateUserEmailPreferencesDto })\n  async updateEmailPreferencesForUserProfile(\n    @UserId() userId: number,\n    @Body() updateUserDto: UpdateUserEmailPreferencesDto\n  ): Promise {\n    await this.userService.updateEmailPreferences(userId, updateUserDto);\n\n    return this.userService.findOneById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            UserReposModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SupabaseGuard\n                        \n                        \n                            SupabaseStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { SupabaseGuard } from \"./supabase.guard\";\nimport { SupabaseStrategy } from \"./supabase.strategy\";\nimport { AuthController } from \"./auth.controller\";\nimport { UserModule } from \"../user/user.module\";\nimport { UserReposModule } from \"../user-repo/user-repos.module\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\n@Module({\n  imports: [PassportModule, UserModule, UserReposModule, StripeModule, CustomerModule],\n  providers: [SupabaseStrategy, SupabaseGuard],\n  exports: [SupabaseStrategy, SupabaseGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatResponse.html":{"url":"interfaces/ChatResponse.html","title":"interface - ChatResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            choices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        choices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        choices:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeExplanationController.html":{"url":"controllers/CodeExplanationController.html","title":"controller - CodeExplanationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeExplanationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeExplanationDto: GenerateCodeExplanationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/explanation/generate')@ApiOperation({operationId: 'generateCodeExplanation', summary: 'Generates an explanation for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeExplanationDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-explanation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeExplanationDto\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeExplanationController {\n  constructor(private codeExplanationService: CodeExplanationService) {}\n\n  @Post(\"/explanation/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeExplanation\",\n    summary: \"Generates an explanation for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeExplanationDto })\n  async generatePRDescription(@Body() generateCodeExplanationDto: GenerateCodeExplanationDto) {\n    const suggestion = await this.codeExplanationService.generateExplanation(generateCodeExplanationDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeExplanationService.html":{"url":"injectables/CodeExplanationService.html","title":"injectable - CodeExplanationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeExplanationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-explanation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateExplanation\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-explanation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateExplanation\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateExplanation(options: GenerateCodeExplanationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeExplanationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-explanation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { GenerateCodeExplanationDto } from \"./dtos/create-code-explanation.dto\";\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\n\n@Injectable()\nexport class CodeExplanationService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate an explanation for the given code snippet written in ${language} with the specifications mentioned below`,\n      `The explanation must be a maximum of ${maxLength} characters.`,\n    ].join(\"\\n\");\n  }\n\n  async generateExplanation(options: GenerateCodeExplanationDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeRefactorSuggestionController.html":{"url":"controllers/CodeRefactorSuggestionController.html","title":"controller - CodeRefactorSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeRefactorSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/suggestion/generate')@ApiOperation({operationId: 'generateCodeRefactor', summary: 'Generates a refactor suggestion based on the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeRefactorSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeRefactorSuggestionDto\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeRefactorSuggestionController {\n  constructor(private codeRefactorSuggestionService: CodeRefactorSuggestionService) {}\n\n  @Post(\"/suggestion/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeRefactor\",\n    summary: \"Generates a refactor suggestion based on the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeRefactorSuggestionDto })\n  async generatePRDescription(@Body() generateCodeRefactorSuggestionDto: GenerateCodeRefactorSuggestionDto) {\n    const suggestion = await this.codeRefactorSuggestionService.generateDescription(generateCodeRefactorSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeRefactorSuggestionService.html":{"url":"injectables/CodeRefactorSuggestionService.html","title":"injectable - CodeRefactorSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeRefactorSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-refactor-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-refactor-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GenerateCodeRefactorSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeRefactorSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-refactor-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { GenerateCodeRefactorSuggestionDto } from \"./dtos/create-code-refactor-suggestion.dto\";\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\n\n@Injectable()\nexport class CodeRefactorSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number) {\n    return [\n      `Generate a code refactor suggestion for a given code snippet written in ${language} with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GenerateCodeRefactorSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = await this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CodeTestSuggestionController.html":{"url":"controllers/CodeTestSuggestionController.html","title":"controller - CodeTestSuggestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CodeTestSuggestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test.suggestion.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test/generate')@ApiOperation({operationId: 'generateCodeTest', summary: 'Generates a test for the provided code'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GenerateCodeTestSuggestionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/code-test.suggestion.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generateCodeTestSuggestionDto\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class CodeTestSuggestionController {\n  constructor(private codeTestSuggestionService: CodeTestSuggestionService) {}\n\n  @Post(\"/test/generate\")\n  @ApiOperation({\n    operationId: \"generateCodeTest\",\n    summary: \"Generates a test for the provided code\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GenerateCodeTestSuggestionDto })\n  async generatePRDescription(@Body() generateCodeTestSuggestionDto: GenerateCodeTestSuggestionDto) {\n    const suggestion = await this.codeTestSuggestionService.generateTestSuggestion(generateCodeTestSuggestionDto);\n\n    if (!suggestion) {\n      throw new BadRequestException();\n    }\n\n    return { suggestion };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CodeTestSuggestionService.html":{"url":"injectables/CodeTestSuggestionService.html","title":"injectable - CodeTestSuggestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CodeTestSuggestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/code-test-suggestion.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generatePrompt\n                            \n                            \n                                    Async\n                                generateTestSuggestion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/code-test-suggestion.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(maxLength: number)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTestSuggestion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTestSuggestion(options: GenerateCodeTestSuggestionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/code-test-suggestion.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GenerateCodeTestSuggestionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { GenerateCodeTestSuggestionDto } from \"./dtos/create-code-test-suggestion.dto\";\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\n\n@Injectable()\nexport class CodeTestSuggestionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(maxLength: number) {\n    return [\n      `Generate a test for a given code snippet with the specifications mentioned below`,\n      `The code snippet must be a maximum of ${maxLength} characters.`,\n      'Exclude anything unnecessary such as translation and instructions. The code snippet you suggest should start with \"```suggestion\" and end with ``` to create a valid GitHub suggestion codeblock. All non-code text or description should be outside of the codeblock.',\n    ].join(\"\\n\");\n  }\n\n  async generateTestSuggestion(options: GenerateCodeTestSuggestionDto) {\n    const content = `Code: ${options.code}\\n`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.descriptionLength),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributionModule.html":{"url":"modules/ContributionModule.html","title":"module - ContributionModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_imports\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nContributionModule\n\nContributionModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contribution/contribution.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoContributionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ContributionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoContributionsController } from \"./repo-contributions.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbContribution], \"ApiConnection\"), RepoModule],\n  controllers: [RepoContributionsController],\n  providers: [ContributionService],\n  exports: [ContributionService],\n})\nexport class ContributionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ContributionPageOptionsDto.html":{"url":"classes/ContributionPageOptionsDto.html","title":"class - ContributionPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ContributionPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/dtos/contribution-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ContributionOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : ContributionOrderFieldsEnum.count\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: ContributionOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(ContributionOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/dtos/contribution-page-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum ContributionOrderFieldsEnum {\n  count = \"count\",\n  last_merged_at = \"last_merged_at\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  contributor = \"contributor\",\n}\n\nexport class ContributionPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: ContributionOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: ContributionOrderFieldsEnum.count,\n  })\n  @IsEnum(ContributionOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: ContributionOrderFieldsEnum = ContributionOrderFieldsEnum.count;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContributionService.html":{"url":"injectables/ContributionService.html","title":"injectable - ContributionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContributionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(contributionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/contribution/contribution.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        contributionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/contribution/contribution.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { ContributionOrderFieldsEnum, ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Injectable()\nexport class ContributionService {\n  constructor(\n    @InjectRepository(DbContribution, \"ApiConnection\")\n    private contributionRepository: Repository\n  ) {}\n\n  async findAll(pageOptionsDto: ContributionPageOptionsDto, repoId?: number): Promise> {\n    const queryBuilder = this.contributionRepository.createQueryBuilder(\"contribution\");\n    const orderField = pageOptionsDto.orderBy ?? ContributionOrderFieldsEnum.count;\n\n    if (repoId) {\n      queryBuilder.where(\"contribution.repo_id = :repoId\", { repoId });\n    }\n\n    queryBuilder\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"contribution\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorController.html":{"url":"controllers/ContributorController.html","title":"controller - ContributorController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                searchAllPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequestContributors', summary: 'Searches contributors from pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\n\n@Controller(\"contributors\")\n@ApiTags(\"Contributors service\")\nexport class ContributorController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequestContributors\",\n    summary: \"Searches contributors from pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async searchAllPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllContributorsWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ContributorInsightsController.html":{"url":"controllers/ContributorInsightsController.html","title":"controller - ContributorInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ContributorInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contributor/contributor-insights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                contributors/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllRecentPullRequestContributors\n                            \n                            \n                                    Async\n                                newPullRequestContributors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentPullRequestContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/recent')@ApiOperation({operationId: 'findAllRecentPullRequestContributors', summary: 'Gets all recent contributors for the last 30 days based on repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        newPullRequestContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    newPullRequestContributors(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/new')@ApiOperation({operationId: 'newPullRequestContributors', summary: 'Gets new contributors given a date range for repo IDs'})@ApiPaginatedResponse(DbPullRequestContributor)@ApiOkResponse({type: DbPullRequestContributor})\n                \n            \n\n            \n                \n                    Defined in src/contributor/contributor-insights.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequestContributor } from \"../pull-requests/dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"../pull-requests/dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"../pull-requests/dtos/pull-request-contributor-insights.dto\";\n\n@Controller(\"contributors/insights\")\n@ApiTags(\"Contributors service\")\nexport class ContributorInsightsController {\n  constructor(private readonly pullRequestService: PullRequestService) {}\n\n  @Get(\"/new\")\n  @ApiOperation({\n    operationId: \"newPullRequestContributors\",\n    summary: \"Gets new contributors given a date range for repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async newPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findNewContributorsInTimeRange(pageOptionsDto);\n  }\n\n  @Get(\"/recent\")\n  @ApiOperation({\n    operationId: \"findAllRecentPullRequestContributors\",\n    summary: \"Gets all recent contributors for the last 30 days based on repo IDs\",\n  })\n  @ApiPaginatedResponse(DbPullRequestContributor)\n  @ApiOkResponse({ type: DbPullRequestContributor })\n  async findAllRecentPullRequestContributors(\n    @Query() pageOptionsDto: PullRequestContributorInsightsDto\n  ): Promise> {\n    return this.pullRequestService.findAllRecentContributors(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ContributorModule.html":{"url":"modules/ContributorModule.html","title":"module - ContributorModule","body":"\n                   \n\n\n\n\n    Modules\n    ContributorModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ContributorModule\n\n\n\ncluster_ContributorModule_imports\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\n\n\nContributorModule\n\nContributorModule\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/contributor/contributor.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ContributorController\n                        \n                        \n                            ContributorInsightsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PullRequestModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ContributorController } from \"./contributor.controller\";\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { ContributorInsightsController } from \"./contributor-insights.controller\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest], \"ApiConnection\"), PullRequestModule],\n  controllers: [ContributorController, ContributorInsightsController],\n})\nexport class ContributorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEndorsementDto.html":{"url":"classes/CreateEndorsementDto.html","title":"class - CreateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/create-endorsement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                creator_user_id\n                            \n                            \n                                    Public\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Creator User ID', type: Number, example: 42211})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Recipient User ID', type: Number, example: 5736810})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repository ID', example: 78133})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Endorsement Source Comment URL', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Source Context URL', example: 'https://github.com/open-sauced/insights/pulls'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Endorsement Type', example: 'doc'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/dto/create-endorsement.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsNumber, IsOptional } from \"class-validator\";\n\nexport class CreateEndorsementDto {\n  @ApiProperty({\n    description: \"Endorsement Creator User ID\",\n    type: Number,\n    example: 42211,\n  })\n  @IsNumber()\n  public creator_user_id: number;\n\n  @ApiProperty({\n    description: \"Endorsement Recipient User ID\",\n    type: Number,\n    example: 5736810,\n  })\n  @IsNumber()\n  public recipient_user_id: number;\n\n  @ApiProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @IsNumber()\n  public repo_id: number;\n\n  @ApiPropertyOptional({\n    description: \"Endorsement Source Comment URL\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  public source_comment_url?: string;\n\n  @ApiProperty({\n    description: \"Endorsement Source Context URL\",\n    example: \"https://github.com/open-sauced/insights/pulls\",\n  })\n  @IsString()\n  public source_context_url: string;\n\n  @ApiProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @IsString()\n  public type: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightDto.html":{"url":"classes/CreateInsightDto.html","title":"class - CreateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsArray, IsBoolean, IsString } from \"class-validator\";\n\nimport { RepoInfo } from \"../../repo/dtos/repo-info.dto\";\n\nexport class CreateInsightDto {\n  @ApiProperty({\n    description: \"Insight Page Name\",\n    type: String,\n    example: \"My Team\",\n  })\n  @IsString()\n  name: string;\n\n  @ApiProperty({\n    description: \"Insight Page Visibility\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  is_public: boolean;\n\n  @ApiProperty({\n    description: \"An array of repository information objects\",\n    isArray: true,\n    type: RepoInfo,\n    example: [{ id: 797, full_name: \"open-sauced/insights\" }],\n  })\n  @Type(() => RepoInfo)\n  @IsArray()\n  repos: RepoInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateInsightMemberDto.html":{"url":"classes/CreateInsightMemberDto.html","title":"class - CreateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/create-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Team Member Invite Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/create-insight-member.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail } from \"class-validator\";\n\nexport class CreateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Team Member Invite Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateLogDto.html":{"url":"classes/CreateLogDto.html","title":"class - CreateLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/dtos/create-log.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                context\n                            \n                            \n                                    Readonly\n                                    Optional\n                                level\n                            \n                            \n                                    Readonly\n                                    Optional\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/dtos/create-log.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class CreateLogDto {\n  @IsOptional()\n  @IsString()\n  readonly context?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly message?: string;\n\n  @IsOptional()\n  @IsString()\n  readonly level?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCollaborationDto.html":{"url":"classes/CreateUserCollaborationDto.html","title":"class - CreateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Message', type: String, example: 'Come collaborate on a cool project'})@IsString()@MinLength(20)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Recipient Username', type: String, example: 'bdougie'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-collaboration.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Recipient Username\",\n    type: String,\n    example: \"bdougie\",\n  })\n  @IsString()\n  username: string;\n\n  @ApiProperty({\n    description: \"Collaboration Request Message\",\n    type: String,\n    example: \"Come collaborate on a cool project\",\n  })\n  @IsString()\n  @MinLength(20)\n  @MaxLength(500)\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHighlightDto.html":{"url":"classes/CreateUserHighlightDto.html","title":"class - CreateUserHighlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHighlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/create-user-highlight.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight Text', type: String, example: My first PR to Open Sauced!})@IsString()@MinLength(3)@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Shipped Date', type: String, example: 2023-01-19 13:24:51.000000})@IsDateString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Title', type: String, example: My first PR!})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Highlight PR URL', type: String, example: 'github.com/open-sauced/insights/pull/1'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/create-user-highlight.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsDateString, IsOptional, IsString, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserHighlightDto {\n  @ApiProperty({\n    description: \"Highlight PR URL\",\n    type: String,\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @IsString()\n  public url: string;\n\n  @ApiPropertyOptional({\n    description: \"Highlight Title\",\n    type: String,\n    example: `My first PR!`,\n  })\n  @IsOptional()\n  @IsString()\n  public title?: string;\n\n  @ApiProperty({\n    description: \"Highlight Text\",\n    type: String,\n    example: `My first PR to Open Sauced!`,\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(500)\n  public highlight: string;\n\n  @ApiPropertyOptional({\n    description: \"Shipped Date\",\n    type: String,\n    example: `2023-01-19 13:24:51.000000`,\n  })\n  @IsDateString()\n  @IsOptional()\n  public shipped_at?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomLogger.html":{"url":"injectables/CustomLogger.html","title":"injectable - CustomLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/custom-logger.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                debug\n                            \n                            \n                                    Async\n                                error\n                            \n                            \n                                    Async\n                                log\n                            \n                            \n                                    Async\n                                verbose\n                            \n                            \n                                    Async\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService)\n                    \n                \n                        \n                            \n                                Defined in src/log/custom-logger.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    ConsoleLoggerOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logsService\n                                                  \n                                                        \n                                                                        LogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string, stack?: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stack\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string, context?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/log/custom-logger.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LogService\n\n                    \n                \n                    \n                        \n                                Defined in src/log/custom-logger.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConsoleLogger } from \"@nestjs/common\";\nimport { ConsoleLoggerOptions } from \"@nestjs/common/services/console-logger.service\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { LogService } from \"./log.service\";\n\n@Injectable()\nclass CustomLogger extends ConsoleLogger {\n  private readonly logsService: LogService;\n\n  constructor(context: string, options: ConsoleLoggerOptions, configService: ConfigService, logsService: LogService) {\n    super(context, {\n      ...options,\n      logLevels: [\"error\", \"warn\", \"log\", \"verbose\", \"debug\"],\n    });\n\n    this.logsService = logsService;\n  }\n\n  async log(message: string, context?: string) {\n    super.log.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"log\",\n    });\n  }\n\n  async error(message: string, stack?: string, context?: string) {\n    super.error.apply(this, [message, stack, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async warn(message: string, context?: string) {\n    super.warn.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async debug(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n\n  async verbose(message: string, context?: string) {\n    super.debug.apply(this, [message, context]);\n\n    return this.logsService.createLog({\n      message,\n      context,\n      level: \"error\",\n    });\n  }\n}\n\nexport default CustomLogger;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CustomerModule.html":{"url":"modules/CustomerModule.html","title":"module - CustomerModule","body":"\n                   \n\n\n\n\n    Modules\n    CustomerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\n\nCustomerService \n\nCustomerService \n\n\n\nCustomerModule\n\nCustomerModule\n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/customer/customer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\nimport { CustomerService } from \"./customer.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbCustomer], \"ApiConnection\")],\n  providers: [CustomerService],\n  exports: [CustomerService],\n})\nexport class CustomerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findByCustomerId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/customer/customer.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(userId: number, stripe_customer_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stripe_customer_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByCustomerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCustomerId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/customer/customer.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbCustomer } from \"./customer.entity\";\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    @InjectRepository(DbCustomer, \"ApiConnection\")\n    private customerRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.customerRepository.createQueryBuilder(\"customer\");\n  }\n\n  async findById(id: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async findByCustomerId(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"customer.stripe_customer_id=:id\", { id });\n\n    return queryBuilder.getOne();\n  }\n\n  async addCustomer(userId: number, stripe_customer_id: string) {\n    return this.customerRepository.save({ id: userId, stripe_customer_id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseLoggerMiddleware.html":{"url":"classes/DatabaseLoggerMiddleware.html","title":"class - DatabaseLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/database-logger.middleware.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        TypeOrmLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                log\n                            \n                            \n                                logMigration\n                            \n                            \n                                logQuery\n                            \n                            \n                                logQueryError\n                            \n                            \n                                logQuerySlow\n                            \n                            \n                                logSchemaBuild\n                            \n                            \n                                    Private\n                                stringifyParameters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/middleware/database-logger.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            \"log\" | \"info\" | \"warn\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logMigration\n                        \n                    \n                \n            \n            \n                \nlogMigration(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuery\n                        \n                    \n                \n            \n            \n                \nlogQuery(query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQueryError\n                        \n                    \n                \n            \n            \n                \nlogQueryError(error: string, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logQuerySlow\n                        \n                    \n                \n            \n            \n                \nlogQuerySlow(time: number, query: string, parameters?: [], queryRunner?: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSchemaBuild\n                        \n                    \n                \n            \n            \n                \nlogSchemaBuild(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        stringifyParameters\n                        \n                    \n                \n            \n            \n                \n                    \n                    stringifyParameters(parameters?: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/database-logger.middleware.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                            []\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Logger as TypeOrmLogger, QueryRunner } from \"typeorm\";\nimport { Logger as NestLogger } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\n\nexport class DatabaseLoggerMiddleware implements TypeOrmLogger {\n  private readonly logger;\n\n  constructor(name = \"SQL\") {\n    this.logger = new NestLogger(name);\n  }\n\n  logQuery(query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.log(`${query} -- Parameters: ${this.stringifyParameters(parameters)}`);\n  }\n\n  logQueryError(error: string, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(`${query} -- Parameters: ${this.stringifyParameters(parameters)} -- ${error}`);\n  }\n\n  logQuerySlow(time: number, query: string, parameters?: unknown[], queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    this.logger.error(\n      `${query} -- Parameters: ${this.stringifyParameters(parameters)} ${clc.red(`+${String(time)}ms`)}`\n    );\n  }\n\n  logMigration(message: string) {\n    this.logger.warn(message);\n  }\n\n  logSchemaBuild(message: string) {\n    this.logger.warn(message);\n  }\n\n  log(level: \"log\" | \"info\" | \"warn\", message: string, queryRunner?: QueryRunner) {\n    if (queryRunner?.data.isCreatingLogs) {\n      return;\n    }\n\n    if (level === \"log\") {\n      return this.logger.log(message);\n    }\n    if (level === \"info\") {\n      return this.logger.debug(message);\n    }\n\n    return this.logger.warn(message);\n  }\n\n  private stringifyParameters(parameters?: unknown[]) {\n    try {\n      return JSON.stringify(parameters);\n    } catch {\n      return \"\";\n    }\n  }\n}\n\nexport default DatabaseLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbContribution.html":{"url":"entities/DbContribution.html","title":"entity - DbContribution","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbContribution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/contribution.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contributor\n                            \n                            \n                                    Public\n                                count\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                last_merged_at\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contributor unique user name', example: '0-vortex'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Total number of contributed pull requests', example: 15})@Column({type: 'bigint', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution identifier', example: 12237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        last_merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing last contribution merge to the default branch', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.contributions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing contribution last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Contribution GitHub origin URL', example: 'https://github.com/open-sauced/hot/pull/320'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/contribution/contribution.entity.ts:101\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  ManyToOne,\n  JoinColumn,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"contributions\" })\nexport class DbContribution extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Contribution identifier\",\n    example: 12237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Total number of contributed pull requests\",\n    example: 15,\n  })\n  @Column({\n    type: \"bigint\",\n    default: 0,\n  })\n  public count: number;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing last contribution merge to the default branch\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public last_merged_at: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing contribution last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Contributor unique user name\",\n    example: \"0-vortex\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public contributor: string;\n\n  @ApiModelProperty({\n    description: \"Contribution GitHub origin URL\",\n    example: \"https://github.com/open-sauced/hot/pull/320\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public url: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.contributions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbCustomer.html":{"url":"entities/DbCustomer.html","title":"entity - DbCustomer","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/customer/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                stripe_customer_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stripe_customer_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stripe Customer Id', example: 498})@Column({type: 'character varying', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/customer/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn } from \"typeorm\";\n\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"customers\" })\nexport class DbCustomer extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Stripe Customer Id\",\n    example: 498,\n  })\n  @Column({\n    type: \"character varying\",\n    length: 50,\n  })\n  public stripe_customer_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEmoji.html":{"url":"entities/DbEmoji.html","title":"entity - DbEmoji","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEmoji\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/entities/emoji.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                display_order\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji display order', example: 1})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji Name', example: '100'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.emoji)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji URL', example: 'https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/emoji/entities/emoji.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\n@Entity({ name: \"emojis\" })\nexport class DbEmoji {\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Emoji Name\",\n    example: \"100\",\n  })\n  @Column({ type: \"text\" })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Emoji URL\",\n    example: \"https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\",\n  })\n  @Column({ type: \"text\" })\n  public url: string;\n\n  @ApiModelProperty({\n    description: \"Emoji display order\",\n    example: 1,\n  })\n  @Column({ type: \"integer\" })\n  public display_order!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.emoji)\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbEndorsement.html":{"url":"entities/DbEndorsement.html","title":"entity - DbEndorsement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbEndorsement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/entities/endorsement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                creator_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                recipient_user_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_comment_url\n                            \n                            \n                                    Public\n                                source_context_url\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing endorsement creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        creator_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Creator User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        recipient_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Recipient User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository ID', example: 78133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_comment_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Comment URL'})@Column({type: 'character varying', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        source_context_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Source Context URL'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Endorsement Type', example: 'doc'})@Column({type: 'character varying', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/endorsement/entities/endorsement.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"endorsements\" })\nexport class DbEndorsement {\n  @ApiModelProperty({\n    description: \"Endorsement identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Creator User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public creator_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Endorsement Recipient User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public recipient_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Repository ID\",\n    example: 78133,\n  })\n  @Column({ type: \"integer\" })\n  public repo_id: number;\n\n  @ApiModelProperty({ description: \"Endorsement Source Comment URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n  })\n  public source_comment_url?: string;\n\n  @ApiModelProperty({ description: \"Endorsement Source Context URL\" })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public source_context_url: string;\n\n  @ApiModelProperty({\n    description: \"Endorsement Type\",\n    example: \"doc\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n  })\n  public type: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing endorsement creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsight.html":{"url":"entities/DbInsight.html","title":"entity - DbInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                is_favorite\n                            \n                            \n                                    Public\n                                is_public\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                repos\n                            \n                            \n                                    Public\n                                short_code\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_favorite\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight favorite', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag indicating insight visibility', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Page Name', example: 'Open Sauced Team'})@Column({type: 'character varying', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DbInsightRepo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, insightRepo => insightRepo.insight)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        short_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Title', example: 'Insight Page Short Code'})@Column({type: 'character varying', length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.insights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight.entity.ts:42\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport { DbInsightRepo } from \"./insight-repo.entity\";\nimport { DbUser } from \"../../user/user.entity\";\n\n@Entity({ name: \"insights\" })\nexport class DbInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({\n    type: \"bigint\",\n    select: false,\n  })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Insight Page Name\",\n    example: \"Open Sauced Team\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 255,\n  })\n  public name: string;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight visibility\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_public: boolean;\n\n  @ApiModelProperty({\n    description: \"Flag indicating insight favorite\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_favorite: boolean;\n\n  @ApiModelProperty({\n    description: \"Title\",\n    example: \"Insight Page Short Code\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 25,\n  })\n  public short_code: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.insights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbInsightRepo, (insightRepo) => insightRepo.insight)\n  public repos: DbInsightRepo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightMember.html":{"url":"entities/DbInsightMember.html","title":"entity - DbInsightMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                access\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_email\n                            \n                            \n                                    Public\n                                    Optional\n                                invitation_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member Access', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight Member identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Team Member Invitation Email', example: 'hello@opensauced.pizza'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        invitation_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member invitation email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User's Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing team member last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-member.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"insight_members\" })\nexport class DbInsightMember extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight Member identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User's Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Insight Member Access\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public access: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing team member invitation email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public invitation_emailed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Team Member Invitation Email\",\n    example: \"hello@opensauced.pizza\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public invitation_email?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbInsightRepo.html":{"url":"entities/DbInsightRepo.html","title":"entity - DbInsightRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbInsightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/entities/insight-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                insight\n                            \n                            \n                                    Public\n                                insight_id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing insight repo deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight identifier', example: 237133})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbInsight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, insight => insight.repos)@JoinColumn({name: 'insight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        insight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Insight ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo ID', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/entities/insight-repo.entity.ts:43\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nimport { DbInsight } from \"./insight.entity\";\n\n@Entity({ name: \"insight_repos\" })\nexport class DbInsightRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Insight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Insight ID\",\n    example: 237133,\n  })\n  @Column()\n  public insight_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo ID\",\n    example: 237133,\n  })\n  @Column()\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing insight repo deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbInsight, (insight) => insight.repos)\n  @JoinColumn({\n    name: \"insight_id\",\n    referencedColumnName: \"id\",\n  })\n  public insight!: DbInsight;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbLog.html":{"url":"entities/DbLog.html","title":"entity - DbLog","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                created_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                level\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/log/log.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity({ name: \"logs\" })\nexport class DbLog extends BaseEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  public id: string;\n\n  @Column()\n  public context: string;\n\n  @Column()\n  public message: string;\n\n  @Column()\n  public level: string;\n\n  @CreateDateColumn()\n  public created_at: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPRInsight.html":{"url":"entities/DbPRInsight.html","title":"entity - DbPRInsight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPRInsight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request-insight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted_prs\n                            \n                            \n                                    Public\n                                all_prs\n                            \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                interval\n                            \n                            \n                                    Public\n                                spam_prs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: accepted requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        all_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: all requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval computed date in human readable format', example: '2022-08-28 22:04:39.000000'})@Column({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@PrimaryColumn({type: 'bigint', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interval\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Selected interval in numerical days, goes back with number, 0 means today', example: 1, default: 0})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        spam_prs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR Type: spam requests count', example: 287})@Column({type: 'integer', default: 0, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request-insight.entity.ts:70\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column } from \"typeorm\";\nimport { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPRInsight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @PrimaryColumn({\n    type: \"bigint\",\n    select: false,\n  })\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval in numerical days, goes back with number, 0 means today\",\n    example: 1,\n    default: 0,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public interval: number;\n\n  @ApiModelProperty({\n    description: \"Selected interval computed date in human readable format\",\n    example: \"2022-08-28 22:04:39.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public day: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: all requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public all_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: accepted requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public accepted_prs: number;\n\n  @ApiModelProperty({\n    description: \"PR Type: spam requests count\",\n    example: 287,\n  })\n  @Column({\n    type: \"integer\",\n    default: 0,\n    select: false,\n  })\n  public spam_prs: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbPullRequest.html":{"url":"entities/DbPullRequest.html","title":"entity - DbPullRequest","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbPullRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/entities/pull-request.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                additions\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                assignee_login\n                            \n                            \n                                    Public\n                                author_avatar\n                            \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                changed_files\n                            \n                            \n                                    Public\n                                    Optional\n                                closed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                comments\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deletions\n                            \n                            \n                                    Public\n                                draft\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                label_names\n                            \n                            \n                                    Public\n                                    Optional\n                                labels\n                            \n                            \n                                    Public\n                                    Optional\n                                last_updated_at\n                            \n                            \n                                    Public\n                                mergeable\n                            \n                            \n                                    Public\n                                merged\n                            \n                            \n                                    Public\n                                    Optional\n                                merged_at\n                            \n                            \n                                    Public\n                                number\n                            \n                            \n                                    Public\n                                rebaseable\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                source_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                source_label\n                            \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Optional\n                                target_branch\n                            \n                            \n                                    Public\n                                    Optional\n                                target_label\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        additions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines added', example: 10})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:233\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee avatar', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        assignee_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request assignee username', example: undefined})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author avatar', example: 'https://avatars.githubusercontent.com/u/25160953?v=4'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        changed_files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR files changed', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:247\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        closed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr close date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:189\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR comments', example: 0})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:226\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing pr creation date', example: '2022-08-28 22:04:29.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deletions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'PR lines deleted', example: 5})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:240\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        draft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is draft', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request repo full name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:258\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request identifier', example: 1045024650})@PrimaryColumn('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        label_names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request label names', example: showcase})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:135\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        labels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request labels', example: [\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        last_updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing internal last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:219\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        mergeable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is mergeable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        merged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is merged', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        merged_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr merge date', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:199\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request number', example: 612})@Column('integer')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rebaseable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request is rebaseable', example: false})@Column('boolean')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source branch', example: 'main'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        source_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request source ref', example: 'Th3nn3ss:cli_split_kwargs'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request state', example: 'closed'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_branch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target branch', example: 'cli_split_kwargs'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        target_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request target ref', example: 'aws:main'})@Column({type: 'text', default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request title', example: 'fix(cli): arg tags value with equal sign'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing repository last update', example: '2022-08-28 22:04:29.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/entities/pull-request.entity.ts:209\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"pull_requests\" })\nexport class DbPullRequest extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Pull request identifier\",\n    example: 1045024650,\n  })\n  @PrimaryColumn(\"integer\")\n  public id!: number;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Pull request number\",\n    example: 612,\n  })\n  @Column(\"integer\")\n  public number: number;\n\n  @ApiModelProperty({\n    description: \"Pull request state\",\n    example: \"closed\",\n  })\n  @Column(\"text\")\n  public state: string;\n\n  @ApiModelProperty({\n    description: \"Pull request is draft\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public draft: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is merged\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public merged: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is mergeable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public mergeable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request is rebaseable\",\n    example: false,\n  })\n  @Column(\"boolean\")\n  public rebaseable: boolean;\n\n  @ApiModelProperty({\n    description: \"Pull request title\",\n    example: \"fix(cli): arg tags value with equal sign\",\n  })\n  @Column(\"text\")\n  public title: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source ref\",\n    example: \"Th3nn3ss:cli_split_kwargs\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public source_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target ref\",\n    example: \"aws:main\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public target_label?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request source branch\",\n    example: \"main\",\n  })\n  @Column(\"text\")\n  public source_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request target branch\",\n    example: \"cli_split_kwargs\",\n  })\n  @Column(\"text\")\n  public target_branch?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request labels\",\n    example: `[\n      {\n        \"id\": 4456742596,\n        \"url\": \"https://api.github.com/repos/denoland/fresh/labels/showcase\",\n        \"name\": \"showcase\",\n        \"color\": \"0e8a16\",\n        \"default\": false,\n        \"node_id\": \"LA_kwDOFcV7488AAAABCaR-xA\",\n        \"description\": \"\"\n      }\n    ]`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public labels?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request label names\",\n    example: `showcase`,\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public label_names?: string[];\n\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  @Column(\"text\")\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Pull request author avatar\",\n    example: \"https://avatars.githubusercontent.com/u/25160953?v=4\",\n  })\n  @Column(\"text\")\n  public author_avatar: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee username\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_login?: string;\n\n  @ApiModelProperty({\n    description: \"Pull request assignee avatar\",\n    example: null,\n  })\n  @Column({\n    type: \"text\",\n    default: \"\",\n  })\n  public assignee_avatar?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing pr creation date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr close date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public closed_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr merge date\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public merged_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing repository last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing internal last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public last_updated_at?: Date;\n\n  @ApiModelProperty({\n    description: \"PR comments\",\n    example: 0,\n  })\n  @Column({ type: \"bigint\" })\n  public comments?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines added\",\n    example: 10,\n  })\n  @Column({ type: \"bigint\" })\n  public additions?: number;\n\n  @ApiModelProperty({\n    description: \"PR lines deleted\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public deletions?: number;\n\n  @ApiModelProperty({\n    description: \"PR files changed\",\n    example: 5,\n  })\n  @Column({ type: \"bigint\" })\n  public changed_files?: number;\n\n  @ApiModelProperty({\n    description: \"Pull request repo full name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbPullRequestContributor.html":{"url":"classes/DbPullRequestContributor.html","title":"class - DbPullRequestContributor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbPullRequestContributor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author_login\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author_login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Pull request author username', example: 'Th3nn3ss'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Timestamp representing pr last update', example: '2022-08-28 22:04:29.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbPullRequestContributor {\n  @ApiModelProperty({\n    description: \"Pull request author username\",\n    example: \"Th3nn3ss\",\n  })\n  public author_login: string;\n\n  @ApiModelProperty({\n    description: \"Timestamp representing pr last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  public updated_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStargazers.html":{"url":"entities/DbRepoToUserStargazers.html","title":"entity - DbRepoToUserStargazers","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStargazers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stargazers.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Stargaze identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStargazers)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing stargaze last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStargazers)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stargazers.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stargazers\" })\nexport class DbRepoToUserStargazers {\n  @ApiModelProperty({\n    description: \"Stargaze identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing stargaze last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStargazers)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStargazers)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserStars.html":{"url":"entities/DbRepoToUserStars.html","title":"entity - DbRepoToUserStars","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserStars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.stars.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Star identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserStars)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing star last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserStars)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.stars.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_stars\" })\nexport class DbRepoToUserStars {\n  @ApiModelProperty({\n    description: \"Star identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing star last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserStars)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserStars)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserSubmissions.html":{"url":"entities/DbRepoToUserSubmissions.html","title":"entity - DbRepoToUserSubmissions","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserSubmissions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.submissions.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                is_accepted\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Submission identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        is_accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Flag representing if the submission is approved by open sauced staff', example: false})@Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserSubmissions)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing submission last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserSubmissions)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.submissions.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_submissions\" })\nexport class DbRepoToUserSubmissions {\n  @ApiModelProperty({\n    description: \"Submission identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelProperty({\n    description: \"Flag representing if the submission is approved by open sauced staff\",\n    example: false,\n  })\n  @Column({ default: false })\n  public is_accepted?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing submission last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserSubmissions)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbRepoToUserVotes.html":{"url":"entities/DbRepoToUserVotes.html","title":"entity - DbRepoToUserVotes","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbRepoToUserVotes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/entities/repo.to.user.votes.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Vote identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserVotes)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing vote last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.repoToUserVotes)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/entities/repo.to.user.votes.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../../user/user.entity\";\nimport { DbRepo } from \"./repo.entity\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_repos_votes\" })\nexport class DbRepoToUserVotes {\n  @ApiModelProperty({\n    description: \"Vote identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing vote last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.repoToUserVotes)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserVotes)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbSubscription.html":{"url":"entities/DbSubscription.html","title":"entity - DbSubscription","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.dto.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                cancel_at\n                            \n                            \n                                    Public\n                                cancel_at_period_end\n                            \n                            \n                                    Public\n                                    Optional\n                                canceled_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                current_period_start_at\n                            \n                            \n                                    Public\n                                    Optional\n                                ended_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                metadata\n                            \n                            \n                                    Public\n                                price_id\n                            \n                            \n                                    Public\n                                quantity\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_end_at\n                            \n                            \n                                    Public\n                                    Optional\n                                trial_start_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        cancel_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing cancel date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cancel_at_period_end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@Column({type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        canceled_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing canceled date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing subscription creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        current_period_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing current period start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        ended_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription identifier', example: 'sub_1234'})@PrimaryColumn('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        price_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Price ID', example: 'price_12345'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Quantity', example: 1})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Subscription Status', example: 'active'})@Column({type: 'text', default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_end_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial end date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        trial_start_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing trial start date', example: '2016-10-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 42211})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscription/stripe-subscription.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, PrimaryColumn, Column, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"subscriptions\" })\nexport class DbSubscription extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Subscription identifier\",\n    example: \"sub_1234\",\n  })\n  @PrimaryColumn(\"text\")\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 42211,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Subscription Status\",\n    example: \"active\",\n  })\n  @Column({\n    type: \"text\",\n    default: \"active\",\n  })\n  public status!: string;\n\n  @ApiHideProperty()\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public metadata!: string;\n\n  @ApiModelProperty({\n    description: \"Price ID\",\n    example: \"price_12345\",\n  })\n  @Column({ type: \"text\" })\n  public price_id!: string;\n\n  @ApiModelProperty({\n    description: \"Quantity\",\n    example: 1,\n  })\n  @Column({ type: \"bigint\" })\n  public quantity!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({ type: \"boolean\" })\n  public cancel_at_period_end!: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing subscription creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing current period end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public current_period_end_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public ended_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing cancel date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public cancel_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing canceled date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public canceled_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial start date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_start_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing trial end date\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public trial_end_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbTopUser.html":{"url":"classes/DbTopUser.html","title":"class - DbTopUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbTopUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/top-users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top User Login', example: 'bdougie'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/top-users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbTopUser {\n  @ApiModelProperty({\n    description: \"Top User Login\",\n    example: \"bdougie\",\n  })\n  public login?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserCollaboration.html":{"url":"entities/DbUserCollaboration.html","title":"entity - DbUserCollaboration","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserCollaboration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-collaboration.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                collaboration_emailed_at\n                            \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                request_emailed_at\n                            \n                            \n                                    Public\n                                request_user\n                            \n                            \n                                    Public\n                                    Optional\n                                request_user_id\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                    Optional\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        collaboration_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration acceptance email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration deletion', example: '2022-10-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Collaboration identifier', example: 'uuid-v4'})@PrimaryColumn()@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request Message', example: 'Hey, are you up for collaborating on this cool project?'})@Column({type: 'character varying', length: 500, default: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_emailed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing collaboration request email sent date', example: '2023-04-10 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request_user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.request_collaborations)@JoinColumn({name: 'request_user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        request_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Request User ID', example: 31333})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Status', example: 'pending'})@Column({type: 'character varying', length: 20, default: 'pending'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user collaboration last updated', example: '2022-10-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.collaborations)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Collaboration Receipient User ID', example: 237133})@Column({type: 'integer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-collaboration.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  BaseEntity,\n  PrimaryColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  DeleteDateColumn,\n  JoinColumn,\n  ManyToOne,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUser } from \"../user.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\n\n@Entity({ name: \"user_collaborations\" })\nexport class DbUserCollaboration extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Collaboration identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryColumn()\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Receipient User ID\",\n    example: 237133,\n  })\n  @Column({ type: \"integer\" })\n  public user_id?: number;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request User ID\",\n    example: 31333,\n  })\n  @Column({ type: \"integer\" })\n  public request_user_id?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.collaborations)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.request_collaborations)\n  @JoinColumn({\n    name: \"request_user_id\",\n    referencedColumnName: \"id\",\n  })\n  public request_user: DbUser;\n\n  @ApiModelProperty({\n    description: \"Collaboration Request Message\",\n    example: \"Hey, are you up for collaborating on this cool project?\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 500,\n    default: \"\",\n  })\n  public message: string;\n\n  @ApiModelProperty({\n    description: \"Collaboration Status\",\n    example: \"pending\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 20,\n    default: \"pending\",\n  })\n  public status: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration last updated\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user collaboration deletion\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration request email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public request_emailed_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing collaboration acceptance email sent date\",\n    example: \"2023-04-10 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public collaboration_emailed_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlight.html":{"url":"entities/DbUserHighlight.html","title":"entity - DbUserHighlight","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                    Optional\n                                featured\n                            \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                            \n                                    Public\n                                highlight\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                login\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                pinned\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                    Optional\n                                shipped_at\n                            \n                            \n                                    Public\n                                    Optional\n                                title\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight creation date', example: '2023-01-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight deletion date', example: '2023-01-19 13:24:51.000000'})@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        featured\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is featured or not', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Text', example: \n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Highlight identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Login', example: 'bdougie'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:147\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight User Full Name', example: 'Brian Douglas'})@Column({type: 'text', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        pinned\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Whether the highlight is pinned to the top', example: false})@Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlightReaction[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined, highlightReaction => highlightReaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:163\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        shipped_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight shipped date', example: '2023-01-19 13:24:51.000000'})@Column({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Title', example: 'My First PR!'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight updated date', example: '2023-01-19 13:24:51.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Pull Request URL', example: 'github.com/open-sauced/insights/pull/1'})@Column('text')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.highlights)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  BaseEntity,\n  Column,\n  PrimaryColumn,\n  CreateDateColumn,\n  DeleteDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlightReaction } from \"./user-highlight-reaction.entity\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlights\" })\nexport class DbUserHighlight extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Highlight identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Highlight Pull Request URL\",\n    example: \"github.com/open-sauced/insights/pull/1\",\n  })\n  @Column(\"text\")\n  public url?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Title\",\n    example: \"My First PR!\",\n  })\n  @Column(\"text\")\n  public title?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight Text\",\n    example: `\n    I made my first open source pull request!\n\n    github.com/open-sauced/insights/pull/1`,\n  })\n  @Column(\"text\")\n  public highlight: string;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is pinned to the top\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public pinned?: boolean;\n\n  @ApiModelProperty({\n    description: \"Whether the highlight is featured or not\",\n    example: false,\n  })\n  @Column({\n    type: \"boolean\",\n    default: false,\n  })\n  public featured?: boolean;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight creation date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight updated date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight deletion date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight shipped date\",\n    example: \"2023-01-19 13:24:51.000000\",\n  })\n  @Column({ type: \"timestamp without time zone\" })\n  public shipped_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public full_name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Full Name\",\n    example: \"Brian Douglas\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public name?: string;\n\n  @ApiModelProperty({\n    description: \"Highlight User Login\",\n    example: \"bdougie\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n    insert: false,\n  })\n  public login?: string;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.highlights)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user: DbUser;\n\n  @ApiHideProperty()\n  @OneToMany(() => DbUserHighlightReaction, (highlightReaction) => highlightReaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  public reactions: DbUserHighlightReaction[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserHighlightReaction.html":{"url":"entities/DbUserHighlightReaction.html","title":"entity - DbUserHighlightReaction","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserHighlightReaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-highlight-reaction.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Optional\n                                emoji\n                            \n                            \n                                    Public\n                                emoji_id\n                            \n                            \n                                    Optional\n                                highlight\n                            \n                            \n                                    Public\n                                highlight_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                reaction_count\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emoji\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbEmoji\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.emoji)@JoinColumn({name: 'emoji_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        emoji_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Emoji identifier', example: 'uuid-v4'})@Column({type: 'text', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        highlight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUserHighlight\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.highlight)@JoinColumn({name: 'highlight_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        highlight_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight identifier', example: 71359796})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Reaction identifier', example: 'uuid-v4'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reaction_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'integer', select: false, insert: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing highlight reaction last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now(), select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, reaction => reaction.user)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column({type: 'integer', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-highlight-reaction.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { DbUserHighlight } from \"./user-highlight.entity\";\nimport { DbEmoji } from \"../../emoji/entities/emoji.entity\";\nimport { DbUser } from \"../user.entity\";\n\n@Entity({ name: \"user_highlight_reactions\" })\nexport class DbUserHighlightReaction {\n  @ApiModelProperty({\n    description: \"Reaction identifier\",\n    example: \"uuid-v4\",\n  })\n  @PrimaryGeneratedColumn()\n  public id!: string;\n\n  @ApiModelProperty({\n    description: \"Highlight identifier\",\n    example: 71359796,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public highlight_id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column({\n    type: \"integer\",\n    select: false,\n  })\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Emoji identifier\",\n    example: \"uuid-v4\",\n  })\n  @Column({\n    type: \"text\",\n    select: false,\n  })\n  public emoji_id!: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing highlight reaction last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n    select: false,\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({ type: \"timestamp without time zone\" })\n  public deleted_at?: Date;\n\n  // virtual columns\n  @Column({\n    type: \"integer\",\n    select: false,\n    insert: false,\n  })\n  public reaction_count?: number;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.highlight)\n  @JoinColumn({\n    name: \"highlight_id\",\n    referencedColumnName: \"id\",\n  })\n  highlight?: DbUserHighlight;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.user)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  user?: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUserHighlightReaction, (reaction) => reaction.emoji)\n  @JoinColumn({\n    name: \"emoji_id\",\n    referencedColumnName: \"id\",\n  })\n  emoji?: DbEmoji;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightReactionResponse.html":{"url":"classes/DbUserHighlightReactionResponse.html","title":"class - DbUserHighlightReactionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightReactionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\n  \"emoji_id\",\n  \"reaction_count\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbUserHighlightRepo.html":{"url":"classes/DbUserHighlightRepo.html","title":"class - DbUserHighlightRepo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbUserHighlightRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/entities/user-highlight-repo.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                full_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Highlight Repo Full Name', example: 'open-sauced/insights'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/entities/user-highlight-repo.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiModelProperty } from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\nexport class DbUserHighlightRepo {\n  @ApiModelProperty({\n    description: \"Highlight Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  public full_name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserNotification.html":{"url":"entities/DbUserNotification.html","title":"entity - DbUserNotification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserNotification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                from_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                message\n                            \n                            \n                                    Public\n                                    Optional\n                                meta_id\n                            \n                            \n                                    Public\n                                    Optional\n                                notified_at\n                            \n                            \n                                    Public\n                                    Optional\n                                read_at\n                            \n                            \n                                    Public\n                                type\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        from_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'From User ID', example: 43311})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification message', example: 'bdougie followed you'})@Column({type: 'character varying', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        meta_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Notification Source ID (highlight, user, invite)', example: '133'})@Column({type: 'character varying', length: 32})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        notified_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing db-user-notification creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        read_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user notification read date', example: '2023-04-19 13:24:51.000000'})@Column({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User notification type', example: 'welcome'})@Column({type: 'character varying', enum: UserNotificationTypes, length: 25})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User ID', example: 498})@Column({type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-notification.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, BaseEntity, PrimaryColumn, CreateDateColumn } from \"typeorm\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\nimport { UserNotificationTypes } from \"./user-notification.constants\";\n\n@Entity({ name: \"user_notifications\" })\nexport class DbUserNotification extends BaseEntity {\n  @ApiModelProperty({\n    description: \"Notification identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User ID\",\n    example: 498,\n  })\n  @Column({ type: \"bigint\" })\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"From User ID\",\n    example: 43311,\n  })\n  @Column({ type: \"bigint\" })\n  public from_user_id?: number;\n\n  @ApiModelProperty({\n    description: \"User notification type\",\n    example: \"welcome\",\n  })\n  @Column({\n    type: \"character varying\",\n    enum: UserNotificationTypes,\n    length: 25,\n  })\n  public type: string;\n\n  @ApiModelProperty({\n    description: \"User notification message\",\n    example: \"bdougie followed you\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 100,\n  })\n  public message?: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing db-user-notification creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public notified_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user notification read date\",\n    example: \"2023-04-19 13:24:51.000000\",\n  })\n  @Column({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public read_at?: Date;\n\n  @ApiModelProperty({\n    description: \"Notification Source ID (highlight, user, invite)\",\n    example: \"133\",\n  })\n  @Column({\n    type: \"character varying\",\n    length: 32,\n  })\n  public meta_id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserRepo.html":{"url":"entities/DbUserRepo.html","title":"entity - DbUserRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                full_name\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user creation', example: '2022-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo Full Name', example: 'open-sauced/insights'})@Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Repo identifier', example: 237133})@PrimaryColumn('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repo identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column('bigint')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/user-repo.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, BaseEntity, Column, PrimaryColumn, CreateDateColumn } from \"typeorm\";\n\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_repos\" })\nexport class DbUserRepo extends BaseEntity {\n  @ApiModelProperty({\n    description: \"User Repo identifier\",\n    example: 237133,\n  })\n  @PrimaryColumn(\"bigint\")\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public user_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo identifier\",\n    example: 237133,\n  })\n  @Column(\"bigint\")\n  public repo_id: number;\n\n  @ApiModelProperty({\n    description: \"Repo Full Name\",\n    example: \"open-sauced/insights\",\n  })\n  @Column({ type: \"text\" })\n  public full_name: string;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user creation\",\n    example: \"2022-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserToUserFollows.html":{"url":"entities/DbUserToUserFollows.html","title":"entity - DbUserToUserFollows","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserToUserFollows\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-follows.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                following_user_id\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow creation', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        following_user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User follower identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User Follow identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing user follow last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-follows.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"users_to_users_followers\" })\nexport class DbUserToUserFollows {\n  @ApiModelProperty({\n    description: \"User Follow identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"User follower identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public following_user_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing user follow last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DbUserTopRepo.html":{"url":"entities/DbUserTopRepo.html","title":"entity - DbUserTopRepo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DbUserTopRepo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user-top-repo.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                created_at\n                            \n                            \n                                    Public\n                                    Optional\n                                deleted_at\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                repo\n                            \n                            \n                                    Public\n                                repo_id\n                            \n                            \n                                    Public\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Public\n                                user\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo first index', example: '2016-10-19 13:24:51.000000'})@CreateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        deleted_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@DeleteDateColumn({type: 'timestamp without time zone', select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Top repo connection identifier', example: 196})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, repo => repo.repoToUserTopRepos)@JoinColumn({name: 'repo_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        repo_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'Repository identifier', example: 71359796})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelPropertyOptional({description: 'Timestamp representing top repo last update', example: '2022-08-28 22:04:29.000000'})@UpdateDateColumn({type: 'timestamp without time zone', default: () => now()})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbUser\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, user => user.topRepos)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiModelProperty({description: 'User identifier', example: 237133})@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user-top-repo.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from \"typeorm\";\nimport { ApiHideProperty } from \"@nestjs/swagger\";\nimport { DbUser } from \"../user.entity\";\nimport { DbRepo } from \"../../repo/entities/repo.entity\";\nimport {\n  ApiModelProperty,\n  ApiModelPropertyOptional,\n} from \"@nestjs/swagger/dist/decorators/api-model-property.decorator\";\n\n@Entity({ name: \"user_top_repos\" })\nexport class DbUserTopRepo {\n  @ApiModelProperty({\n    description: \"Top repo connection identifier\",\n    example: 196,\n  })\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @ApiModelProperty({\n    description: \"User identifier\",\n    example: 237133,\n  })\n  @Column()\n  public user_id!: number;\n\n  @ApiModelProperty({\n    description: \"Repository identifier\",\n    example: 71359796,\n  })\n  @Column()\n  public repo_id!: number;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo first index\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  @CreateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public created_at?: Date;\n\n  @ApiModelPropertyOptional({\n    description: \"Timestamp representing top repo last update\",\n    example: \"2022-08-28 22:04:29.000000\",\n  })\n  @UpdateDateColumn({\n    type: \"timestamp without time zone\",\n    default: () => \"now()\",\n  })\n  public updated_at?: Date;\n\n  @ApiHideProperty()\n  @DeleteDateColumn({\n    type: \"timestamp without time zone\",\n    select: false,\n  })\n  public deleted_at?: Date;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbUser, (user) => user.topRepos)\n  @JoinColumn({\n    name: \"user_id\",\n    referencedColumnName: \"id\",\n  })\n  public user!: DbUser;\n\n  @ApiHideProperty()\n  @ManyToOne(() => DbRepo, (repo) => repo.repoToUserTopRepos)\n  @JoinColumn({\n    name: \"repo_id\",\n    referencedColumnName: \"id\",\n  })\n  public repo!: DbRepo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmojiController.html":{"url":"controllers/EmojiController.html","title":"controller - EmojiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmojiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                emojis\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllEmojis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEmojis\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEmojis(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEmojis', summary: 'Listing all emojis and paginates them'})@ApiPaginatedResponse(DbEmoji)@ApiOkResponse({type: DbEmoji})@ApiNotFoundResponse({description: 'Emojis not found'})\n                \n            \n\n            \n                \n                    Defined in src/emoji/emoji.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiNotFoundResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\n\nimport { EmojiService } from \"./emoji.service\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Controller(\"emojis\")\n@ApiTags(\"Emojis service\")\nexport class EmojiController {\n  constructor(private emojiService: EmojiService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEmojis\",\n    summary: \"Listing all emojis and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEmoji)\n  @ApiOkResponse({ type: DbEmoji })\n  @ApiNotFoundResponse({ description: \"Emojis not found\" })\n  async findAllEmojis(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.emojiService.findAll(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmojiModule.html":{"url":"modules/EmojiModule.html","title":"module - EmojiModule","body":"\n                   \n\n\n\n\n    Modules\n    EmojiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\n\nEmojiService\n\nEmojiService\n\n\n\nEmojiModule\n\nEmojiModule\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/emoji/emoji.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmojiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmojiController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EmojiController } from \"./emoji.controller\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\nimport { EmojiService } from \"./emoji.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEmoji], \"ApiConnection\")],\n  controllers: [EmojiController],\n  providers: [EmojiService],\n})\nexport class EmojiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiService.html":{"url":"injectables/EmojiService.html","title":"injectable - EmojiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/emoji/emoji.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emojiRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/emoji/emoji.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emojiRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/emoji/emoji.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbEmoji } from \"./entities/emoji.entity\";\n\n@Injectable()\nexport class EmojiService {\n  constructor(\n    @InjectRepository(DbEmoji, \"ApiConnection\")\n    private emojiRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.emojiRepository.createQueryBuilder(\"emoji\");\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"emoji.display_order\", \"ASC\");\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EndorsementController.html":{"url":"controllers/EndorsementController.html","title":"controller - EndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEndorsement\n                            \n                            \n                                    Async\n                                deleteEndoresementById\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUsername\n                            \n                            \n                                    Async\n                                findAllEndorsements\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                            \n                                    Async\n                                findEndorsementById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEndorsement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEndorsement(_token: string, createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(EndorsementTokenGuard)@ApiOperation({operationId: 'createEndorsement', summary: 'Creates a new endorsement record'})@ApiOkResponse({type: DbEndorsement})@ApiBody({type: CreateEndorsementDto})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEndoresementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEndoresementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'deleteEndoresementById', summary: 'Finds ands deletes the endorsement by ID'})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUsername(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:repoOwnerOrUser')@ApiOperation({operationId: 'findAllByRepoOwnerOrUsername', summary: 'Finds all endorsements by repo org or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsements(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllEndorsements', summary: 'Finds all endorsements and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/:owner/:repo')@ApiOperation({operationId: 'findAllEndorsementsByRepo', summary: 'Finds all endorsements by repo owner or username and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/created')@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:username/received')@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findEndorsementById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEndorsementById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({operationId: 'findEndorsementById', summary: 'Retrieves the endorsement based on ID'})@ApiOkResponse({type: DbEndorsement})@ApiNotFoundResponse({description: 'Endorsement not found'})\n                \n            \n\n            \n                \n                    Defined in src/endorsement/endorsement.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete, Query, UseGuards, Headers } from \"@nestjs/common\";\nimport { ApiBody, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { UserService } from \"../user/user.service\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\n\n@Controller(\"endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class EndorsementController {\n  constructor(private readonly endorsementService: EndorsementService, private readonly userService: UserService) {}\n\n  @Post(\"/\")\n  @UseGuards(EndorsementTokenGuard)\n  @ApiOperation({\n    operationId: \"createEndorsement\",\n    summary: \"Creates a new endorsement record\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiBody({ type: CreateEndorsementDto })\n  async createEndorsement(\n    @Headers(\"X-OpenSauced-token\") _token: string,\n    @Body() createEndorsementDto: CreateEndorsementDto\n  ) {\n    return this.endorsementService.create(createEndorsementDto);\n  }\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllEndorsements\",\n    summary: \"Finds all endorsements and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsements(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/repos/:repoOwnerOrUser\")\n  @ApiOperation({\n    operationId: \"findAllByRepoOwnerOrUsername\",\n    summary: \"Finds all endorsements by repo org or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllByRepoOwnerOrUsername(\n    @Param(\"repoOwnerOrUser\") repoOwnerOrUser: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllByRepoOwnerOrUser(repoOwnerOrUser, pageOptionsDto);\n  }\n\n  @Get(\"/repos/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findAllEndorsementsByRepo\",\n    summary: \"Finds all endorsements by repo owner or username and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllEndorsementsByRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ) {\n    return this.endorsementService.findAllEndorsementsByRepo(owner, repo, pageOptionsDto);\n  }\n\n  /*\n   * @Get(\"/repos/:owner/:repo/byUser\")\n   * @ApiOperation({\n   *   operationId: \"findAllEndorsementsByRepoByUser\",\n   *   summary: \"Finds all endorsements by repo owner grouped by user\",\n   * })\n   * @ApiOkResponse({ type: DbEndorsement })\n   * async findAllEndorsementsByRepoByUser (\n   * @Param(\"owner\") owner: string,\n   *   @Param(\"repo\") repo: string,\n   *   @Query() pageOptionsDto: PageOptionsDto,\n   * ) {\n   *   return this.endorsementService.findAllEndorsementsByRepoByUser(owner, repo, pageOptionsDto);\n   * }\n   */\n\n  @Get(\":id\")\n  @ApiOperation({\n    operationId: \"findEndorsementById\",\n    summary: \"Retrieves the endorsement based on ID\",\n  })\n  @ApiOkResponse({ type: DbEndorsement })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async findEndorsementById(@Param(\"id\") id: string) {\n    return this.endorsementService.findOneById(id);\n  }\n\n  @Get(\"/user/:username/created\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@Param(\"username\") username: string, @Query() pageOptionsDto: PageOptionsDto) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByCreatorUserId(user.id, pageOptionsDto);\n  }\n\n  @Get(\"/user/:username/received\")\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@Param(\"username\") username: string, @Query() pageOptionsDto: PageOptionsDto) {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.endorsementService.findAllByRecipientUserId(user.id, pageOptionsDto);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"deleteEndoresementById\",\n    summary: \"Finds ands deletes the endorsement by ID\",\n  })\n  @ApiNotFoundResponse({ description: \"Endorsement not found\" })\n  async deleteEndoresementById(@Param(\"id\") id: string) {\n    return this.endorsementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EndorsementModule.html":{"url":"modules/EndorsementModule.html","title":"module - EndorsementModule","body":"\n                   \n\n\n\n\n    Modules\n    EndorsementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_EndorsementModule_imports\n\n\n\ncluster_EndorsementModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/endorsement/endorsement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EndorsementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { EndorsementService } from \"./endorsement.service\";\nimport { EndorsementController } from \"./endorsement.controller\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\nimport { UserModule } from \"../user/user.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { EndorsementTokenGuard } from \"./endorsement-token.guard\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbEndorsement], \"ApiConnection\"), UserModule, AuthModule, ApiServicesModule],\n  controllers: [EndorsementController],\n  providers: [EndorsementService, EndorsementTokenGuard],\n  exports: [EndorsementService],\n})\nexport class EndorsementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EndorsementService.html":{"url":"injectables/EndorsementService.html","title":"injectable - EndorsementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EndorsementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/endorsement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByCreatorUserId\n                            \n                            \n                                    Async\n                                findAllByRecipientUserId\n                            \n                            \n                                    Async\n                                findAllByRepoOwnerOrUser\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepo\n                            \n                            \n                                    Async\n                                findAllEndorsementsByRepoByUser\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(endorsementRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        endorsementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEndorsementDto: CreateEndorsementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEndorsementDto\n                                    \n                                                CreateEndorsementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByCreatorUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRecipientUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoOwnerOrUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoOwnerOrUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllEndorsementsByRepoByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { CreateEndorsementDto } from \"./dto/create-endorsement.dto\";\nimport { DbEndorsement } from \"./entities/endorsement.entity\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\n\n@Injectable()\nexport class EndorsementService {\n  constructor(\n    @InjectRepository(DbEndorsement, \"ApiConnection\")\n    private endorsementRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.endorsementRepository.createQueryBuilder(\"endorsements\");\n  }\n\n  async create(createEndorsementDto: CreateEndorsementDto) {\n    return this.endorsementRepository.save(createEndorsementDto);\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByCreatorUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.creator_user_id = :userId\", { userId }).orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRecipientUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"endorsements.recipient_user_id = :userId\", { userId })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllByRepoOwnerOrUser(repoOwnerOrUser: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.recipient_user_id=users.id\")\n      .where(\"LOWER(repos.full_name) LIKE ':ownerOrUser/%'\", { ownerOrUser: repoOwnerOrUser.toLowerCase() })\n      .orWhere(\"LOWER(users.login) = :user\", { user: repoOwnerOrUser.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepo(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllEndorsementsByRepoByUser(owner: string, repo: string, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.endorsementRepository.manager.createQueryBuilder();\n\n    queryBuilder\n      .from(DbEndorsement, \"endorsements\")\n      .innerJoin(\"repos\", \"repos\", \"endorsements.repo_id=repos.id\")\n      .leftJoin(\"users\", \"users\", \"endorsements.repo_id=users.id\")\n      .select(\"users.login\")\n      .addSelect(\"\", \"endorsements\")\n      .where(\"LOWER(repos.full_name) = :repo\", { repo: `${owner}/${repo}`.toLowerCase() })\n      .groupBy(\"users.login\")\n      .orderBy(\"endorsements.created_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findOneById(id: string) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"endorsements.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async remove(id: string) {\n    await this.endorsementRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EndorsementTokenGuard.html":{"url":"guards/EndorsementTokenGuard.html","title":"guard - EndorsementTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EndorsementTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/endorsement/endorsement-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/endorsement/endorsement-token.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(host: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/endorsement/endorsement-token.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    host\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class EndorsementTokenGuard implements CanActivate {\n  constructor(private configService: ConfigService) {}\n\n  canActivate(host: ExecutionContext) {\n    const apiToken = this.configService.get(\"api.endorsementServiceToken\");\n    const ctx = host.switchToHttp();\n    const request: { headers: Record } = ctx.getRequest();\n    const token = request.headers[\"x-opensauced-token\"];\n\n    if (!apiToken) {\n      return false;\n    }\n\n    const isValid = token === apiToken;\n\n    if (!isValid) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilterOptionsDto.html":{"url":"classes/FilterOptionsDto.html","title":"class - FilterOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilterOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/filter-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/filter-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsEnum } from \"class-validator\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { PageOptionsDto } from \"./page-options.dto\";\n\nexport class FilterOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeExplanationDto.html":{"url":"classes/GenerateCodeExplanationDto.html","title":"class - GenerateCodeExplanationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeExplanationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-explanation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-explanation.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min, IsIn } from \"class-validator\";\n\nexport class GenerateCodeExplanationDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeRefactorSuggestionDto.html":{"url":"classes/GenerateCodeRefactorSuggestionDto.html","title":"class - GenerateCodeRefactorSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeRefactorSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeRefactorSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Suggestion Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateCodeTestSuggestionDto.html":{"url":"classes/GenerateCodeTestSuggestionDto.html","title":"class - GenerateCodeTestSuggestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateCodeTestSuggestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Code', type: String})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Suggestion Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-code-test-suggestion.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString, Max, Min } from \"class-validator\";\n\nexport class GenerateCodeTestSuggestionDto {\n  @ApiProperty({\n    description: \"Suggestion Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Code\",\n    type: String,\n  })\n  @IsString()\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneratePullRequestDescriptionDto.html":{"url":"classes/GeneratePullRequestDescriptionDto.html","title":"class - GeneratePullRequestDescriptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneratePullRequestDescriptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/create-pull-request-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                commitMessages\n                            \n                            \n                                descriptionLength\n                            \n                            \n                                    Optional\n                                diff\n                            \n                            \n                                language\n                            \n                            \n                                temperature\n                            \n                            \n                                tone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        commitMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Commit Messages', type: String, isArray: true, example: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descriptionLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Length', type: Number, example: 250})@IsNumber()@Min(100)@Max(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        diff\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'PR Diff', type: String})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        language\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Language', type: String, example: 'english', default: 'english'})@IsString()@IsIn(['english', 'spanish', 'french', 'german', 'italian', 'portuguese', 'dutch', 'russian', 'chinese', 'korean'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Temperature', type: Number, example: 7})@IsNumber()@Min(0)@Max(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description Tone', type: String, example: 'formal'})@IsString()@IsIn(['exciting', 'persuasive', 'informative', 'humorous', 'formal'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/create-pull-request-description.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsIn, IsNumber, IsOptional, IsString, Max, Min } from \"class-validator\";\n\nexport class GeneratePullRequestDescriptionDto {\n  @ApiProperty({\n    description: \"Description Length\",\n    type: Number,\n    example: 250,\n  })\n  @IsNumber()\n  @Min(100)\n  @Max(500)\n  descriptionLength: number;\n\n  @ApiProperty({\n    description: \"Description Temperature\",\n    type: Number,\n    example: 7,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(10)\n  temperature: number;\n\n  @ApiProperty({\n    description: \"Description Tone\",\n    type: String,\n    example: \"formal\",\n  })\n  @IsString()\n  @IsIn([\"exciting\", \"persuasive\", \"informative\", \"humorous\", \"formal\"])\n  tone: string;\n\n  @ApiProperty({\n    description: \"Description Language\",\n    type: String,\n    example: \"english\",\n    default: \"english\",\n  })\n  @IsString()\n  @IsIn([\"english\", \"spanish\", \"french\", \"german\", \"italian\", \"portuguese\", \"dutch\", \"russian\", \"chinese\", \"korean\"])\n  language: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Diff\",\n    type: String,\n  })\n  @IsString()\n  @IsOptional()\n  diff?: string;\n\n  @ApiPropertyOptional({\n    description: \"PR Commit Messages\",\n    type: String,\n    isArray: true,\n    example: [\"chore: fixed a bug with the UI\", \"style: added some rounded corners to some boxes\"],\n  })\n  @IsOptional()\n  commitMessages?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                service\n                            \n                            \n                                    Async\n                                web\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        service\n                        \n                    \n                \n            \n            \n                \n                    \n                    service()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/service')@ApiOperation({operationId: 'healthStatusService', summary: 'Check the health of Open Sauced service endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        web\n                        \n                    \n                \n            \n            \n                \n                    \n                    web()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/web')@ApiOperation({operationId: 'healthStatusWeb', summary: 'Check the health of Open Sauced web endpoints'})@HealthCheck()@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from \"@nestjs/terminus\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\n@Controller(\"health\")\n@ApiTags(\"Health check service\")\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private database: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private readonly configService: ConfigService\n  ) {}\n\n  @Get(\"/service\")\n  @ApiOperation({\n    operationId: \"healthStatusService\",\n    summary: \"Check the health of Open Sauced service endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async service() {\n    return this.health.check([\n      async () => this.database.pingCheck(\"db\"),\n      async () => this.memory.checkHeap(\"memory.heap\", this.configService.get(\"memory_heap\")!),\n      async () => this.memory.checkRSS(\"memory.rss\", this.configService.get(\"memory_rss\")!),\n      async () =>\n        this.disk.checkStorage(\"disk.usage\", {\n          thresholdPercent: this.configService.get(\"disk_percentage\")!,\n          path: \"/\",\n        }),\n      async () =>\n        this.disk.checkStorage(\"disk.storage\", {\n          thresholdPercent: this.configService.get(\"disk_size\")!,\n          path: \"/\",\n        }),\n    ]);\n  }\n\n  @Get(\"/web\")\n  @ApiOperation({\n    operationId: \"healthStatusWeb\",\n    summary: \"Check the health of Open Sauced web endpoints\",\n  })\n  @HealthCheck()\n  @ApiOkResponse()\n  async web() {\n    return this.health.check([\n      async () => this.http.pingCheck(\"opensauced.pizza\", this.configService.get(\"endpoint.landing\")!),\n      async () => this.http.pingCheck(\"app.opensauced\", this.configService.get(\"endpoint.app\")!),\n      async () => this.http.pingCheck(\"hot.opensauced\", this.configService.get(\"endpoint.hot\")!),\n      async () => this.http.pingCheck(\"docs.opensauced\", this.configService.get(\"endpoint.docs\")!),\n      async () => this.http.pingCheck(\"explore.opensauced\", this.configService.get(\"endpoint.explore\")!),\n      async () => this.http.pingCheck(\"admin.opensauced\", this.configService.get(\"endpoint.admin\")!),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n  imports: [TerminusModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HighlightController.html":{"url":"controllers/HighlightController.html","title":"controller - HighlightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HighlightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                featureHighlight\n                            \n                            \n                                    Async\n                                findAllFeaturedHighlights\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findAllHighlights\n                            \n                            \n                                    Async\n                                getAllHighlightReactions\n                            \n                            \n                                    Async\n                                unfeatureHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        featureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    featureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/featured')@ApiOperation({operationId: 'addAFeaturedHighlight', summary: 'Add a highlight to the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeaturedHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeaturedHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/featured')@ApiOperation({operationId: 'findAllFeaturedHighlights', summary: 'Finds all featured highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos/list')@ApiOperation({operationId: 'findAllHighlightRepos', summary: 'Finds all highlight repos and paginates them'})@ApiPaginatedResponse(DbUserHighlightRepo)@ApiOkResponse({type: DbUserHighlightRepo})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlights(pageOptionsDto: HighlightOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAllHighlights', summary: 'Finds all highlights and paginates them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightReactions(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightReactions', summary: 'Retrieves total reactions for a highlight'})@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfeatureHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfeatureHighlight(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/featured')@ApiOperation({operationId: 'removeAFeaturedHighlight', summary: 'Remove a highlight from the featured list'})@UseGuards(SupabaseGuard)@ApiBearerAuth()@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to find highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/highlight/highlight.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Post, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\n\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"./dtos/highlight-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { DbUserHighlightRepo } from \"./entities/user-highlight-repo.entity\";\nimport { UserHighlightsService } from \"../user/user-highlights.service\";\n\n@Controller(\"highlights\")\n@ApiTags(\"Highlights service\")\nexport class HighlightController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlights\",\n    summary: \"Finds all highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/featured\")\n  @ApiOperation({\n    operationId: \"findAllFeaturedHighlights\",\n    summary: \"Finds all featured highlights and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async findAllFeaturedHighlights(@Query() pageOptionsDto: HighlightOptionsDto): Promise> {\n    return this.userHighlightsService.findAllFeatured(pageOptionsDto);\n  }\n\n  @Post(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"addAFeaturedHighlight\",\n    summary: \"Add a highlight to the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async featureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addFeatured(id, userId);\n  }\n\n  @Delete(\"/:id/featured\")\n  @ApiOperation({\n    operationId: \"removeAFeaturedHighlight\",\n    summary: \"Remove a highlight from the featured list\",\n  })\n  @UseGuards(SupabaseGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to find highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async unfeatureHighlight(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.removeFeatured(id, userId);\n  }\n\n  @Get(\"/repos/list\")\n  @ApiOperation({\n    operationId: \"findAllHighlightRepos\",\n    summary: \"Finds all highlight repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlightRepo)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  async findAllHighlightRepos(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightReactions\",\n    summary: \"Retrieves total reactions for a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightReactions(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HighlightModule.html":{"url":"modules/HighlightModule.html","title":"module - HighlightModule","body":"\n                   \n\n\n\n\n    Modules\n    HighlightModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HighlightModule\n\n\n\ncluster_HighlightModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nHighlightModule\n\nHighlightModule\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/highlight/highlight.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HighlightController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { HighlightController } from \"./highlight.controller\";\nimport { DbUserHighlight } from \"../user/entities/user-highlight.entity\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  controllers: [HighlightController],\n  imports: [TypeOrmModule.forFeature([DbUserHighlight], \"ApiConnection\"), UserModule],\n})\nexport class HighlightModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HighlightOptionsDto.html":{"url":"classes/HighlightOptionsDto.html","title":"class - HighlightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HighlightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/highlight/dtos/highlight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Highlight Repo Filter', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/highlight/dtos/highlight-options.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, PickType } from \"@nestjs/swagger\";\nimport { IsOptional, IsString } from \"class-validator\";\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { DbUserHighlightReaction } from \"../../user/entities/user-highlight-reaction.entity\";\n\nexport class HighlightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    description: \"Highlight Repo Filter\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n}\n\nexport class DbUserHighlightReactionResponse extends PickType(DbUserHighlightReaction, [\n  \"emoji_id\",\n  \"reaction_count\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpLoggerMiddleware.html":{"url":"injectables/HttpLoggerMiddleware.html","title":"injectable - HttpLoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpLoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/http-logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middleware/http-logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(`HTTP`)\n                    \n                \n                    \n                        \n                                Defined in src/common/middleware/http-logger.middleware.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from \"@nestjs/common\";\nimport { clc } from \"@nestjs/common/utils/cli-colors.util\";\nimport { Request, Response, NextFunction } from \"express\";\n\nimport { cliDuration } from \"../util/cli-duration\";\n\n@Injectable()\nexport class HttpLoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(`HTTP`);\n\n  use(request: Request, response: Response, next: NextFunction) {\n    const startTime = Date.now();\n\n    response.on(\"finish\", () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) {\n        return this.logger.error(cliDuration(startTime, clc.red(message)));\n      }\n\n      if (statusCode >= 400) {\n        return this.logger.warn(cliDuration(startTime, clc.magentaBright(message)));\n      }\n\n      return this.logger.log(cliDuration(startTime, message));\n    });\n\n    next();\n  }\n}\n\nexport default HttpLoggerMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/InsightController.html":{"url":"controllers/InsightController.html","title":"controller - InsightController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  InsightController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findInsightPageById\n                            \n                            \n                                    Async\n                                removeInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findInsightPageById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findInsightPageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findInsightPageById', summary: 'Finds a insight page by :id'})@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insight page not found'})@ApiUnauthorizedResponse({description: 'Not Authorized to view this Insight'})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightForUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'removeInsightForUser', summary: 'Removes an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/insight.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, UnauthorizedException, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n} from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"insights\")\n@ApiTags(\"Insights service\")\nexport class InsightController {\n  constructor(private readonly insightsService: InsightsService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findInsightPageById\",\n    summary: \"Finds a insight page by :id\",\n  })\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insight page not found\" })\n  @ApiUnauthorizedResponse({ description: \"Not Authorized to view this Insight\" })\n  async findInsightPageById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.insightsService.findOneById(id);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"removeInsightForUser\",\n    summary: \"Removes an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async removeInsightForUser(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    if (Number(insight.user.id) !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightsService.removeInsight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightMemberService.html":{"url":"injectables/InsightMemberService.html","title":"injectable - InsightMemberService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightMemberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-member.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                canUserManageInsight\n                            \n                            \n                                    Async\n                                findAllInsightMembers\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsightMember\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightMemberRepository: Repository, insightService: InsightsService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-member.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightMemberRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        insightService\n                                                  \n                                                        \n                                                                        InsightsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canUserManageInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    canUserManageInsight(userId: number, insightId: number, accessRoles: string[], checkOwner)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    accessRoles\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    checkOwner\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightMembers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMember(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: string, insightMember: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-member.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightMember\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { InsightsService } from \"./insights.service\";\nimport { PagerService } from \"../common/services/pager.service\";\n\n@Injectable()\nexport class InsightMemberService {\n  constructor(\n    @InjectRepository(DbInsightMember, \"ApiConnection\")\n    private insightMemberRepository: Repository,\n    private insightService: InsightsService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightMemberRepository.createQueryBuilder(\"insight_members\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"insight_members.id = :id\", { id });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsightMember(insightMember: Partial) {\n    return this.insightMemberRepository.save(insightMember);\n  }\n\n  async updateInsightMember(id: string, insightMember: Partial) {\n    return this.insightMemberRepository.update(id, insightMember);\n  }\n\n  async removeInsightMember(id: string) {\n    return this.insightMemberRepository.softDelete(id);\n  }\n\n  async canUserManageInsight(\n    userId: number,\n    insightId: number,\n    accessRoles: string[],\n    checkOwner = true\n  ): Promise {\n    const insight = await this.insightService.findOneById(insightId);\n\n    if (checkOwner && Number(insight.user.id) === userId) {\n      return true;\n    }\n\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .andWhere(\"insight_members.user_id = :userId\", { userId })\n      .andWhere(\"insight_members.access IN (:...accessRoles)\", { accessRoles });\n\n    const item: DbInsightMember | null = await queryBuilder.getOne();\n\n    if (!item) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async findAllInsightMembers(pageOptionsDto: PageOptionsDto, insightId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"users.name\", \"insight_members_name\")\n      .addSelect(\"insight_members.invitation_email\", \"insight_members_invitation_email\")\n      .innerJoin(\"insights\", \"insights\", \"insight_members.insight_id=insights.id\")\n      .leftJoin(\"users\", \"users\", \"insight_members.user_id=users.id\")\n      .where(\"insight_members.insight_id = :insightId\", { insightId })\n      .orderBy(\"users.name\", \"ASC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightOptionsDto.html":{"url":"classes/InsightOptionsDto.html","title":"class - InsightOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"javscript\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: 'javscript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/insight-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum InsightFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport class InsightOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"javscript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string = \"javscript\";\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InsightPageOptionsDto.html":{"url":"classes/InsightPageOptionsDto.html","title":"class - InsightPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InsightPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/insight-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class InsightPageOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightRepoService.html":{"url":"injectables/InsightRepoService.html","title":"injectable - InsightRepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightRepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insight-repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightRepo\n                            \n                            \n                                    Async\n                                removeInsightRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insight-repo.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepoRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightRepo(insightId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightRepo(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insight-repo.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\n\n@Injectable()\nexport class InsightRepoService {\n  constructor(\n    @InjectRepository(DbInsightRepo, \"ApiConnection\")\n    private insightRepoRepository: Repository\n  ) {}\n\n  async addInsightRepo(insightId: number, repo: RepoInfo) {\n    return this.insightRepoRepository.save({ insight_id: insightId, repo_id: repo.id, full_name: repo.fullName });\n  }\n\n  async removeInsightRepo(id: number) {\n    return this.insightRepoRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InsightsModule.html":{"url":"modules/InsightsModule.html","title":"module - InsightsModule","body":"\n                   \n\n\n\n\n    Modules\n    InsightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_imports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_InsightsModule_exports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/insight/insights.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InsightMemberService\n                        \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            InsightController\n                        \n                        \n                            UserInsightsController\n                        \n                        \n                            UserInsightMemberController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InsightRepoService\n                        \n                        \n                            InsightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { DbInsightRepo } from \"./entities/insight-repo.entity\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { InsightController } from \"./insight.controller\";\nimport { UserInsightsController } from \"./user-insight.controller\";\nimport { InsightsService } from \"./insights.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { UserInsightMemberController } from \"./user-insight-member.controller\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { UserModule } from \"../user/user.module\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\n\n@Module({\n  controllers: [InsightController, UserInsightsController, UserInsightMemberController],\n  imports: [\n    TypeOrmModule.forFeature([DbInsight, DbInsightRepo, DbInsightMember], \"ApiConnection\"),\n    UserModule,\n    ApiServicesModule,\n  ],\n  providers: [InsightsService, InsightRepoService, InsightMemberService],\n  exports: [InsightsService, InsightRepoService],\n})\nexport class InsightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InsightsService.html":{"url":"injectables/InsightsService.html","title":"injectable - InsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsight\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeInsight\n                            \n                            \n                                    Async\n                                updateInsight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(insightRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/insight/insights.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        insightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsight(insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsight(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsight(id: number, insight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/insight/insights.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\n\n@Injectable()\nexport class InsightsService {\n  constructor(\n    @InjectRepository(DbInsight, \"ApiConnection\")\n    private insightRepository: Repository\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"insights.id = :id\", { id })\n      .innerJoinAndSelect(`insights.user`, `user`)\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`);\n\n    const item: DbInsight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addInsight(insight: Partial) {\n    return this.insightRepository.save(insight);\n  }\n\n  async updateInsight(id: number, insight: Partial) {\n    return this.insightRepository.update(id, insight);\n  }\n\n  async removeInsight(id: number) {\n    return this.insightRepository.softDelete(id);\n  }\n\n  async findAllByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.insightRepository.createQueryBuilder(\"insights\");\n\n    queryBuilder\n      .where(\"insights.user_id = :userId\", { userId })\n      .orWhere(\n        `:userId IN (\n          SELECT user_id\n          FROM insight_members\n          WHERE insight_id = insights.id\n          AND user_id = :userId\n          AND access != 'pending'\n          AND deleted_at IS NULL\n        )\n      `,\n        { userId }\n      )\n      .leftJoinAndSelect(`insights.repos`, `insight_repos`, `insights.id=insight_repos.insight_id`)\n      .orderBy(\"insights.updated_at\", \"DESC\");\n\n    queryBuilder.skip(pageOptionsDto.skip).take(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogModule.html":{"url":"modules/LogModule.html","title":"module - LogModule","body":"\n                   \n\n\n\n\n    Modules\n    LogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/log/log.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CustomLogger\n                        \n                        \n                            LogService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CustomLogger\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { LogService } from \"./log.service\";\nimport { DbLog } from \"./log.entity\";\nimport CustomLogger from \"./custom-logger\";\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([DbLog], \"LogConnection\")],\n  providers: [CustomLogger, LogService],\n  exports: [CustomLogger],\n})\nexport class LogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogService.html":{"url":"injectables/LogService.html","title":"injectable - LogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/log/log.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/log/log.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createLog\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLog(log: CreateLogDto)\n                \n            \n\n\n            \n                \n                    Defined in src/log/log.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    log\n                                    \n                                                CreateLogDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DbLog } from \"./log.entity\";\nimport { CreateLogDto } from \"./dtos/create-log.dto\";\n\n@Injectable()\nexport class LogService {\n  constructor(\n    @InjectRepository(DbLog, \"LogConnection\")\n    private logsRepository: Repository\n  ) {}\n\n  async createLog(log: CreateLogDto) {\n    const newLog = this.logsRepository.create(log);\n\n    await this.logsRepository.save(newLog, { data: { isCreatingLogs: true } });\n\n    return newLog;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenAiModule.html":{"url":"modules/OpenAiModule.html","title":"module - OpenAiModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenAiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_OpenAiModule_exports\n\n\n\n\nOpenAiService \n\nOpenAiService \n\n\n\nOpenAiModule\n\nOpenAiModule\n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/open-ai/open-ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OpenAiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { OpenAiService } from \"./open-ai.service\";\n\n@Module({\n  providers: [OpenAiService],\n  exports: [OpenAiService],\n})\nexport class OpenAiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenAiService.html":{"url":"injectables/OpenAiService.html","title":"injectable - OpenAiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenAiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/open-ai/open-ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateCompletion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/open-ai/open-ai.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateCompletion\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCompletion(systemMessage: string, userMessage: string, temperature: number)\n                \n            \n\n\n            \n                \n                    Defined in src/open-ai/open-ai.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    systemMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userMessage\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    temperature\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Fetch } from \"@supabase/supabase-js/dist/module/lib/types\";\nimport { ConfigService } from \"@nestjs/config\";\n\ninterface ChatResponse {\n  choices: { message: { content: string } }[];\n}\n\n@Injectable()\nexport class OpenAiService {\n  constructor(private configService: ConfigService) {}\n\n  async generateCompletion(systemMessage: string, userMessage: string, temperature: number) {\n    // eslint-disable-next-line\n    const fetcher: Fetch = typeof fetch !== \"undefined\" ? fetch : (require(\"node-fetch\") as Fetch);\n    const response = await fetcher(this.configService.get(\"openai.completionsURL\")!, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.configService.get(\"openai.APIKey\")!}`,\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        model: this.configService.get(\"openai.modelName\"),\n        messages: [\n          {\n            role: \"system\",\n            content: systemMessage,\n          },\n          {\n            role: \"user\",\n            content: userMessage,\n          },\n        ],\n        temperature: temperature / 10,\n        n: 1,\n      }),\n    });\n\n    if (response.ok) {\n      const data = (await response.json()) as ChatResponse;\n\n      return data.choices[0]?.message.content;\n    }\n\n    throw new Error(response.statusText);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, ValidateNested } from \"class-validator\";\nimport { PageMetaDto } from \"./page-meta.dto\";\nimport { Type } from \"class-transformer\";\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  @ValidateNested({ each: true })\n  @Type(() => Array)\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  @ValidateNested()\n  @Type(() => PageMetaDto)\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                limit\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a next page', example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Flag indicating if there is a previous page', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items in the collection', example: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of items per page', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current page', example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The number of pages in the collection', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { PageMetaParameters } from \"./page-meta-parameters.dto\";\n\nexport class PageMetaDto {\n  @ApiProperty({\n    description: \"The current page\",\n    example: 1,\n  })\n  readonly page: number;\n\n  @ApiProperty({\n    description: \"The number of items per page\",\n    example: 10,\n  })\n  readonly limit: number;\n\n  @ApiProperty({\n    description: \"The number of items in the collection\",\n    example: 100,\n  })\n  readonly itemCount: number;\n\n  @ApiProperty({\n    description: \"The number of pages in the collection\",\n    example: 10,\n  })\n  readonly pageCount: number;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a previous page\",\n    example: false,\n  })\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty({\n    description: \"Flag indicating if there is a next page\",\n    example: true,\n  })\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaParameters) {\n    this.page = pageOptionsDto.page ?? 1;\n    this.limit = pageOptionsDto.limit ?? 10;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.limit);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaParameters.html":{"url":"interfaces/PageMetaParameters.html","title":"interface - PageMetaParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta-parameters.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from \"./page-options.dto\";\n\nexport interface PageMetaParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsEnum, IsIn, IsInt, IsOptional, Max, Min } from \"class-validator\";\n\nimport { OrderDirectionEnum } from \"../constants/order-direction.constant\";\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  @ApiPropertyOptional({ enum: OrderDirectionEnum, enumName: \"OrderDirectionEnum\", default: OrderDirectionEnum.DESC })\n  @IsEnum(OrderDirectionEnum)\n  @IsOptional()\n  readonly orderDirection?: OrderDirectionEnum = OrderDirectionEnum.DESC;\n\n  @ApiPropertyOptional({\n    description: \"Range in days\",\n    default: 30,\n  })\n  @Type(() => Number)\n  @IsIn([7, 30, 90])\n  @IsInt()\n  @IsOptional()\n  readonly range?: number = 30;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PagerService.html":{"url":"injectables/PagerService.html","title":"injectable - PagerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PagerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                applyPagination\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        applyPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    applyPagination(undefined: PaginationInput)\n                \n            \n\n\n            \n                \n                    Defined in src/common/services/pager.service.ts:16\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        Entity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                PaginationInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationInput.html":{"url":"interfaces/PaginationInput.html","title":"interface - PaginationInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/services/pager.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                                \n                                        \n                                            queryBuilder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        queryBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        queryBuilder:     SelectQueryBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SelectQueryBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { SelectQueryBuilder } from \"typeorm/query-builder/SelectQueryBuilder\";\nimport { ObjectLiteral } from \"typeorm\";\n\nimport { PageMetaDto } from \"../dtos/page-meta.dto\";\nimport { PageDto } from \"../dtos/page.dto\";\nimport { PageOptionsDto } from \"../dtos/page-options.dto\";\n\ninterface PaginationInput {\n  queryBuilder: SelectQueryBuilder;\n  pageOptionsDto: PageOptionsDto;\n}\n\n@Injectable()\nexport class PagerService {\n  async applyPagination({ queryBuilder, pageOptionsDto }: PaginationInput) {\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getMany()]);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorInsightsDto.html":{"url":"classes/PullRequestContributorInsightsDto.html","title":"class - PullRequestContributorInsightsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorInsightsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-insights.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsInt, IsOptional, IsString, Max, Min } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class PullRequestContributorInsightsDto extends PageOptionsDto {\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  limit?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestContributorOptionsDto.html":{"url":"classes/PullRequestContributorOptionsDto.html","title":"class - PullRequestContributorOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestContributorOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-contributor-options.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport class PullRequestContributorOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestController.html":{"url":"controllers/PullRequestController.html","title":"controller - PullRequestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPullRequestInsights\n                            \n                            \n                                    Async\n                                listAllPullRequests\n                            \n                            \n                                    Async\n                                searchAllPullRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPullRequestInsights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPullRequestInsights(pageOptionsDto: FilterOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/insights')@ApiOperation({operationId: 'getPullRequestInsights', summary: 'Find pull request insights over the last 2 months'})@ApiOkResponse({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllPullRequests(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'listAllPullRequests', summary: 'Finds all pull requests and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchAllPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchAllPullRequests(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'searchAllPullRequests', summary: 'Searches pull requests using filters and paginates them'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from \"@nestjs/common\";\nimport { ApiOperation, ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestController {\n  constructor(\n    private readonly pullRequestService: PullRequestService,\n    private readonly pullRequestsInsightService: PullRequestInsightsService\n  ) {}\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"listAllPullRequests\",\n    summary: \"Finds all pull requests and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async listAllPullRequests(@Query() pageOptionsDto: PageOptionsDto): Promise> {\n    return this.pullRequestService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"searchAllPullRequests\",\n    summary: \"Searches pull requests using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  async searchAllPullRequests(@Query() pageOptionsDto: PullRequestPageOptionsDto): Promise> {\n    return this.pullRequestService.findAllWithFilters(pageOptionsDto);\n  }\n\n  @Get(\"/insights\")\n  @ApiOperation({\n    operationId: \"getPullRequestInsights\",\n    summary: \"Find pull request insights over the last 2 months\",\n  })\n  @ApiOkResponse({ type: [DbPRInsight] })\n  async getPullRequestInsights(@Query() pageOptionsDto: FilterOptionsDto): Promise {\n    return Promise.all(\n      [30, 60].map(async (interval) => this.pullRequestsInsightService.getInsight(interval, pageOptionsDto))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PullRequestDescriptionController.html":{"url":"controllers/PullRequestDescriptionController.html","title":"controller - PullRequestDescriptionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PullRequestDescriptionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                prs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generatePRDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePRDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePRDescription(generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/description/generate')@ApiOperation({operationId: 'generatePRDescription', summary: 'Generates a PR description based on the provided information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: GeneratePullRequestDescriptionDto})\n                \n            \n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    generatePullRequestDescriptionDto\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiBadRequestResponse, ApiBody, ApiTags } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\n\n@Controller(\"prs\")\n@ApiTags(\"Pull Requests service\")\nexport class PullRequestDescriptionController {\n  constructor(private pullRequestDescriptionService: PullRequestDescriptionService) {}\n\n  @Post(\"/description/generate\")\n  @ApiOperation({\n    operationId: \"generatePRDescription\",\n    summary: \"Generates a PR description based on the provided information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: GeneratePullRequestDescriptionDto })\n  async generatePRDescription(@Body() generatePullRequestDescriptionDto: GeneratePullRequestDescriptionDto) {\n    const description = await this.pullRequestDescriptionService.generateDescription(generatePullRequestDescriptionDto);\n\n    if (!description) {\n      throw new BadRequestException();\n    }\n\n    return { description };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestDescriptionService.html":{"url":"injectables/PullRequestDescriptionService.html","title":"injectable - PullRequestDescriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestDescriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-description.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateDescription\n                            \n                            \n                                    Private\n                                generatePrompt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(openAiService: OpenAiService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-description.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        openAiService\n                                                  \n                                                        \n                                                                        OpenAiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDescription(options: GeneratePullRequestDescriptionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                GeneratePullRequestDescriptionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generatePrompt\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePrompt(language: string, maxLength: number, tone: string)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-description.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    language\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tone\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { GeneratePullRequestDescriptionDto } from \"./dtos/create-pull-request-description.dto\";\nimport { OpenAiService } from \"../open-ai/open-ai.service\";\n\n@Injectable()\nexport class PullRequestDescriptionService {\n  constructor(private openAiService: OpenAiService) {}\n\n  private generatePrompt(language: string, maxLength: number, tone: string) {\n    return [\n      `Generate an apt github PR description written in present tense and ${tone} tone for the given code diff/commit-messages with the specifications mentioned below`,\n      `Description language: ${language}`,\n      `Description must be a maximum of ${maxLength} characters.`,\n      \"Exclude anything unnecessary such as translation. Your entire response will be passed directly into a pull request description\",\n    ].join(\"\\n\");\n  }\n\n  async generateDescription(options: GeneratePullRequestDescriptionDto) {\n    const content = `${options.diff ? `Diff: ${options.diff}\\n` : \"\"}${\n      options.commitMessages ? `\\nCommit Messages: ${options.commitMessages.join(\",\")}` : \"\"\n    }`;\n\n    try {\n      const completion = this.openAiService.generateCompletion(\n        this.generatePrompt(options.language, options.descriptionLength, options.tone),\n        content,\n        options.temperature\n      );\n\n      return completion;\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        console.error(\"OpenAI error: \", error.message);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestInsightsService.html":{"url":"injectables/PullRequestInsightsService.html","title":"injectable - PullRequestInsightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestInsightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request-insights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                getInsight\n                            \n                            \n                                subQueryCountPrs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prInsightRepository: Repository, repoFilterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request-insights.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prInsightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        repoFilterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInsight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInsight(interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCountPrs\n                        \n                    \n                \n            \n            \n                \nsubQueryCountPrs(qb: SelectQueryBuilder, type: string, interval: number, options: FilterOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request-insights.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"all\"\n                                    \n\n                                \n                                \n                                    interval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\n\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { FilterOptionsDto } from \"../common/dtos/filter-options.dto\";\n\n@Injectable()\nexport class PullRequestInsightsService {\n  constructor(\n    @InjectRepository(DbPRInsight, \"ApiConnection\")\n    private prInsightRepository: Repository,\n    private repoFilterService: RepoFilterService\n  ) {}\n\n  baseQueryBuilder() {\n    return this.prInsightRepository.createQueryBuilder(\"pr\");\n  }\n\n  subQueryCountPrs(\n    qb: SelectQueryBuilder,\n    type = \"all\",\n    interval = 0,\n    options: FilterOptionsDto\n  ) {\n    const prQuery = this.baseQueryBuilder()\n      .select(`COALESCE(COUNT(\"pr\".\"id\"), 0)`)\n      .innerJoin(\"repos\", \"repos\", `\"pr\".\"repo_id\"=\"repos\".\"id\"`);\n\n    const filters = this.repoFilterService.getRepoFilters(options, interval);\n\n    filters.push([`now() - INTERVAL '${interval} days'  {\n    const queryBuilder = this.baseQueryBuilder()\n      .select(`TO_CHAR(now() - INTERVAL '${interval} days', 'YYYY-MM-DD')`, \"day\")\n      .addSelect(`${interval}::INTEGER`, \"interval\")\n      .limit(1);\n\n    [\"all\", \"accepted\", \"spam\"].forEach((type) => {\n      this.subQueryCountPrs(queryBuilder, type, interval, options);\n    });\n\n    queryBuilder.setParameters({ ...options, repoIds: options.repoIds ? options.repoIds.split(\",\") : [] });\n\n    const item: DbPRInsight | undefined = await queryBuilder.getRawOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PullRequestModule.html":{"url":"modules/PullRequestModule.html","title":"module - PullRequestModule","body":"\n                   \n\n\n\n\n    Modules\n    PullRequestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_PullRequestModule_exports\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pull-requests/pull-request.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CodeExplanationService\n                        \n                        \n                            CodeRefactorSuggestionService\n                        \n                        \n                            CodeTestSuggestionService\n                        \n                        \n                            PullRequestDescriptionService\n                        \n                        \n                            PullRequestInsightsService\n                        \n                        \n                            PullRequestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PullRequestController\n                        \n                        \n                            PullRequestDescriptionController\n                        \n                        \n                            CodeRefactorSuggestionController\n                        \n                        \n                            CodeTestSuggestionController\n                        \n                        \n                            CodeExplanationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            OpenAiModule\n                        \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PullRequestService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\nimport { DbPRInsight } from \"./entities/pull-request-insight.entity\";\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PullRequestInsightsService } from \"./pull-request-insights.service\";\nimport { PullRequestController } from \"./pull-request.controller\";\nimport { PullRequestService } from \"./pull-request.service\";\nimport { PullRequestDescriptionService } from \"./pull-request-description.service\";\nimport { PullRequestDescriptionController } from \"./pull-request-description.controller\";\nimport { CodeRefactorSuggestionController } from \"./code-refactor-suggestion.controller\";\nimport { CodeRefactorSuggestionService } from \"./code-refactor-suggestion.service\";\nimport { CodeTestSuggestionController } from \"./code-test.suggestion.controller\";\nimport { CodeExplanationService } from \"./code-explanation.service\";\nimport { CodeExplanationController } from \"./code-explanation.controller\";\nimport { CodeTestSuggestionService } from \"./code-test-suggestion.service\";\nimport { OpenAiModule } from \"../open-ai/open-ai.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbPullRequest, DbPRInsight], \"ApiConnection\"), RepoFilterModule, OpenAiModule],\n  controllers: [\n    PullRequestController,\n    PullRequestDescriptionController,\n    CodeRefactorSuggestionController,\n    CodeTestSuggestionController,\n    CodeExplanationController,\n  ],\n  providers: [\n    PullRequestService,\n    PullRequestInsightsService,\n    PullRequestDescriptionService,\n    CodeRefactorSuggestionService,\n    CodeTestSuggestionService,\n    CodeExplanationService,\n  ],\n  exports: [PullRequestService],\n})\nexport class PullRequestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PullRequestPageOptionsDto.html":{"url":"classes/PullRequestPageOptionsDto.html","title":"class - PullRequestPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PullRequestPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/dtos/pull-request-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                contributor\n                            \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        contributor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'bdougie'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : PullRequestOrderFieldsEnum.updated_at\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestOrderFieldsEnum, enumName: 'PullRequestOrderFieldsEnum', default: undefined})@IsEnum(PullRequestOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'open-sauced/insights'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PullRequestStatusEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: PullRequestStatusEnum, enumName: 'PullRequestStatusEnum'})@IsEnum(PullRequestStatusEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', example: 'javascript'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pull-requests/dtos/pull-request-page-options.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nexport enum PullRequestOrderFieldsEnum {\n  created_at = \"created_at\",\n  closed_at = \"closed_at\",\n  merged_at = \"merged_at\",\n  updated_at = \"updated_at\",\n}\n\nexport enum PullRequestStatusEnum {\n  open = \"open\",\n  closed = \"closed\",\n}\n\nexport class PullRequestPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: PullRequestOrderFieldsEnum,\n    enumName: \"PullRequestOrderFieldsEnum\",\n    default: PullRequestOrderFieldsEnum.updated_at,\n  })\n  @IsEnum(PullRequestOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: PullRequestOrderFieldsEnum = PullRequestOrderFieldsEnum.updated_at;\n\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"javascript\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n\n  @ApiPropertyOptional({\n    enum: PullRequestStatusEnum,\n    enumName: \"PullRequestStatusEnum\",\n  })\n  @IsEnum(PullRequestStatusEnum)\n  @IsOptional()\n  readonly status?: PullRequestStatusEnum;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    example: \"bdougie\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly contributor?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PullRequestService.html":{"url":"injectables/PullRequestService.html","title":"injectable - PullRequestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PullRequestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pull-requests/pull-request.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByContributor\n                            \n                            \n                                    Async\n                                findAllContributorsWithFilters\n                            \n                            \n                                    Async\n                                findAllRecentContributors\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findNewContributorsInTimeRange\n                            \n                            \n                                    Private\n                                getContributorRangeQueryBuilder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pullRequestRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/pull-requests/pull-request.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pullRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByContributor\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    contributor\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllContributorsWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllContributorsWithFilters(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecentContributors\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecentContributors(pageOptionsDto: PullRequestContributorInsightsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorInsightsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: PullRequestPageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findNewContributorsInTimeRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    findNewContributorsInTimeRange(pageOptionsDto: PullRequestContributorOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PullRequestContributorOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getContributorRangeQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContributorRangeQueryBuilder(start: number, range: number, repoIds: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/pull-requests/pull-request.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repoIds\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbPullRequest } from \"./entities/pull-request.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PullRequestPageOptionsDto } from \"./dtos/pull-request-page-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { DbPullRequestContributor } from \"./dtos/pull-request-contributor.dto\";\nimport { PullRequestContributorOptionsDto } from \"./dtos/pull-request-contributor-options.dto\";\nimport { PullRequestContributorInsightsDto } from \"./dtos/pull-request-contributor-insights.dto\";\n\n@Injectable()\nexport class PullRequestService {\n  constructor(\n    @InjectRepository(DbPullRequest, \"ApiConnection\")\n    private pullRequestRepository: Repository,\n    private filterService: RepoFilterService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.pullRequestRepository.createQueryBuilder(\"pull_requests\");\n\n    return builder;\n  }\n\n  async findAll(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addOrderBy(`\"pull_requests\".\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByContributor(contributor: string, pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`LOWER(\"pull_requests\".\"author_login\")=:contributor`, { contributor: contributor.toLowerCase() })\n      .andWhere(`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.baseQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addSelect(\"repos.full_name\", \"pull_requests_full_name\")\n      .addSelect(\"repos.id\", \"pull_requests_repo_id\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' > {\n    const queryBuilder = this.pullRequestRepository.manager.createQueryBuilder();\n    const range = pageOptionsDto.range!;\n\n    queryBuilder\n      .from(DbPullRequest, \"pull_requests\")\n      .distinct()\n      .select(\"pull_requests.author_login\", \"author_login\")\n      .addSelect(\"MAX(pull_requests.updated_at)\", \"updated_at\")\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .addGroupBy(\"author_login\");\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"updated_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findNewContributorsInTimeRange(\n    pageOptionsDto: PullRequestContributorOptionsDto\n  ): Promise> {\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.baseQueryBuilder();\n    const prevMonthQuery = this.getContributorRangeQueryBuilder(range, range + range, repoIds);\n\n    queryBuilder\n      .select(\"previous_month.author_login\")\n      .distinct()\n      .from(`(${prevMonthQuery.getQuery()})`, \"previous_month\")\n      .leftJoin(\n        (qb) =>\n          qb\n            .select(\"author_login\")\n            .distinct()\n            .from(DbPullRequest, \"pull_requests\")\n            .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n            .where(`pull_requests.updated_at >= NOW() - INTERVAL '${range} days'`)\n            .andWhere(\"pull_requests.updated_at > {\n    const range = pageOptionsDto.range!;\n    const repoIds = pageOptionsDto.repoIds?.split(\",\") ?? [];\n\n    const queryBuilder = this.getContributorRangeQueryBuilder(range, range + range, repoIds);\n    const entities: DbPullRequestContributor[] = await queryBuilder.getRawMany();\n    const itemCount = entities.length;\n\n    const pageMetaDto = new PageMetaDto({\n      itemCount,\n      pageOptionsDto: { ...pageOptionsDto, limit: itemCount, skip: 0 },\n    });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  private getContributorRangeQueryBuilder(start: number, range: number, repoIds: string[]) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .select(\"author_login\")\n      .distinct()\n      .innerJoin(\"repos\", \"repos\", `\"pull_requests\".\"repo_id\"=\"repos\".\"id\"`)\n      .where(`pull_requests.updated_at >= NOW() - INTERVAL '${range} days'`)\n      .andWhere(`pull_requests.updated_at  0) {\n      queryBuilder.andWhere(\"repos.id IN (:...repoIds)\", { repoIds });\n    }\n\n    return queryBuilder;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoContributionsController.html":{"url":"controllers/RepoContributionsController.html","title":"controller - RepoContributionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoContributionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/contribution/repo-contributions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByOwnerAndRepo(owner: string, repo: string, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo/contributions')@ApiOperation({operationId: 'findAllByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByRepoId(id: number, pageOptionsDto: ContributionPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/contributions')@ApiOperation({operationId: 'findAllByRepoId', summary: 'Find a repo by :id listing all contributions and paginating them'})@ApiPaginatedResponse(DbContribution)@ApiOkResponse({type: DbContribution})@ApiNotFoundResponse({description: 'Repo not found'})\n                \n            \n\n            \n                \n                    Defined in src/contribution/repo-contributions.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                ContributionPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { ContributionService } from \"./contribution.service\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbContribution } from \"./contribution.entity\";\nimport { ContributionPageOptionsDto } from \"./dtos/contribution-page-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\", \"Contribution service\")\nexport class RepoContributionsController {\n  constructor(private readonly repoService: RepoService, private readonly contributionService: ContributionService) {}\n\n  @Get(\"/:id/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByRepoId\",\n    summary: \"Find a repo by :id listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByRepoId(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneById(id);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n\n  @Get(\"/:owner/:repo/contributions\")\n  @ApiOperation({\n    operationId: \"findAllByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo listing all contributions and paginating them\",\n  })\n  @ApiPaginatedResponse(DbContribution)\n  @ApiOkResponse({ type: DbContribution })\n  @ApiNotFoundResponse({ description: \"Repo not found\" })\n  async findAllByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @Query() pageOptionsDto: ContributionPageOptionsDto\n  ): Promise> {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.contributionService.findAll(pageOptionsDto, item.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoController.html":{"url":"controllers/RepoController.html","title":"controller - RepoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReposWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@ApiOperation({operationId: 'findAll', summary: 'Finds all repos and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllReposWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReposWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({operationId: 'findAllReposWithFilters', summary: 'Finds all repos using filters and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'findOneById', summary: 'Finds a repo by :id'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:owner/:repo')@ApiOperation({operationId: 'findOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo'})@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Repository not found'})\n                \n            \n\n            \n                \n                    Defined in src/repo/repo.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, ParseIntPipe, Query } from \"@nestjs/common\";\nimport { RepoService } from \"./repo.service\";\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service\")\nexport class RepoController {\n  constructor(private readonly repoService: RepoService) {}\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"findOneById\",\n    summary: \"Finds a repo by :id\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneById(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.repoService.findOneById(id);\n  }\n\n  @Get(\"/:owner/:repo\")\n  @ApiOperation({\n    operationId: \"findOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo\",\n  })\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Repository not found\" })\n  async findOneByOwnerAndRepo(@Param(\"owner\") owner: string, @Param(\"repo\") repo: string): Promise {\n    return this.repoService.findOneByOwnerAndRepo(owner, repo);\n  }\n\n  @Get(\"/list\")\n  @ApiOperation({\n    operationId: \"findAll\",\n    summary: \"Finds all repos and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAll(@Query() pageOptionsDto: RepoPageOptionsDto): Promise> {\n    return this.repoService.findAll(pageOptionsDto);\n  }\n\n  @Get(\"/search\")\n  @ApiOperation({\n    operationId: \"findAllReposWithFilters\",\n    summary: \"Finds all repos using filters and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllReposWithFilters(@Query() pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    return this.repoService.findAllWithFilters(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoFilterModule.html":{"url":"modules/RepoFilterModule.html","title":"module - RepoFilterModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoFilterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/filters/repo-filter.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoFilterService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { RepoFilterService } from \"./repo-filter.service\";\n\n@Module({\n  providers: [RepoFilterService],\n  exports: [RepoFilterService],\n})\nexport class RepoFilterModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoFilterService.html":{"url":"injectables/RepoFilterService.html","title":"injectable - RepoFilterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoFilterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/repo-filter.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                applyQueryBuilderFilters\n                            \n                            \n                                getRepoFilters\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        applyQueryBuilderFilters\n                        \n                    \n                \n            \n            \n                \napplyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [])\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:85\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    applies the filters using the provided QueryBuilder\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    qb\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    filters\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRepoFilters\n                        \n                    \n                \n            \n            \n                \ngetRepoFilters(options: FilterOptionsDto, range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/repo-filter.service.ts:15\n                \n            \n\n\n            \n                \n                    applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FilterOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ObjectLiteral, SelectQueryBuilder } from \"typeorm\";\n\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\nimport { FilterOptionsDto } from \"../dtos/filter-options.dto\";\n\n@Injectable()\nexport class RepoFilterService {\n  /**\n   * applies repo-based filters based on the filter/InsightFilterFieldsEnum query param\n   * @param options\n   * @param range\n   */\n\n  getRepoFilters(options: FilterOptionsDto, range = 0): [string, object][] {\n    const filters: [string, object][] = [];\n\n    if (options.repoIds) {\n      filters.push([`repos.id IN (:...repoIds)`, { repoIds: options.repoIds.split(\",\") }]);\n    }\n\n    if (options.repo) {\n      filters.push([`LOWER(repos.full_name)=:repo`, { repo: decodeURIComponent(options.repo.toLowerCase()) }]);\n    }\n\n    if (options.topic) {\n      filters.push([`:topic = ANY(\"repos\".\"topics\")`, { topic: options.topic }]);\n    }\n\n    if (options.filter === InsightFilterFieldsEnum.Recent) {\n      filters.push([\"repos.stars >= 1000\", {}]);\n    } else if (options.filter === InsightFilterFieldsEnum.Top100) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT \"top_repos\".id\n          FROM \"repos\" \"top_repos\"\n          WHERE\n            top_repos.stars > 1000\n          ORDER BY top_repos.stars DESC\n          LIMIT 1000\n        )\n      `,\n        {},\n      ]);\n    } else if (options.filter === InsightFilterFieldsEnum.MostSpammed) {\n      filters.push([\n        `\n        repos.id IN (\n          SELECT spam_pull_requests.repo_id\n          FROM \"pull_requests\" \"spam_pull_requests\"\n          WHERE\n            'spam' = ANY(\"spam_pull_requests\".\"label_names\")\n            AND now() - INTERVAL '${range} days' = 5\n     *   )`, {}]);\n     * }\n     */\n\n    return filters;\n  }\n\n  /**\n   * applies the filters using the provided QueryBuilder\n   * @param qb\n   * @param filters\n   */\n\n  applyQueryBuilderFilters(qb: SelectQueryBuilder, filters: [string, object][] = []) {\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        qb.where(sql, data);\n      } else {\n        qb.andWhere(sql, data);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoInfo.html":{"url":"classes/RepoInfo.html","title":"class - RepoInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-info.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                fullName\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo Full Name', type: String, example: 'open-sauced/insights'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Repo ID', type: Number, example: 234343})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-info.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNumber, IsString } from \"class-validator\";\n\nexport class RepoInfo {\n  @ApiProperty({\n    description: \"Repo ID\",\n    type: Number,\n    example: 234343,\n  })\n  @IsNumber()\n  id: number;\n\n  @ApiProperty({\n    description: \"Repo Full Name\",\n    type: String,\n    example: \"open-sauced/insights\",\n  })\n  @IsString()\n  fullName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RepoModule.html":{"url":"modules/RepoModule.html","title":"module - RepoModule","body":"\n                   \n\n\n\n\n    Modules\n    RepoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_RepoModule_imports\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\n\n\nRepoModule\n\nRepoModule\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/repo/repo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RepoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoFilterModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RepoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { RepoService } from \"./repo.service\";\nimport { RepoController } from \"./repo.controller\";\nimport { RepoFilterModule } from \"../common/filters/repo-filter.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo], \"ApiConnection\"), RepoFilterModule],\n  controllers: [RepoController],\n  providers: [RepoService],\n  exports: [RepoService],\n})\nexport class RepoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoPageOptionsDto.html":{"url":"classes/RepoPageOptionsDto.html","title":"class - RepoPageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoPageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-page-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-page-options.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional } from \"class-validator\";\n\nimport { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport enum RepoFilterFieldsEnum {\n  Recent = \"recent\",\n  Top100 = \"top-100-repos\",\n  MinimumContributors = \"minimum-5-contributors\",\n  MostActive = \"most-active\",\n  MostSpammed = \"most-spammed\",\n}\n\nexport enum RepoOrderFieldsEnum {\n  issues = \"issues\",\n  stars = \"stars\",\n  watchers = \"watchers\",\n  subscribers = \"subscribers\",\n  created_at = \"created_at\",\n  updated_at = \"updated_at\",\n  name = \"name\",\n  contributionsCount = \"contributionsCount\",\n  votesCount = \"votesCount\",\n  submissionsCount = \"submissionsCount\",\n  stargazersCount = \"stargazersCount\",\n  starsCount = \"starsCount\",\n}\n\nexport class RepoPageOptionsDto extends PageOptionsDto {\n  @ApiPropertyOptional({\n    enum: RepoOrderFieldsEnum,\n    enumName: \"RepoOrderFieldsEnum\",\n    default: RepoOrderFieldsEnum.stars,\n  })\n  @IsEnum(RepoOrderFieldsEnum)\n  @IsOptional()\n  readonly orderBy?: RepoOrderFieldsEnum = RepoOrderFieldsEnum.stars;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RepoSearchOptionsDto.html":{"url":"classes/RepoSearchOptionsDto.html","title":"class - RepoSearchOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RepoSearchOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/dtos/repo-search-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        RepoPageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                filter\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repo\n                            \n                            \n                                    Readonly\n                                    Optional\n                                repoIds\n                            \n                            \n                                    Readonly\n                                    Optional\n                                topic\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderBy\n                            \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InsightFilterFieldsEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: InsightFilterFieldsEnum, enumName: 'InsightFilterFieldsEnum'})@IsEnum(InsightFilterFieldsEnum)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        repoIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        topic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'string', default: ''})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/repo/dtos/repo-search-options.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoOrderFieldsEnum\n\n                    \n                \n                \n                    \n                        Default value : RepoOrderFieldsEnum.stars\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: RepoOrderFieldsEnum, enumName: 'RepoOrderFieldsEnum', default: undefined})@IsEnum(RepoOrderFieldsEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         RepoPageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         RepoPageOptionsDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsEnum, IsOptional, IsString } from \"class-validator\";\nimport { InsightFilterFieldsEnum } from \"../../insight/dtos/insight-options.dto\";\n\nimport { RepoPageOptionsDto } from \"./repo-page-options.dto\";\n\nexport class RepoSearchOptionsDto extends RepoPageOptionsDto {\n  @ApiPropertyOptional({\n    enum: InsightFilterFieldsEnum,\n    enumName: \"InsightFilterFieldsEnum\",\n  })\n  @IsEnum(InsightFilterFieldsEnum)\n  @IsOptional()\n  readonly filter?: InsightFilterFieldsEnum;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repo?: string;\n\n  @ApiPropertyOptional({\n    type: \"string\",\n    default: \"\",\n  })\n  @IsString()\n  @IsOptional()\n  readonly topic?: string;\n\n  @ApiPropertyOptional()\n  @IsString()\n  @IsOptional()\n  readonly repoIds?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RepoService.html":{"url":"injectables/RepoService.html","title":"injectable - RepoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RepoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repo/repo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseFilterQueryBuilder\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllWithFilters\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findRecommendations\n                            \n                            \n                                subQueryCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoRepository: Repository, filterService: RepoFilterService)\n                    \n                \n                        \n                            \n                                Defined in src/repo/repo.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filterService\n                                                  \n                                                        \n                                                                        RepoFilterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        baseFilterQueryBuilder\n                        \n                    \n                \n            \n            \n                \n                    \n                    baseFilterQueryBuilder(range: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        30\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: RepoPageOptionsDto, userId?: number, userRelations?: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    userRelations\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllWithFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoSearchOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByOwnerAndRepo(owner: string, repo: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecommendations(interests: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    interests\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subQueryCount\n                        \n                    \n                \n            \n            \n                \nsubQueryCount(subQuery: SelectQueryBuilder, entity: string, alias: string, target: string)\n                \n            \n\n\n            \n                \n                    Defined in src/repo/repo.service.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    subQuery\n                                    \n                                            SelectQueryBuilder\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entity\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        \"repo\"\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ObjectLiteral, Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"./entities/repo.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { RepoOrderFieldsEnum, RepoPageOptionsDto } from \"./dtos/repo-page-options.dto\";\nimport { OrderDirectionEnum } from \"../common/constants/order-direction.constant\";\nimport { InsightFilterFieldsEnum } from \"../insight/dtos/insight-options.dto\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { RepoSearchOptionsDto } from \"./dtos/repo-search-options.dto\";\n\n@Injectable()\nexport class RepoService {\n  constructor(\n    @InjectRepository(DbRepo, \"ApiConnection\")\n    private repoRepository: Repository,\n    private filterService: RepoFilterService\n  ) {}\n\n  subQueryCount(\n    subQuery: SelectQueryBuilder,\n    entity: string,\n    alias: string,\n    target = \"repo\"\n  ) {\n    const aliasName = `${alias}Count`;\n    const aliasTable = `${alias}CountSelect`;\n\n    return subQuery\n      .select(\"COUNT(DISTINCT id)\", aliasName)\n      .from(entity, aliasTable)\n      .where(`${aliasTable}.${target}_id = ${target}.id`);\n  }\n\n  baseQueryBuilder() {\n    const builder = this.repoRepository\n      .createQueryBuilder(\"repo\")\n\n      /*\n       * .select(['repo.id'])\n       * .leftJoinAndSelect(\"repo.user\", \"user\")\n       * .leftJoinAndSelect(DbRepoToUserStars, \"stars\")\n       * .leftJoinAndMapMany(\"repo.contributions\", DbContribution, \"contributions\", \"contributions.repo_id = repo.id\")\n       */\n\n      .addSelect((qb) => this.subQueryCount(qb, \"DbContribution\", \"contributions\"), \"contributionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserVotes\", \"votes\"), \"votesCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserSubmissions\", \"submissions\"), \"submissionsCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStargazers\", \"stargazers\"), \"stargazersCount\")\n      .addSelect((qb) => this.subQueryCount(qb, \"DbRepoToUserStars\", \"stars\"), \"starsCount\")\n      .loadRelationCountAndMap(\"repo.contributionsCount\", \"repo.contributions\")\n      .loadRelationCountAndMap(\"repo.votesCount\", \"repo.repoToUserVotes\")\n      .loadRelationCountAndMap(\"repo.submissionsCount\", \"repo.repoToUserSubmissions\")\n      .loadRelationCountAndMap(\"repo.stargazersCount\", \"repo.repoToUserStargazers\")\n      .loadRelationCountAndMap(\"repo.starsCount\", \"repo.repoToUserStars\");\n\n    return builder;\n  }\n\n  private baseFilterQueryBuilder(range = 30) {\n    return this.repoRepository\n      .createQueryBuilder(\"repos\")\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"open_pull_requests\".\"id\"), 0)\n          FROM \"pull_requests\" \"open_pull_requests\"\n          WHERE\n            LOWER(\"open_pull_requests\".\"state\") = 'open'\n            AND \"open_pull_requests\".\"repo_id\" = \"repos\".\"id\"\n            AND now() - INTERVAL '${range} days'  \"pull_requests_velocity\".\"created_at\"\n            AND now() - INTERVAL '${range} days'  {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.id = :id\", { id });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByOwnerAndRepo(owner: string, repo: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"repo.full_name = :name\", { name: `${owner}/${repo}` });\n\n    const item = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(\n    pageOptionsDto: RepoPageOptionsDto,\n    userId?: number,\n    userRelations?: string[]\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n    const orderField = pageOptionsDto.orderBy ?? RepoOrderFieldsEnum.stars;\n\n    if (userId) {\n      userRelations?.map((relation) =>\n        queryBuilder.innerJoin(\n          `repo.repoToUser${relation}`,\n          `authUser${relation}`,\n          `authUser${relation}.user_id = :userId`,\n          { userId }\n        )\n      );\n    }\n\n    queryBuilder\n      .orderBy(`\"repo\".\"is_fork\"`, OrderDirectionEnum.ASC)\n      .addOrderBy(`\"${orderField}\"`, pageOptionsDto.orderDirection)\n      .addOrderBy(`\"repo\".\"created_at\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const itemCount = await queryBuilder.getCount();\n    const entities = await queryBuilder.getMany();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllWithFilters(pageOptionsDto: RepoSearchOptionsDto): Promise> {\n    const orderField = pageOptionsDto.orderBy ?? \"stars\";\n    const range = pageOptionsDto.range!;\n    const queryBuilder = this.baseFilterQueryBuilder(range);\n\n    const filters = this.filterService.getRepoFilters(pageOptionsDto, range);\n\n    if (!pageOptionsDto.repoIds && !pageOptionsDto.repo) {\n      filters.push([`now() - INTERVAL '${range} days' ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n\n    queryBuilder\n      .addOrderBy(`\"repos\".\"${orderField}\"`, OrderDirectionEnum.DESC)\n      .offset(pageOptionsDto.skip)\n      .limit(pageOptionsDto.limit);\n\n    const entities = await queryBuilder.getMany();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findRecommendations(interests: string[]): Promise> {\n    const queryBuilder = this.repoRepository.createQueryBuilder(\"repo\");\n    const userInterests: Record = {};\n\n    const promises = interests.map(async (interest) => {\n      queryBuilder\n        .where(`(:topic = ANY(\"repo\".\"topics\"))`, { topic: interest })\n        .andWhere(\n          `\n          repo.id IN (\n            SELECT repo_id FROM pull_requests\n            WHERE now() - INTERVAL '30 days'  {\n      userInterests[interest] = results[index];\n    });\n\n    return userInterests;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStarController.html":{"url":"controllers/RepoStarController.html","title":"controller - RepoStarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/repo-star.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStarOneById\n                            \n                            \n                                    Async\n                                downStarOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStarred\n                            \n                            \n                                    Async\n                                starOneById\n                            \n                            \n                                    Async\n                                starOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneById', summary: 'Finds a repo by :id and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStarOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already removed your star'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStarred\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStarred(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStarred')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStarred', summary: 'Finds all repos starred by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneById', summary: 'Finds a repo by :id and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    starOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/star')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'starOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a star'})@ApiOkResponse({description: 'Returns the repo star', type: DbRepoToUserStars})@ApiNotFoundResponse({description: 'Repo or star not found'})@ApiConflictResponse({description: 'You have already starred this repo'})\n                \n            \n\n            \n                \n                    Defined in src/star/repo-star.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StarService } from \"./star.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Star service\")\nexport class RepoStarController {\n  constructor(private readonly repoService: RepoService, private readonly starService: StarService) {}\n\n  @Get(\"/listUserStarred\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStarred\",\n    summary: \"Finds all repos starred by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStarred(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stars\"]);\n  }\n\n  @Put(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneById\",\n    summary: \"Finds a repo by :id and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"starOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already starred this repo\" })\n  async starOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.starByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneById\",\n    summary: \"Finds a repo by :id and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/star\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStarOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing star\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo star\",\n    type: DbRepoToUserStars,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or star not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your star\" })\n  async downStarOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.starService.downStarByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoStargazeController.html":{"url":"controllers/RepoStargazeController.html","title":"controller - RepoStargazeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoStargazeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/repo-stargaze.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downStargazeOneById\n                            \n                            \n                                    Async\n                                downStargazeOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserStargazed\n                            \n                            \n                                    Async\n                                stargazeOneById\n                            \n                            \n                                    Async\n                                stargazeOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneById', summary: 'Finds a repo by :id and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downStargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and unfollows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or stargaze not found'})@ApiConflictResponse({description: 'You have already unfollowed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserStargazed\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserStargazed(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserStargazed')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserStargazed', summary: 'Finds all repos followed by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneById', summary: 'Finds a repo by :id and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/stargaze')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'stargazeOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and follows'})@ApiOkResponse({description: 'Returns the repo follow', type: DbRepoToUserStargazers})@ApiNotFoundResponse({description: 'Repo or follow not found'})@ApiConflictResponse({description: 'You have already followed this repo'})\n                \n            \n\n            \n                \n                    Defined in src/stargaze/repo-stargaze.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Stargaze service\")\nexport class RepoStargazeController {\n  constructor(private readonly repoService: RepoService, private readonly stargazeService: StargazeService) {}\n\n  @Get(\"/listUserStargazed\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserStargazed\",\n    summary: \"Finds all repos followed by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserStargazed(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Stargazers\"]);\n  }\n\n  @Put(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneById\",\n    summary: \"Finds a repo by :id and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"stargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and follows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this repo\" })\n  async stargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.stargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneById\",\n    summary: \"Finds a repo by :id and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or follow not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/stargaze\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downStargazeOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and unfollows\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo follow\",\n    type: DbRepoToUserStargazers,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or stargaze not found\" })\n  @ApiConflictResponse({ description: \"You have already unfollowed this repo\" })\n  async downStargazeOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.stargazeService.downStargazeByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoSubmitController.html":{"url":"controllers/RepoSubmitController.html","title":"controller - RepoSubmitController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoSubmitController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/repo-submit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downSubmitOneById\n                            \n                            \n                                    Async\n                                downSubmitOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserSubmitted\n                            \n                            \n                                    Async\n                                submitOneById\n                            \n                            \n                                    Async\n                                submitOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneById', summary: 'Finds a repo by :id and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downSubmitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already removed your submission'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserSubmitted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserSubmitted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserSubmitted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserSubmitted', summary: 'Finds all repos submitted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneById', summary: 'Finds a repo by :id and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/submit')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'submitOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a submission'})@ApiOkResponse({description: 'Returns the repo submission', type: DbRepoToUserSubmissions})@ApiNotFoundResponse({description: 'Repo or submission not found'})@ApiConflictResponse({description: 'You have already submitted this repo'})\n                \n            \n\n            \n                \n                    Defined in src/submit/repo-submit.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { SubmitService } from \"./submit.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Submit service\")\nexport class RepoSubmitController {\n  constructor(private readonly repoService: RepoService, private readonly submitService: SubmitService) {}\n\n  @Get(\"/listUserSubmitted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserSubmitted\",\n    summary: \"Finds all repos submitted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserSubmitted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Submissions\"]);\n  }\n\n  @Put(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneById\",\n    summary: \"Finds a repo by :id and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"submitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already submitted this repo\" })\n  async submitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.submitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneById\",\n    summary: \"Finds a repo by :id and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/submit\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downSubmitOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing submission\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo submission\",\n    type: DbRepoToUserSubmissions,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or submission not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your submission\" })\n  async downSubmitOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.submitService.downSubmitByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RepoVoteController.html":{"url":"controllers/RepoVoteController.html","title":"controller - RepoVoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RepoVoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/repo-vote.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                repos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downVoteOneById\n                            \n                            \n                                    Async\n                                downVoteOneByOwnerAndRepo\n                            \n                            \n                                    Async\n                                findAllUserVoted\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Async\n                                voteOneById\n                            \n                            \n                                    Async\n                                voteOneByOwnerAndRepo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneById', summary: 'Finds a repo by :id and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'downVoteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and removes existing vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already removed your vote'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserVoted\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserVoted(pageOptionsDto: RepoPageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/listUserVoted')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserVoted', summary: 'Finds all repos voted by authenticated user and paginates them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                RepoPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:repoId/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findOneByRepoId', summary: 'Finds a repo by :repoId and returns if authenticated user has voted for it'})@ApiOkResponse({type: VotedRepoDto, description: 'Returns if authenticated user has voted for it'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneById(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneById', summary: 'Finds a repo by :id and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteOneByOwnerAndRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteOneByOwnerAndRepo(owner: string, repo: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:owner/:repo/vote')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'voteOneByOwnerAndRepo', summary: 'Finds a repo by :owner and :repo and adds a vote'})@ApiOkResponse({description: 'Returns the repo vote', type: DbRepoToUserVotes})@ApiNotFoundResponse({description: 'Repo or vote not found'})@ApiConflictResponse({description: 'You have already voted for this repo'})\n                \n            \n\n            \n                \n                    Defined in src/vote/repo-vote.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, ParseIntPipe, Put, Query, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { VoteService } from \"./vote.service\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoPageOptionsDto } from \"../repo/dtos/repo-page-options.dto\";\nimport { VotedRepoDto } from \"./../user-repo/dtos/user-repos.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\n@Controller(\"repos\")\n@ApiTags(\"Repository service guarded\", \"Vote service\")\nexport class RepoVoteController {\n  constructor(private readonly repoService: RepoService, private readonly voteService: VoteService) {}\n\n  @Get(\"/listUserVoted\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserVoted\",\n    summary: \"Finds all repos voted by authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  async findAllUserVoted(\n    @Query() pageOptionsDto: RepoPageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.repoService.findAll(pageOptionsDto, userId, [\"Votes\"]);\n  }\n\n  @Get(\"/:repoId/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findOneByRepoId\",\n    summary: \"Finds a repo by :repoId and returns if authenticated user has voted for it\",\n  })\n  @ApiOkResponse({\n    type: VotedRepoDto,\n    description: \"Returns if authenticated user has voted for it\",\n  })\n  async findOneByRepoId(@Param(\"repoId\", ParseIntPipe) repoId: number, @UserId() userId: number) {\n    return this.voteService.findOneByRepoId(repoId, userId);\n  }\n\n  @Put(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneById\",\n    summary: \"Finds a repo by :id and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Put(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"voteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and adds a vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already voted for this repo\" })\n  async voteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.voteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:id/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneById\",\n    summary: \"Finds a repo by :id and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneById(@Param(\"id\", ParseIntPipe) id: number, @UserId() userId: number): Promise {\n    const item = await this.repoService.findOneById(id);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n\n  @Delete(\"/:owner/:repo/vote\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"downVoteOneByOwnerAndRepo\",\n    summary: \"Finds a repo by :owner and :repo and removes existing vote\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the repo vote\",\n    type: DbRepoToUserVotes,\n  })\n  @ApiNotFoundResponse({ description: \"Repo or vote not found\" })\n  @ApiConflictResponse({ description: \"You have already removed your vote\" })\n  async downVoteOneByOwnerAndRepo(\n    @Param(\"owner\") owner: string,\n    @Param(\"repo\") repo: string,\n    @UserId() userId: number\n  ): Promise {\n    const item = await this.repoService.findOneByOwnerAndRepo(owner, repo);\n\n    return this.voteService.downVoteByRepoId(item.id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StarModule.html":{"url":"modules/StarModule.html","title":"module - StarModule","body":"\n                   \n\n\n\n\n    Modules\n    StarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StarModule\n\n\n\ncluster_StarModule_imports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StarModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/star/star.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStarController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\nimport { StarService } from \"./star.service\";\nimport { RepoStarController } from \"./repo-star.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStars], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStarController],\n  providers: [StarService],\n  exports: [StarService],\n})\nexport class StarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StarService.html":{"url":"injectables/StarService.html","title":"injectable - StarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/star/star.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStarByRepoId\n                            \n                            \n                                    Async\n                                starByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/star/star.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStarByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStarByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        starByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    starByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/star/star.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStars } from \"../repo/entities/repo.to.user.stars.entity\";\n\n@Injectable()\nexport class StarService {\n  constructor(\n    @InjectRepository(DbRepoToUserStars, \"ApiConnection\")\n    private repoStarRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStarRepository.createQueryBuilder(\"r2stars\").withDeleted();\n\n    return builder;\n  }\n\n  async starByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (starExists) {\n      if (!starExists.deleted_at) {\n        throw new ConflictException(\"You have already starred this repo\");\n      }\n\n      await this.repoStarRepository.restore(starExists.id);\n\n      return starExists;\n    }\n\n    return this.repoStarRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStarByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2stars.repo_id = :repoId\", { repoId }).andWhere(\"r2stars.user_id = :userId\", { userId });\n\n    const starExists = await queryBuilder.getOne();\n\n    if (!starExists) {\n      throw new NotFoundException(\"You have not starred this repo\");\n    }\n\n    if (starExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your star\");\n    }\n\n    await this.repoStarRepository.softDelete(starExists.id);\n\n    return starExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StargazeModule.html":{"url":"modules/StargazeModule.html","title":"module - StargazeModule","body":"\n                   \n\n\n\n\n    Modules\n    StargazeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StargazeModule_imports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stargaze/stargaze.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoStargazeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StargazeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\nimport { StargazeService } from \"./stargaze.service\";\nimport { RepoStargazeController } from \"./repo-stargaze.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserStargazers], \"ApiConnection\"), RepoModule],\n  controllers: [RepoStargazeController],\n  providers: [StargazeService],\n  exports: [StargazeService],\n})\nexport class StargazeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StargazeService.html":{"url":"injectables/StargazeService.html","title":"injectable - StargazeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StargazeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stargaze/stargaze.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downStargazeByRepoId\n                            \n                            \n                                    Async\n                                stargazeByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoStargazeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/stargaze/stargaze.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoStargazeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downStargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downStargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stargazeByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    stargazeByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/stargaze/stargaze.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserStargazers } from \"../repo/entities/repo.to.user.stargazers.entity\";\n\n@Injectable()\nexport class StargazeService {\n  constructor(\n    @InjectRepository(DbRepoToUserStargazers, \"ApiConnection\")\n    private repoStargazeRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoStargazeRepository.createQueryBuilder(\"r2stargazes\").withDeleted();\n\n    return builder;\n  }\n\n  async stargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (stargazeExists) {\n      if (!stargazeExists.deleted_at) {\n        throw new ConflictException(\"You have already unfollowed this repo\");\n      }\n\n      await this.repoStargazeRepository.restore(stargazeExists.id);\n\n      return stargazeExists;\n    }\n\n    return this.repoStargazeRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downStargazeByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"r2stargazes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2stargazes.user_id = :userId\", { userId });\n\n    const stargazeExists = await queryBuilder.getOne();\n\n    if (!stargazeExists) {\n      throw new NotFoundException(\"You have not followed this repo\");\n    }\n\n    if (stargazeExists.deleted_at) {\n      throw new ConflictException(\"You have already unfollowed this repo\");\n    }\n\n    await this.repoStargazeRepository.softDelete(stargazeExists.id);\n\n    return stargazeExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\n\nStripeService \n\nStripeService \n\n\n\nStripeModule\n\nStripeModule\n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { StripeService } from \"./stripe.service\";\n\n@Module({\n  imports: [],\n  providers: [StripeService],\n  exports: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCustomer\n                            \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stripe\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe/stripe.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCustomer(id: number, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCheckoutSession(customer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe/stripe.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    customer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe/stripe.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stripe\n                    \n                \n\n                \n                    \n                        getstripe()\n                    \n                \n                            \n                                \n                                    Defined in src/stripe/stripe.service.ts:12\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nimport Stripe from \"stripe\";\n\n@Injectable()\nexport class StripeService {\n  private _stripe?: Stripe;\n\n  constructor(private configService: ConfigService) {}\n\n  get stripe() {\n    if (!this._stripe) {\n      this._stripe = new Stripe(this.configService.get(\"stripe.secretKey\")!, { apiVersion: \"2022-11-15\" });\n    }\n\n    return this._stripe;\n  }\n\n  async addCustomer(id: number, email?: string) {\n    return this.stripe.customers.create({\n      metadata: { userId: id },\n      email,\n    });\n  }\n\n  async createCheckoutSession(customer: string) {\n    const session = await this.stripe.checkout.sessions.create({\n      payment_method_types: [\"card\"],\n      billing_address_collection: \"required\",\n      allow_promotion_codes: true,\n      customer,\n      line_items: [\n        {\n          price: this.configService.get(\"stripe.subscriptionPriceID\")!,\n          quantity: 1,\n        },\n      ],\n      mode: \"subscription\",\n      success_url: `${this.configService.get(\"stripe.subscriptionSessionCheckoutSuccessURL\")!}`,\n      cancel_url: `${this.configService.get(\"stripe.subscriptionSessionCancelURL\")!}`,\n    });\n\n    return { sessionId: session.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeSubscriptionModule.html":{"url":"modules/StripeSubscriptionModule.html","title":"module - StripeSubscriptionModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeSubscriptionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscription/stripe-subscription.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeSubscriptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbSubscription } from \"../subscription/stripe-subscription.dto\";\nimport { StripeSubscriptionService } from \"./stripe-subscription.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbSubscription], \"ApiConnection\")],\n  providers: [StripeSubscriptionService],\n  exports: [StripeSubscriptionService],\n})\nexport class StripeSubscriptionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeSubscriptionService.html":{"url":"injectables/StripeSubscriptionService.html","title":"injectable - StripeSubscriptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeSubscriptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscription/stripe-subscription.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                upsertSubscription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/subscription/stripe-subscription.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upsertSubscription\n                        \n                    \n                \n            \n            \n                \n                    \n                    upsertSubscription(subscription: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/subscription/stripe-subscription.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { DbSubscription } from \"./stripe-subscription.dto\";\n\n@Injectable()\nexport class StripeSubscriptionService {\n  constructor(\n    @InjectRepository(DbSubscription, \"ApiConnection\")\n    private subscriptionRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    return this.subscriptionRepository.createQueryBuilder(\"subscription\");\n  }\n\n  async upsertSubscription(subscription: Partial) {\n    return this.subscriptionRepository.save(subscription);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeWebHookModule.html":{"url":"modules/StripeWebHookModule.html","title":"module - StripeWebHookModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeWebHookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_StripeWebHookModule_imports\n\n\n\n\nCustomerModule\n\nCustomerModule\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-webhook/webhook.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CustomerModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            StripeSubscriptionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripeWebhookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { StripeSubscriptionModule } from \"../subscription/stripe-subscription.module\";\nimport { CustomerModule } from \"../customer/customer.module\";\n\nimport { StripeWebhookController } from \"./stripe-webhook.controller\";\nimport { StripeModule } from \"../stripe/stripe.module\";\nimport { UserModule } from \"../user/user.module\";\n\n@Module({\n  imports: [StripeSubscriptionModule, CustomerModule, StripeModule, UserModule],\n  providers: [StripeWebhookController],\n  controllers: [StripeWebhookController],\n  exports: [StripeWebhookController],\n})\nexport class StripeWebHookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeWebhookController.html":{"url":"controllers/StripeWebhookController.html","title":"controller - StripeWebhookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeWebhookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-webhook/stripe-webhook.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                stripe\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleStripeWebhook\n                            \n                            \n                                    Private\n                                    Async\n                                manageSubscriptionStatusChange\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleStripeWebhook\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleStripeWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/webhooks')@ApiOkResponse()\n                \n            \n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            RawBodyRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        manageSubscriptionStatusChange\n                        \n                    \n                \n            \n            \n                \n                    \n                    manageSubscriptionStatusChange(subscriptionId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-webhook/stripe-webhook.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { BadRequestException, Controller, Logger, Post, RawBodyRequest, Req } from \"@nestjs/common\";\nimport { ApiOkResponse, ApiTags } from \"@nestjs/swagger\";\nimport Stripe from \"stripe\";\n\nimport { toDateTime } from \"./utils\";\nimport { CustomerService } from \"../customer/customer.service\";\nimport { StripeSubscriptionService } from \"../subscription/stripe-subscription.service\";\nimport { StripeService } from \"../stripe/stripe.service\";\nimport { UserService } from \"../user/user.service\";\n\nconst relevantEvents = new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n]);\n\n@ApiTags(\"Stripe service\")\n@Controller(\"stripe\")\nexport class StripeWebhookController {\n  private logger = new Logger(`StripeWebhook`);\n\n  constructor(\n    private customerService: CustomerService,\n    private stripeSubscriptionService: StripeSubscriptionService,\n    private stripeService: StripeService,\n    private configService: ConfigService,\n    private userService: UserService\n  ) {}\n\n  private async manageSubscriptionStatusChange(subscriptionId: string, customerId: string) {\n    const customerData = await this.customerService.findByCustomerId(customerId);\n\n    if (!customerData) {\n      throw new BadRequestException();\n    }\n\n    const { id: uuid } = customerData;\n    const userId = parseInt(`${uuid}`, 10);\n    const subscription = await this.stripeService.stripe.subscriptions.retrieve(subscriptionId, {\n      expand: [\"default_payment_method\"],\n    });\n\n    // upsert the latest status of the subscription object.\n    const subscriptionData = {\n      id: subscription.id,\n      user_id: userId,\n      metadata: JSON.stringify(subscription.metadata),\n      status: subscription.status as string,\n      price_id: subscription.items.data[0].price.id,\n      quantity: subscription.items.data.length,\n      cancel_at_period_end: subscription.cancel_at_period_end,\n      cancel_at: subscription.cancel_at ? toDateTime(subscription.cancel_at) : undefined,\n      canceled_at: subscription.canceled_at ? toDateTime(subscription.canceled_at) : undefined,\n      current_period_start_at: toDateTime(subscription.current_period_start),\n      current_period_end_at: toDateTime(subscription.current_period_end),\n      created_at: toDateTime(subscription.created),\n      ended_at: subscription.ended_at ? toDateTime(subscription.ended_at) : undefined,\n      trial_start_at: subscription.trial_start ? toDateTime(subscription.trial_start) : undefined,\n      trial_end_at: subscription.trial_end ? toDateTime(subscription.trial_end) : undefined,\n    };\n\n    try {\n      await this.stripeSubscriptionService.upsertSubscription(subscriptionData);\n\n      const userRole = subscription.status === \"active\" ? 50 : 10;\n\n      await this.userService.updateRole(userId, userRole);\n    } catch (e: unknown) {\n      this.logger.error(\n        `Error inserting/updating subscription [${subscription.id}] for user [${userId}]: ${(e as Error).toString()}`\n      );\n      throw new BadRequestException();\n    }\n\n    this.logger.log(`Inserted/updated subscription [${subscription.id}] for user [${userId}]`);\n  }\n\n  @Post(\"/webhooks\")\n  @ApiOkResponse()\n  async handleStripeWebhook(@Req() req: RawBodyRequest) {\n    const sig = (req.headers as unknown as Record)[\"stripe-signature\"];\n    const webhookSecret: string | undefined = this.configService.get(\"stripe.webhookSecret\");\n\n    if (!sig || !webhookSecret) {\n      return;\n    }\n\n    const event = this.stripeService.stripe.webhooks.constructEvent(req.rawBody!, sig, webhookSecret);\n\n    if (relevantEvents.has(event.type)) {\n      const subEvents = [\n        \"customer.subscription.created\",\n        \"customer.subscription.updated\",\n        \"customer.subscription.deleted\",\n      ];\n\n      if (subEvents.includes(event.type)) {\n        const subscription = event.data.object as Stripe.Subscription;\n\n        await this.manageSubscriptionStatusChange(subscription.id, subscription.customer as string);\n      } else if (event.type === \"checkout.session.completed\") {\n        const checkoutSession = event.data.object as Stripe.Checkout.Session;\n\n        if (checkoutSession.mode === \"subscription\") {\n          const subscriptionId = checkoutSession.subscription;\n\n          await this.manageSubscriptionStatusChange(subscriptionId as string, checkoutSession.customer as string);\n        }\n      } else {\n        throw new BadRequestException();\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubmitModule.html":{"url":"modules/SubmitModule.html","title":"module - SubmitModule","body":"\n                   \n\n\n\n\n    Modules\n    SubmitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_SubmitModule_imports\n\n\n\ncluster_SubmitModule_exports\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/submit/submit.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoSubmitController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SubmitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\nimport { SubmitService } from \"./submit.service\";\nimport { RepoSubmitController } from \"./repo-submit.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserSubmissions], \"ApiConnection\"), RepoModule],\n  controllers: [RepoSubmitController],\n  providers: [SubmitService],\n  exports: [SubmitService],\n})\nexport class SubmitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubmitService.html":{"url":"injectables/SubmitService.html","title":"injectable - SubmitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SubmitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/submit/submit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downSubmitByRepoId\n                            \n                            \n                                    Async\n                                submitByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoSubmitRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/submit/submit.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoSubmitRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downSubmitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downSubmitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        submitByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    submitByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/submit/submit.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserSubmissions } from \"../repo/entities/repo.to.user.submissions.entity\";\n\n@Injectable()\nexport class SubmitService {\n  constructor(\n    @InjectRepository(DbRepoToUserSubmissions, \"ApiConnection\")\n    private repoSubmitRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoSubmitRepository.createQueryBuilder(\"r2submits\").withDeleted();\n\n    return builder;\n  }\n\n  async submitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (submitExists) {\n      if (!submitExists.deleted_at) {\n        throw new ConflictException(\"You have already submitd for this repo\");\n      }\n\n      await this.repoSubmitRepository.restore(submitExists.id);\n\n      return submitExists;\n    }\n\n    return this.repoSubmitRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downSubmitByRepoId(repoId: number, userId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"r2submits.repo_id = :repoId\", { repoId }).andWhere(\"r2submits.user_id = :userId\", { userId });\n\n    const submitExists = await queryBuilder.getOne();\n\n    if (!submitExists) {\n      throw new NotFoundException(\"You have not submitd for this repo\");\n    }\n\n    if (submitExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your submit\");\n    }\n\n    await this.repoSubmitRepository.softDelete(submitExists.id);\n\n    return submitExists;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SupabaseAuthDto.html":{"url":"classes/SupabaseAuthDto.html","title":"class - SupabaseAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SupabaseAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/supabase-auth-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                bio\n                            \n                            \n                                    Readonly\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                confirmed_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                created_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                    Optional\n                                insights_role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_onboarded\n                            \n                            \n                                    Readonly\n                                    Optional\n                                is_waitlisted\n                            \n                            \n                                    Readonly\n                                    Optional\n                                last_sign_in_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                location\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                notification_count\n                            \n                            \n                                    Readonly\n                                    Optional\n                                role\n                            \n                            \n                                    Readonly\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Readonly\n                                    Optional\n                                updated_at\n                            \n                            \n                                    Readonly\n                                    Optional\n                                url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User bio information', example: 'OpenSauced User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User company information', example: 'OpenSauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        confirmed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user registration confirmation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user creation', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User display local time information', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user email', example: 'vortex@opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Supabase authenticated unique user identifier', example: 237133})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        insights_role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Authenticated User's Insights Role', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_onboarded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is onboarded', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        is_waitlisted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Flag indicated whether the user is waitlisted', example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        last_sign_in_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last sign in', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User location information', example: 'San Francisco, CA'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User name information', example: 'MrPizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        notification_count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Unread User Notification Count', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user role', example: 'authenticated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Twitter information', example: 'saucedopen'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Timestamp representing supabase user last update', example: '2016-10-19 13:24:51.000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User website', example: 'https://opensauced.pizza'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Supabase authenticated user login name', example: '0-vortex'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/supabase-auth-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class SupabaseAuthDto {\n  @ApiProperty({\n    description: \"Supabase authenticated unique user identifier\",\n    example: 237133,\n  })\n  readonly id: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user login name\",\n    example: \"0-vortex\",\n  })\n  readonly user_name?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user role\",\n    example: \"authenticated\",\n  })\n  readonly role?: string;\n\n  @ApiPropertyOptional({\n    description: \"Supabase authenticated user email\",\n    example: \"vortex@opensauced.pizza\",\n  })\n  readonly email?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user registration confirmation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly confirmed_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last sign in\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly last_sign_in_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user creation\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly created_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Timestamp representing supabase user last update\",\n    example: \"2016-10-19 13:24:51.000000\",\n  })\n  readonly updated_at?: string;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is onboarded\",\n    example: false,\n  })\n  readonly is_onboarded?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Flag indicated whether the user is waitlisted\",\n    example: false,\n  })\n  readonly is_waitlisted?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"Authenticated User's Insights Role\",\n    example: 10,\n  })\n  readonly insights_role?: number;\n\n  @ApiPropertyOptional({\n    description: \"User bio information\",\n    example: \"OpenSauced User\",\n  })\n  readonly bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User name information\",\n    example: \"MrPizza\",\n  })\n  readonly name?: string;\n\n  @ApiPropertyOptional({\n    description: \"User website\",\n    example: \"https://opensauced.pizza\",\n  })\n  readonly url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Twitter information\",\n    example: \"saucedopen\",\n  })\n  readonly twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User company information\",\n    example: \"OpenSauced\",\n  })\n  readonly company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User location information\",\n    example: \"San Francisco, CA\",\n  })\n  readonly location?: string;\n\n  @ApiPropertyOptional({\n    description: \"User display local time information\",\n    example: false,\n  })\n  readonly display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  readonly discord_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Unread User Notification Count\",\n    example: 5,\n  })\n  readonly notification_count?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseGuard.html":{"url":"injectables/SupabaseGuard.html","title":"injectable - SupabaseGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class SupabaseGuard extends AuthGuard(\"supabase\") {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupabaseStrategy.html":{"url":"injectables/SupabaseStrategy.html","title":"injectable - SupabaseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SupabaseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/supabase.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/supabase.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: never)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            never\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(user: SupabaseAuthUser)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/supabase.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt } from \"passport-jwt\";\nimport { SupabaseAuthStrategy, SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\n@Injectable()\nexport class SupabaseStrategy extends PassportStrategy(SupabaseAuthStrategy, \"supabase\") {\n  public constructor() {\n    super({\n      supabaseUrl: process.env.SUPABASE_URL,\n      supabaseKey: process.env.SUPABASE_API_KEY,\n      supabaseOptions: {},\n      supabaseJwtSecret: process.env.SUPABASE_JWT_SECRET,\n      extractor: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(user: SupabaseAuthUser) {\n    return super.validate(user);\n  }\n\n  authenticate(req: never) {\n    super.authenticate(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopUsersDto.html":{"url":"classes/TopUsersDto.html","title":"class - TopUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/top-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/top-users.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/user/dtos/top-users.dto.ts:28\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, Min, IsOptional, Max } from \"class-validator\";\n\nexport class TopUsersDto {\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 1000,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(10000)\n  @IsOptional()\n  readonly limit?: number = 50;\n\n  get skip(): number {\n    return ((this.page ?? 1) - 1) * (this.limit ?? 50);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEndorsementDto.html":{"url":"classes/UpdateEndorsementDto.html","title":"class - UpdateEndorsementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEndorsementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/endorsement/dto/update-endorsement.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { CreateEndorsementDto } from \"./create-endorsement.dto\";\n\nexport class UpdateEndorsementDto extends PartialType(CreateEndorsementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightDto.html":{"url":"classes/UpdateInsightDto.html","title":"class - UpdateInsightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateInsightDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                is_public\n                            \n                            \n                                name\n                            \n                            \n                                repos\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        is_public\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Visibility', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Page Name', type: String, example: 'My Team'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RepoInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of repository information objects', isArray: true, type: RepoInfo, example: undefined})@Type(undefined)@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateInsightDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateInsightDto:32\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateInsightDto } from \"./create-insight.dto\";\n\nexport class UpdateInsightDto extends CreateInsightDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateInsightMemberDto.html":{"url":"classes/UpdateInsightMemberDto.html","title":"class - UpdateInsightMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateInsightMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/dtos/update-insight-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Insight Member Access', type: String, example: 'view'})@IsString()@IsIn(['view', 'edit', 'admin', 'pending'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/insight/dtos/update-insight-member.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsIn } from \"class-validator\";\n\nexport class UpdateInsightMemberDto {\n  @ApiProperty({\n    description: \"Insight Member Access\",\n    type: String,\n    example: \"view\",\n  })\n  @IsString()\n  @IsIn([\"view\", \"edit\", \"admin\", \"pending\"])\n  access: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCollaborationDto.html":{"url":"classes/UpdateUserCollaborationDto.html","title":"class - UpdateUserCollaborationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCollaborationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-collaboration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Collaboration Request Status', type: String, example: 'accept'})@IsString()@IsIn(['accept', 'ignore'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-collaboration.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class UpdateUserCollaborationDto {\n  @ApiProperty({\n    description: \"Collaboration Request Status\",\n    type: String,\n    example: \"accept\",\n  })\n  @IsString()\n  @IsIn([\"accept\", \"ignore\"])\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bio\n                            \n                            \n                                    Public\n                                    Optional\n                                company\n                            \n                            \n                                    Readonly\n                                    Optional\n                                discord_url\n                            \n                            \n                                    Public\n                                    Optional\n                                display_local_time\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                github_sponsors_url\n                            \n                            \n                                    Readonly\n                                    Optional\n                                linkedin_url\n                            \n                            \n                                    Public\n                                    Optional\n                                location\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                timezone\n                            \n                            \n                                    Public\n                                    Optional\n                                twitter_username\n                            \n                            \n                                    Public\n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Bio', type: String, example: 'I make the pizza'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        company\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Company', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        discord_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Discord URL', example: 'https://discord.gg/opensauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        display_local_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Display user local time in profile', type: Boolean, example: false})@IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Email', type: String, example: 'hello@opensauced.pizza'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        github_sponsors_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'GitHub Sponsors URL', example: 'https://github.com/sponsors/open-sauced'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        linkedin_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'LinkedIn URL', example: 'https://www.linkedin.com/in/brianldouglas'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Location', type: String, example: 'OpenSauced'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Profile Name', type: String, example: 'Pizza Maker'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twitter_username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile Twitter Username', type: String, example: 'saucedopen'})@IsString()@Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {message: 'Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User Profile URL', type: String, example: 'https://opensauced.pizza'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsBoolean, IsEmail, IsOptional, IsString, IsUrl, Matches } from \"class-validator\";\n\nexport class UpdateUserDto {\n  @ApiProperty({\n    description: \"User Profile Name\",\n    type: String,\n    example: \"Pizza Maker\",\n  })\n  @IsString()\n  public name: string;\n\n  @ApiProperty({\n    description: \"User Profile Email\",\n    type: String,\n    example: \"hello@opensauced.pizza\",\n  })\n  @IsEmail()\n  public email: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Bio\",\n    type: String,\n    example: \"I make the pizza\",\n  })\n  @IsString()\n  @IsOptional()\n  public bio?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile URL\",\n    type: String,\n    example: \"https://opensauced.pizza\",\n  })\n  @IsUrl()\n  @IsOptional()\n  public url?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Twitter Username\",\n    type: String,\n    example: \"saucedopen\",\n  })\n  @IsString()\n  @Matches(/^(?!.*?admin)(?!.*?twitter)\\w{0,15}$/i, {\n    message:\n      \"Twitter username can only contain letters, numbers, and underscores. It also cannot contain reserved Twitter usernames (twitter or admin).\",\n  })\n  @IsOptional()\n  public twitter_username?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Company\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public company?: string;\n\n  @ApiPropertyOptional({\n    description: \"User Profile Location\",\n    type: String,\n    example: \"OpenSauced\",\n  })\n  @IsString()\n  @IsOptional()\n  public location?: string;\n\n  @ApiPropertyOptional({\n    description: \"Display user local time in profile\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  @IsOptional()\n  public display_local_time?: boolean;\n\n  @ApiPropertyOptional({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  @IsOptional()\n  public timezone?: string;\n\n  @ApiPropertyOptional({\n    description: \"LinkedIn URL\",\n    example: \"https://www.linkedin.com/in/brianldouglas\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly linkedin_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"GitHub Sponsors URL\",\n    example: \"https://github.com/sponsors/open-sauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly github_sponsors_url?: string;\n\n  @ApiPropertyOptional({\n    description: \"Discord URL\",\n    example: \"https://discord.gg/opensauced\",\n  })\n  @IsUrl()\n  @IsOptional()\n  readonly discord_url?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserEmailPreferencesDto.html":{"url":"classes/UpdateUserEmailPreferencesDto.html","title":"class - UpdateUserEmailPreferencesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserEmailPreferencesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-email-prefs.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                display_email\n                            \n                            \n                                    Public\n                                receive_collaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Display Public Email', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        receive_collaboration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User Recieve Collaboration Requests', type: Boolean, example: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-email-prefs.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsBoolean } from \"class-validator\";\n\nexport class UpdateUserEmailPreferencesDto {\n  @ApiProperty({\n    description: \"User Display Public Email\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public display_email: boolean;\n\n  @ApiProperty({\n    description: \"User Recieve Collaboration Requests\",\n    type: Boolean,\n    example: false,\n  })\n  @IsBoolean()\n  public receive_collaboration: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileInterestsDto.html":{"url":"classes/UpdateUserProfileInterestsDto.html","title":"class - UpdateUserProfileInterestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileInterestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/update-user-interests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/update-user-interests.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray } from \"class-validator\";\n\nexport class UpdateUserProfileInterestsDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserCollaborationController.html":{"url":"controllers/UserCollaborationController.html","title":"controller - UserCollaborationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserCollaborationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/collaborations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                removeUserCollaborationById\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(createUserCollaborationDto: CreateUserCollaborationDto, user: SupabaseAuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addUserCollaboration', summary: 'Adds a new collaboration request for the user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to add user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'The requested user is not accepting collaboration requests'})@ApiBody({type: CreateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserCollaborationDto\n                                    \n                                                CreateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SupabaseAuthUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllUserCollaborations', summary: 'Listing all collaborations for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbUserCollaboration)@ApiOkResponse({type: DbUserCollaboration})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaborationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaborationById(id: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({operationId: 'removeUserCollaborationById', summary: 'Removes the user collaboration request'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to remove user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userId: number, updateUserCollaborationDto: UpdateUserCollaborationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({operationId: 'updateUserCollaboration', summary: 'Updates a user collaboration'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserCollaboration})@ApiNotFoundResponse({description: 'Unable to find user collaboration'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: UpdateUserCollaborationDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-collaboration.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserCollaborationDto\n                                    \n                                                UpdateUserCollaborationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n} from \"@nestjs/swagger\";\nimport { SupabaseAuthUser } from \"nestjs-supabase-auth\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { User, UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { UserService } from \"../user/user.service\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { CreateUserCollaborationDto } from \"./dtos/create-user-collaboration.dto\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UpdateUserCollaborationDto } from \"./dtos/update-user-collaboration.dto\";\n\n@Controller(\"user/collaborations\")\n@ApiTags(\"User Collaborations service\")\nexport class UserCollaborationController {\n  constructor(\n    private readonly userCollaborationService: UserCollaborationService,\n    private readonly userService: UserService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllUserCollaborations\",\n    summary: \"Listing all collaborations for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbUserCollaboration)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  async findAllUserCollaborations(\n    @Query() pageOptionsDto: PageOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userCollaborationService.findAllUserCollaborations(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addUserCollaboration\",\n    summary: \"Adds a new collaboration request for the user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserCollaboration })\n  @ApiNotFoundResponse({ description: \"Unable to add user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"The requested user is not accepting collaboration requests\" })\n  @ApiBody({ type: CreateUserCollaborationDto })\n  async addUserCollaboration(\n    @Body() createUserCollaborationDto: CreateUserCollaborationDto,\n    @User() user: SupabaseAuthUser\n  ): Promise {\n    const recipient = await this.userService.findOneByUsername(createUserCollaborationDto.username);\n    const requester = await this.userService.findOneById(user.user_metadata.sub as number);\n\n    if (requester.role  {\n    const collaboration = await this.userCollaborationService.findOneById(id);\n\n    if (collaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    const updatedUserCollaboration: Partial = { status: updateUserCollaborationDto.status };\n\n    await this.userCollaborationService.updateUserCollaboration(id, updatedUserCollaboration);\n\n    return this.userCollaborationService.findOneById(id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({\n    operationId: \"removeUserCollaborationById\",\n    summary: \"Removes the user collaboration request\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to remove user collaboration\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeUserCollaborationById(@Param(\"id\") id: string, @UserId() userId: number): Promise {\n    const userCollaboration = await this.userCollaborationService.findOneById(id);\n\n    if (userCollaboration.user_id !== userId) {\n      throw new UnauthorizedException();\n    }\n\n    await this.userCollaborationService.removeUserCollaboration(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCollaborationService.html":{"url":"injectables/UserCollaborationService.html","title":"injectable - UserCollaborationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCollaborationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-collaboration.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserCollaboration\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllUserCollaborations\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                removeUserCollaboration\n                            \n                            \n                                    Async\n                                updateUserCollaboration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userCollaborationRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-collaboration.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userCollaborationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserCollaboration(userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCollaborations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCollaborations(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserCollaboration(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserCollaboration\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserCollaboration(id: string, userCollaboration: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-collaboration.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userCollaboration\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\n\n@Injectable()\nexport class UserCollaborationService {\n  constructor(\n    @InjectRepository(DbUserCollaboration, \"ApiConnection\")\n    private userCollaborationRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userCollaborationRepository.createQueryBuilder(\"user_collaborations\");\n\n    return builder;\n  }\n\n  async findOneById(id: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_collaborations.id = :id\", { id });\n\n    const item: DbUserCollaboration | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserCollaboration(userCollaboration: Partial) {\n    return this.userCollaborationRepository.save(userCollaboration);\n  }\n\n  async updateUserCollaboration(id: string, userCollaboration: Partial) {\n    return this.userCollaborationRepository.update(id, userCollaboration);\n  }\n\n  async removeUserCollaboration(id: string) {\n    return this.userCollaborationRepository.softDelete(id);\n  }\n\n  async findAllUserCollaborations(\n    pageOptionsDto: PageOptionsDto,\n    userId: number\n  ): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoinAndSelect(\"user_collaborations.user\", \"user\")\n      .innerJoinAndSelect(\"user_collaborations.request_user\", \"request_user\")\n      .where(\"user_collaborations.user_id = :userId\", { userId })\n      .orderBy(\"user_collaborations.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllHighlightsByUsername\n                            \n                            \n                                    Async\n                                findAllTopReposByUsername\n                            \n                            \n                                    Async\n                                findContributorPullRequests\n                            \n                            \n                                    Async\n                                findOneUserById\n                            \n                            \n                                    Async\n                                getTopUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightsByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightsByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/highlights')@ApiOperation({operationId: 'findAllHighlightsByUsername', summary: 'Listing all Highlights for a user and paginate them'})@ApiPaginatedResponse(DbUserHighlight)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Highlights not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllTopReposByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopReposByUsername(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/top-repos')@ApiOperation({operationId: 'findAllTopReposByUsername', summary: 'Listing all Top Repos for a user and paginate them'})@ApiPaginatedResponse(DbRepo)@ApiOkResponse({type: DbRepo})@ApiNotFoundResponse({description: 'Top repos not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findContributorPullRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findContributorPullRequests(username: string, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/prs')@ApiOperation({operationId: 'findContributorPullRequests', summary: 'Finds pull requests by :username'})@ApiPaginatedResponse(DbPullRequest)@ApiOkResponse({type: DbPullRequest})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserById(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username')@ApiOperation({operationId: 'findOneUserByUserame', summary: 'Finds a user by :username'})@ApiOkResponse({type: DbUser})@ApiNotFoundResponse({description: 'User not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/top')@ApiOperation({operationId: 'getTop10Highlights', summary: 'List top users'})@ApiOkResponse({type: DbTopUser})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Query } from \"@nestjs/common\";\nimport { ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { PullRequestService } from \"../pull-requests/pull-request.service\";\nimport { DbPullRequest } from \"../pull-requests/entities/pull-request.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private pullRequestService: PullRequestService,\n    private userHighlightsService: UserHighlightsService,\n    private repoService: RepoService\n  ) {}\n\n  @Get(\"/:username\")\n  @ApiOperation({\n    operationId: \"findOneUserByUserame\",\n    summary: \"Finds a user by :username\",\n  })\n  @ApiOkResponse({ type: DbUser })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findOneUserById(@Param(\"username\") username: string): Promise {\n    return this.userService.findOneByUsername(username);\n  }\n\n  @Get(\"/:username/prs\")\n  @ApiOperation({\n    operationId: \"findContributorPullRequests\",\n    summary: \"Finds pull requests by :username\",\n  })\n  @ApiPaginatedResponse(DbPullRequest)\n  @ApiOkResponse({ type: DbPullRequest })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  async findContributorPullRequests(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.pullRequestService.findAllByContributor(username, pageOptionsDto);\n  }\n\n  @Get(\"/:username/highlights\")\n  @ApiOperation({\n    operationId: \"findAllHighlightsByUsername\",\n    summary: \"Listing all Highlights for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbUserHighlight)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Highlights not found\" })\n  async findAllHighlightsByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userHighlightsService.findAllByUserId(pageOptionsDto, user.id);\n  }\n\n  @Get(\"/:username/top-repos\")\n  @ApiOperation({\n    operationId: \"findAllTopReposByUsername\",\n    summary: \"Listing all Top Repos for a user and paginate them\",\n  })\n  @ApiPaginatedResponse(DbRepo)\n  @ApiOkResponse({ type: DbRepo })\n  @ApiNotFoundResponse({ description: \"Top repos not found\" })\n  async findAllTopReposByUsername(\n    @Param(\"username\") username: string,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.repoService.findAll(pageOptionsDto, user.id, [\"TopRepos\"]);\n  }\n\n  @Get(\"/top\")\n  @ApiOperation({\n    operationId: \"getTop10Highlights\",\n    summary: \"List top users\",\n  })\n  @ApiOkResponse({ type: DbTopUser })\n  async getTopUsers(@Query() pageOptionsDto: TopUsersDto): Promise> {\n    return this.userService.findTopUsers(pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserEndorsementController.html":{"url":"controllers/UserEndorsementController.html","title":"controller - UserEndorsementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserEndorsementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-endorsement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/endorsements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllUserCreatedEndorsements\n                            \n                            \n                                    Async\n                                findAllUserReceivedEndorsements\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserCreatedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserCreatedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/created')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserCreatedEndorsements', summary: 'Finds all endorsements created by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllUserReceivedEndorsements\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllUserReceivedEndorsements(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/received')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'findAllUserReceivedEndorsements', summary: 'Finds all endorsements received by the authenticated user and paginates them'})@ApiPaginatedResponse(DbEndorsement)@ApiOkResponse({type: DbEndorsement})\n                \n            \n\n            \n                \n                    Defined in src/user/user-endorsement.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\n\n@Controller(\"user/endorsements\")\n@ApiTags(\"Endorsements service\")\nexport class UserEndorsementController {\n  constructor(private readonly endorsementService: EndorsementService) {}\n\n  @Get(\"/created\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserCreatedEndorsements\",\n    summary: \"Finds all endorsements created by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserCreatedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByCreatorUserId(userId, pageOptionsDto);\n  }\n\n  @Get(\"/received\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"findAllUserReceivedEndorsements\",\n    summary: \"Finds all endorsements received by the authenticated user and paginates them\",\n  })\n  @ApiPaginatedResponse(DbEndorsement)\n  @ApiOkResponse({ type: DbEndorsement })\n  async findAllUserReceivedEndorsements(@UserId() userId: number, @Query() pageOptionsDto: PageOptionsDto) {\n    return this.endorsementService.findAllByRecipientUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFollowService.html":{"url":"injectables/UserFollowService.html","title":"injectable - UserFollowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFollowService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerByUserId\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findUserFollowerById\n                            \n                            \n                                    Async\n                                removeUserFollowerById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userFollowRepository: Repository, userService: UserService, userNotificationService: UserNotificationService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-follow.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userFollowRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerByUserId(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserFollowerById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserFollowerById(userId: number, followerUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-follow.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserFollowService {\n  constructor(\n    @InjectRepository(DbUserToUserFollows, \"ApiConnection\")\n    private userFollowRepository: Repository,\n    private userService: UserService,\n    private userNotificationService: UserNotificationService\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.userFollowRepository.createQueryBuilder(\"user_follows\").withDeleted();\n\n    return builder;\n  }\n\n  async findUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId })\n      .andWhere(\"user_follows.deleted_at IS NULL\");\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You are not following this user\");\n    }\n\n    return followExists;\n  }\n\n  async addUserFollowerByUserId(userId: number, followedUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followedUserId\", { followedUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (followExists) {\n      if (!followExists.deleted_at) {\n        throw new ConflictException(\"You have already followed this user\");\n      }\n\n      await this.userFollowRepository.restore(followExists.id);\n      await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n      return followExists;\n    }\n\n    await this.userNotificationService.addUserFollowerNotification(userId, followedUserId);\n\n    return this.userFollowRepository.save({\n      user_id: userId,\n      following_user_id: followedUserId,\n    });\n  }\n\n  async removeUserFollowerById(userId: number, followerUserId: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"user_follows.deleted_at\", \"user_follows_deleted_at\")\n      .where(\"user_follows.user_id = :userId\", { userId })\n      .andWhere(\"user_follows.following_user_id = :followerUserId\", { followerUserId });\n\n    const followExists = await queryBuilder.getOne();\n\n    if (!followExists) {\n      throw new NotFoundException(\"You have not followed this user\");\n    }\n\n    if (followExists.deleted_at) {\n      throw new ConflictException(\"You are not following this user\");\n    }\n\n    await this.userFollowRepository.softDelete(followExists.id);\n\n    return queryBuilder.getOneOrFail();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserFollowsController.html":{"url":"controllers/UserFollowsController.html","title":"controller - UserFollowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserFollowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-follow.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                followUserByUsername\n                            \n                            \n                                    Async\n                                getFollowStatusByUsername\n                            \n                            \n                                    Async\n                                unfollowUserByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUserByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'followUserById', summary: 'Follows a user by username'})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You have already followed this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowStatusByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowStatusByUsername(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'getFollowStatusByUsername', summary: 'Checks if the authenticated user follows the provided username'})@ApiNotFoundResponse({description: 'User follow not found'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUserByUserId(username: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:username/follow')@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOperation({operationId: 'unfollowUserByUsername', summary: 'Unfollows a user by username'})@ApiOkResponse({description: 'Returns the user follow', type: DbUserToUserFollows})@ApiNotFoundResponse({description: 'User not found'})@ApiConflictResponse({description: 'You are now following this user'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-follow.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Delete, Get, Param, Put, UseGuards } from \"@nestjs/common\";\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"users\")\n@ApiTags(\"User service\")\nexport class UserFollowsController {\n  constructor(private readonly userService: UserService, private readonly userFollowService: UserFollowService) {}\n\n  @Get(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"getFollowStatusByUsername\",\n    summary: \"Checks if the authenticated user follows the provided username\",\n  })\n  @ApiNotFoundResponse({ description: \"User follow not found\" })\n  async getFollowStatusByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.findUserFollowerById(userId, user.id);\n  }\n\n  @Put(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"followUserById\",\n    summary: \"Follows a user by username\",\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You have already followed this user\" })\n  async followUserByUsername(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.addUserFollowerByUserId(userId, user.id);\n  }\n\n  @Delete(\"/:username/follow\")\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOperation({\n    operationId: \"unfollowUserByUsername\",\n    summary: \"Unfollows a user by username\",\n  })\n  @ApiOkResponse({\n    description: \"Returns the user follow\",\n    type: DbUserToUserFollows,\n  })\n  @ApiNotFoundResponse({ description: \"User not found\" })\n  @ApiConflictResponse({ description: \"You are now following this user\" })\n  async unfollowUserByUserId(\n    @Param(\"username\") username: string,\n    @UserId() userId: number\n  ): Promise {\n    const user = await this.userService.findOneByUsername(username);\n\n    return this.userFollowService.removeUserFollowerById(userId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserHighlightsController.html":{"url":"controllers/UserHighlightsController.html","title":"controller - UserHighlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserHighlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/highlights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addHighlightReactionForUser\n                            \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightForUser\n                            \n                            \n                                    Async\n                                deleteHighlightReactionForUser\n                            \n                            \n                                    Async\n                                getAllHighlightUserReactions\n                            \n                            \n                                    Async\n                                getFollowingHighlightRepos\n                            \n                            \n                                    Async\n                                getFollowingHighlights\n                            \n                            \n                                    Async\n                                getUserHighlight\n                            \n                            \n                                    Async\n                                updateHighlightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addHighlightReactionForUser(highlightId: number, emojiId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/reactions/:emojiId')@ApiOperation({operationId: 'addHighlightReactionForUser', summary: 'Adds a new highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReaction})@ApiNotFoundResponse({description: 'Highlight does not exist'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiConflictResponse({description: 'Unable to add user highlight reaction'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createHighlightDto: CreateUserHighlightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addHighlightForUser', summary: 'Adds a new highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: undefined})@ApiNotFoundResponse({description: 'Unable to add user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightForUser(userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({operationId: 'deleteHighlightForUser', summary: 'Deletes the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteHighlightReactionForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteHighlightReactionForUser(userId: number, highlightId: number, emojiId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id/reactions/:emojiId')@ApiOperation({operationId: 'deleteHighlightReactionForUser', summary: 'Deletes the highlight reaction for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiNotFoundResponse({description: 'Unable to delete user highlight reaction'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHighlightUserReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHighlightUserReactions(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/reactions')@ApiOperation({operationId: 'getAllHighlightUserReactions', summary: 'Retrieves a highlight reactions for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightReactionResponse})@ApiNotFoundResponse({description: 'Unable to get user highlight reactions'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlightRepos(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following/repos')@ApiOperation({operationId: 'getFollowingHighlightRepos', summary: 'Fetches highlight repos for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlightRepo})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowingHighlights\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowingHighlights(pageOptionsDto: HighlightOptionsDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/following')@ApiOperation({operationId: 'getFollowingHighlights', summary: 'Fetches highlights for users the authenticated user follows'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserHighlight(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({operationId: 'getUserHighlight', summary: 'Retrieves a highlight'})@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to get user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateHighlightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateHighlightForUser(updateHighlightDto: CreateUserHighlightDto, userId: number, highlightId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateHighlightForUser', summary: 'Updates the highlight for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserHighlight})@ApiNotFoundResponse({description: 'Unable to update user highlight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateUserHighlightDto})\n                \n            \n\n            \n                \n                    Defined in src/user/user-highlight.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateHighlightDto\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConflictResponse,\n  OmitType,\n} from \"@nestjs/swagger\";\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightRepo } from \"../highlight/entities/user-highlight-repo.entity\";\n\n@Controller(\"user/highlights\")\n@ApiTags(\"User Highlights service\")\nexport class UserHighlightsController {\n  constructor(private readonly userHighlightsService: UserHighlightsService) {}\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addHighlightForUser\",\n    summary: \"Adds a new highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: OmitType(DbUserHighlight, [\"id\"]) })\n  @ApiNotFoundResponse({ description: \"Unable to add user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async addInsightForUser(\n    @Body() createHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.addUserHighlight(userId, createHighlightDto);\n  }\n\n  @Get(\"/:id\")\n  @ApiOperation({\n    operationId: \"getUserHighlight\",\n    summary: \"Retrieves a highlight\",\n  })\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getUserHighlight(@Param(\"id\", ParseIntPipe) id: number): Promise {\n    return this.userHighlightsService.findOneById(id);\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateHighlightForUser\",\n    summary: \"Updates the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  @ApiNotFoundResponse({ description: \"Unable to update user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateUserHighlightDto })\n  async updateHighlightForUser(\n    @Body() updateHighlightDto: CreateUserHighlightDto,\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.updateUserHighlight(highlight.id, {\n      ...updateHighlightDto,\n      shipped_at: updateHighlightDto.shipped_at ? new Date(updateHighlightDto.shipped_at) : highlight.created_at,\n    });\n\n    return this.userHighlightsService.findOneById(highlight.id, userId);\n  }\n\n  @Delete(\"/:id\")\n  @ApiOperation({\n    operationId: \"deleteHighlightForUser\",\n    summary: \"Deletes the highlight for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId, userId);\n\n    await this.userHighlightsService.deleteUserHighlight(highlight.id);\n  }\n\n  @Get(\"/:id/reactions\")\n  @ApiOperation({\n    operationId: \"getAllHighlightUserReactions\",\n    summary: \"Retrieves a highlight reactions for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReactionResponse })\n  @ApiNotFoundResponse({ description: \"Unable to get user highlight reactions\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getAllHighlightUserReactions(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @UserId() userId: number\n  ): Promise {\n    return this.userHighlightsService.findAllHighlightReactions(id, userId);\n  }\n\n  @Post(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"addHighlightReactionForUser\",\n    summary: \"Adds a new highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightReaction })\n  @ApiNotFoundResponse({ description: \"Highlight does not exist\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiConflictResponse({ description: \"Unable to add user highlight reaction\" })\n  async addHighlightReactionForUser(\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string,\n    @UserId() userId: number\n  ): Promise {\n    const highlight = await this.userHighlightsService.findOneById(highlightId);\n\n    if (Number(highlight.user_id) === userId) {\n      throw new ConflictException(\"You cannot react to your own highlight\");\n    }\n\n    await this.userHighlightsService.addUserHighlightReaction(userId, highlightId, emojiId, highlight.user_id);\n  }\n\n  @Delete(\"/:id/reactions/:emojiId\")\n  @ApiOperation({\n    operationId: \"deleteHighlightReactionForUser\",\n    summary: \"Deletes the highlight reaction for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiNotFoundResponse({ description: \"Unable to delete user highlight reaction\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async deleteHighlightReactionForUser(\n    @UserId() userId: number,\n    @Param(\"id\", ParseIntPipe) highlightId: number,\n    @Param(\"emojiId\") emojiId: string\n  ): Promise {\n    const userHighlightReaction = await this.userHighlightsService.findOneUserHighlightReaction(\n      highlightId,\n      userId,\n      emojiId\n    );\n\n    await this.userHighlightsService.deleteUserHighlightReaction(userHighlightReaction.id);\n  }\n\n  @Get(\"/following\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlights\",\n    summary: \"Fetches highlights for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlight })\n  async getFollowingHighlights(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAll(pageOptionsDto, userId);\n  }\n\n  @Get(\"/following/repos\")\n  @ApiOperation({\n    operationId: \"getFollowingHighlightRepos\",\n    summary: \"Fetches highlight repos for users the authenticated user follows\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserHighlightRepo })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async getFollowingHighlightRepos(\n    @Query() pageOptionsDto: HighlightOptionsDto,\n    @UserId() userId: number\n  ): Promise> {\n    return this.userHighlightsService.findAllHighlightRepos(pageOptionsDto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserHighlightsService.html":{"url":"injectables/UserHighlightsService.html","title":"injectable - UserHighlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserHighlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-highlights.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFeatured\n                            \n                            \n                                    Async\n                                addUserHighlight\n                            \n                            \n                                    Async\n                                addUserHighlightReaction\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                deleteUserHighlight\n                            \n                            \n                                    Async\n                                deleteUserHighlightReaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllFeatured\n                            \n                            \n                                    Async\n                                findAllHighlightReactions\n                            \n                            \n                                    Async\n                                findAllHighlightRepos\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneUserHighlightReaction\n                            \n                            \n                                    Async\n                                removeFeatured\n                            \n                            \n                                    Async\n                                updateUserHighlight\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userHighlightRepository: Repository, userHighlightReactionRepository: Repository, userNotificationService: UserNotificationService, userService: UserService, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-highlights.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userHighlightRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userNotificationService\n                                                  \n                                                        \n                                                                        UserNotificationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    addFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlight(userId: number, highlight: CreateUserHighlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                CreateUserHighlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlight(highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserHighlightReaction(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:288\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                HighlightOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllFeatured(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightReactions\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightReactions(highlightId: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllHighlightRepos\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllHighlightRepos(pageOptionsDto: PageOptionsDto, follwerUserId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    follwerUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, userId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneUserHighlightReaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emojiId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeFeatured\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFeatured(highlightId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserHighlight\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserHighlight(highlightId: number, highlight: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-highlights.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlight\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException, UnauthorizedException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { CreateUserHighlightDto } from \"./dtos/create-user-highlight.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { DbUserHighlightReactionResponse, HighlightOptionsDto } from \"../highlight/dtos/highlight-options.dto\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserService } from \"./user.service\";\nimport { PagerService } from \"../common/services/pager.service\";\n\n@Injectable()\nexport class UserHighlightsService {\n  constructor(\n    @InjectRepository(DbUserHighlight, \"ApiConnection\")\n    private userHighlightRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private userNotificationService: UserNotificationService,\n    private userService: UserService,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightRepository.createQueryBuilder(\"user_highlights\");\n\n    return builder;\n  }\n\n  async findOneById(id: number, userId?: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .where(\"user_highlights.id = :id\", { id });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlights.user_id = :userId\", { userId });\n    }\n\n    const item: DbUserHighlight | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findAll(pageOptionsDto: HighlightOptionsDto, followerUserId?: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_highlights.user_id=users.id\")\n      .addSelect(\"users.name\", \"user_highlights_name\")\n      .addSelect(\"users.login\", \"user_highlights_login\")\n      .orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    const filters: [string, object][] = [];\n\n    if (followerUserId) {\n      filters.push([\n        `user_highlights.user_id IN (\n        SELECT following_user_id FROM users_to_users_followers\n        WHERE user_id=:userId\n        AND deleted_at IS NULL\n      )`,\n        { userId: followerUserId },\n      ]);\n    }\n\n    if (pageOptionsDto.repo) {\n      filters.push([\n        // eslint-disable-next-line no-useless-escape\n        `REGEXP_REPLACE(REGEXP_REPLACE(user_highlights.url, '(^(http(s)?:\\/\\/)?([\\w]+\\.)?github\\.com\\/)', ''), '/pull/.*', '')=:repo`,\n        { repo: decodeURIComponent(pageOptionsDto.repo) },\n      ]);\n    }\n\n    filters.forEach(([sql, data], index) => {\n      if (index === 0) {\n        queryBuilder.where(sql, data);\n      } else {\n        queryBuilder.andWhere(sql, data);\n      }\n    });\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async findAllFeatured(pageOptionsDto: PageOptionsDto): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`user_highlights.featured = true`).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addFeatured(highlightId: number, userId: number): Promise {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role  {\n    const user = await this.userService.findOneById(userId);\n\n    if (user.role ();\n    const itemCount = parseInt(`${countQueryResult?.count ?? \"0\"}`, 10);\n    const entities = DbUserHighlight.create(await queryBuilder.getRawMany());\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findAllByUserId(pageOptionsDto: PageOptionsDto, userId: number): Promise> {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"user_highlights.user_id = :userId\", { userId }).orderBy(\"user_highlights.updated_at\", \"DESC\");\n\n    return this.pagerService.applyPagination({\n      pageOptionsDto,\n      queryBuilder,\n    });\n  }\n\n  async addUserHighlight(userId: number, highlight: CreateUserHighlightDto) {\n    const newUserHighlight = this.userHighlightRepository.create({\n      user_id: userId,\n      url: highlight.url,\n      highlight: highlight.highlight,\n      title: highlight.title ?? \"\",\n      shipped_at: highlight.shipped_at ? new Date(highlight.shipped_at) : new Date(),\n    });\n\n    return this.userHighlightRepository.save(newUserHighlight);\n  }\n\n  async updateUserHighlight(highlightId: number, highlight: Partial) {\n    return this.userHighlightRepository.update(highlightId, highlight);\n  }\n\n  async deleteUserHighlight(highlightId: number) {\n    return this.userHighlightRepository.softDelete(highlightId);\n  }\n\n  async findAllHighlightReactions(highlightId: number, userId?: number) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .select(\"emoji_id\", \"emoji_id\")\n      .addSelect(\"COUNT(emoji_id)\", \"reaction_count\")\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId });\n\n    if (userId) {\n      queryBuilder.andWhere(\"user_highlight_reactions.user_id = :userId\", { userId });\n    }\n\n    queryBuilder.addGroupBy(\"emoji_id\");\n\n    const entities: DbUserHighlightReactionResponse[] = await queryBuilder.getRawMany();\n\n    return entities;\n  }\n\n  async findOneUserHighlightReaction(highlightId: number, userId: number, emojiId: string) {\n    const queryBuilder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const item: DbUserHighlightReaction | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserHighlightReaction(userId: number, highlightId: number, emojiId: string, highlightUserId: number) {\n    const queryBuilder = this.userHighlightReactionRepository\n      .createQueryBuilder(\"user_highlight_reactions\")\n      .withDeleted();\n\n    queryBuilder\n      .where(\"user_highlight_reactions.highlight_id = :highlightId\", { highlightId })\n      .andWhere(\"user_highlight_reactions.user_id = :userId\", { userId })\n      .andWhere(\"user_highlight_reactions.emoji_id = :emojiId\", { emojiId });\n\n    const reactionExists = await queryBuilder.getOne();\n\n    if (reactionExists) {\n      if (!reactionExists.deleted_at) {\n        throw new ConflictException(\"You have already added this reaction for this highlight\");\n      }\n\n      await this.userHighlightReactionRepository.restore(reactionExists.id);\n      await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId, highlightId);\n\n      return reactionExists;\n    }\n\n    await this.userNotificationService.addUserHighlightNotification(userId, highlightUserId, highlightId);\n\n    return this.userHighlightReactionRepository.save({\n      user_id: userId,\n      highlight_id: highlightId,\n      emoji_id: emojiId,\n    });\n  }\n\n  async deleteUserHighlightReaction(id: string) {\n    return this.userHighlightReactionRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightMemberController.html":{"url":"controllers/UserInsightMemberController.html","title":"controller - UserInsightMemberController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightMemberController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight-member.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightMember\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                removeInsightMemberById\n                            \n                            \n                                    Async\n                                updateInsightMember\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightMember(createInsightMemberDto: CreateInsightMemberDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/members')@ApiOperation({operationId: 'addMemberForInsight', summary: 'Adds a new member for the insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Unable to add insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightMemberDto\n                                    \n                                                CreateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, insightId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/members')@ApiOperation({operationId: 'findAllInsightMembers', summary: 'Listing all members for an insight and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsightMember)@ApiOkResponse({type: DbInsightMember})@ApiNotFoundResponse({description: 'Insight not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    insightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeInsightMemberById\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeInsightMemberById(id: number, memberId: string, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/members/:memberId')@ApiOperation({operationId: 'removeInsightMemberById', summary: 'Removes a member from an insight'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to remove insight member'})@ApiBadRequestResponse({description: 'Invalid request'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightMember\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightMember(id: number, memberId: string, userId: number, updateInsightMemberDto: UpdateInsightMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/members/:memberId')@ApiOperation({operationId: 'updateInsightMember', summary: 'Updates an insight member information'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to find insight member'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight member'})@ApiBody({type: UpdateInsightMemberDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight-member.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memberId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightMemberDto\n                                    \n                                                UpdateInsightMemberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ConflictException,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightMemberDto } from \"./dtos/create-insight-member.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightMemberDto } from \"./dtos/update-insight-member.dto\";\nimport { DbInsightMember } from \"./entities/insight-member.entity\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightsService } from \"./insights.service\";\nimport { UserService } from \"../user/user.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightMemberController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightMemberService: InsightMemberService,\n    private userService: UserService\n  ) {}\n\n  @Get(\":id/members\")\n  @ApiOperation({\n    operationId: \"findAllInsightMembers\",\n    summary: \"Listing all members for an insight and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsightMember)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Insight not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise> {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canAccess = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\n      \"admin\",\n      \"edit\",\n      \"view\",\n    ]);\n\n    if (!canAccess) {\n      throw new UnauthorizedException();\n    }\n\n    return this.insightMemberService.findAllInsightMembers(pageOptionsDto, insightId);\n  }\n\n  @Post(\":id/members\")\n  @ApiOperation({\n    operationId: \"addMemberForInsight\",\n    summary: \"Adds a new member for the insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsightMember })\n  @ApiNotFoundResponse({ description: \"Unable to add insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightMemberDto })\n  async addInsightMember(\n    @Body() createInsightMemberDto: CreateInsightMemberDto,\n    @Param(\"id\", ParseIntPipe) insightId: number,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(insightId);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    const isMember = await this.insightMemberService.canUserManageInsight(\n      userId,\n      insight.id,\n      [\"admin\", \"edit\", \"view\"],\n      false\n    );\n\n    if (isMember) {\n      throw new ConflictException(\"The user is already a team member of this insight\");\n    }\n\n    const existingUser = await this.userService.findOneByEmail(createInsightMemberDto.email);\n\n    const newInsightMember = await this.insightMemberService.addInsightMember({\n      insight_id: insightId,\n      user_id: existingUser?.id,\n      invitation_email: existingUser?.email ?? createInsightMemberDto.email,\n      access: \"pending\",\n    });\n\n    return newInsightMember;\n  }\n\n  @Patch(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"updateInsightMember\",\n    summary: \"Updates an insight member information\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to find insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight member\" })\n  @ApiBody({ type: UpdateInsightMemberDto })\n  async updateInsightMember(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number,\n    @Body() updateInsightMemberDto: UpdateInsightMemberDto\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n    const insightMember = await this.insightMemberService.findOneById(memberId);\n\n    if (!canUpdate && insightMember.access !== \"pending\") {\n      throw new UnauthorizedException();\n    }\n\n    const updatedInsightMember: Partial = { access: updateInsightMemberDto.access };\n\n    if (insightMember.access === \"pending\") {\n      // the user is accepting the invitation, update the user_id\n      updatedInsightMember.user_id = userId;\n      updatedInsightMember.access = \"view\";\n    }\n\n    await this.insightMemberService.updateInsightMember(memberId, updatedInsightMember);\n\n    return this.insightMemberService.findOneById(memberId);\n  }\n\n  @Delete(\":id/members/:memberId\")\n  @ApiOperation({\n    operationId: \"removeInsightMemberById\",\n    summary: \"Removes a member from an insight\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to remove insight member\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  async removeInsightMemberById(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Param(\"memberId\") memberId: string,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    await this.insightMemberService.removeInsightMember(memberId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInsightsController.html":{"url":"controllers/UserInsightsController.html","title":"controller - UserInsightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInsightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/insight/user-insight.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/insights\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addInsightForUser\n                            \n                            \n                                    Async\n                                findAllInsightsByUserId\n                            \n                            \n                                    Async\n                                updateInsightForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    addInsightForUser(createInsightDto: CreateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@ApiOperation({operationId: 'addInsightForUser', summary: 'Adds a new insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to add user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiBody({type: CreateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createInsightDto\n                                    \n                                                CreateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllInsightsByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllInsightsByUserId(pageOptionsDto: InsightPageOptionsDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'findAllInsightsByUserId', summary: 'Listing all insights for a user and paginate them'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiPaginatedResponse(DbInsight)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Insights not found'})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                InsightPageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInsightForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInsightForUser(id: number, updateInsightDto: UpdateInsightDto, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiOperation({operationId: 'updateInsightForUser', summary: 'Updates an insight page for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbInsight})@ApiNotFoundResponse({description: 'Unable to update user insight'})@ApiBadRequestResponse({description: 'Invalid request'})@ApiUnprocessableEntityResponse({description: 'Unable to unable insight repos'})@ApiBody({type: UpdateInsightDto})\n                \n            \n\n            \n                \n                    Defined in src/insight/user-insight.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateInsightDto\n                                    \n                                                UpdateInsightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UseGuards,\n} from \"@nestjs/common\";\nimport {\n  ApiOperation,\n  ApiOkResponse,\n  ApiNotFoundResponse,\n  ApiBearerAuth,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiUnprocessableEntityResponse,\n} from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { ApiPaginatedResponse } from \"../common/decorators/api-paginated-response.decorator\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { CreateInsightDto } from \"./dtos/create-insight.dto\";\n\nimport { InsightPageOptionsDto } from \"./dtos/insight-page-options.dto\";\nimport { UpdateInsightDto } from \"./dtos/update-insight.dto\";\nimport { DbInsight } from \"./entities/insight.entity\";\nimport { InsightMemberService } from \"./insight-member.service\";\nimport { InsightRepoService } from \"./insight-repo.service\";\nimport { InsightsService } from \"./insights.service\";\n\n@Controller(\"user/insights\")\n@ApiTags(\"Insights service\")\nexport class UserInsightsController {\n  constructor(\n    private readonly insightsService: InsightsService,\n    private readonly insightsRepoService: InsightRepoService,\n    private insightMemberService: InsightMemberService\n  ) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"findAllInsightsByUserId\",\n    summary: \"Listing all insights for a user and paginate them\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiPaginatedResponse(DbInsight)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Insights not found\" })\n  async findAllInsightsByUserId(\n    @Query() pageOptionsDto: InsightPageOptionsDto,\n    @UserId() userId: string\n  ): Promise> {\n    return this.insightsService.findAllByUserId(pageOptionsDto, userId);\n  }\n\n  @Post(\"/\")\n  @ApiOperation({\n    operationId: \"addInsightForUser\",\n    summary: \"Adds a new insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to add user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiBody({ type: CreateInsightDto })\n  async addInsightForUser(@Body() createInsightDto: CreateInsightDto, @UserId() userId: number): Promise {\n    if (!createInsightDto.name || !Array.isArray(createInsightDto.repos)) {\n      throw new BadRequestException();\n    }\n\n    const newInsight = await this.insightsService.addInsight({\n      name: createInsightDto.name,\n      is_public: createInsightDto.is_public,\n      user_id: userId,\n    });\n\n    createInsightDto.repos.forEach(async (repo) => {\n      await this.insightsRepoService.addInsightRepo(newInsight.id, repo);\n    });\n\n    return newInsight;\n  }\n\n  @Patch(\"/:id\")\n  @ApiOperation({\n    operationId: \"updateInsightForUser\",\n    summary: \"Updates an insight page for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbInsight })\n  @ApiNotFoundResponse({ description: \"Unable to update user insight\" })\n  @ApiBadRequestResponse({ description: \"Invalid request\" })\n  @ApiUnprocessableEntityResponse({ description: \"Unable to unable insight repos\" })\n  @ApiBody({ type: UpdateInsightDto })\n  async updateInsightForUser(\n    @Param(\"id\", ParseIntPipe) id: number,\n    @Body() updateInsightDto: UpdateInsightDto,\n    @UserId() userId: number\n  ): Promise {\n    const insight = await this.insightsService.findOneById(id);\n\n    const canUpdate = await this.insightMemberService.canUserManageInsight(userId, insight.id, [\"admin\", \"edit\"]);\n\n    if (!canUpdate) {\n      throw new UnauthorizedException();\n    }\n\n    // update insight\n    await this.insightsService.updateInsight(id, {\n      name: updateInsightDto.name,\n      is_public: updateInsightDto.is_public,\n    });\n\n    try {\n      // current set of insight repos\n      const currentRepos = insight.repos.filter((insightRepo) => !insightRepo.deleted_at);\n\n      // remove deleted repos\n      const reposToRemove = currentRepos.filter(\n        (repo) => !updateInsightDto.repos.find((repoInfo) => `${repoInfo.id}` === `${repo.repo_id}`)\n      );\n\n      const reposToRemoveRequests = reposToRemove.map(async (insightRepo) =>\n        this.insightsRepoService.removeInsightRepo(insightRepo.id)\n      );\n\n      await Promise.all(reposToRemoveRequests);\n\n      // add new repos\n      const currentRepoIds = currentRepos.map((cr) => cr.repo_id);\n      const reposToAdd = updateInsightDto.repos.filter(\n        (repoInfo) => !currentRepoIds.find((id) => `${id}` === `${repoInfo.id}`)\n      );\n\n      const repoToAddRequests = reposToAdd.map(async (repo) =>\n        this.insightsRepoService.addInsightRepo(insight.id, repo)\n      );\n\n      await Promise.all(repoToAddRequests);\n    } catch (e) {\n      throw new UnprocessableEntityException();\n    }\n\n    return this.insightsService.findOneById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\n\n\nRepoModule\n\nRepoModule\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoFilterService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserCollaborationService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserNotificationService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserHighlightsController\n                        \n                        \n                            UserFollowsController\n                        \n                        \n                            UserNotificationController\n                        \n                        \n                            UserCollaborationController\n                        \n                        \n                            UserEndorsementController\n                        \n                        \n                            UserRecommendationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                        \n                            PullRequestModule\n                        \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EndorsementService\n                        \n                        \n                            RepoService\n                        \n                        \n                            UserFollowService\n                        \n                        \n                            UserHighlightsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { PullRequestModule } from \"../pull-requests/pull-request.module\";\nimport { RepoModule } from \"../repo/repo.module\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UserService } from \"./user.service\";\nimport { UserController } from \"./user.controller\";\nimport { DbUserHighlight } from \"./entities/user-highlight.entity\";\nimport { UserHighlightsController } from \"./user-highlight.controller\";\nimport { UserHighlightsService } from \"./user-highlights.service\";\nimport { UserFollowsController } from \"./user-follow.controller\";\nimport { UserFollowService } from \"./user-follow.service\";\nimport { DbUserToUserFollows } from \"./entities/user-follows.entity\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbUserTopRepo } from \"./entities/user-top-repo.entity\";\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { RepoService } from \"../repo/repo.service\";\nimport { RepoFilterService } from \"../common/filters/repo-filter.service\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { DbUserCollaboration } from \"./entities/user-collaboration.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserNotificationController } from \"./user-notification.controller\";\nimport { UserCollaborationService } from \"./user-collaboration.service\";\nimport { UserCollaborationController } from \"./user-collaboration.controller\";\nimport { UserEndorsementController } from \"./user-endorsement.controller\";\n\nimport { EndorsementService } from \"../endorsement/endorsement.service\";\nimport { DbEndorsement } from \"../endorsement/entities/endorsement.entity\";\nimport { UserRecommendationController } from \"./user-recommendation.controller\";\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature(\n      [\n        DbUser,\n        DbUserHighlight,\n        DbUserHighlightReaction,\n        DbUserToUserFollows,\n        DbUserTopRepo,\n        DbUserNotification,\n        DbUserCollaboration,\n        DbRepo,\n        DbEndorsement,\n      ],\n      \"ApiConnection\"\n    ),\n    PullRequestModule,\n    RepoModule,\n    ApiServicesModule,\n  ],\n  controllers: [\n    UserController,\n    UserHighlightsController,\n    UserFollowsController,\n    UserNotificationController,\n    UserCollaborationController,\n    UserEndorsementController,\n    UserRecommendationController,\n  ],\n  providers: [\n    UserService,\n    UserController,\n    UserHighlightsService,\n    UserHighlightsController,\n    UserFollowService,\n    RepoService,\n    RepoFilterService,\n    UserNotificationService,\n    UserCollaborationService,\n    EndorsementService,\n  ],\n  exports: [UserService, UserHighlightsService, UserFollowService, RepoService, EndorsementService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserNotificationController.html":{"url":"controllers/UserNotificationController.html","title":"controller - UserNotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserNotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserNotifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserNotifications\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserNotifications(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')@ApiOperation({operationId: 'getUserNotifications', summary: 'Retrieves notifications for the authenticated user'})@ApiBearerAuth()@UseGuards(SupabaseGuard)@ApiOkResponse({type: DbUserNotification})@ApiNotFoundResponse({description: 'Unable to get user notifications'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-notification.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiNotFoundResponse, ApiOkResponse, ApiOperation, ApiTags } from \"@nestjs/swagger\";\n\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { UserNotificationService } from \"./user-notifcation.service\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\n\n@Controller(\"user/notifications\")\n@ApiTags(\"User service\")\nexport class UserNotificationController {\n  constructor(private userNotificationService: UserNotificationService) {}\n\n  @Get(\"/\")\n  @ApiOperation({\n    operationId: \"getUserNotifications\",\n    summary: \"Retrieves notifications for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @UseGuards(SupabaseGuard)\n  @ApiOkResponse({ type: DbUserNotification })\n  @ApiNotFoundResponse({ description: \"Unable to get user notifications\" })\n  async getUserNotifications(\n    @UserId() userId: number,\n    @Query() pageOptionsDto: PageOptionsDto\n  ): Promise> {\n    return this.userNotificationService.findAllByUserId(userId, pageOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserNotificationService.html":{"url":"injectables/UserNotificationService.html","title":"injectable - UserNotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserNotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-notifcation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserFollowerNotification\n                            \n                            \n                                    Async\n                                addUserHighlightNotification\n                            \n                            \n                                    Async\n                                addUserNotification\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                markNotificationsAsRead\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userNotificationRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user-notifcation.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userNotificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserFollowerNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserFollowerNotification(userId: number, followedUserId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followedUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserHighlightNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserHighlightNotification(userId: number, highlightUserId: number, highlightId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightUserId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    highlightId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserNotification\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserNotification(userNotification: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userNotification\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markNotificationsAsRead\n                        \n                    \n                \n            \n            \n                \n                    \n                    markNotificationsAsRead(notificationIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/user/user-notifcation.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { DbUserNotification } from \"./entities/user-notification.entity\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageOptionsDto } from \"../common/dtos/page-options.dto\";\nimport { UserNotificationTypes, userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { UserService } from \"./user.service\";\n\n@Injectable()\nexport class UserNotificationService {\n  constructor(\n    @InjectRepository(DbUserNotification, \"ApiConnection\")\n    private userNotificationRepository: Repository,\n    private userService: UserService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userNotificationRepository.createQueryBuilder(\"user_notifications\");\n\n    return builder;\n  }\n\n  async findAllByUserId(userId: number, pageOptionsDto: PageOptionsDto) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .innerJoin(\"users\", \"users\", \"user_notifications.user_id=users.id\")\n      .where(\"user_id = :userId\", { userId })\n      .andWhere(\"user_notifications.type IN (:...userNotificationTypes)\", { userNotificationTypes })\n      .andWhere(\"user_notifications.read_at IS NULL\");\n\n    const entities = await queryBuilder.getMany();\n    const itemCount = await queryBuilder.getCount();\n    const notificationIds = entities.map((notification) => notification.id);\n\n    await this.markNotificationsAsRead(notificationIds);\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async addUserNotification(userNotification: Partial) {\n    return this.userNotificationRepository.save({\n      type: userNotification.type,\n      notified_at: new Date(),\n      user_id: userNotification.user_id,\n      message: userNotification.message,\n      from_user_id: userNotification.from_user_id,\n      meta_id: userNotification.meta_id,\n    });\n  }\n\n  async addUserFollowerNotification(userId: number, followedUserId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.Follow,\n      user_id: followedUserId,\n      from_user_id: userId,\n      message: `${followUser.login} followed you`,\n      meta_id: followUser.login,\n    });\n  }\n\n  async addUserHighlightNotification(userId: number, highlightUserId: number, highlightId: number) {\n    const followUser = await this.userService.findOneById(userId);\n\n    return this.addUserNotification({\n      type: UserNotificationTypes.HighlightReaction,\n      user_id: highlightUserId,\n      from_user_id: userId,\n      message: `${followUser.login} reacted to your highlight`,\n      meta_id: `${highlightId}`,\n    });\n  }\n\n  async markNotificationsAsRead(notificationIds: number[]) {\n    const updates = notificationIds.map(async (id) =>\n      this.userNotificationRepository.update(id, { read_at: new Date() })\n    );\n\n    await Promise.all(updates);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserOnboardingDto.html":{"url":"classes/UserOnboardingDto.html","title":"class - UserOnboardingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserOnboardingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/user-onboarding.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interests\n                            \n                            \n                                    Public\n                                timezone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'An array of interests', type: undefined, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User timezone in UTC', type: String, example: 'UTC-5'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/user-onboarding.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\n\nexport class UserOnboardingDto {\n  @ApiProperty({\n    description: \"An array of interests\",\n    type: [String],\n    isArray: true,\n    example: [\"javascript\", \"react\"],\n  })\n  @IsArray()\n  public interests: string[];\n\n  @ApiProperty({\n    description: \"User timezone in UTC\",\n    type: String,\n    example: \"UTC-5\",\n  })\n  @IsString()\n  public timezone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserRecommendationController.html":{"url":"controllers/UserRecommendationController.html","title":"controller - UserRecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserRecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-recommendation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/recommendations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserRepoRecommendations\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserRepoRecommendations\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserRepoRecommendations(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/repos')@ApiOperation({operationId: 'findUserRepoRecommendations', summary: 'Listing recommended repos for the authenticated user'})@ApiBearerAuth()@ApiOkResponse()@UseGuards(SupabaseGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user-recommendation.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiBearerAuth, ApiTags, ApiOkResponse } from \"@nestjs/swagger\";\n\nimport { SupabaseGuard } from \"../auth/supabase.guard\";\nimport { UserId } from \"../auth/supabase.user.decorator\";\n\nimport { RepoService } from \"../repo/repo.service\";\nimport { UserService } from \"./user.service\";\n\n@Controller(\"user/recommendations\")\n@ApiTags(\"User Recommendations service\")\nexport class UserRecommendationController {\n  constructor(private readonly repoService: RepoService, private readonly userService: UserService) {}\n\n  @Get(\"/repos\")\n  @ApiOperation({\n    operationId: \"findUserRepoRecommendations\",\n    summary: \"Listing recommended repos for the authenticated user\",\n  })\n  @ApiBearerAuth()\n  @ApiOkResponse()\n  @UseGuards(SupabaseGuard)\n  async findUserRepoRecommendations(@UserId() userId: number) {\n    const user = await this.userService.findOneById(userId);\n    const interests = user.interests?.split(\",\").filter(Boolean) ?? [];\n\n    return this.repoService.findRecommendations(interests);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto.html":{"url":"classes/UserRepoOptionsDto.html","title":"class - UserRepoOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repo-options.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PageOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                orderDirection\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                range\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 1000, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(10000)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        orderDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderDirectionEnum\n\n                    \n                \n                \n                    \n                        Default value : OrderDirectionEnum.DESC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: OrderDirectionEnum, enumName: 'OrderDirectionEnum', default: undefined})@IsEnum(OrderDirectionEnum)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:33\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        range\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Range in days', default: 30})@Type(undefined)@IsIn(['7', '30', '90'])@IsInt()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PageOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PageOptionsDto:43\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PageOptionsDto } from \"../../common/dtos/page-options.dto\";\n\nexport class UserRepoOptionsDto extends PageOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepoOptionsDto-1.html":{"url":"classes/UserRepoOptionsDto-1.html","title":"class - UserRepoOptionsDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepoOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The repos to add to onboarding', type: Number, isArray: true, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserReposModule.html":{"url":"modules/UserReposModule.html","title":"module - UserReposModule","body":"\n                   \n\n\n\n\n    Modules\n    UserReposModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_UserReposModule_imports\n\n\n\n\nApiServicesModule\n\nApiServicesModule\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user-repo/user-repos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiServicesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserReposService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { ApiServicesModule } from \"../common/services/api-services.module\";\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserReposService } from \"./user-repos.service\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbUserRepo], \"ApiConnection\"), ApiServicesModule],\n  providers: [UserReposService],\n  exports: [UserReposService],\n})\nexport class UserReposModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserReposService.html":{"url":"injectables/UserReposService.html","title":"injectable - UserReposService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserReposService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/user-repos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserRepo\n                            \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepoRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user-repo/user-repos.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserRepo\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserRepo(userId: number, repo: RepoInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    repo\n                                    \n                                                RepoInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                UserRepoOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user-repo/user-repos.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\nimport { PageDto } from \"../common/dtos/page.dto\";\n\nimport { DbUserRepo } from \"./user-repo.entity\";\nimport { UserRepoOptionsDto } from \"./dtos/user-repo-options.dto\";\nimport { RepoInfo } from \"../repo/dtos/repo-info.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\n\n@Injectable()\nexport class UserReposService {\n  constructor(\n    @InjectRepository(DbUserRepo, \"ApiConnection\")\n    private userRepoRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    return builder;\n  }\n\n  async findOneById(id: number): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(\"id = :id\", { id });\n\n    const item: DbUserRepo | null = await queryBuilder.getOne();\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async addUserRepo(userId: number, repo: RepoInfo) {\n    const newUserRepo = this.userRepoRepository.create({\n      user_id: userId,\n      repo_id: repo.id,\n      full_name: repo.fullName,\n    });\n\n    return this.userRepoRepository.save(newUserRepo);\n  }\n\n  async findAllByUserId(pageOptionsDto: UserRepoOptionsDto, userId: string): Promise> {\n    const queryBuilder = this.userRepoRepository.createQueryBuilder(\"user_repos\");\n\n    queryBuilder.where(\"user_repos.user_id = :userId\", { userId });\n\n    return this.pagerService.applyPagination({\n      queryBuilder,\n      pageOptionsDto,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                checkAddUser\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                findTopUsers\n                            \n                            \n                                reactionsQueryBuilder\n                            \n                            \n                                    Async\n                                updateEmailPreferences\n                            \n                            \n                                    Async\n                                updateInterests\n                            \n                            \n                                    Async\n                                updateOnboarding\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateWaitlistStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, userHighlightReactionRepository: Repository, pagerService: PagerService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userHighlightReactionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pagerService\n                                                  \n                                                        \n                                                                        PagerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkAddUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkAddUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:267\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number, includeEmail)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEmail\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findTopUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    findTopUsers(pageOptionsDto: TopUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                TopUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionsQueryBuilder\n                        \n                    \n                \n            \n            \n                \nreactionsQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEmailPreferences\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:260\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserEmailPreferencesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateInterests(id: number, user: UpdateUserProfileInterestsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserProfileInterestsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOnboarding\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnboarding(id: number, user: UserOnboardingDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserOnboardingDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(id: number, role: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:246\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateWaitlistStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateWaitlistStatus(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository, SelectQueryBuilder } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { DbUser } from \"./user.entity\";\nimport { UpdateUserDto } from \"./dtos/update-user.dto\";\nimport { UpdateUserProfileInterestsDto } from \"./dtos/update-user-interests.dto\";\nimport { UpdateUserEmailPreferencesDto } from \"./dtos/update-user-email-prefs.dto\";\nimport { UserOnboardingDto } from \"../auth/dtos/user-onboarding.dto\";\nimport { userNotificationTypes } from \"./entities/user-notification.constants\";\nimport { DbUserHighlightReaction } from \"./entities/user-highlight-reaction.entity\";\nimport { DbTopUser } from \"./entities/top-users.entity\";\nimport { TopUsersDto } from \"./dtos/top-users.dto\";\nimport { PagerService } from \"../common/services/pager.service\";\nimport { PageDto } from \"../common/dtos/page.dto\";\nimport { PageMetaDto } from \"../common/dtos/page-meta.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(DbUser, \"ApiConnection\")\n    private userRepository: Repository,\n    @InjectRepository(DbUserHighlightReaction, \"ApiConnection\")\n    private userHighlightReactionRepository: Repository,\n    private pagerService: PagerService\n  ) {}\n\n  baseQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userRepository.createQueryBuilder(\"users\");\n\n    return builder;\n  }\n\n  reactionsQueryBuilder(): SelectQueryBuilder {\n    const builder = this.userHighlightReactionRepository.createQueryBuilder(\"user_highlight_reactions\");\n\n    return builder;\n  }\n\n  async findTopUsers(pageOptionsDto: TopUsersDto): Promise> {\n    const queryBuilder = this.reactionsQueryBuilder();\n\n    queryBuilder\n      .select(\"users.login as login\")\n      .innerJoin(\"users\", \"users\", \"users.id = user_highlight_reactions.user_id\")\n      .where(\"user_highlight_reactions.deleted_at IS NULL\")\n      .groupBy(\"login\")\n      .orderBy(\"COUNT(user_highlight_reactions.emoji_id)\", \"DESC\");\n\n    queryBuilder.offset(pageOptionsDto.skip).limit(pageOptionsDto.limit);\n\n    const [itemCount, entities] = await Promise.all([queryBuilder.getCount(), queryBuilder.getRawMany()]);\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async findOneById(id: number, includeEmail = false): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n          SELECT COALESCE(COUNT(\"user_notifications\".\"id\"), 0)\n          FROM user_notifications\n          WHERE user_id = :userId\n          AND user_notifications.type IN (:...userNotificationTypes)\n          AND user_notifications.read_at IS NULL\n        )::INTEGER`,\n        \"users_notification_count\"\n      )\n      .where(\"id = :id\", { id });\n\n    if (includeEmail) {\n      queryBuilder.addSelect(\"users.email\", \"users_email\");\n    }\n\n    let item: DbUser | null;\n\n    try {\n      queryBuilder.setParameters({ userId: id, userNotificationTypes });\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    if (!item) {\n      throw new NotFoundException();\n    }\n\n    return item;\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_highlights\".\"id\"), 0)\n        FROM user_highlights\n        WHERE user_id = users.id\n        AND user_highlights.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_highlights_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_follows\".\"id\"), 0)\n        FROM users_to_users_followers user_follows\n        WHERE user_id = users.id\n        AND user_follows.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_following_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"user_follows\".\"id\"), 0)\n        FROM users_to_users_followers user_follows\n        WHERE following_user_id = users.id\n        AND user_follows.deleted_at IS NULL\n      )::INTEGER`,\n        \"users_followers_count\"\n      )\n      .addSelect(\n        `(\n        SELECT COALESCE(COUNT(\"pull_requests\".\"id\"), 0)\n        FROM pull_requests\n        WHERE LOWER(author_login) = :username\n        AND now() - INTERVAL '30 days'  {\n    const {\n      user_metadata: { user_name, email, name },\n      identities,\n      confirmed_at,\n    } = user;\n    const github = identities!.filter((identity) => identity.provider === \"github\")[0];\n    const id = parseInt(github.id, 10);\n\n    try {\n      const user = await this.findOneById(id, true);\n\n      if (user && !user.is_open_sauced_member) {\n        await this.userRepository.update(user.id, {\n          is_open_sauced_member: true,\n          connected_at: new Date(),\n        });\n      }\n\n      return user;\n    } catch (e) {\n      // create new user\n      const newUser = this.userRepository.create({\n        id,\n        name: name as string,\n        is_open_sauced_member: true,\n        login: user_name as string,\n        email: email as string,\n        created_at: new Date(github.created_at),\n        updated_at: new Date(github.updated_at ?? github.created_at),\n        connected_at: confirmed_at ? new Date(confirmed_at) : new Date(),\n      });\n\n      await newUser.save();\n\n      return newUser;\n    }\n  }\n\n  async updateUser(id: number, user: UpdateUserDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        name: user.name,\n        email: user.email,\n        bio: user.bio ?? \"\",\n        url: user.url ?? \"\",\n        twitter_username: user.twitter_username ?? \"\",\n        company: user.company ?? \"\",\n        location: user.location ?? \"\",\n        display_local_time: !!user.display_local_time,\n        timezone: user.timezone,\n        github_sponsors_url: user.github_sponsors_url ?? \"\",\n        linkedin_url: user.linkedin_url ?? \"\",\n        discord_url: user.discord_url ?? \"\",\n      });\n\n      return this.findOneById(id);\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user\");\n    }\n  }\n\n  async updateOnboarding(id: number, user: UserOnboardingDto) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, {\n        is_onboarded: true,\n        is_waitlisted: false,\n        timezone: user.timezone,\n        interests: user.interests.join(\",\"),\n      });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user onboarding status\");\n    }\n  }\n\n  async updateWaitlistStatus(id: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { is_waitlisted: true });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user waitlist status\");\n    }\n  }\n\n  async updateRole(id: number, role: number) {\n    try {\n      await this.findOneById(id);\n\n      await this.userRepository.update(id, { role });\n    } catch (e) {\n      throw new NotFoundException(\"Unable to update user role\");\n    }\n  }\n\n  async updateInterests(id: number, user: UpdateUserProfileInterestsDto) {\n    return this.userRepository.update(id, { interests: user.interests.join(\",\") });\n  }\n\n  async updateEmailPreferences(id: number, user: UpdateUserEmailPreferencesDto) {\n    return this.userRepository.update(id, {\n      display_email: user.display_email,\n      receive_collaboration: user.receive_collaboration,\n    });\n  }\n\n  async findOneByEmail(email: string): Promise {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder.where(`users.email = :email`, { email: email.toLowerCase() });\n\n    let item: DbUser | null;\n\n    try {\n      item = await queryBuilder.getOne();\n    } catch (e) {\n      // handle error\n      item = null;\n    }\n\n    return item;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VoteModule.html":{"url":"modules/VoteModule.html","title":"module - VoteModule","body":"\n                   \n\n\n\n\n    Modules\n    VoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_imports\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nRepoModule\n\nRepoModule\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/vote/vote.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            VoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RepoVoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RepoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            VoteService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\n\nimport { DbRepo } from \"../repo/entities/repo.entity\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\nimport { VoteService } from \"./vote.service\";\nimport { RepoVoteController } from \"./repo-vote.controller\";\nimport { RepoModule } from \"../repo/repo.module\";\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DbRepo, DbRepoToUserVotes], \"ApiConnection\"), RepoModule],\n  controllers: [RepoVoteController],\n  providers: [VoteService],\n  exports: [VoteService],\n})\nexport class VoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/VoteService.html":{"url":"injectables/VoteService.html","title":"injectable - VoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  VoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/vote/vote.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                baseQueryBuilder\n                            \n                            \n                                    Async\n                                downVoteByRepoId\n                            \n                            \n                                    Async\n                                findOneByRepoId\n                            \n                            \n                                    Private\n                                    Async\n                                getVoteQuery\n                            \n                            \n                                    Async\n                                voteByRepoId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repoVoteRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/vote/vote.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repoVoteRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        baseQueryBuilder\n                        \n                    \n                \n            \n            \n                \nbaseQueryBuilder()\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downVoteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    downVoteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getVoteQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVoteQuery(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        voteByRepoId\n                        \n                    \n                \n            \n            \n                \n                    \n                    voteByRepoId(repoId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/vote/vote.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { DbRepoToUserVotes } from \"../repo/entities/repo.to.user.votes.entity\";\n\n@Injectable()\nexport class VoteService {\n  constructor(\n    @InjectRepository(DbRepoToUserVotes, \"ApiConnection\")\n    private repoVoteRepository: Repository\n  ) {}\n\n  baseQueryBuilder() {\n    const builder = this.repoVoteRepository.createQueryBuilder(\"r2votes\").withDeleted();\n\n    return builder;\n  }\n\n  async findOneByRepoId(repoId: number, userId: number) {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    if (voteExists.deleted_at) {\n      return {\n        voted: false,\n        data: null,\n      };\n    }\n\n    return {\n      voted: true,\n      data: voteExists,\n    };\n  }\n\n  async voteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (voteExists) {\n      if (!voteExists.deleted_at) {\n        throw new ConflictException(\"You have already voted for this repo\");\n      }\n\n      await this.repoVoteRepository.restore(voteExists.id);\n\n      return voteExists;\n    }\n\n    return this.repoVoteRepository.save({\n      repo_id: repoId,\n      user_id: userId,\n    });\n  }\n\n  async downVoteByRepoId(repoId: number, userId: number): Promise {\n    const voteExists = await this.getVoteQuery(repoId, userId);\n\n    if (!voteExists) {\n      throw new NotFoundException(\"You have not voted for this repo\");\n    }\n\n    if (voteExists.deleted_at) {\n      throw new ConflictException(\"You have already removed your vote\");\n    }\n\n    await this.repoVoteRepository.softDelete(voteExists.id);\n\n    return voteExists;\n  }\n\n  private async getVoteQuery(repoId: number, userId: number) {\n    const queryBuilder = this.baseQueryBuilder();\n\n    queryBuilder\n      .addSelect(\"r2votes.deleted_at\")\n      .where(\"r2votes.repo_id = :repoId\", { repoId })\n      .andWhere(\"r2votes.user_id = :userId\", { userId });\n\n    return queryBuilder.getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VotedRepoDto.html":{"url":"classes/VotedRepoDto.html","title":"class - VotedRepoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VotedRepoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user-repo/dtos/user-repos.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                voted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DbRepoToUserVotes | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        voted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'If the user has voted for the repo', type: Boolean, example: true})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user-repo/dtos/user-repos.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsArray, IsBoolean, IsOptional } from \"class-validator\";\nimport { DbRepoToUserVotes } from \"../../repo/entities/repo.to.user.votes.entity\";\n\nexport class UserRepoOptionsDto {\n  @ApiProperty({\n    description: \"The repos to add to onboarding\",\n    type: Number,\n    isArray: true,\n    example: [71359796, 426820139],\n  })\n  @IsArray()\n  readonly ids: number[];\n}\n\nexport class VotedRepoDto {\n  @ApiProperty({\n    description: \"If the user has voted for the repo\",\n    type: Boolean,\n    example: true,\n  })\n  @IsBoolean()\n  voted: boolean;\n\n  @IsOptional()\n  data: DbRepoToUserVotes | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n📦 open-sauced/api changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.42.0-beta.1 (2023-07-31)\n🍕 Features\n\nadd endpoint for all recent contributors (#227) (88bc55a)\n\n1.41.0 (2023-07-24)\n🧑‍💻 Code Refactoring\n\nsetup eslint for unit tests (#214) (758b2d2)\n\n🍕 Features\n\nadd limit query params and pagination to top users endpoint (#216) (58e4723)\n\n1.41.0-beta.1 (2023-07-20)\n🍕 Features\n\nadd limit query params and pagination to top users endpoint (#216) (58e4723)\n\n1.40.1-beta.1 (2023-07-18)\n🧑‍💻 Code Refactoring\n\nsetup eslint for unit tests (#214) (758b2d2)\n\n1.40.0 (2023-07-17)\n🔁 Continuous Integration\n\nadd build workflow to CI (#201) (9134f41)\n\n🐛 Bug Fixes\n\nadd missing api service module imports (06dcc23)\nremove id in swagger docs for highlights endpoint (#208) (802fd4b)\n\n🧑‍💻 Code Refactoring\n\nadd pager service and drop duplicated code (#199) (4828464)\nsetup unit tests (#207) (39e7ff4)\n\n🍕 Features\n\nadd discord url to user profile (#211) (9b75deb)\nadd endpoint to check if authed user has voted the repo (#210) (9f75a41)\nadd featured highlights endpoints (#198) (7f618bf)\nimplement to 10 users feature (#200) (452a769)\n\n🤖 Build System\n\nenable local development setup with Docker and PostgreSQL (#205) (84af9ff)\n\n1.40.0-beta.9 (2023-07-17)\n🤖 Build System\n\nenable local development setup with Docker and PostgreSQL (#205) (84af9ff)\n\n1.40.0-beta.8 (2023-07-17)\n🍕 Features\n\nadd discord url to user profile (#211) (9b75deb)\nadd endpoint to check if authed user has voted the repo (#210) (9f75a41)\n\n1.40.0-beta.7 (2023-07-14)\n🧑‍💻 Code Refactoring\n\nsetup unit tests (#207) (39e7ff4)\n\n1.40.0-beta.6 (2023-07-14)\n🐛 Bug Fixes\n\nremove id in swagger docs for highlights endpoint (#208) (802fd4b)\n\n1.40.0-beta.5 (2023-07-12)\n🔁 Continuous Integration\n\nadd build workflow to CI (#201) (9134f41)\n\n1.40.0-beta.4 (2023-07-12)\n🐛 Bug Fixes\n\nadd missing api service module imports (06dcc23)\n\n1.40.0-beta.3 (2023-07-12)\n🍕 Features\n\nimplement to 10 users feature (#200) (452a769)\n\n1.40.0-beta.2 (2023-07-11)\n🧑‍💻 Code Refactoring\n\nadd pager service and drop duplicated code (#199) (4828464)\n\n1.40.0-beta.1 (2023-07-06)\n🍕 Features\n\nadd featured highlights endpoints (#198) (7f618bf)\n\n1.39.0 (2023-07-05)\n🐛 Bug Fixes\n\nadd checks for requester and recipient for collaboration requests (#189) (f212fb2)\nchange swagger docs response for highlight reactions (#192) (56eb3bd)\nremove limit from repo recommendation query (638f9ec)\n\n🍕 Features\n\nadd endpoint for repo recommendations (#191) (0b6d16a)\nadd followers, following, recent pull requests and velocity counts to user info (#195) (109d081)\nenable promo codes with Stripe checkout (#190) (ad2c624)\n\n1.39.0-beta.5 (2023-07-05)\n🍕 Features\n\nadd followers, following, recent pull requests and velocity counts to user info (#195) (109d081)\n\n1.39.0-beta.4 (2023-07-03)\n🐛 Bug Fixes\n\nchange swagger docs response for highlight reactions (#192) (56eb3bd)\n\n1.39.0-beta.3 (2023-06-30)\n🐛 Bug Fixes\n\nremove limit from repo recommendation query (638f9ec)\n\n1.39.0-beta.2 (2023-06-29)\n🍕 Features\n\nadd endpoint for repo recommendations (#191) (0b6d16a)\n\n1.39.0-beta.1 (2023-06-29)\n🍕 Features\n\nenable promo codes with Stripe checkout (#190) (ad2c624)\n\n1.38.3-beta.1 (2023-06-28)\n🐛 Bug Fixes\n\nadd checks for requester and recipient for collaboration requests (#189) (f212fb2)\n\n📦 open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.38.2 (2023-06-21)\n🐛 Bug Fixes\n\nupdate query for merged pull requests for repositories (#185) (f9defe2)\n\n1.38.2-beta.1 (2023-06-21)\n🐛 Bug Fixes\n\nupdate query for merged pull requests for repositories (#185) (f9defe2)\n\n1.38.1 (2023-06-16)\n🐛 Bug Fixes\n\nupdate existing user after they connect their account (#182) (b8e8c88)\n\n1.38.1-beta.1 (2023-06-16)\n🐛 Bug Fixes\n\nupdate existing user after they connect their account (#182) (b8e8c88)\n\n1.38.0 (2023-06-13)\n🍕 Features\n\ngenerate code test, explanation on PR (#179) (c292277)\n\n1.38.0-beta.1 (2023-06-12)\n🍕 Features\n\ngenerate code test, explanation on PR (#179) (c292277)\n\n1.37.0 (2023-06-06)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n🍕 Features\n\nadd endpoint for fetching contributors based on filters (#177) (9427269)\nadd endpoints for managing endorsements (#176) (487c1a2)\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.37.0-beta.4 (2023-06-01)\n🍕 Features\n\nadd endpoint for fetching contributors based on filters (#177) (9427269)\n\n1.37.0-beta.3 (2023-05-31)\n🍕 Features\n\nadd endpoints for managing endorsements (#176) (487c1a2)\n\n1.37.0-beta.2 (2023-05-31)\n🐛 Bug Fixes\n\nadd regex pattern to validate twitter username (#138) (71a164d)\n\n1.37.0-beta.1 (2023-05-24)\n🍕 Features\n\nremove open-sauced/open-sauced from ci yml (#173) (a398b89)\n\n1.36.0 (2023-05-23)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.36.0-beta.2 (2023-05-22)\n🍕 Features\n\nadd endpoint to generate code refactor suggestions (#171) (0fe8b4d)\n\n1.36.0-beta.1 (2023-05-22)\n🍕 Features\n\nadd endpoints for managing user collaborations (#170) (28a3b76)\n\n1.35.0 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.35.0-beta.1 (2023-05-18)\n🍕 Features\n\nadd endpoint to generate pull request description (#168) (3549897)\n\n1.34.0 (2023-05-16)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.2 (2023-05-16)\n🍕 Features\n\nadd meta_id to user notifications for building URLs (#165) (113e98b)\n\n1.34.0-beta.1 (2023-05-15)\n🍕 Features\n\nadd endpoints for retrieving highlights for followed users (#164) (03600f8)\n\n1.33.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.1-beta.1 (2023-05-12)\n🐛 Bug Fixes\n\nallow voting for a repo after removing old vote (#161) (ff434b5)\n\n1.33.0 (2023-05-11)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd endpoint for fetching user notifications (#155) (01301c9)\nadd first commit and pull request date (08f1679)\nadd user notification count to session data (#158) (1c3378e)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect misaligned migrations to real values (bb26d27)\ncorrect npm package not releasing (672ea80)\ncorrect server versioning (1225197)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\nnormalize pull requests status for queries (a057e0e)\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.9 (2023-05-11)\n🐛 Bug Fixes\n\nnormalize pull requests status for queries (a057e0e)\n\n1.33.0-beta.8 (2023-05-11)\n🐛 Bug Fixes\n\nupdate queries for pull requests based on status (#159) (88e0adc)\n\n1.33.0-beta.7 (2023-05-11)\n🍕 Features\n\nadd user notification count to session data (#158) (1c3378e)\n\n1.33.0-beta.6 (2023-05-11)\n🍕 Features\n\nadd endpoint for fetching user notifications (#155) (01301c9)\n\n🐛 Bug Fixes\n\ntrigger deploy (fed79a1)\nupdate deploy URLs (83fe57d)\nupdate license year (#157) (9fc3be7)\n\n1.33.0-beta.5 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect server versioning (1225197)\n\n1.33.0-beta.4 (2023-05-05)\n🐛 Bug Fixes\n\ncorrect misaligned migrations to real values (bb26d27)\n\n1.33.0-beta.3 (2023-05-05)\n🐛 Bug Fixes\n\nadd missing user field migrations (2ee076b)\n\n1.33.0-beta.2 (2023-05-04)\n🔁 Continuous Integration\n\nfix some deprecated actions warnings (64d869f)\nupdate git action workflows (7c846ec)\n\n1.33.0-beta.1 (2023-05-04)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate dependencies (abb24de)\nupdate deps (47dc78b)\n\n1.33.0-alpha.3 (2023-05-04)\n🤖 Build System\n\nupdate dependencies (abb24de)\n\n1.33.0-alpha.2 (2023-05-03)\n🐛 Bug Fixes\n\ncorrect validation pipe error on numbers (ae44652), closes #154\n\n1.33.0-alpha.1 (2023-05-03)\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\ncorrect user highlight migrations (80a866f)\n\n1.32.0-alpha.1 (2023-04-28)\n🐛 Bug Fixes\n\ncorrect all migrations up to not including pull requests (9bee970)\ncorrect build errors (20491d8)\ncorrect dockerfile paths for library usage (f73f891)\ncorrect merge conflict (436f2db)\ncorrect npm package not releasing (672ea80)\ncorrect some migration indexes (971adeb)\ncorrect some migration indexes and use new user indexer meta (23b2a83)\n\n🔥 Performance Improvements\n\nsimplify digital ocean static globals (88e08d2)\nstash stress tester changes (6fa4a7d)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\nupdate deps (47dc78b)\n\n🍕 Features\n\nadd connected_at auth timestamp and correct login backfill created_at (7338f09), closes #147\nadd first commit and pull request date (08f1679)\nadd user top repos bag (5238f58)\nadd user top repos route (17d7725)\nadd user top repositories entities (7e29c6e)\nexperimental build improvements (70a6e7b)\n\n1.29.0-alpha.3 (2023-03-21)\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n🍕 Features\n\nexperimental build improvements (70a6e7b)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\n\n1.32.0 (2023-05-02)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.32.0-beta.1 (2023-04-26)\n🍕 Features\n\nadd shipped_at field to user highlight data (#151) (4deaadd)\n\n1.31.1-beta.1 (2023-04-26)\n🐛 Bug Fixes\n\nlowercase contributor value before using in queries (#150) (762c1cb)\n\n1.31.0 (2023-04-25)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.31.0-beta.1 (2023-04-25)\n🍕 Features\n\nadd endpoint to retrieve pull request insights (#144) (828b7d2)\n\n1.30.2-beta.1 (2023-04-24)\n🐛 Bug Fixes\n\nupdate query for insight members list (#143) (544673a)\n\n1.30.1 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\nleft join users for insight members to show pending invites (611b923)\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.3 (2023-04-20)\n🐛 Bug Fixes\n\nadd repo id to pull request data (38f1dc9)\n\n1.30.1-beta.2 (2023-04-20)\n🐛 Bug Fixes\n\nonly add range filter when not requesting specific repos (#141) (28f6699)\n\n1.30.1-beta.1 (2023-04-18)\n🐛 Bug Fixes\n\nleft join users for insight members to show pending invites (611b923)\n\n1.30.1-beta.1 (2023-04-14)\n🐛 Bug Fixes\n\ncorrect npm package not releasing (672ea80)\n\n1.29.0-alpha.2 (2023-03-21)\n\nadd owner information and relationships to insight pages (#136) (94331ba)\n\n1.30.0-beta.2 (2023-04-04)\n🐛 Bug Fixes\n\ncorrect dockerfile paths for library usage (f73f891)\n\n1.29.0-alpha.1 (2023-03-20)\n\nadd user name to insight members list (7e2756b)\n\n1.30.0-beta.1 (2023-04-04)\n🍕 Features\n\nadd endpoints for managing insight team members (#135) (9b12042)\n\n1.29.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nforce release with dependency upgrades (293c4d3)\nupdate typescript and other non-blocking deps (c54dcd9)\n\n1.29.1-beta.1 (2023-03-31)\n🐛 Bug Fixes\n\nonly use repos_id for count query when using filters (#133) (cae5dbd)\n\n🤖 Build System\n\nexperiment with published package without json path hack (d3afb4b)\nre-use code across private repos and small fixes (3d2b7eb)\n\n🐛 Bug Fixes\n\ncorrect build errors (20491d8)\nremove day conversion from pr velocity (5ee770b)\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.4 (2023-03-28)\n🐛 Bug Fixes\n\nsort insights by updated at, fix user_id checks (#131) (2d6609a)\n\n1.29.0-beta.3 (2023-03-28)\n🍕 Features\n\nadd endpoints for managing user follows (#130) (7728bc8)\n\n1.29.0-beta.2 (2023-03-21)\n🐛 Bug Fixes\n\nremove day conversion from pr velocity (5ee770b)\n\n1.29.0-beta.1 (2023-03-21)\n🍕 Features\n\nadd insights to repo search endpoint (#128) (d3cb75a)\n\n1.28.0 (2023-03-16)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo full_name to pull request endpoints (#124) (8bfda45)\nadd repo topics (d08173f)\nadd search endpoint for repos with filters (#125) (85a7549)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n1.28.0-beta.3 (2023-03-15)\n🍕 Features\n\nadd search endpoint for repos with filters (#125) (85a7549)\n\n1.28.0-beta.2 (2023-03-15)\n🍕 Features\n\nadd repo full_name to pull request endpoints (#124) (8bfda45)\n\n1.28.0-beta.1 (2023-03-15)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.27.0 (2023-03-10)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.2 (2023-03-10)\n🐛 Bug Fixes\n\nuse take instead of limit for insight pages with join (#120) (c000984)\n\n1.27.0-beta.1 (2023-03-06)\n🍕 Features\n\nadd endpoint to fetch an individual highlight (#115) (ed28e07)\n\n1.26.0 (2023-02-28)\n1.27.0-alpha.1 (2023-03-09)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\nadd endpoint for pull requests (#116) (86e013f)\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\nadd etl supporting repos and users metadata (#89) (286e864)\nadd repo topics (d08173f)\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\nupdate environment and database connections to new logging model (39bdd16)\n\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\ncorrect missing alpha interests migrations (58540e7)\ncorrect references cascade options (a5a4789)\ncorrect user entity lenght (e043912)\ncorrect user entity name length (66fb61e)\nformatting (35a08da)\n\n1.25.0-alpha.10 (2023-03-08)\n🍕 Features\n\nadd common filter service and add filtering support for pull requests (#118) (cfe2a69)\n\n1.25.0-alpha.9 (2023-03-07)\n🍕 Features\n\nadd endpoint to display pull requests for contributors (#117) (ca9a69c)\n\n1.25.0-alpha.8 (2023-03-07)\n🍕 Features\n\nadd endpoint for pull requests (#116) (86e013f)\n\n1.25.0-alpha.7 (2023-03-07)\n🐛 Bug Fixes\n\ncorrect user entity name length (66fb61e)\n\n1.25.0-alpha.6 (2023-02-23)\n🐛 Bug Fixes\n\ncorrect references cascade options (a5a4789)\n\n1.25.0-alpha.5 (2023-02-16)\n🐛 Bug Fixes\n\nadd migration for pull requests table (1680fb3)\n\n1.25.0-alpha.4 (2023-02-16)\n🍕 Features\n\nadd repo topics (d08173f)\n\n1.25.0-alpha.3 (2023-02-14)\n🐛 Bug Fixes\n\ncorrect user entity lenght (e043912)\n\n1.25.0-alpha.2 (2023-02-10)\n🍕 Features\n\nadd support for capturing repo fullname on onboarding/insight repos (#103) (be5fae7)\n\n1.25.0-alpha.1 (2023-02-02)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\nupdate environment and database connections to new logging model (39bdd16)\n\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\ncorrect diagram database generator inclusion (afde490)\n\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\nremove supabase, code split migrations and diagrams (98980b0)\n\n🐛 Bug Fixes\n\ncorrect missing alpha interests migrations (58540e7)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\nupdate dependencies (5e1cb54)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\nupdate typescript and build packages (6b832e4)\n\n🤖 Build System\n\ncorrect optional api parameters in user creation endpoints (d50b86f)\n\n1.24.0 (2023-02-02)\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.5 (2023-02-01)\n🐛 Bug Fixes\n\nadd extra fields to user data endpoint (83c6888)\n\n1.24.0-beta.4 (2023-02-01)\n🐛 Bug Fixes\n\nadd user profile fields to migrations, endpoints (#92) (c6c07c6)\n\n1.24.0-beta.3 (2023-01-31)\n🐛 Bug Fixes\n\nupdate swagger docs for user profile endpoints (5f9be41)\n\n1.24.0-beta.2 (2023-01-31)\n🍕 Features\n\nadd endpoint to update user email preferences (#90) (8c6884c)\n\n1.24.0-beta.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#87) (9c605d0)\n\n⏩ Reverts\n\nRevert \"feat: add etl supporting repos and users metadata (#87)\" (#88) (0b85d93), closes #87 #88\n\n1.23.0 (2023-01-30)\n1.24.0-alpha.6 (2023-02-01)\n🧑‍💻 Code Refactoring\n\ncompletely remove supabase outside auth connector (6df9486)\n\n1.24.0-alpha.5 (2023-02-01)\n🤖 Build System\n\ncorrect ci diagram generation (475e5dd)\n\n1.24.0-alpha.4 (2023-02-01)\n🧑‍💻 Code Refactoring\n\nmove migrations to digital ocean structure and prepare for pgmigrate (c8dab92)\nremove stray diagrams (f57c5b6)\n\n1.24.0-alpha.3 (2023-01-31)\n🧑‍💻 Code Refactoring\n\nremove supabase, code split migrations and diagrams (98980b0)\n\n🤖 Build System\n\ncorrect diagram database generator inclusion (afde490)\n\n1.24.0-alpha.2 (2023-01-31)\n🍕 Features\n\nupdate environment and database connections to new logging model (39bdd16)\n\n1.24.0-alpha.1 (2023-01-30)\n🍕 Features\n\nadd etl supporting repos and users metadata (#89) (286e864)\n\n1.23.0-beta.1 (2023-01-23)\n🍕 Features\n\nadd additional information to user record (#81) (5e24505)\n\n1.22.0 (2023-01-13)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.2 (2023-01-11)\n🤖 Build System\n\nadd indexer meta fields to repos (e3161ab)\n\n1.22.0-beta.1 (2023-01-09)\n🍕 Features\n\nadd endpoint to find a user by username (#77) (bd905ab)\n\n1.21.1-beta.1 (2023-01-09)\n🤖 Build System\n\nadd full_name to insight repos migrations (0eb10bb)\n\n1.21.0 (2022-12-22)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.21.0-beta.1 (2022-12-21)\n🍕 Features\n\nadd stripe webhook integration for subscriptions (#74) (b9d5a6e)\n\n1.20.0 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.20.0-beta.1 (2022-12-16)\n🍕 Features\n\nadd endpoint for creating checkout session (#72) (2ce16fd)\n\n1.19.0 (2022-11-29)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.19.0-beta.1 (2022-11-22)\n🍕 Features\n\nadd endpoints to update/remove insight page (#68) (df56c4f)\n\n1.18.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.1-beta.1 (2022-11-18)\n🐛 Bug Fixes\n\nuse save operation directly for insights, insight repos (#66) (bd25889)\n\n1.18.0 (2022-11-17)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.2 (2022-11-16)\n🐛 Bug Fixes\n\nadd visibility flag to insight page creation (#64) (2ddb855)\n\n1.18.0-beta.1 (2022-11-15)\n🍕 Features\n\nadd repos when creating an insight page (#63) (1f021a4)\n\n1.17.1 (2022-11-12)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.1-beta.1 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect open sauced member created_at timestamp (89b5329)\n\n1.17.0 (2022-11-11)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.3 (2022-11-10)\n🍕 Features\n\nadd endpoint to retrieve insight page by id (#58) (648dbeb)\n\n1.17.0-beta.2 (2022-11-10)\n🐛 Bug Fixes\n\ncorrect database loading backfill not saving user (7cfc04b)\n\n1.17.0-beta.1 (2022-11-01)\n🍕 Features\n\nadd associating users to repositories to onboarding endpoint (#57) (cda2cb2)\n\n1.16.0 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.16.0-beta.1 (2022-10-28)\n🍕 Features\n\nadd users insights controller (#55) (c4addf6)\n\n1.15.1-beta.1 (2022-10-28)\n🐛 Bug Fixes\n\ncorrect fastify dev dependency (de9cea0)\n\n1.15.0 (2022-10-17)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.2 (2022-10-13)\n🎨 Styles\n\nremove extraneous console.logs (e3d7bd7)\n\n1.15.0-beta.1 (2022-10-13)\n🤖 Build System\n\nimplement minimal pino logger (b991dad)\n\n🍕 Features\n\nimplement http and database logging capabilities (3a662d0), closes #37\n\n🎨 Styles\n\nadd fastify express middleware adapter linting (fc74284)\n\n🧑‍💻 Code Refactoring\n\ncorrect http timestamp logging (3782b21)\ncorrect type dependencies (9895327)\nimprove sql logging and slow query timeout (5385049)\nmake logging beautiful everywhere (99ac2c6)\n\n1.14.0 (2022-10-04)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.2 (2022-10-03)\n🐛 Bug Fixes\n\nincrease paginated response limit to 500 (b174a3f), closes #43\n\n1.14.0-beta.1 (2022-10-03)\n📝 Documentation\n\nmentioned .env file (#42) (a17b835), closes #41\n\n1.13.0 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n📦 @open-sauced/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.12.0 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.12.0-beta.3 (2022-10-03)\n🔁 Continuous Integration\n\ncorrect release workflow garbage collection trigger mechanics (6b157e5)\n\n1.12.0-beta.2 (2022-10-03)\n🤖 Build System\n\nadd ability to switch between servers (f5b6599)\ndefault do swagger documentation (de371dc)\n\n🐛 Bug Fixes\n\ncorrect rate limits (63639b4), closes #36\n\n📝 Documentation\n\nadd better swagger description and release targets (742b073)\n\n1.12.0-beta.1 (2022-09-28)\n🍕 Features\n\nadd ability to retrieve/update waitlist status for a user (aef9df6)\n\n🐛 Bug Fixes\n\nreview feedback fixes (f3808a5)\nuse request exception/responses (fcaddb5)\n\n1.11.0 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.2 (2022-09-27)\n📝 Documentation\n\nadjust the pizzas emoji in readme (f5f2761)\n\n1.11.0-beta.1 (2022-09-27)\n🍕 Features\n\nadd role for insights to session information endpoint (#32) (5699f6a)\n\n1.10.0 (2022-09-16)\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\ncorrect lint errors from writing too much manual stuff (2073883)\n\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\ncorrect repository service order 500 error (e5e2e03)\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\nadd paginated contributions service (d2745ff)\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0 (2022-08-30)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\nimprove local development workflow along vite apps (b9f3798)\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\nadd repo up vote and down vote functionality (16678a7), closes #19\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\nadd submit repo authenticated feature (09c96fe), closes #21\nadd supabase auth session handler and working guards (ed9729a), closes #24\nimplement eslint hot opensauced rules (e0d38ca)\nimplement simple supabase strategy guard (2f966a3)\n\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\nclean up repo controller extra decorators (3282435)\ncode split repository entities (ae43450)\ncorrect stray console.log (b4c9879)\nimplement new eslint style changes (c8115b6)\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect counting of many to many tables (7249714)\ncorrect date type meta tags openapi types (860fff3)\ncorrect remaining dtos and auth controller return values (1bbeaf6)\ncorrect repo authenticated services return types (e42223f)\ncorrect repo contributions count (8952f19)\ncorrect repo listing database relationship names (f29f5f2)\nmake order work for repo listing (69b2067)\nremove more relationship entities from openapi response schemas (d315ea4)\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.19 (2022-09-16)\n🍕 Features\n\nadded is_onboarded boolean to migration for public.users table (1edaeda)\n\n1.9.0-beta.18 (2022-09-16)\n🍕 Features\n\nadd onboarding information to session endpoint and endpoint for completing onboarding (155e99e)\n\n🐛 Bug Fixes\n\nadd check/insert public user to session endpoint (03bf95b)\n\n1.9.0-beta.17 (2022-09-06)\n🤖 Build System\n\nupdate dependencies (4c3782f)\n\n1.9.0-beta.16 (2022-09-06)\n🍕 Features\n\nadd paginated contributions service (d2745ff)\n\n🧑‍💻 Code Refactoring\n\ncorrect controller function naming (0046b05)\nremove non-meta hidden properties from typeorm entity display (4601be2)\n\n🐛 Bug Fixes\n\ncorrectly hide api hidden model properties from typeorm select (8810e03)\nexclude generated temporary view from database visualisation (b457783)\n\n📝 Documentation\n\nimprove readme for first time users (f8c9324)\n\n🎨 Styles\n\ncorrect lint errors from writing too much manual stuff (2073883)\n\n1.9.0-beta.15 (2022-09-01)\n🐛 Bug Fixes\n\ncorrect repository service order 500 error (e5e2e03)\n\n🎨 Styles\n\ncorrect lint errors (4b264d5)\n\n1.9.0-beta.14 (2022-08-30)\n📝 Documentation\n\nupdate repo api model properties and hide soft delete tags for all entities (2bdec65)\n\n🧑‍💻 Code Refactoring\n\nadd Contribution api model properties (a08abfd)\nadd DbRepoToUserStargazers api model properties (247e0ba)\nadd DbRepoToUserStars api model properties (14b6a44)\nadd DbRepoToUserSubmissions api model properties (dbc66f3)\nadd DbRepoToUserVotes api model properties (d051987)\nadd User api model properties (618225f)\n\n🐛 Bug Fixes\n\ncorrect remaining dtos and auth controller return values (1bbeaf6)\n\n1.9.0-beta.13 (2022-08-29)\n🐛 Bug Fixes\n\ncorrect repo listing database relationship names (f29f5f2)\n\n🧑‍💻 Code Refactoring\n\nclean up repo controller extra decorators (3282435)\n\n🍕 Features\n\nadd list authenticated user stargazed repos (2a8d198)\nadd list authenticated user starred repos (f5f942f)\nadd list authenticated user submitted repos (334268d)\nadd list authenticated user voted repos (f96a793)\n\n1.9.0-beta.12 (2022-08-29)\n🤖 Build System\n\nupdate dependencies to latest non breaking versions (59dd7bf)\n\n🐛 Bug Fixes\n\ncorrect repo authenticated services return types (e42223f)\n\n🍕 Features\n\nadd is_accepted admin managed field to repo user submissions (b0169e7)\nadd submit repo authenticated feature (09c96fe), closes #21\nimplement eslint hot opensauced rules (e0d38ca)\n\n🧑‍💻 Code Refactoring\n\nimplement new eslint style changes (c8115b6)\n\n1.9.0-beta.11 (2022-08-28)\n🍕 Features\n\nadd star repo authenticated feature (e392288), closes #20\nadd stargaze repo authenticated feature (f8d41f1), closes #22\n\n🐛 Bug Fixes\n\ncorrect additional relation entities appearing in openapi schema (f4570c3)\ncorrect date type meta tags openapi types (860fff3)\nremove more relationship entities from openapi response schemas (d315ea4)\n\n🧑‍💻 Code Refactoring\n\nrename Contribution entity into DbContribution (3774b36)\nrename enum (b8b22da)\nrename Repo entity into DbRepo (f05c29c)\nrename RepoToUserStargazers entity into DbRepoToUserStargazers (867d740)\nrename RepoToUserStars entity into DbRepoToUserStars (d08b3ff)\nrename RepoToUserSubmissions entity into DbRepoToUserSubmissions (9484df4)\nrename RepoToUserVotes entity into DbRepoToUserVotes (61ac1e7)\nrename User entity into DbUser (04082d7)\n\n1.9.0-beta.10 (2022-08-26)\n🐛 Bug Fixes\n\nundo rogue controller route name change (6a4810f)\n\n1.9.0-beta.9 (2022-08-25)\n🐛 Bug Fixes\n\ncorrect repo contributions count (8952f19)\n\n1.9.0-beta.8 (2022-08-25)\n🐛 Bug Fixes\n\nmake order work for repo listing (69b2067)\n\n🎨 Styles\n\ncorrect lint errors from hasty push (fe20c2d)\n\n1.9.0-beta.7 (2022-08-25)\n📝 Documentation\n\nadd powered by digital ocean readme badge and referal link (5925b74)\n\n1.9.0-beta.6 (2022-08-25)\n🧑‍💻 Code Refactoring\n\ncode split repository entities (ae43450)\n\n🍕 Features\n\nadd repo up vote and down vote functionality (16678a7), closes #19\n\n1.9.0-beta.5 (2022-08-19)\n🔁 Continuous Integration\n\nattempt to push docr only on successful release (957b86e)\n\n1.9.0-beta.4 (2022-08-19)\n🔁 Continuous Integration\n\nimprove local development workflow along vite apps (b9f3798)\n\n1.9.0-beta.3 (2022-08-19)\n🐛 Bug Fixes\n\ncorrect counting of many to many tables (7249714)\n\n🧑‍💻 Code Refactoring\n\ncorrect stray console.log (b4c9879)\n\n1.9.0-beta.2 (2022-08-19)\n🔁 Continuous Integration\n\nonly deploy documentation on main branch (fad79b1), closes #14\n\n🍕 Features\n\nadd supabase auth session handler and working guards (ed9729a), closes #24\n\n1.9.0-beta.1 (2022-08-18)\n🍕 Features\n\nimplement simple supabase strategy guard (2f966a3)\n\n1.8.2 (2022-08-12)\n🐛 Bug Fixes\n\ncorrect ci release url docs (f0304d4)\n\n1.8.1 (2022-08-12)\n🔁 Continuous Integration\n\nimprove release urls (dd5e668)\n\n1.8.0 (2022-08-12)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\nupdate readme badges (17c54b9)\n\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\nadd get repository by id and full name (4552c66)\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.5 (2022-08-06)\n🍕 Features\n\nadd better swagger document links (eba258a), closes #18\n\n🤖 Build System\n\nupdate dependencies (62b3eea)\n\n1.8.0-beta.4 (2022-08-06)\n📝 Documentation\n\nadd deployment links and apidocs diagrams (d77ea52)\n\n1.8.0-beta.3 (2022-08-05)\n🍕 Features\n\nadd get repository by id and full name (4552c66)\n\n1.8.0-beta.2 (2022-08-05)\n🍕 Features\n\nadd proper metadata fields to entities and typeorm soft delete (#13) (af531e4), closes #10\n\n1.8.0-beta.1 (2022-07-30)\n📝 Documentation\n\nupdate readme badges (17c54b9)\n\n1.7.12 (2022-07-30)\n🐛 Bug Fixes\n\npush all tags to docr (a9e1df6)\n\n1.7.11 (2022-07-30)\n🔁 Continuous Integration\n\npush to digital ocean container registry (cd8f21d)\n\n1.7.10 (2022-07-30)\n🔁 Continuous Integration\n\ncorrect the digital ocean tagging (673dca9)\n\n1.7.9 (2022-07-30)\n✅ Tests\n\ncheck release job outputs (31e4d60)\n\n1.7.8 (2022-07-29)\n🔁 Continuous Integration\n\ncorrect environment variables (6d23c24)\n\n1.7.7 (2022-07-29)\n✅ Tests\n\nprint out proper pull request target env variables (20880c7)\n\n1.7.6 (2022-07-29)\n🔁 Continuous Integration\n\necho github context (7adfb6b)\n\n1.7.5 (2022-07-29)\n🔁 Continuous Integration\n\nprovide variable as ENV (b57f47b)\n\n1.7.4 (2022-07-29)\n🔁 Continuous Integration\n\nchange pull request event target (20bc1e7)\n\n1.7.3 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect digital ocean docker tag based on target (b1a67da)\n\n1.7.2 (2022-07-29)\n🐛 Bug Fixes\n\ncorrect static domain and release clean up workflow (a229a3b)\nupdate dependencies and list docr tags (79bf61d)\n\n🔁 Continuous Integration\n\nadd docr push dry run (5eddeb1)\nadd release workflow concurrency for demo purposes (63d6a92)\nextend digital ocean temporary token (d0d5ca5)\ntest bash variable environment (e1fe498)\n\n1.7.1 (2022-07-27)\n🔁 Continuous Integration\n\ndeploy developer mkdocs to github pages test (8837b2a)\n\n1.7.0 (2022-07-27)\n📝 Documentation\n\nchange github pages deploy to take tech mkdocs instead of api (bc3a37d)\n\n1.6.17 (2022-07-24)\n🔁 Continuous Integration\n\nadd temporary debug logging (ba8dfbb)\n\n1.6.16 (2022-07-23)\n🔁 Continuous Integration\n\nproperly copy contents from mounted container volume (c013b70)\n\n1.6.15 (2022-07-23)\n🔁 Continuous Integration\n\ncreate new container from release (b1eda28)\n\n1.6.14 (2022-07-23)\n🔁 Continuous Integration\n\ntest file is generated properly (c127cea)\n\n🤖 Build System\n\nattempt docker inspection again (2c0b3d1)\n\n1.6.13 (2022-07-23)\n🔁 Continuous Integration\n\ntest proper container name exposing (cc46460)\n\n1.6.12 (2022-07-23)\n🔁 Continuous Integration\n\ntest local swagger spec (7e9b8a4)\n\n1.6.11 (2022-07-21)\n🔁 Continuous Integration\n\ntest getting docker process list output (f5385b3)\n\n1.6.10 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to get value from running container (911df68)\ntest accessing running container by re-creating (77c734c)\n\n1.6.9 (2022-07-21)\n🔁 Continuous Integration\n\nget container name from runner context (94ba4e1)\n\n1.6.8 (2022-07-21)\n🔁 Continuous Integration\n\nattempt to assign docker service name to running container (fe4b9e9)\n\n1.6.7 (2022-07-21)\n✅ Tests\n\nmount docker service and volumes (0848443)\n\n1.6.6 (2022-07-21)\n✅ Tests\n\nload docker container from artifact (b7c3395)\n\n1.6.5 (2022-07-21)\n🐛 Bug Fixes\n\ncorrect docker local creation (cd306f8)\n\n1.6.4 (2022-07-21)\n✅ Tests\n\nload docker container in flight environment (e145e2d)\n\n1.6.3 (2022-07-20)\n🤖 Build System\n\nupdate deployment and add simple repo submission structure (33fea7e)\n\n1.6.2 (2022-07-19)\n🤖 Build System\n\nrevert to production release container (8aee8e5)\n\n1.6.1 (2022-07-19)\n🤖 Build System\n\nimprove swagger generation (22d3cc1)\n\n🐛 Bug Fixes\n\ncorrect workflow yaml comments (7fe63aa)\n\n1.6.0 (2022-07-19)\n🎨 Styles\n\nimplement correct eslint rules for immediate scoping (bd6d621), closes #1\n\n🍕 Features\n\nupdate dependencies and nest to stable new version (c24937f)\n\n🔁 Continuous Integration\n\nadd docker build and static swagger docs jobs (81e8bbc)\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n🤖 Build System\n\nadd better eslint baseline configuration (3918a78)\nadd minimal eslint configuration (a0db0aa)\nadd minor deployment improvements and github pages adjustments (cb83f9d)\nimplement prettier rules in typescript eslint (166050d)\n\n🐛 Bug Fixes\n\ncorrect release workflow artifact strategy (b5b6ac5)\ncorrect rogue workflow artifact (61b67d5)\n\n1.5.1 (2022-07-13)\n🔁 Continuous Integration\n\ndockerfile: created a script to deploy (#7) (5f79c49)\n\n📦 0-vortex/api.opensauced.pizza changelog\n\n\n\nAll notable changes to this project will be documented in this file\n\n1.5.0 (2022-06-21)\n🍕 Features\n\nimplement proper starsCount (fdc11ea)\nimplement proper votesCount (607cf5d)\n\n1.4.0 (2022-06-17)\n🍕 Features\n\nadd minimal pagination decorator (ac31556)\n\n1.3.0 (2022-06-10)\n🍕 Features\n\nadd abstract pagination component (630f3b5)\nadd repository relations and limit select (b4d3785)\n\n1.2.0 (2022-06-09)\n🍕 Features\n\nattach user relationship to get repos (e663170)\n\n1.1.0 (2022-06-07)\n🍕 Features\n\nadd basic tld entities (273f337)\n\n1.0.2 (2022-06-05)\n🤖 Build System\n\nadd supabase migration system (34d521d)\n\n1.0.1 (2022-06-05)\n✅ Tests\n\nverify database diagrams generation (73d1c74)\n\n1.0.0 (2022-06-05)\n🍕 Features\n\nadjust health checks endpoints (cb9206d)\ninitial commit (5e7c6c7)\n\n🐛 Bug Fixes\n\ncorrect npm scripts, workflow node versiond and update deps (2c0b15f)\nupdate nest typeorm integration and correct db status (58bf922)\n\n🔥 Performance Improvements\n\nremove minor version engines requirements (7db9008)\n\n✅ Tests\n\nexplain current test configuration and unblock pipelines (272c09a)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dtos/supabase-auth-response.dto.ts\n            \n            class\n            SupabaseAuthDto\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/auth/dtos/user-onboarding.dto.ts\n            \n            class\n            UserOnboardingDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/supabase.guard.ts\n            \n            injectable\n            SupabaseGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.strategy.ts\n            \n            injectable\n            SupabaseStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/supabase.user.decorator.ts\n            \n            variable\n            UserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/api-paginated-response.decorator.ts\n            \n            variable\n            ApiPaginatedResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/filter-options.dto.ts\n            \n            class\n            FilterOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta-parameters.dto.ts\n            \n            interface\n            PageMetaParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/repo-filter.service.ts\n            \n            injectable\n            RepoFilterService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/middleware/database-logger.middleware.ts\n            \n            class\n            DatabaseLoggerMiddleware\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/common/middleware/http-logger.middleware.ts\n            \n            injectable\n            HttpLoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            injectable\n            PagerService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/services/pager.service.ts\n            \n            interface\n            PaginationInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/util/cli-duration.ts\n            \n            variable\n            cliDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/api.config.ts\n            \n            variable\n            ApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-api.config.ts\n            \n            variable\n            DbApiConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/db-logging.config.ts\n            \n            variable\n            DbLoggingConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            EndpointConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/endpoint.config.ts\n            \n            variable\n            getDomain\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/openai.config.ts\n            \n            variable\n            OpenAIConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/stripe.config.ts\n            \n            variable\n            StripeConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.entity.ts\n            \n            entity\n            DbContribution\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/contribution/contribution.service.ts\n            \n            injectable\n            ContributionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contribution/dtos/contribution-page-options.dto.ts\n            \n            class\n            ContributionPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/contribution/repo-contributions.controller.ts\n            \n            controller\n            RepoContributionsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contributor/contributor-insights.controller.ts\n            \n            controller\n            ContributorInsightsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/contributor/contributor.controller.ts\n            \n            controller\n            ContributorController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/customer/customer.entity.ts\n            \n            entity\n            DbCustomer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/emoji/emoji.controller.ts\n            \n            controller\n            EmojiController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/emoji/emoji.service.ts\n            \n            injectable\n            EmojiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/emoji/entities/emoji.entity.ts\n            \n            entity\n            DbEmoji\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/dto/create-endorsement.dto.ts\n            \n            class\n            CreateEndorsementDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/endorsement/dto/update-endorsement.dto.ts\n            \n            class\n            UpdateEndorsementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement-token.guard.ts\n            \n            guard\n            EndorsementTokenGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.controller.ts\n            \n            controller\n            EndorsementController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/endorsement/endorsement.service.ts\n            \n            injectable\n            EndorsementService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/endorsement/entities/endorsement.entity.ts\n            \n            entity\n            DbEndorsement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            DbUserHighlightReactionResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/highlight/dtos/highlight-options.dto.ts\n            \n            class\n            HighlightOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/highlight/entities/user-highlight-repo.entity.ts\n            \n            class\n            DbUserHighlightRepo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/highlight/highlight.controller.ts\n            \n            controller\n            HighlightController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight-member.dto.ts\n            \n            class\n            CreateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/create-insight.dto.ts\n            \n            class\n            CreateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-options.dto.ts\n            \n            class\n            InsightOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/dtos/insight-page-options.dto.ts\n            \n            class\n            InsightPageOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight-member.dto.ts\n            \n            class\n            UpdateInsightMemberDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/insight/dtos/update-insight.dto.ts\n            \n            class\n            UpdateInsightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-member.entity.ts\n            \n            entity\n            DbInsightMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight-repo.entity.ts\n            \n            entity\n            DbInsightRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/entities/insight.entity.ts\n            \n            entity\n            DbInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/insight/insight-member.service.ts\n            \n            injectable\n            InsightMemberService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/insight/insight-repo.service.ts\n            \n            injectable\n            InsightRepoService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/insight/insight.controller.ts\n            \n            controller\n            InsightController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/insight/insights.service.ts\n            \n            injectable\n            InsightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/insight/user-insight-member.controller.ts\n            \n            controller\n            UserInsightMemberController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/insight/user-insight.controller.ts\n            \n            controller\n            UserInsightsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/custom-logger.ts\n            \n            injectable\n            CustomLogger\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/log/dtos/create-log.dto.ts\n            \n            class\n            CreateLogDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/log/log.entity.ts\n            \n            entity\n            DbLog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/log/log.service.ts\n            \n            injectable\n            LogService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            injectable\n            OpenAiService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/open-ai/open-ai.service.ts\n            \n            interface\n            ChatResponse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.controller.ts\n            \n            controller\n            CodeExplanationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-explanation.service.ts\n            \n            injectable\n            CodeExplanationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.controller.ts\n            \n            controller\n            CodeRefactorSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/code-refactor-suggestion.service.ts\n            \n            injectable\n            CodeRefactorSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test-suggestion.service.ts\n            \n            injectable\n            CodeTestSuggestionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/code-test.suggestion.controller.ts\n            \n            controller\n            CodeTestSuggestionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-explanation.dto.ts\n            \n            class\n            GenerateCodeExplanationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-refactor-suggestion.dto.ts\n            \n            class\n            GenerateCodeRefactorSuggestionDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-code-test-suggestion.dto.ts\n            \n            class\n            GenerateCodeTestSuggestionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/create-pull-request-description.dto.ts\n            \n            class\n            GeneratePullRequestDescriptionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-insights.dto.ts\n            \n            class\n            PullRequestContributorInsightsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor-options.dto.ts\n            \n            class\n            PullRequestContributorOptionsDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-contributor.dto.ts\n            \n            class\n            DbPullRequestContributor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pull-requests/dtos/pull-request-page-options.dto.ts\n            \n            class\n            PullRequestPageOptionsDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request-insight.entity.ts\n            \n            entity\n            DbPRInsight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/entities/pull-request.entity.ts\n            \n            entity\n            DbPullRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.controller.ts\n            \n            controller\n            PullRequestDescriptionController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-description.service.ts\n            \n            injectable\n            PullRequestDescriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request-insights.service.ts\n            \n            injectable\n            PullRequestInsightsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.controller.ts\n            \n            controller\n            PullRequestController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pull-requests/pull-request.service.ts\n            \n            injectable\n            PullRequestService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-info.dto.ts\n            \n            class\n            RepoInfo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-page-options.dto.ts\n            \n            class\n            RepoPageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/repo/dtos/repo-search-options.dto.ts\n            \n            class\n            RepoSearchOptionsDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.entity.ts\n            \n            entity\n            DbRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stargazers.entity.ts\n            \n            entity\n            DbRepoToUserStargazers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.stars.entity.ts\n            \n            entity\n            DbRepoToUserStars\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.submissions.entity.ts\n            \n            entity\n            DbRepoToUserSubmissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/entities/repo.to.user.votes.entity.ts\n            \n            entity\n            DbRepoToUserVotes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repo/repo.controller.ts\n            \n            controller\n            RepoController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/repo/repo.service.ts\n            \n            injectable\n            RepoService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/star/repo-star.controller.ts\n            \n            controller\n            RepoStarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/star/star.service.ts\n            \n            injectable\n            StarService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stargaze/repo-stargaze.controller.ts\n            \n            controller\n            RepoStargazeController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/stargaze/stargaze.service.ts\n            \n            injectable\n            StargazeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            controller\n            StripeWebhookController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-webhook/stripe-webhook.controller.ts\n            \n            variable\n            relevantEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-webhook/utils.ts\n            \n            variable\n            toDateTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/submit/repo-submit.controller.ts\n            \n            controller\n            RepoSubmitController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/submit/submit.service.ts\n            \n            injectable\n            SubmitService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.dto.ts\n            \n            entity\n            DbSubscription\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/subscription/stripe-subscription.service.ts\n            \n            injectable\n            StripeSubscriptionService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repo-options.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            UserRepoOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user-repo/dtos/user-repos.dto.ts\n            \n            class\n            VotedRepoDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user-repo/user-repo.entity.ts\n            \n            entity\n            DbUserRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user-repo/user-repos.service.ts\n            \n            injectable\n            UserReposService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-collaboration.dto.ts\n            \n            class\n            CreateUserCollaborationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/create-user-highlight.dto.ts\n            \n            class\n            CreateUserHighlightDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/dtos/top-users.dto.ts\n            \n            class\n            TopUsersDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-collaboration.dto.ts\n            \n            class\n            UpdateUserCollaborationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-email-prefs.dto.ts\n            \n            class\n            UpdateUserEmailPreferencesDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user-interests.dto.ts\n            \n            class\n            UpdateUserProfileInterestsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/entities/top-users.entity.ts\n            \n            class\n            DbTopUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/entities/user-collaboration.entity.ts\n            \n            entity\n            DbUserCollaboration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-follows.entity.ts\n            \n            entity\n            DbUserToUserFollows\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight-reaction.entity.ts\n            \n            entity\n            DbUserHighlightReaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-highlight.entity.ts\n            \n            entity\n            DbUserHighlight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.constants.ts\n            \n            variable\n            userNotificationTypes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-notification.entity.ts\n            \n            entity\n            DbUserNotification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user-top-repo.entity.ts\n            \n            entity\n            DbUserTopRepo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.controller.ts\n            \n            controller\n            UserCollaborationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user-collaboration.service.ts\n            \n            injectable\n            UserCollaborationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-endorsement.controller.ts\n            \n            controller\n            UserEndorsementController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user-follow.controller.ts\n            \n            controller\n            UserFollowsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user-follow.service.ts\n            \n            injectable\n            UserFollowService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user-highlight.controller.ts\n            \n            controller\n            UserHighlightsController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user/user-highlights.service.ts\n            \n            injectable\n            UserHighlightsService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/user/user-notifcation.service.ts\n            \n            injectable\n            UserNotificationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/user-notification.controller.ts\n            \n            controller\n            UserNotificationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user-recommendation.controller.ts\n            \n            controller\n            UserRecommendationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            DbUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/vote/repo-vote.controller.ts\n            \n            controller\n            RepoVoteController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/vote/vote.service.ts\n            \n            injectable\n            VoteService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ContributionOrderFieldsEnum   (src/.../contribution-page-options.dto.ts)\n                        \n                        \n                            InsightFilterFieldsEnum   (src/.../insight-options.dto.ts)\n                        \n                        \n                            OrderDirectionEnum   (src/.../order-direction.constant.ts)\n                        \n                        \n                            PullRequestOrderFieldsEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            PullRequestStatusEnum   (src/.../pull-request-page-options.dto.ts)\n                        \n                        \n                            RepoFilterFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            RepoOrderFieldsEnum   (src/.../repo-page-options.dto.ts)\n                        \n                        \n                            UserNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/contribution/dtos/contribution-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ContributionOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 last_merged_at\n                            \n                        \n                        \n                            \n                                Value : last_merged_at\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 contributor\n                            \n                        \n                        \n                            \n                                Value : contributor\n                            \n                        \n            \n        \n\n    src/insight/dtos/insight-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        InsightFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n\n    src/common/constants/order-direction.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderDirectionEnum\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/pull-requests/dtos/pull-request-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        PullRequestOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 closed_at\n                            \n                        \n                        \n                            \n                                Value : closed_at\n                            \n                        \n                        \n                            \n                                 merged_at\n                            \n                        \n                        \n                            \n                                Value : merged_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PullRequestStatusEnum\n                    \n                \n                        \n                            \n                                 open\n                            \n                        \n                        \n                            \n                                Value : open\n                            \n                        \n                        \n                            \n                                 closed\n                            \n                        \n                        \n                            \n                                Value : closed\n                            \n                        \n            \n        \n\n    src/repo/dtos/repo-page-options.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        RepoFilterFieldsEnum\n                    \n                \n                        \n                            \n                                 Recent\n                            \n                        \n                        \n                            \n                                Value : recent\n                            \n                        \n                        \n                            \n                                 Top100\n                            \n                        \n                        \n                            \n                                Value : top-100-repos\n                            \n                        \n                        \n                            \n                                 MinimumContributors\n                            \n                        \n                        \n                            \n                                Value : minimum-5-contributors\n                            \n                        \n                        \n                            \n                                 MostActive\n                            \n                        \n                        \n                            \n                                Value : most-active\n                            \n                        \n                        \n                            \n                                 MostSpammed\n                            \n                        \n                        \n                            \n                                Value : most-spammed\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RepoOrderFieldsEnum\n                    \n                \n                        \n                            \n                                 issues\n                            \n                        \n                        \n                            \n                                Value : issues\n                            \n                        \n                        \n                            \n                                 stars\n                            \n                        \n                        \n                            \n                                Value : stars\n                            \n                        \n                        \n                            \n                                 watchers\n                            \n                        \n                        \n                            \n                                Value : watchers\n                            \n                        \n                        \n                            \n                                 subscribers\n                            \n                        \n                        \n                            \n                                Value : subscribers\n                            \n                        \n                        \n                            \n                                 created_at\n                            \n                        \n                        \n                            \n                                Value : created_at\n                            \n                        \n                        \n                            \n                                 updated_at\n                            \n                        \n                        \n                            \n                                Value : updated_at\n                            \n                        \n                        \n                            \n                                 name\n                            \n                        \n                        \n                            \n                                Value : name\n                            \n                        \n                        \n                            \n                                 contributionsCount\n                            \n                        \n                        \n                            \n                                Value : contributionsCount\n                            \n                        \n                        \n                            \n                                 votesCount\n                            \n                        \n                        \n                            \n                                Value : votesCount\n                            \n                        \n                        \n                            \n                                 submissionsCount\n                            \n                        \n                        \n                            \n                                Value : submissionsCount\n                            \n                        \n                        \n                            \n                                 stargazersCount\n                            \n                        \n                        \n                            \n                                Value : stargazersCount\n                            \n                        \n                        \n                            \n                                 starsCount\n                            \n                        \n                        \n                            \n                                Value : starsCount\n                            \n                        \n            \n        \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n            \n                \n                    \n                        \n                        UserNotificationTypes\n                    \n                \n                        \n                            \n                                 Welcome\n                            \n                        \n                        \n                            \n                                Value : welcome\n                            \n                        \n                        \n                            \n                                 HighlightReaction\n                            \n                        \n                        \n                            \n                                Value : highlight_reaction\n                            \n                        \n                        \n                            \n                                 Follow\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n  🍕 Open Sauced Insights API 🍕\n  The path to your next Open Source contribution\n  \n  \n  \n\n\n\n  \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n🚀 Live release environments\n\napi.opensauced.pizza\nbeta.api.opensauced.pizza\n\n📖 Prerequisites\nIn order to run the project we need the following software binaries installed on our development machines:\n\nnode>=16.7.0\nnpm>=8.0.0\ndocker>=20.10.12\n\n🖥️ Local development\n📡 Setting Up Your Supabase Instance\nBefore setting up your local PostgreSQL database, a Supabase instance should be created. To do this, follow these steps:\n1. Create a new Supabase project: Visit Supabase and create a new project.\n2. Set Environment Variables in .env file: Once your project is created, Supabase will provide a URL and an API key. Set these in your project's .env file:\nSUPABASE_URL=your_supabase_url\nSUPABASE_API_KEY=your_supabase_api_key\nSUPABASE_JWT_SECRET=your_supabase_jwt_secret\nAPI_DOMAIN=your_api_domainReplace your_supabase_url, your_supabase_api_key, your_supabase_jwt_secret, and your_api_domain with the actual values provided by Supabase and your project's settings.\n🗄️ Setting Up A PostgreSQL Database Locally\nA PostgreSQL Docker container has been set up to facilitate local development. After navigating to the dev/ directory, this container can be set up as follows:\n1. Obtain SSL Certificates:For secure SSL communication, you need a pair of SSL certificates: server.crt and server.key. You can generate self-signed certificates by using OpenSSL:\nopenssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -nodes -subj \"/CN=localhost\"Please note that this generates self-signed certificates which should only be used for local development.\n2.Build the Docker image:\ndocker build -t my_postgres_image -f Dockerfile.local-postgres .This command will build the Docker image using the Dockerfile in the current directory. The previously generated SSL certificates will need to be in the same directory as the Dockerfile.\n3.Run the Docker container:\ndocker run --name my_postgres_container -p 25060:5432 -d my_postgres_image:latestThis command will start a new Docker container named my_postgres_container, mapping port 25060 on your local machine to port 5432 on the Docker container.\n🛠️ Installation\nTo install the application:\nnpm ciTo start a local copy of the app on port 3001:\nnpm run start:dev🧪 Test\nFor running the test suite, use the following command. Since the tests run in watch mode by default, some users may encounter errors about too many files being open. In this case, it may be beneficial to install watchman.\nnpm testYou can request a coverage report by running the following command:\nnpm run test:coverageFor writing tests, the rule is move business or service logic to the lib folder and write unit tests. Logic that needs to be in a React component, then leverage tools like Cypress or Vitest mocking to write tests.\n📦 Docker builds\nA development preview can also be run from docker:\ndocker build -t api.opensauced.pizza .\ndocker run -p 8080:3001 api.opensauced.pizzaAlternatively you can pull the production container and skip all builds:\ndocker run -dit -p 8080:3001 ghcr.io/open-sauced/api.opensauced.pizza🎨 Code linting\nTo check the code and styles quality, use the following command:\nnpm run lintThis will also display during development, but not break on errors.\nTo fix the linting errors, use the following command:\nnpm run formatIt is advised to run this command before committing or opening a pull request.\n📕 Types\nWe have a couple of scripts to check and adjust missing types.\nIn order to dry run what types would be added to package.json:\nnpm run types:auto-checkIn order to add any missing types to package.json:\nnpm run types:auto-add🚀 Production deployment\nA production deployment is a complete build of the project, including the build of the static assets.\nnpm run build🔑 Database structure\nClick the image to see the schema diagram full documentation.\n\n🤝 Contributing\nWe encourage you to contribute to Open Sauced! Please check out the Contributing guide for guidelines about how to proceed.\n\n\n🍕 Community\nGot Questions? Join the conversation in our Discord.Find Open Sauced videos and release overviews on our YouTube Channel.\n🎦 Repository Visualization\nBelow is visual representation of our code repository. It is generated by Octo Repo Visualizer.\nThis visualization is being updated on release to our default branch by our release workflow.\n\n\n⚖️ LICENSE\nMIT © Open Sauced\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Open Sauced\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiServicesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ContributorModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CustomerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmojiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EndorsementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HighlightModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InsightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenAiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PullRequestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoFilterModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RepoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StargazeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeSubscriptionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeWebHookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubmitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserReposModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiServicesModule\n\n\n\ncluster_ApiServicesModule_exports\n\n\n\ncluster_ApiServicesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ContributionModule\n\n\n\ncluster_ContributionModule_exports\n\n\n\ncluster_ContributionModule_providers\n\n\n\ncluster_CustomerModule\n\n\n\ncluster_CustomerModule_exports\n\n\n\ncluster_CustomerModule_providers\n\n\n\ncluster_EmojiModule\n\n\n\ncluster_EmojiModule_providers\n\n\n\ncluster_EndorsementModule\n\n\n\ncluster_EndorsementModule_exports\n\n\n\ncluster_EndorsementModule_providers\n\n\n\ncluster_InsightsModule\n\n\n\ncluster_InsightsModule_exports\n\n\n\ncluster_InsightsModule_providers\n\n\n\ncluster_LogModule\n\n\n\ncluster_LogModule_exports\n\n\n\ncluster_LogModule_providers\n\n\n\ncluster_OpenAiModule\n\n\n\ncluster_OpenAiModule_exports\n\n\n\ncluster_OpenAiModule_providers\n\n\n\ncluster_PullRequestModule\n\n\n\ncluster_PullRequestModule_imports\n\n\n\ncluster_PullRequestModule_exports\n\n\n\ncluster_PullRequestModule_providers\n\n\n\ncluster_RepoFilterModule\n\n\n\ncluster_RepoFilterModule_exports\n\n\n\ncluster_RepoFilterModule_providers\n\n\n\ncluster_RepoModule\n\n\n\ncluster_RepoModule_exports\n\n\n\ncluster_RepoModule_providers\n\n\n\ncluster_StargazeModule\n\n\n\ncluster_StargazeModule_exports\n\n\n\ncluster_StargazeModule_providers\n\n\n\ncluster_StarModule\n\n\n\ncluster_StarModule_exports\n\n\n\ncluster_StarModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_exports\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeSubscriptionModule\n\n\n\ncluster_StripeSubscriptionModule_exports\n\n\n\ncluster_StripeSubscriptionModule_providers\n\n\n\ncluster_StripeWebHookModule\n\n\n\ncluster_StripeWebHookModule_exports\n\n\n\ncluster_SubmitModule\n\n\n\ncluster_SubmitModule_exports\n\n\n\ncluster_SubmitModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserReposModule\n\n\n\ncluster_UserReposModule_exports\n\n\n\ncluster_UserReposModule_providers\n\n\n\ncluster_VoteModule\n\n\n\ncluster_VoteModule_exports\n\n\n\ncluster_VoteModule_providers\n\n\n\n\nPagerService \n\nPagerService \n\n\n\nApiServicesModule\n\nApiServicesModule\n\nPagerService  -->\n\nApiServicesModule->PagerService \n\n\n\n\n\nEndorsementModule\n\nEndorsementModule\n\nEndorsementModule -->\n\nApiServicesModule->EndorsementModule\n\n\n\n\n\nInsightsModule\n\nInsightsModule\n\nInsightsModule -->\n\nApiServicesModule->InsightsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nApiServicesModule->UserModule\n\n\n\n\n\nUserReposModule\n\nUserReposModule\n\nUserReposModule -->\n\nApiServicesModule->UserReposModule\n\n\n\n\n\nPagerService\n\nPagerService\n\nApiServicesModule -->\n\nPagerService->ApiServicesModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nEndorsementModule -->\n\nAuthModule->EndorsementModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nSupabaseGuard \n\nSupabaseGuard \n\nSupabaseGuard  -->\n\nAuthModule->SupabaseGuard \n\n\n\n\n\nSupabaseStrategy \n\nSupabaseStrategy \n\nSupabaseStrategy  -->\n\nAuthModule->SupabaseStrategy \n\n\n\n\n\nContributionModule\n\nContributionModule\n\nAppModule -->\n\nContributionModule->AppModule\n\n\n\n\n\nContributionService \n\nContributionService \n\nContributionService  -->\n\nContributionModule->ContributionService \n\n\n\n\n\nContributorModule\n\nContributorModule\n\nAppModule -->\n\nContributorModule->AppModule\n\n\n\n\n\nCustomerModule\n\nCustomerModule\n\nAuthModule -->\n\nCustomerModule->AuthModule\n\n\n\n\n\nStripeWebHookModule\n\nStripeWebHookModule\n\nStripeWebHookModule -->\n\nCustomerModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nCustomerModule->AppModule\n\n\n\n\n\nCustomerService \n\nCustomerService \n\nCustomerService  -->\n\nCustomerModule->CustomerService \n\n\n\n\n\nEmojiModule\n\nEmojiModule\n\nAppModule -->\n\nEmojiModule->AppModule\n\n\n\nAppModule -->\n\nEndorsementModule->AppModule\n\n\n\n\n\nEndorsementService \n\nEndorsementService \n\nEndorsementService  -->\n\nEndorsementModule->EndorsementService \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nHighlightModule\n\nHighlightModule\n\nAppModule -->\n\nHighlightModule->AppModule\n\n\n\nAppModule -->\n\nInsightsModule->AppModule\n\n\n\n\n\nInsightRepoService \n\nInsightRepoService \n\nInsightRepoService  -->\n\nInsightsModule->InsightRepoService \n\n\n\n\n\nInsightsService \n\nInsightsService \n\nInsightsService  -->\n\nInsightsModule->InsightsService \n\n\n\n\n\nOpenAiModule\n\nOpenAiModule\n\n\n\nPullRequestModule\n\nPullRequestModule\n\nPullRequestModule -->\n\nOpenAiModule->PullRequestModule\n\n\n\nAppModule -->\n\nOpenAiModule->AppModule\n\n\n\n\n\nOpenAiService \n\nOpenAiService \n\nOpenAiService  -->\n\nOpenAiModule->OpenAiService \n\n\n\nContributorModule -->\n\nPullRequestModule->ContributorModule\n\n\n\nUserModule -->\n\nPullRequestModule->UserModule\n\n\n\nAppModule -->\n\nPullRequestModule->AppModule\n\n\n\n\n\nPullRequestService \n\nPullRequestService \n\nPullRequestService  -->\n\nPullRequestModule->PullRequestService \n\n\n\n\n\nRepoModule\n\nRepoModule\n\nContributionModule -->\n\nRepoModule->ContributionModule\n\n\n\n\n\nStarModule\n\nStarModule\n\nStarModule -->\n\nRepoModule->StarModule\n\n\n\n\n\nStargazeModule\n\nStargazeModule\n\nStargazeModule -->\n\nRepoModule->StargazeModule\n\n\n\n\n\nSubmitModule\n\nSubmitModule\n\nSubmitModule -->\n\nRepoModule->SubmitModule\n\n\n\nUserModule -->\n\nRepoModule->UserModule\n\n\n\n\n\nVoteModule\n\nVoteModule\n\nVoteModule -->\n\nRepoModule->VoteModule\n\n\n\nAppModule -->\n\nRepoModule->AppModule\n\n\n\n\n\nRepoService \n\nRepoService \n\nRepoService  -->\n\nRepoModule->RepoService \n\n\n\nAppModule -->\n\nStarModule->AppModule\n\n\n\n\n\nStarService \n\nStarService \n\nStarService  -->\n\nStarModule->StarService \n\n\n\nAppModule -->\n\nStargazeModule->AppModule\n\n\n\n\n\nStargazeService \n\nStargazeService \n\nStargazeService  -->\n\nStargazeModule->StargazeService \n\n\n\n\n\nStripeSubscriptionModule\n\nStripeSubscriptionModule\n\nStripeWebHookModule -->\n\nStripeSubscriptionModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nStripeSubscriptionModule->AppModule\n\n\n\n\n\nStripeSubscriptionService \n\nStripeSubscriptionService \n\nStripeSubscriptionService  -->\n\nStripeSubscriptionModule->StripeSubscriptionService \n\n\n\nAppModule -->\n\nStripeWebHookModule->AppModule\n\n\n\n\n\nStripeWebhookController \n\nStripeWebhookController \n\nStripeWebhookController  -->\n\nStripeWebHookModule->StripeWebhookController \n\n\n\nAppModule -->\n\nSubmitModule->AppModule\n\n\n\n\n\nSubmitService \n\nSubmitService \n\nSubmitService  -->\n\nSubmitModule->SubmitService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nEndorsementModule -->\n\nUserModule->EndorsementModule\n\n\n\nHighlightModule -->\n\nUserModule->HighlightModule\n\n\n\nInsightsModule -->\n\nUserModule->InsightsModule\n\n\n\nStripeWebHookModule -->\n\nUserModule->StripeWebHookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\nEndorsementService  -->\n\nUserModule->EndorsementService \n\n\n\nRepoService  -->\n\nUserModule->RepoService \n\n\n\n\n\nUserFollowService \n\nUserFollowService \n\nUserFollowService  -->\n\nUserModule->UserFollowService \n\n\n\n\n\nUserHighlightsService \n\nUserHighlightsService \n\nUserHighlightsService  -->\n\nUserModule->UserHighlightsService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAuthModule -->\n\nUserReposModule->AuthModule\n\n\n\nAppModule -->\n\nUserReposModule->AppModule\n\n\n\n\n\nUserReposService \n\nUserReposService \n\nUserReposService  -->\n\nUserReposModule->UserReposService \n\n\n\nAppModule -->\n\nVoteModule->AppModule\n\n\n\n\n\nVoteService \n\nVoteService \n\nVoteService  -->\n\nVoteModule->VoteService \n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAuthModule -->\n\nStripeModule->AuthModule\n\n\n\nStripeWebHookModule -->\n\nStripeModule->StripeWebHookModule\n\n\n\n\n\nStripeService \n\nStripeService \n\nStripeService  -->\n\nStripeModule->StripeService \n\n\n\n\n\nSupabaseGuard\n\nSupabaseGuard\n\nAuthModule -->\n\nSupabaseGuard->AuthModule\n\n\n\n\n\nSupabaseStrategy\n\nSupabaseStrategy\n\nAuthModule -->\n\nSupabaseStrategy->AuthModule\n\n\n\n\n\nContributionService\n\nContributionService\n\nContributionModule -->\n\nContributionService->ContributionModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nCustomerModule -->\n\nCustomerService->CustomerModule\n\n\n\n\n\nEmojiService\n\nEmojiService\n\nEmojiModule -->\n\nEmojiService->EmojiModule\n\n\n\n\n\nEndorsementService\n\nEndorsementService\n\nEndorsementModule -->\n\nEndorsementService->EndorsementModule\n\n\n\nUserModule -->\n\nEndorsementService->UserModule\n\n\n\n\n\nInsightMemberService\n\nInsightMemberService\n\nInsightsModule -->\n\nInsightMemberService->InsightsModule\n\n\n\n\n\nInsightRepoService\n\nInsightRepoService\n\nInsightsModule -->\n\nInsightRepoService->InsightsModule\n\n\n\n\n\nInsightsService\n\nInsightsService\n\nInsightsModule -->\n\nInsightsService->InsightsModule\n\n\n\n\n\nCustomLogger \n\nCustomLogger \n\n\n\nLogModule\n\nLogModule\n\nCustomLogger  -->\n\nLogModule->CustomLogger \n\n\n\n\n\nCustomLogger\n\nCustomLogger\n\nLogModule -->\n\nCustomLogger->LogModule\n\n\n\n\n\nLogService\n\nLogService\n\nLogModule -->\n\nLogService->LogModule\n\n\n\n\n\nOpenAiService\n\nOpenAiService\n\nOpenAiModule -->\n\nOpenAiService->OpenAiModule\n\n\n\n\n\nRepoFilterModule\n\nRepoFilterModule\n\nPullRequestModule -->\n\nRepoFilterModule->PullRequestModule\n\n\n\nRepoModule -->\n\nRepoFilterModule->RepoModule\n\n\n\n\n\nRepoFilterService \n\nRepoFilterService \n\nRepoFilterService  -->\n\nRepoFilterModule->RepoFilterService \n\n\n\n\n\nCodeExplanationService\n\nCodeExplanationService\n\nPullRequestModule -->\n\nCodeExplanationService->PullRequestModule\n\n\n\n\n\nCodeRefactorSuggestionService\n\nCodeRefactorSuggestionService\n\nPullRequestModule -->\n\nCodeRefactorSuggestionService->PullRequestModule\n\n\n\n\n\nCodeTestSuggestionService\n\nCodeTestSuggestionService\n\nPullRequestModule -->\n\nCodeTestSuggestionService->PullRequestModule\n\n\n\n\n\nPullRequestDescriptionService\n\nPullRequestDescriptionService\n\nPullRequestModule -->\n\nPullRequestDescriptionService->PullRequestModule\n\n\n\n\n\nPullRequestInsightsService\n\nPullRequestInsightsService\n\nPullRequestModule -->\n\nPullRequestInsightsService->PullRequestModule\n\n\n\n\n\nPullRequestService\n\nPullRequestService\n\nPullRequestModule -->\n\nPullRequestService->PullRequestModule\n\n\n\n\n\nRepoFilterService\n\nRepoFilterService\n\nUserModule -->\n\nRepoFilterService->UserModule\n\n\n\nRepoFilterModule -->\n\nRepoFilterService->RepoFilterModule\n\n\n\n\n\nRepoService\n\nRepoService\n\nRepoModule -->\n\nRepoService->RepoModule\n\n\n\nUserModule -->\n\nRepoService->UserModule\n\n\n\n\n\nStargazeService\n\nStargazeService\n\nStargazeModule -->\n\nStargazeService->StargazeModule\n\n\n\n\n\nStarService\n\nStarService\n\nStarModule -->\n\nStarService->StarModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nStripeSubscriptionService\n\nStripeSubscriptionService\n\nStripeSubscriptionModule -->\n\nStripeSubscriptionService->StripeSubscriptionModule\n\n\n\n\n\nSubmitService\n\nSubmitService\n\nSubmitModule -->\n\nSubmitService->SubmitModule\n\n\n\n\n\nUserCollaborationService\n\nUserCollaborationService\n\nUserModule -->\n\nUserCollaborationService->UserModule\n\n\n\n\n\nUserFollowService\n\nUserFollowService\n\nUserModule -->\n\nUserFollowService->UserModule\n\n\n\n\n\nUserHighlightsService\n\nUserHighlightsService\n\nUserModule -->\n\nUserHighlightsService->UserModule\n\n\n\n\n\nUserNotificationService\n\nUserNotificationService\n\nUserModule -->\n\nUserNotificationService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nUserReposService\n\nUserReposService\n\nUserReposModule -->\n\nUserReposService->UserReposModule\n\n\n\n\n\nVoteService\n\nVoteService\n\nVoteModule -->\n\nVoteService->VoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        25 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    29 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    24 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    34 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    42 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.42.0-beta.1\n        \n            Description : API dot Open Sauced is NestJS and SupaBase powered OAS3 backend designed to remove client complexity and provide a structured graph of all @open-sauced integrations\n        \n            Keywords : \n        \n            Homepage : https://github.com/open-sauced/api.opensauced.pizza#readme\n        \n            Bugs : https://github.com/open-sauced/api.opensauced.pizza/issues\n        \n            License : MIT\n        \n            Repository : git+https://github.com/open-sauced/api.opensauced.pizza.git\n        \n            Author : TED Vortex \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SupabaseAuthRequest   (src/.../supabase.user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/supabase.user.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    SupabaseAuthRequest\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiConfig   (src/.../api.config.ts)\n                        \n                        \n                            ApiPaginatedResponse   (src/.../api-paginated-response.decorator.ts)\n                        \n                        \n                            cliDuration   (src/.../cli-duration.ts)\n                        \n                        \n                            DbApiConfig   (src/.../db-api.config.ts)\n                        \n                        \n                            DbLoggingConfig   (src/.../db-logging.config.ts)\n                        \n                        \n                            EndpointConfig   (src/.../endpoint.config.ts)\n                        \n                        \n                            getDomain   (src/.../endpoint.config.ts)\n                        \n                        \n                            OpenAIConfig   (src/.../openai.config.ts)\n                        \n                        \n                            relevantEvents   (src/.../stripe-webhook.controller.ts)\n                        \n                        \n                            StripeConfig   (src/.../stripe.config.ts)\n                        \n                        \n                            toDateTime   (src/.../utils.ts)\n                        \n                        \n                            User   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            UserId   (src/.../supabase.user.decorator.ts)\n                        \n                        \n                            userNotificationTypes   (src/.../user-notification.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"api\", () => ({\n  codename: String(process.env.API_CODENAME ?? \"api-local\"),\n  logging: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n  host: String(process.env.API_HOST ?? \"0.0.0.0\"),\n  port: String(process.env.API_PORT ?? \"3001\"),\n  domain: String(process.env.API_DOMAIN ?? \"api.opensauced.pizza\"),\n  development: !process.env.CI,\n  memory_heap: Number(parseInt(process.env.MEMORY_HEAP ?? \"200\", 10) * 1024 * 1024),\n  memory_rss: Number(parseInt(process.env.MEMORY_RSS ?? \"3000\", 10) * 1024 * 1024),\n  disk_percentage: Number(parseFloat(process.env.DISK_PERCENGATE ?? \"0.7\")),\n  disk_size: Number(parseInt(process.env.DISK_SIZE ?? \"100\", 10) * 1024 * 1024 * 1024),\n  endorsementServiceToken: String(process.env.ENDORSEMENT_SERVICE_TOKEN ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api-paginated-response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiPaginatedResponse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (model: TModel) =>\n  applyDecorators(\n    ApiExtraModels(PageDto, model),\n    ApiOkResponse({\n      description: \"Successfully received model list\",\n      schema: {\n        allOf: [\n          { $ref: getSchemaPath(PageDto) },\n          {\n            properties: {\n              data: {\n                type: \"array\",\n                items: { $ref: getSchemaPath(model) },\n              },\n            },\n          },\n        ],\n      },\n    })\n  )\n                    \n                \n\n\n        \n    \n\n    src/common/util/cli-duration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cliDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (startTime: number, text: string) =>\n  `${text} ${clc.yellow(`+${String(Date.now() - startTime)}ms`)}`\n                    \n                \n\n\n        \n    \n\n    src/config/db-api.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbApiConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-api\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_API ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_API ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_API ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_API ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_API ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_API ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_API ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_API ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/db-logging.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DbLoggingConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"db-logging\", () => ({\n  connection: String(process.env.TYPEORM_CONNECTION_LOGGING ?? \"postgres\"),\n  host: String(process.env.TYPEORM_HOST_LOGGING ?? \"localhost\"),\n  port: String(process.env.TYPEORM_PORT_LOGGING ?? \"25060\"),\n  username: String(process.env.TYPEORM_USERNAME_LOGGING ?? \"doadmin\"),\n  password: String(process.env.TYPEORM_PASSWORD_LOGGING ?? \"UCN2zrH2WGxKck7tT2JG4MY6wbHkeX9s\"),\n  database: String(process.env.TYPEORM_DATABASE_LOGGING ?? \"defaultdb\"),\n  certificate: String(process.env.TYPEORM_SSL_CERT_LOGGING ?? \"-----------------------------\"),\n  maxQueryExecutionTime: Number(parseInt(process.env.TYPEORM_MAX_QUERY_EXECUTION_TIME_LOGGING ?? \"10000\", 10)),\n}))\n                    \n                \n\n\n        \n    \n\n    src/config/endpoint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EndpointConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"endpoint\", () => ({\n  landing: getDomain(),\n  app: getDomain(\"app\"),\n  hot: getDomain(\"hot\"),\n  docs: getDomain(\"docs\"),\n  explore: getDomain(\"explore\"),\n  admin: getDomain(\"admin\"),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDomain\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (subdomain?: string) =>\n  new URL(`https://${subdomain ? `${subdomain}.` : \"\"}${process.env.DOMAIN ?? \"opensauced.pizza\"}`).toString()\n                    \n                \n\n\n        \n    \n\n    src/config/openai.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OpenAIConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"openai\", () => ({\n  APIKey: String(process.env.OPENAI_API_KEY ?? \"apikey\"),\n  modelName: String(process.env.OPENAI_MODEL_NAME ?? \"gpt-3.5-turbo\"),\n  completionsURL: String(process.env.OPENAI_COMPLETIONS_API_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/stripe-webhook.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        relevantEvents\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set([\n  \"checkout.session.completed\",\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n  \"customer.subscription.deleted\",\n])\n                    \n                \n\n\n        \n    \n\n    src/config/stripe.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StripeConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : registerAs(\"stripe\", () => ({\n  secretKey: String(process.env.STRIPE_SECRET_KEY ?? \"\"),\n  webhookSecret: String(process.env.STRIPE_WEBHOOK_SECRET_LIVE ?? process.env.STRIPE_WEBHOOK_SECRET ?? \"\"),\n  subscriptionPriceID: String(process.env.STRIPE_SUBSCRIPTION_PRICE_ID ?? \"\"),\n  subscriptionSessionCheckoutSuccessURL: String(process.env.STRIPE_CHECKOUT_SESSION_SUCCESS_URL ?? \"\"),\n  subscriptionSessionCancelURL: String(process.env.STRIPE_CHECKOUT_SESSION_CANCEL_URL ?? \"\"),\n}))\n                    \n                \n\n\n        \n    \n\n    src/stripe-webhook/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (secs: number) => {\n  // unix epoch start\n  const t = new Date(\"1970-01-01T00:30:00Z\");\n\n  t.setSeconds(secs);\n  return t;\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/supabase.user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return request.user;\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n\n  return parseInt(request.user?.user_metadata.sub as string, 10);\n})\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user-notification.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userNotificationTypes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : [\"highlight_reaction\", \"follow\"] as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
